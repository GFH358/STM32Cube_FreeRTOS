
STM32F103ZET6_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad68  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fa0  0800af58  0800af58  0000bf58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bef8  0800bef8  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bef8  0800bef8  0000cef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf00  0800bf00  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf00  0800bf00  0000cf00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf04  0800bf04  0000cf04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bf08  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f68  200001d8  0800c0e0  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002140  0800c0e0  0000e140  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016934  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003611  00000000  00000000  00023b35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a0  00000000  00000000  00027148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000100a  00000000  00000000  000285e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045a8  00000000  00000000  000295f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018525  00000000  00000000  0002db9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a4490  00000000  00000000  000460bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea54f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ae4  00000000  00000000  000ea594  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  000f1078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001d8 	.word	0x200001d8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800af40 	.word	0x0800af40

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001dc 	.word	0x200001dc
 800022c:	0800af40 	.word	0x0800af40

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff23 	bl	8000a9c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <__aeabi_d2ulz+0x34>)
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fc99 	bl	80005b8 <__aeabi_dmul>
 8000c86:	f7ff ff6f 	bl	8000b68 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc1a 	bl	80004c4 <__aeabi_ui2d>
 8000c90:	2200      	movs	r2, #0
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c94:	f7ff fc90 	bl	80005b8 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fad2 	bl	8000248 <__aeabi_dsub>
 8000ca4:	f7ff ff60 	bl	8000b68 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <user_test_led>:
int cnt1 = 0;
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void user_test_led(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	//HAL_Delay(1000);
//	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)==GPIO_PIN_RESET){
		if(cnt1 == 1){
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <user_test_led+0x38>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <user_test_led+0x1e>
			cnt1 = 0;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <user_test_led+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <user_test_led+0x3c>)
 8000ccc:	f001 facc 	bl	8002268 <HAL_GPIO_WritePin>
			cnt1++;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
		}
//	}
}
 8000cd0:	e009      	b.n	8000ce6 <user_test_led+0x32>
			cnt1++;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <user_test_led+0x38>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <user_test_led+0x38>)
 8000cda:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <user_test_led+0x3c>)
 8000ce2:	f001 fac1 	bl	8002268 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	2000024c 	.word	0x2000024c
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <HAL_UARTEx_RxEventCallback>:
//void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
//	HAL_UART_Transmit_IT(&huart4, user_cam, 2);
//	HAL_UART_Receive_IT(&huart4, user_cam, 2);
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	if(huart == &huart4){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d11e      	bne.n	8000d46 <HAL_UARTEx_RxEventCallback+0x52>
		HAL_UART_Transmit_IT(&huart4, user_cam, Size);
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4911      	ldr	r1, [pc, #68]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d10:	f002 f9c2 	bl	8003098 <HAL_UART_Transmit_IT>

		uint8_t flag = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	72fb      	strb	r3, [r7, #11]
		BaseType_t err = xQueueSendToBackFromISR(Uart_QueueHandle,&flag,pdMS_TO_TICKS(50));
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x64>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f107 010b 	add.w	r1, r7, #11
 8000d20:	2300      	movs	r3, #0
 8000d22:	2232      	movs	r2, #50	@ 0x32
 8000d24:	f003 fc4a 	bl	80045bc <xQueueGenericSendFromISR>
 8000d28:	60f8      	str	r0, [r7, #12]
		if(err ==errQUEUE_FULL){
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d105      	bne.n	8000d3c <HAL_UARTEx_RxEventCallback+0x48>
			xQueueReset(Uart_QueueHandle);
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 f9f6 	bl	8004128 <xQueueGenericReset>
		}

		HAL_UARTEx_ReceiveToIdle_IT(&huart4, user_cam, 10);
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	4905      	ldr	r1, [pc, #20]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d42:	f002 f9de 	bl	8003102 <HAL_UARTEx_ReceiveToIdle_IT>

	}

}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001f4 	.word	0x200001f4
 8000d54:	20000250 	.word	0x20000250
 8000d58:	20000248 	.word	0x20000248

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 fe76 	bl	8001a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f840 	bl	8000de8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f000 f8ae 	bl	8000ec8 <MX_GPIO_Init>
  MX_UART4_Init();
 8000d6c:	f000 f882 	bl	8000e74 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d70:	f002 ff34 	bl	8003bdc <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Uart_Queue */
  Uart_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &Uart_Queue_attributes);
 8000d74:	4a11      	ldr	r2, [pc, #68]	@ (8000dbc <main+0x60>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	200a      	movs	r0, #10
 8000d7a:	f003 f86d 	bl	8003e58 <osMessageQueueNew>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc0 <main+0x64>)
 8000d82:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d84:	4a0f      	ldr	r2, [pc, #60]	@ (8000dc4 <main+0x68>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	480f      	ldr	r0, [pc, #60]	@ (8000dc8 <main+0x6c>)
 8000d8a:	f002 ff8d 	bl	8003ca8 <osThreadNew>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a0e      	ldr	r2, [pc, #56]	@ (8000dcc <main+0x70>)
 8000d92:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(LedTaskDeal, NULL, &LedTask_attributes);
 8000d94:	4a0e      	ldr	r2, [pc, #56]	@ (8000dd0 <main+0x74>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	480e      	ldr	r0, [pc, #56]	@ (8000dd4 <main+0x78>)
 8000d9a:	f002 ff85 	bl	8003ca8 <osThreadNew>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a0d      	ldr	r2, [pc, #52]	@ (8000dd8 <main+0x7c>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(UartTaskDeal, NULL, &UartTask_attributes);
 8000da4:	4a0d      	ldr	r2, [pc, #52]	@ (8000ddc <main+0x80>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	480d      	ldr	r0, [pc, #52]	@ (8000de0 <main+0x84>)
 8000daa:	f002 ff7d 	bl	8003ca8 <osThreadNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a0c      	ldr	r2, [pc, #48]	@ (8000de4 <main+0x88>)
 8000db2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000db4:	f002 ff44 	bl	8003c40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000db8:	bf00      	nop
 8000dba:	e7fd      	b.n	8000db8 <main+0x5c>
 8000dbc:	0800b024 	.word	0x0800b024
 8000dc0:	20000248 	.word	0x20000248
 8000dc4:	0800afb8 	.word	0x0800afb8
 8000dc8:	08000f85 	.word	0x08000f85
 8000dcc:	2000023c 	.word	0x2000023c
 8000dd0:	0800afdc 	.word	0x0800afdc
 8000dd4:	08001001 	.word	0x08001001
 8000dd8:	20000240 	.word	0x20000240
 8000ddc:	0800b000 	.word	0x0800b000
 8000de0:	08001029 	.word	0x08001029
 8000de4:	20000244 	.word	0x20000244

08000de8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b090      	sub	sp, #64	@ 0x40
 8000dec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dee:	f107 0318 	add.w	r3, r7, #24
 8000df2:	2228      	movs	r2, #40	@ 0x28
 8000df4:	2100      	movs	r1, #0
 8000df6:	4618      	mov	r0, r3
 8000df8:	f006 fcd9 	bl	80077ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfc:	1d3b      	adds	r3, r7, #4
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
 8000e08:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e0e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e12:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e14:	2300      	movs	r3, #0
 8000e16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1c:	2302      	movs	r3, #2
 8000e1e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e24:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e26:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2c:	f107 0318 	add.w	r3, r7, #24
 8000e30:	4618      	mov	r0, r3
 8000e32:	f001 fa31 	bl	8002298 <HAL_RCC_OscConfig>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d001      	beq.n	8000e40 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e3c:	f000 f928 	bl	8001090 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e40:	230f      	movs	r3, #15
 8000e42:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e44:	2302      	movs	r3, #2
 8000e46:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e4c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e50:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e52:	2300      	movs	r3, #0
 8000e54:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e56:	1d3b      	adds	r3, r7, #4
 8000e58:	2102      	movs	r1, #2
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f001 fc9e 	bl	800279c <HAL_RCC_ClockConfig>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e66:	f000 f913 	bl	8001090 <Error_Handler>
  }
}
 8000e6a:	bf00      	nop
 8000e6c:	3740      	adds	r7, #64	@ 0x40
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
	...

08000e74 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e78:	4b11      	ldr	r3, [pc, #68]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000e7a:	4a12      	ldr	r2, [pc, #72]	@ (8000ec4 <MX_UART4_Init+0x50>)
 8000e7c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e7e:	4b10      	ldr	r3, [pc, #64]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000e80:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e84:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e86:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e92:	4b0b      	ldr	r3, [pc, #44]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e98:	4b09      	ldr	r3, [pc, #36]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000e9a:	220c      	movs	r2, #12
 8000e9c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9e:	4b08      	ldr	r3, [pc, #32]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea4:	4b06      	ldr	r3, [pc, #24]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eaa:	4805      	ldr	r0, [pc, #20]	@ (8000ec0 <MX_UART4_Init+0x4c>)
 8000eac:	f002 f8a4 	bl	8002ff8 <HAL_UART_Init>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d001      	beq.n	8000eba <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000eb6:	f000 f8eb 	bl	8001090 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000eba:	bf00      	nop
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	200001f4 	.word	0x200001f4
 8000ec4:	40004c00 	.word	0x40004c00

08000ec8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b088      	sub	sp, #32
 8000ecc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ece:	f107 0310 	add.w	r3, r7, #16
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]
 8000ed6:	605a      	str	r2, [r3, #4]
 8000ed8:	609a      	str	r2, [r3, #8]
 8000eda:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000edc:	4b26      	ldr	r3, [pc, #152]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000ede:	699b      	ldr	r3, [r3, #24]
 8000ee0:	4a25      	ldr	r2, [pc, #148]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000ee2:	f043 0310 	orr.w	r3, r3, #16
 8000ee6:	6193      	str	r3, [r2, #24]
 8000ee8:	4b23      	ldr	r3, [pc, #140]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000eea:	699b      	ldr	r3, [r3, #24]
 8000eec:	f003 0310 	and.w	r3, r3, #16
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef4:	4b20      	ldr	r3, [pc, #128]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	4a1f      	ldr	r2, [pc, #124]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000efa:	f043 0304 	orr.w	r3, r3, #4
 8000efe:	6193      	str	r3, [r2, #24]
 8000f00:	4b1d      	ldr	r3, [pc, #116]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000f02:	699b      	ldr	r3, [r3, #24]
 8000f04:	f003 0304 	and.w	r3, r3, #4
 8000f08:	60bb      	str	r3, [r7, #8]
 8000f0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000f0e:	699b      	ldr	r3, [r3, #24]
 8000f10:	4a19      	ldr	r2, [pc, #100]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000f12:	f043 0308 	orr.w	r3, r3, #8
 8000f16:	6193      	str	r3, [r2, #24]
 8000f18:	4b17      	ldr	r3, [pc, #92]	@ (8000f78 <MX_GPIO_Init+0xb0>)
 8000f1a:	699b      	ldr	r3, [r3, #24]
 8000f1c:	f003 0308 	and.w	r3, r3, #8
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_RS_Pin|OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8000f24:	2200      	movs	r2, #0
 8000f26:	210f      	movs	r1, #15
 8000f28:	4814      	ldr	r0, [pc, #80]	@ (8000f7c <MX_GPIO_Init+0xb4>)
 8000f2a:	f001 f99d 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2130      	movs	r1, #48	@ 0x30
 8000f32:	4813      	ldr	r0, [pc, #76]	@ (8000f80 <MX_GPIO_Init+0xb8>)
 8000f34:	f001 f998 	bl	8002268 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_SCLK_Pin OLED_SDIN_Pin OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RST_Pin;
 8000f38:	230f      	movs	r3, #15
 8000f3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f44:	2302      	movs	r3, #2
 8000f46:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	480b      	ldr	r0, [pc, #44]	@ (8000f7c <MX_GPIO_Init+0xb4>)
 8000f50:	f000 fff6 	bl	8001f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f54:	2330      	movs	r3, #48	@ 0x30
 8000f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_GPIO_Init+0xb8>)
 8000f6c:	f000 ffe8 	bl	8001f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f70:	bf00      	nop
 8000f72:	3720      	adds	r7, #32
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40021000 	.word	0x40021000
 8000f7c:	40011000 	.word	0x40011000
 8000f80:	40010c00 	.word	0x40010c00

08000f84 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b086      	sub	sp, #24
 8000f88:	af02      	add	r7, sp, #8
 8000f8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
	int cnt = 0;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
	OLED_Init();
 8000f90:	f000 fabe 	bl	8001510 <OLED_Init>
	OLED_Clear();
 8000f94:	f000 f910 	bl	80011b8 <OLED_Clear>
	OLED_Display_On();
 8000f98:	f000 f8fe 	bl	8001198 <OLED_Display_On>
	OLED_ShowString(0,5,"TEST-ok");//显示字符
 8000f9c:	4a15      	ldr	r2, [pc, #84]	@ (8000ff4 <StartDefaultTask+0x70>)
 8000f9e:	2105      	movs	r1, #5
 8000fa0:	2000      	movs	r0, #0
 8000fa2:	f000 fa83 	bl	80014ac <OLED_ShowString>
  for(;;)
  {
//    osDelay(1000);
//    user_test_led();
	uint8_t flag;
	if(xQueueReceive(Uart_QueueHandle,&flag,pdMS_TO_TICKS(50)) ==pdTRUE){
 8000fa6:	4b14      	ldr	r3, [pc, #80]	@ (8000ff8 <StartDefaultTask+0x74>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f107 010b 	add.w	r1, r7, #11
 8000fae:	2232      	movs	r2, #50	@ 0x32
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fb9f 	bl	80046f4 <xQueueReceive>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <StartDefaultTask+0x44>
		OLED_ShowString(0,5,user_cam);//显示字符
 8000fbc:	4a0f      	ldr	r2, [pc, #60]	@ (8000ffc <StartDefaultTask+0x78>)
 8000fbe:	2105      	movs	r1, #5
 8000fc0:	2000      	movs	r0, #0
 8000fc2:	f000 fa73 	bl	80014ac <OLED_ShowString>
 8000fc6:	e7ee      	b.n	8000fa6 <StartDefaultTask+0x22>
		//OLED_ShowString(0,5,"TEST-AA");//显示字符
		continue;
	}
    cnt = cnt + 2;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	60fb      	str	r3, [r7, #12]
    if(cnt > 99){
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	2b63      	cmp	r3, #99	@ 0x63
 8000fd2:	dd01      	ble.n	8000fd8 <StartDefaultTask+0x54>
    	cnt=0;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	60fb      	str	r3, [r7, #12]
    }
    //OLED_ShowString(0,5,"TEST-ok");//显示字符
    OLED_ShowNumber(30,30,cnt,2,16);//显示数字
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	2310      	movs	r3, #16
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	2302      	movs	r3, #2
 8000fe0:	211e      	movs	r1, #30
 8000fe2:	201e      	movs	r0, #30
 8000fe4:	f000 f9f4 	bl	80013d0 <OLED_ShowNumber>

    osDelay(100);
 8000fe8:	2064      	movs	r0, #100	@ 0x64
 8000fea:	f002 ff07 	bl	8003dfc <osDelay>
//    	  	  HAL_Delay(100);
    OLED_Refresh_Gram();
 8000fee:	f000 f855 	bl	800109c <OLED_Refresh_Gram>
  {
 8000ff2:	e7d8      	b.n	8000fa6 <StartDefaultTask+0x22>
 8000ff4:	0800af84 	.word	0x0800af84
 8000ff8:	20000248 	.word	0x20000248
 8000ffc:	20000250 	.word	0x20000250

08001000 <LedTaskDeal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTaskDeal */
void LedTaskDeal(void *argument)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b084      	sub	sp, #16
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTaskDeal */
  /* Infinite loop */
	TickType_t pxPreviousWakeTime = xTaskGetTickCount();
 8001008:	f004 f928 	bl	800525c <xTaskGetTickCount>
 800100c:	4603      	mov	r3, r0
 800100e:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
//        osDelay(1000);
       user_test_led();
 8001010:	f7ff fe50 	bl	8000cb4 <user_test_led>
        vTaskDelayUntil(&pxPreviousWakeTime,pdMS_TO_TICKS(1000));
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800101c:	4618      	mov	r0, r3
 800101e:	f003 ff53 	bl	8004ec8 <vTaskDelayUntil>
  {
 8001022:	bf00      	nop
 8001024:	e7f4      	b.n	8001010 <LedTaskDeal+0x10>
	...

08001028 <UartTaskDeal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UartTaskDeal */
void UartTaskDeal(void *argument)
{
 8001028:	b5b0      	push	{r4, r5, r7, lr}
 800102a:	b088      	sub	sp, #32
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTaskDeal */
  /* Infinite loop */
  char user_data[] = "Uart task init ok";
 8001030:	4b0b      	ldr	r3, [pc, #44]	@ (8001060 <UartTaskDeal+0x38>)
 8001032:	f107 040c 	add.w	r4, r7, #12
 8001036:	461d      	mov	r5, r3
 8001038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800103a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800103c:	682b      	ldr	r3, [r5, #0]
 800103e:	8023      	strh	r3, [r4, #0]
  //HAL_UART_Receive_IT(&huart4, user_cam, 2);
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, user_cam, 10);//�?启窗口空闲接�?
 8001040:	220a      	movs	r2, #10
 8001042:	4908      	ldr	r1, [pc, #32]	@ (8001064 <UartTaskDeal+0x3c>)
 8001044:	4808      	ldr	r0, [pc, #32]	@ (8001068 <UartTaskDeal+0x40>)
 8001046:	f002 f85c 	bl	8003102 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UART_Transmit_IT(&huart4, user_data, 18);
 800104a:	f107 030c 	add.w	r3, r7, #12
 800104e:	2212      	movs	r2, #18
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	@ (8001068 <UartTaskDeal+0x40>)
 8001054:	f002 f820 	bl	8003098 <HAL_UART_Transmit_IT>

  for(;;)
  {

    osDelay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f002 fecf 	bl	8003dfc <osDelay>
 800105e:	e7fb      	b.n	8001058 <UartTaskDeal+0x30>
 8001060:	0800af8c 	.word	0x0800af8c
 8001064:	20000250 	.word	0x20000250
 8001068:	200001f4 	.word	0x200001f4

0800106c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b082      	sub	sp, #8
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a04      	ldr	r2, [pc, #16]	@ (800108c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d101      	bne.n	8001082 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800107e:	f000 fcfd 	bl	8001a7c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001082:	bf00      	nop
 8001084:	3708      	adds	r7, #8
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40001000 	.word	0x40001000

08001090 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001090:	b480      	push	{r7}
 8001092:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001094:	b672      	cpsid	i
}
 8001096:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001098:	bf00      	nop
 800109a:	e7fd      	b.n	8001098 <Error_Handler+0x8>

0800109c <OLED_Refresh_Gram>:
#include "oledfont.h"

u8 OLED_GRAM[128][8];

void OLED_Refresh_Gram(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 80010a2:	2300      	movs	r3, #0
 80010a4:	71fb      	strb	r3, [r7, #7]
 80010a6:	e026      	b.n	80010f6 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80010a8:	79fb      	ldrb	r3, [r7, #7]
 80010aa:	3b50      	subs	r3, #80	@ 0x50
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2100      	movs	r1, #0
 80010b0:	4618      	mov	r0, r3
 80010b2:	f000 f82b 	bl	800110c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 80010b6:	2100      	movs	r1, #0
 80010b8:	2000      	movs	r0, #0
 80010ba:	f000 f827 	bl	800110c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 80010be:	2100      	movs	r1, #0
 80010c0:	2010      	movs	r0, #16
 80010c2:	f000 f823 	bl	800110c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80010c6:	2300      	movs	r3, #0
 80010c8:	71bb      	strb	r3, [r7, #6]
 80010ca:	e00d      	b.n	80010e8 <OLED_Refresh_Gram+0x4c>
 80010cc:	79ba      	ldrb	r2, [r7, #6]
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	490d      	ldr	r1, [pc, #52]	@ (8001108 <OLED_Refresh_Gram+0x6c>)
 80010d2:	00d2      	lsls	r2, r2, #3
 80010d4:	440a      	add	r2, r1
 80010d6:	4413      	add	r3, r2
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	2101      	movs	r1, #1
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f815 	bl	800110c <OLED_WR_Byte>
 80010e2:	79bb      	ldrb	r3, [r7, #6]
 80010e4:	3301      	adds	r3, #1
 80010e6:	71bb      	strb	r3, [r7, #6]
 80010e8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	daed      	bge.n	80010cc <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 80010f0:	79fb      	ldrb	r3, [r7, #7]
 80010f2:	3301      	adds	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	79fb      	ldrb	r3, [r7, #7]
 80010f8:	2b07      	cmp	r3, #7
 80010fa:	d9d5      	bls.n	80010a8 <OLED_Refresh_Gram+0xc>
	}
}
 80010fc:	bf00      	nop
 80010fe:	bf00      	nop
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
 8001106:	bf00      	nop
 8001108:	2000025c 	.word	0x2000025c

0800110c <OLED_WR_Byte>:

//向OLED写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(u8 dat,u8 cmd)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b084      	sub	sp, #16
 8001110:	af00      	add	r7, sp, #0
 8001112:	4603      	mov	r3, r0
 8001114:	460a      	mov	r2, r1
 8001116:	71fb      	strb	r3, [r7, #7]
 8001118:	4613      	mov	r3, r2
 800111a:	71bb      	strb	r3, [r7, #6]
	u8 i;
	if(cmd)
 800111c:	79bb      	ldrb	r3, [r7, #6]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 8001122:	2201      	movs	r2, #1
 8001124:	2101      	movs	r1, #1
 8001126:	481b      	ldr	r0, [pc, #108]	@ (8001194 <OLED_WR_Byte+0x88>)
 8001128:	f001 f89e 	bl	8002268 <HAL_GPIO_WritePin>
 800112c:	e004      	b.n	8001138 <OLED_WR_Byte+0x2c>
	else
	  OLED_RS_Clr();
 800112e:	2200      	movs	r2, #0
 8001130:	2101      	movs	r1, #1
 8001132:	4818      	ldr	r0, [pc, #96]	@ (8001194 <OLED_WR_Byte+0x88>)
 8001134:	f001 f898 	bl	8002268 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001138:	2300      	movs	r3, #0
 800113a:	73fb      	strb	r3, [r7, #15]
 800113c:	e01e      	b.n	800117c <OLED_WR_Byte+0x70>
	{
		OLED_SCLK_Clr();
 800113e:	2200      	movs	r2, #0
 8001140:	2102      	movs	r1, #2
 8001142:	4814      	ldr	r0, [pc, #80]	@ (8001194 <OLED_WR_Byte+0x88>)
 8001144:	f001 f890 	bl	8002268 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	da05      	bge.n	800115c <OLED_WR_Byte+0x50>
		   OLED_SDIN_Set();
 8001150:	2201      	movs	r2, #1
 8001152:	2104      	movs	r1, #4
 8001154:	480f      	ldr	r0, [pc, #60]	@ (8001194 <OLED_WR_Byte+0x88>)
 8001156:	f001 f887 	bl	8002268 <HAL_GPIO_WritePin>
 800115a:	e004      	b.n	8001166 <OLED_WR_Byte+0x5a>
		else
		   OLED_SDIN_Clr();
 800115c:	2200      	movs	r2, #0
 800115e:	2104      	movs	r1, #4
 8001160:	480c      	ldr	r0, [pc, #48]	@ (8001194 <OLED_WR_Byte+0x88>)
 8001162:	f001 f881 	bl	8002268 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001166:	2201      	movs	r2, #1
 8001168:	2102      	movs	r1, #2
 800116a:	480a      	ldr	r0, [pc, #40]	@ (8001194 <OLED_WR_Byte+0x88>)
 800116c:	f001 f87c 	bl	8002268 <HAL_GPIO_WritePin>
		dat<<=1;
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001176:	7bfb      	ldrb	r3, [r7, #15]
 8001178:	3301      	adds	r3, #1
 800117a:	73fb      	strb	r3, [r7, #15]
 800117c:	7bfb      	ldrb	r3, [r7, #15]
 800117e:	2b07      	cmp	r3, #7
 8001180:	d9dd      	bls.n	800113e <OLED_WR_Byte+0x32>
	}
	OLED_RS_Set();
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	4803      	ldr	r0, [pc, #12]	@ (8001194 <OLED_WR_Byte+0x88>)
 8001188:	f001 f86e 	bl	8002268 <HAL_GPIO_WritePin>
}
 800118c:	bf00      	nop
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	40011000 	.word	0x40011000

08001198 <OLED_Display_On>:


//开启OLED显示
void OLED_Display_On(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 800119c:	2100      	movs	r1, #0
 800119e:	208d      	movs	r0, #141	@ 0x8d
 80011a0:	f7ff ffb4 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 80011a4:	2100      	movs	r1, #0
 80011a6:	2014      	movs	r0, #20
 80011a8:	f7ff ffb0 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 80011ac:	2100      	movs	r1, #0
 80011ae:	20af      	movs	r0, #175	@ 0xaf
 80011b0:	f7ff ffac 	bl	800110c <OLED_WR_Byte>
}
 80011b4:	bf00      	nop
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;
 80011be:	2300      	movs	r3, #0
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	e014      	b.n	80011ee <OLED_Clear+0x36>
 80011c4:	2300      	movs	r3, #0
 80011c6:	71bb      	strb	r3, [r7, #6]
 80011c8:	e00a      	b.n	80011e0 <OLED_Clear+0x28>
 80011ca:	79ba      	ldrb	r2, [r7, #6]
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	490c      	ldr	r1, [pc, #48]	@ (8001200 <OLED_Clear+0x48>)
 80011d0:	00d2      	lsls	r2, r2, #3
 80011d2:	440a      	add	r2, r1
 80011d4:	4413      	add	r3, r2
 80011d6:	2200      	movs	r2, #0
 80011d8:	701a      	strb	r2, [r3, #0]
 80011da:	79bb      	ldrb	r3, [r7, #6]
 80011dc:	3301      	adds	r3, #1
 80011de:	71bb      	strb	r3, [r7, #6]
 80011e0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	daf0      	bge.n	80011ca <OLED_Clear+0x12>
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	3301      	adds	r3, #1
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	2b07      	cmp	r3, #7
 80011f2:	d9e7      	bls.n	80011c4 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//更新显示
 80011f4:	f7ff ff52 	bl	800109c <OLED_Refresh_Gram>
}
 80011f8:	bf00      	nop
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	2000025c 	.word	0x2000025c

08001204 <OLED_DrawPoint>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8001204:	b480      	push	{r7}
 8001206:	b085      	sub	sp, #20
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	71fb      	strb	r3, [r7, #7]
 800120e:	460b      	mov	r3, r1
 8001210:	71bb      	strb	r3, [r7, #6]
 8001212:	4613      	mov	r3, r2
 8001214:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 8001216:	2300      	movs	r3, #0
 8001218:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db41      	blt.n	80012a6 <OLED_DrawPoint+0xa2>
 8001222:	79bb      	ldrb	r3, [r7, #6]
 8001224:	2b3f      	cmp	r3, #63	@ 0x3f
 8001226:	d83e      	bhi.n	80012a6 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001228:	79bb      	ldrb	r3, [r7, #6]
 800122a:	08db      	lsrs	r3, r3, #3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001234:	79bb      	ldrb	r3, [r7, #6]
 8001236:	f003 0307 	and.w	r3, r3, #7
 800123a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800123c:	7b7b      	ldrb	r3, [r7, #13]
 800123e:	f1c3 0307 	rsb	r3, r3, #7
 8001242:	2201      	movs	r2, #1
 8001244:	fa02 f303 	lsl.w	r3, r2, r3
 8001248:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800124a:	797b      	ldrb	r3, [r7, #5]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d012      	beq.n	8001276 <OLED_DrawPoint+0x72>
 8001250:	79fa      	ldrb	r2, [r7, #7]
 8001252:	7bbb      	ldrb	r3, [r7, #14]
 8001254:	4916      	ldr	r1, [pc, #88]	@ (80012b0 <OLED_DrawPoint+0xac>)
 8001256:	00d2      	lsls	r2, r2, #3
 8001258:	440a      	add	r2, r1
 800125a:	4413      	add	r3, r2
 800125c:	7818      	ldrb	r0, [r3, #0]
 800125e:	79fa      	ldrb	r2, [r7, #7]
 8001260:	7bbb      	ldrb	r3, [r7, #14]
 8001262:	7bf9      	ldrb	r1, [r7, #15]
 8001264:	4301      	orrs	r1, r0
 8001266:	b2c8      	uxtb	r0, r1
 8001268:	4911      	ldr	r1, [pc, #68]	@ (80012b0 <OLED_DrawPoint+0xac>)
 800126a:	00d2      	lsls	r2, r2, #3
 800126c:	440a      	add	r2, r1
 800126e:	4413      	add	r3, r2
 8001270:	4602      	mov	r2, r0
 8001272:	701a      	strb	r2, [r3, #0]
 8001274:	e018      	b.n	80012a8 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 8001276:	79fa      	ldrb	r2, [r7, #7]
 8001278:	7bbb      	ldrb	r3, [r7, #14]
 800127a:	490d      	ldr	r1, [pc, #52]	@ (80012b0 <OLED_DrawPoint+0xac>)
 800127c:	00d2      	lsls	r2, r2, #3
 800127e:	440a      	add	r2, r1
 8001280:	4413      	add	r3, r2
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	b25a      	sxtb	r2, r3
 8001286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800128a:	43db      	mvns	r3, r3
 800128c:	b25b      	sxtb	r3, r3
 800128e:	4013      	ands	r3, r2
 8001290:	b259      	sxtb	r1, r3
 8001292:	79fa      	ldrb	r2, [r7, #7]
 8001294:	7bbb      	ldrb	r3, [r7, #14]
 8001296:	b2c8      	uxtb	r0, r1
 8001298:	4905      	ldr	r1, [pc, #20]	@ (80012b0 <OLED_DrawPoint+0xac>)
 800129a:	00d2      	lsls	r2, r2, #3
 800129c:	440a      	add	r2, r1
 800129e:	4413      	add	r3, r2
 80012a0:	4602      	mov	r2, r0
 80012a2:	701a      	strb	r2, [r3, #0]
 80012a4:	e000      	b.n	80012a8 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80012a6:	bf00      	nop
}
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	2000025c 	.word	0x2000025c

080012b4 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{
 80012b4:	b590      	push	{r4, r7, lr}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4604      	mov	r4, r0
 80012bc:	4608      	mov	r0, r1
 80012be:	4611      	mov	r1, r2
 80012c0:	461a      	mov	r2, r3
 80012c2:	4623      	mov	r3, r4
 80012c4:	71fb      	strb	r3, [r7, #7]
 80012c6:	4603      	mov	r3, r0
 80012c8:	71bb      	strb	r3, [r7, #6]
 80012ca:	460b      	mov	r3, r1
 80012cc:	717b      	strb	r3, [r7, #5]
 80012ce:	4613      	mov	r3, r2
 80012d0:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值
 80012d6:	797b      	ldrb	r3, [r7, #5]
 80012d8:	3b20      	subs	r3, #32
 80012da:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80012dc:	2300      	movs	r3, #0
 80012de:	73bb      	strb	r3, [r7, #14]
 80012e0:	e04d      	b.n	800137e <OLED_ShowChar+0xca>
    {
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 80012e2:	793b      	ldrb	r3, [r7, #4]
 80012e4:	2b0c      	cmp	r3, #12
 80012e6:	d10b      	bne.n	8001300 <OLED_ShowChar+0x4c>
 80012e8:	797a      	ldrb	r2, [r7, #5]
 80012ea:	7bb9      	ldrb	r1, [r7, #14]
 80012ec:	4828      	ldr	r0, [pc, #160]	@ (8001390 <OLED_ShowChar+0xdc>)
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	4403      	add	r3, r0
 80012f8:	440b      	add	r3, r1
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	73fb      	strb	r3, [r7, #15]
 80012fe:	e007      	b.n	8001310 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体
 8001300:	797a      	ldrb	r2, [r7, #5]
 8001302:	7bbb      	ldrb	r3, [r7, #14]
 8001304:	4923      	ldr	r1, [pc, #140]	@ (8001394 <OLED_ShowChar+0xe0>)
 8001306:	0112      	lsls	r2, r2, #4
 8001308:	440a      	add	r2, r1
 800130a:	4413      	add	r3, r2
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001310:	2300      	movs	r3, #0
 8001312:	737b      	strb	r3, [r7, #13]
 8001314:	e02d      	b.n	8001372 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	2b00      	cmp	r3, #0
 800131c:	da07      	bge.n	800132e <OLED_ShowChar+0x7a>
 800131e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001322:	79b9      	ldrb	r1, [r7, #6]
 8001324:	79fb      	ldrb	r3, [r7, #7]
 8001326:	4618      	mov	r0, r3
 8001328:	f7ff ff6c 	bl	8001204 <OLED_DrawPoint>
 800132c:	e00c      	b.n	8001348 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800132e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	79b9      	ldrb	r1, [r7, #6]
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	4618      	mov	r0, r3
 8001344:	f7ff ff5e 	bl	8001204 <OLED_DrawPoint>
			temp<<=1;
 8001348:	7bfb      	ldrb	r3, [r7, #15]
 800134a:	005b      	lsls	r3, r3, #1
 800134c:	73fb      	strb	r3, [r7, #15]
			y++;
 800134e:	79bb      	ldrb	r3, [r7, #6]
 8001350:	3301      	adds	r3, #1
 8001352:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001354:	79ba      	ldrb	r2, [r7, #6]
 8001356:	7b3b      	ldrb	r3, [r7, #12]
 8001358:	1ad2      	subs	r2, r2, r3
 800135a:	793b      	ldrb	r3, [r7, #4]
 800135c:	429a      	cmp	r2, r3
 800135e:	d105      	bne.n	800136c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001360:	7b3b      	ldrb	r3, [r7, #12]
 8001362:	71bb      	strb	r3, [r7, #6]
				x++;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	3301      	adds	r3, #1
 8001368:	71fb      	strb	r3, [r7, #7]
				break;
 800136a:	e005      	b.n	8001378 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800136c:	7b7b      	ldrb	r3, [r7, #13]
 800136e:	3301      	adds	r3, #1
 8001370:	737b      	strb	r3, [r7, #13]
 8001372:	7b7b      	ldrb	r3, [r7, #13]
 8001374:	2b07      	cmp	r3, #7
 8001376:	d9ce      	bls.n	8001316 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001378:	7bbb      	ldrb	r3, [r7, #14]
 800137a:	3301      	adds	r3, #1
 800137c:	73bb      	strb	r3, [r7, #14]
 800137e:	7bba      	ldrb	r2, [r7, #14]
 8001380:	793b      	ldrb	r3, [r7, #4]
 8001382:	429a      	cmp	r2, r3
 8001384:	d3ad      	bcc.n	80012e2 <OLED_ShowChar+0x2e>
			}
		}
    }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	bd90      	pop	{r4, r7, pc}
 8001390:	0800b03c 	.word	0x0800b03c
 8001394:	0800b4b0 	.word	0x0800b4b0

08001398 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	460a      	mov	r2, r1
 80013a2:	71fb      	strb	r3, [r7, #7]
 80013a4:	4613      	mov	r3, r2
 80013a6:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 80013a8:	2301      	movs	r3, #1
 80013aa:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80013ac:	e004      	b.n	80013b8 <oled_pow+0x20>
 80013ae:	79fa      	ldrb	r2, [r7, #7]
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	fb02 f303 	mul.w	r3, r2, r3
 80013b6:	60fb      	str	r3, [r7, #12]
 80013b8:	79bb      	ldrb	r3, [r7, #6]
 80013ba:	1e5a      	subs	r2, r3, #1
 80013bc:	71ba      	strb	r2, [r7, #6]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f5      	bne.n	80013ae <oled_pow+0x16>
	return result;
 80013c2:	68fb      	ldr	r3, [r7, #12]
}
 80013c4:	4618      	mov	r0, r3
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bc80      	pop	{r7}
 80013cc:	4770      	bx	lr
	...

080013d0 <OLED_ShowNumber>:
//len :数字的位数
//size:字体大小
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af02      	add	r7, sp, #8
 80013d6:	603a      	str	r2, [r7, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4603      	mov	r3, r0
 80013dc:	71fb      	strb	r3, [r7, #7]
 80013de:	460b      	mov	r3, r1
 80013e0:	71bb      	strb	r3, [r7, #6]
 80013e2:	4613      	mov	r3, r2
 80013e4:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;
 80013e6:	2300      	movs	r3, #0
 80013e8:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 80013ea:	2300      	movs	r3, #0
 80013ec:	73fb      	strb	r3, [r7, #15]
 80013ee:	e051      	b.n	8001494 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 80013f0:	797a      	ldrb	r2, [r7, #5]
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	1ad3      	subs	r3, r2, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	3b01      	subs	r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	4619      	mov	r1, r3
 80013fe:	200a      	movs	r0, #10
 8001400:	f7ff ffca 	bl	8001398 <oled_pow>
 8001404:	4602      	mov	r2, r0
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	fbb3 f1f2 	udiv	r1, r3, r2
 800140c:	4b26      	ldr	r3, [pc, #152]	@ (80014a8 <OLED_ShowNumber+0xd8>)
 800140e:	fba3 2301 	umull	r2, r3, r3, r1
 8001412:	08da      	lsrs	r2, r3, #3
 8001414:	4613      	mov	r3, r2
 8001416:	009b      	lsls	r3, r3, #2
 8001418:	4413      	add	r3, r2
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	1aca      	subs	r2, r1, r3
 800141e:	4613      	mov	r3, r2
 8001420:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8001422:	7bbb      	ldrb	r3, [r7, #14]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d11d      	bne.n	8001464 <OLED_ShowNumber+0x94>
 8001428:	7bfa      	ldrb	r2, [r7, #15]
 800142a:	797b      	ldrb	r3, [r7, #5]
 800142c:	3b01      	subs	r3, #1
 800142e:	429a      	cmp	r2, r3
 8001430:	da18      	bge.n	8001464 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d113      	bne.n	8001460 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8001438:	f897 3020 	ldrb.w	r3, [r7, #32]
 800143c:	085b      	lsrs	r3, r3, #1
 800143e:	b2db      	uxtb	r3, r3
 8001440:	7bfa      	ldrb	r2, [r7, #15]
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	b2da      	uxtb	r2, r3
 8001448:	79fb      	ldrb	r3, [r7, #7]
 800144a:	4413      	add	r3, r2
 800144c:	b2d8      	uxtb	r0, r3
 800144e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001452:	79b9      	ldrb	r1, [r7, #6]
 8001454:	2201      	movs	r2, #1
 8001456:	9200      	str	r2, [sp, #0]
 8001458:	2220      	movs	r2, #32
 800145a:	f7ff ff2b 	bl	80012b4 <OLED_ShowChar>
				continue;
 800145e:	e016      	b.n	800148e <OLED_ShowNumber+0xbe>
			}else enshow=1;
 8001460:	2301      	movs	r3, #1
 8001462:	73bb      	strb	r3, [r7, #14]

		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1);
 8001464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	b2da      	uxtb	r2, r3
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4413      	add	r3, r2
 8001478:	b2d8      	uxtb	r0, r3
 800147a:	7b7b      	ldrb	r3, [r7, #13]
 800147c:	3330      	adds	r3, #48	@ 0x30
 800147e:	b2da      	uxtb	r2, r3
 8001480:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001484:	79b9      	ldrb	r1, [r7, #6]
 8001486:	2401      	movs	r4, #1
 8001488:	9400      	str	r4, [sp, #0]
 800148a:	f7ff ff13 	bl	80012b4 <OLED_ShowChar>
	for(t=0;t<len;t++)
 800148e:	7bfb      	ldrb	r3, [r7, #15]
 8001490:	3301      	adds	r3, #1
 8001492:	73fb      	strb	r3, [r7, #15]
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	429a      	cmp	r2, r3
 800149a:	d3a9      	bcc.n	80013f0 <OLED_ShowNumber+0x20>
	}
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3714      	adds	r7, #20
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd90      	pop	{r4, r7, pc}
 80014a6:	bf00      	nop
 80014a8:	cccccccd 	.word	0xcccccccd

080014ac <OLED_ShowString>:
//显示字符串
//x,y:起点坐标
//*p:字符串起始地址
//用16字体
void OLED_ShowString(u8 x,u8 y,const u8 *p)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af02      	add	r7, sp, #8
 80014b2:	4603      	mov	r3, r0
 80014b4:	603a      	str	r2, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
 80014b8:	460b      	mov	r3, r1
 80014ba:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while(*p!='\0')
 80014bc:	e01f      	b.n	80014fe <OLED_ShowString+0x52>
    {
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80014be:	79fb      	ldrb	r3, [r7, #7]
 80014c0:	2b7a      	cmp	r3, #122	@ 0x7a
 80014c2:	d904      	bls.n	80014ce <OLED_ShowString+0x22>
 80014c4:	2300      	movs	r3, #0
 80014c6:	71fb      	strb	r3, [r7, #7]
 80014c8:	79bb      	ldrb	r3, [r7, #6]
 80014ca:	3310      	adds	r3, #16
 80014cc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80014ce:	79bb      	ldrb	r3, [r7, #6]
 80014d0:	2b3a      	cmp	r3, #58	@ 0x3a
 80014d2:	d905      	bls.n	80014e0 <OLED_ShowString+0x34>
 80014d4:	2300      	movs	r3, #0
 80014d6:	71fb      	strb	r3, [r7, #7]
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	71bb      	strb	r3, [r7, #6]
 80014dc:	f7ff fe6c 	bl	80011b8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	781a      	ldrb	r2, [r3, #0]
 80014e4:	79b9      	ldrb	r1, [r7, #6]
 80014e6:	79f8      	ldrb	r0, [r7, #7]
 80014e8:	2301      	movs	r3, #1
 80014ea:	9300      	str	r3, [sp, #0]
 80014ec:	230c      	movs	r3, #12
 80014ee:	f7ff fee1 	bl	80012b4 <OLED_ShowChar>
        x+=8;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	3308      	adds	r3, #8
 80014f6:	71fb      	strb	r3, [r7, #7]
        p++;
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	3301      	adds	r3, #1
 80014fc:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	781b      	ldrb	r3, [r3, #0]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d1db      	bne.n	80014be <OLED_ShowString+0x12>
    }
}
 8001506:	bf00      	nop
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <OLED_Init>:
    }
}

//初始化OLED
void OLED_Init(void)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8001514:	2200      	movs	r2, #0
 8001516:	2108      	movs	r1, #8
 8001518:	4839      	ldr	r0, [pc, #228]	@ (8001600 <OLED_Init+0xf0>)
 800151a:	f000 fea5 	bl	8002268 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800151e:	2064      	movs	r0, #100	@ 0x64
 8001520:	f000 fac8 	bl	8001ab4 <HAL_Delay>
	OLED_RST_Set();
 8001524:	2201      	movs	r2, #1
 8001526:	2108      	movs	r1, #8
 8001528:	4835      	ldr	r0, [pc, #212]	@ (8001600 <OLED_Init+0xf0>)
 800152a:	f000 fe9d 	bl	8002268 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 800152e:	2100      	movs	r1, #0
 8001530:	20ae      	movs	r0, #174	@ 0xae
 8001532:	f7ff fdeb 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8001536:	2100      	movs	r1, #0
 8001538:	20d5      	movs	r0, #213	@ 0xd5
 800153a:	f7ff fde7 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 800153e:	2100      	movs	r1, #0
 8001540:	2050      	movs	r0, #80	@ 0x50
 8001542:	f7ff fde3 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8001546:	2100      	movs	r1, #0
 8001548:	20a8      	movs	r0, #168	@ 0xa8
 800154a:	f7ff fddf 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64)
 800154e:	2100      	movs	r1, #0
 8001550:	203f      	movs	r0, #63	@ 0x3f
 8001552:	f7ff fddb 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8001556:	2100      	movs	r1, #0
 8001558:	20d3      	movs	r0, #211	@ 0xd3
 800155a:	f7ff fdd7 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 800155e:	2100      	movs	r1, #0
 8001560:	2000      	movs	r0, #0
 8001562:	f7ff fdd3 	bl	800110c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8001566:	2100      	movs	r1, #0
 8001568:	2040      	movs	r0, #64	@ 0x40
 800156a:	f7ff fdcf 	bl	800110c <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 800156e:	2100      	movs	r1, #0
 8001570:	208d      	movs	r0, #141	@ 0x8d
 8001572:	f7ff fdcb 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8001576:	2100      	movs	r1, #0
 8001578:	2014      	movs	r0, #20
 800157a:	f7ff fdc7 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 800157e:	2100      	movs	r1, #0
 8001580:	2020      	movs	r0, #32
 8001582:	f7ff fdc3 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 8001586:	2100      	movs	r1, #0
 8001588:	2002      	movs	r0, #2
 800158a:	f7ff fdbf 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 800158e:	2100      	movs	r1, #0
 8001590:	20a1      	movs	r0, #161	@ 0xa1
 8001592:	f7ff fdbb 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 8001596:	2100      	movs	r1, #0
 8001598:	20c0      	movs	r0, #192	@ 0xc0
 800159a:	f7ff fdb7 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 800159e:	2100      	movs	r1, #0
 80015a0:	20da      	movs	r0, #218	@ 0xda
 80015a2:	f7ff fdb3 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 80015a6:	2100      	movs	r1, #0
 80015a8:	2012      	movs	r0, #18
 80015aa:	f7ff fdaf 	bl	800110c <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 80015ae:	2100      	movs	r1, #0
 80015b0:	2081      	movs	r0, #129	@ 0x81
 80015b2:	f7ff fdab 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 80015b6:	2100      	movs	r1, #0
 80015b8:	20ef      	movs	r0, #239	@ 0xef
 80015ba:	f7ff fda7 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 80015be:	2100      	movs	r1, #0
 80015c0:	20d9      	movs	r0, #217	@ 0xd9
 80015c2:	f7ff fda3 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80015c6:	2100      	movs	r1, #0
 80015c8:	20f1      	movs	r0, #241	@ 0xf1
 80015ca:	f7ff fd9f 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 80015ce:	2100      	movs	r1, #0
 80015d0:	20db      	movs	r0, #219	@ 0xdb
 80015d2:	f7ff fd9b 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80015d6:	2100      	movs	r1, #0
 80015d8:	2030      	movs	r0, #48	@ 0x30
 80015da:	f7ff fd97 	bl	800110c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 80015de:	2100      	movs	r1, #0
 80015e0:	20a4      	movs	r0, #164	@ 0xa4
 80015e2:	f7ff fd93 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示
 80015e6:	2100      	movs	r1, #0
 80015e8:	20a6      	movs	r0, #166	@ 0xa6
 80015ea:	f7ff fd8f 	bl	800110c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示
 80015ee:	2100      	movs	r1, #0
 80015f0:	20af      	movs	r0, #175	@ 0xaf
 80015f2:	f7ff fd8b 	bl	800110c <OLED_WR_Byte>
	OLED_Clear();
 80015f6:	f7ff fddf 	bl	80011b8 <OLED_Clear>
}
 80015fa:	bf00      	nop
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	40011000 	.word	0x40011000

08001604 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800160a:	4b18      	ldr	r3, [pc, #96]	@ (800166c <HAL_MspInit+0x68>)
 800160c:	699b      	ldr	r3, [r3, #24]
 800160e:	4a17      	ldr	r2, [pc, #92]	@ (800166c <HAL_MspInit+0x68>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	6193      	str	r3, [r2, #24]
 8001616:	4b15      	ldr	r3, [pc, #84]	@ (800166c <HAL_MspInit+0x68>)
 8001618:	699b      	ldr	r3, [r3, #24]
 800161a:	f003 0301 	and.w	r3, r3, #1
 800161e:	60bb      	str	r3, [r7, #8]
 8001620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001622:	4b12      	ldr	r3, [pc, #72]	@ (800166c <HAL_MspInit+0x68>)
 8001624:	69db      	ldr	r3, [r3, #28]
 8001626:	4a11      	ldr	r2, [pc, #68]	@ (800166c <HAL_MspInit+0x68>)
 8001628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800162c:	61d3      	str	r3, [r2, #28]
 800162e:	4b0f      	ldr	r3, [pc, #60]	@ (800166c <HAL_MspInit+0x68>)
 8001630:	69db      	ldr	r3, [r3, #28]
 8001632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001636:	607b      	str	r3, [r7, #4]
 8001638:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800163a:	2200      	movs	r2, #0
 800163c:	210f      	movs	r1, #15
 800163e:	f06f 0001 	mvn.w	r0, #1
 8001642:	f000 fb10 	bl	8001c66 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001646:	4b0a      	ldr	r3, [pc, #40]	@ (8001670 <HAL_MspInit+0x6c>)
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001652:	60fb      	str	r3, [r7, #12]
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800165a:	60fb      	str	r3, [r7, #12]
 800165c:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <HAL_MspInit+0x6c>)
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40021000 	.word	0x40021000
 8001670:	40010000 	.word	0x40010000

08001674 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800167c:	f107 0310 	add.w	r3, r7, #16
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]
 8001688:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4a20      	ldr	r2, [pc, #128]	@ (8001710 <HAL_UART_MspInit+0x9c>)
 8001690:	4293      	cmp	r3, r2
 8001692:	d139      	bne.n	8001708 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8001694:	4b1f      	ldr	r3, [pc, #124]	@ (8001714 <HAL_UART_MspInit+0xa0>)
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	4a1e      	ldr	r2, [pc, #120]	@ (8001714 <HAL_UART_MspInit+0xa0>)
 800169a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800169e:	61d3      	str	r3, [r2, #28]
 80016a0:	4b1c      	ldr	r3, [pc, #112]	@ (8001714 <HAL_UART_MspInit+0xa0>)
 80016a2:	69db      	ldr	r3, [r3, #28]
 80016a4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016a8:	60fb      	str	r3, [r7, #12]
 80016aa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ac:	4b19      	ldr	r3, [pc, #100]	@ (8001714 <HAL_UART_MspInit+0xa0>)
 80016ae:	699b      	ldr	r3, [r3, #24]
 80016b0:	4a18      	ldr	r2, [pc, #96]	@ (8001714 <HAL_UART_MspInit+0xa0>)
 80016b2:	f043 0310 	orr.w	r3, r3, #16
 80016b6:	6193      	str	r3, [r2, #24]
 80016b8:	4b16      	ldr	r3, [pc, #88]	@ (8001714 <HAL_UART_MspInit+0xa0>)
 80016ba:	699b      	ldr	r3, [r3, #24]
 80016bc:	f003 0310 	and.w	r3, r3, #16
 80016c0:	60bb      	str	r3, [r7, #8]
 80016c2:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016ce:	2303      	movs	r3, #3
 80016d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016d2:	f107 0310 	add.w	r3, r7, #16
 80016d6:	4619      	mov	r1, r3
 80016d8:	480f      	ldr	r0, [pc, #60]	@ (8001718 <HAL_UART_MspInit+0xa4>)
 80016da:	f000 fc31 	bl	8001f40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80016de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016e2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e8:	2300      	movs	r3, #0
 80016ea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016ec:	f107 0310 	add.w	r3, r7, #16
 80016f0:	4619      	mov	r1, r3
 80016f2:	4809      	ldr	r0, [pc, #36]	@ (8001718 <HAL_UART_MspInit+0xa4>)
 80016f4:	f000 fc24 	bl	8001f40 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80016f8:	2200      	movs	r2, #0
 80016fa:	2105      	movs	r1, #5
 80016fc:	2034      	movs	r0, #52	@ 0x34
 80016fe:	f000 fab2 	bl	8001c66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001702:	2034      	movs	r0, #52	@ 0x34
 8001704:	f000 facb 	bl	8001c9e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001708:	bf00      	nop
 800170a:	3720      	adds	r7, #32
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40004c00 	.word	0x40004c00
 8001714:	40021000 	.word	0x40021000
 8001718:	40011000 	.word	0x40011000

0800171c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08e      	sub	sp, #56	@ 0x38
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001728:	2300      	movs	r3, #0
 800172a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001732:	4b34      	ldr	r3, [pc, #208]	@ (8001804 <HAL_InitTick+0xe8>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a33      	ldr	r2, [pc, #204]	@ (8001804 <HAL_InitTick+0xe8>)
 8001738:	f043 0310 	orr.w	r3, r3, #16
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b31      	ldr	r3, [pc, #196]	@ (8001804 <HAL_InitTick+0xe8>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 0310 	and.w	r3, r3, #16
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800174a:	f107 0210 	add.w	r2, r7, #16
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	4611      	mov	r1, r2
 8001754:	4618      	mov	r0, r3
 8001756:	f001 f991 	bl	8002a7c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800175e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001760:	2b00      	cmp	r3, #0
 8001762:	d103      	bne.n	800176c <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001764:	f001 f962 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8001768:	6378      	str	r0, [r7, #52]	@ 0x34
 800176a:	e004      	b.n	8001776 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800176c:	f001 f95e 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8001770:	4603      	mov	r3, r0
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001778:	4a23      	ldr	r2, [pc, #140]	@ (8001808 <HAL_InitTick+0xec>)
 800177a:	fba2 2303 	umull	r2, r3, r2, r3
 800177e:	0c9b      	lsrs	r3, r3, #18
 8001780:	3b01      	subs	r3, #1
 8001782:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001784:	4b21      	ldr	r3, [pc, #132]	@ (800180c <HAL_InitTick+0xf0>)
 8001786:	4a22      	ldr	r2, [pc, #136]	@ (8001810 <HAL_InitTick+0xf4>)
 8001788:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800178a:	4b20      	ldr	r3, [pc, #128]	@ (800180c <HAL_InitTick+0xf0>)
 800178c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001790:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001792:	4a1e      	ldr	r2, [pc, #120]	@ (800180c <HAL_InitTick+0xf0>)
 8001794:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001796:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001798:	4b1c      	ldr	r3, [pc, #112]	@ (800180c <HAL_InitTick+0xf0>)
 800179a:	2200      	movs	r2, #0
 800179c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800179e:	4b1b      	ldr	r3, [pc, #108]	@ (800180c <HAL_InitTick+0xf0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a4:	4b19      	ldr	r3, [pc, #100]	@ (800180c <HAL_InitTick+0xf0>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017aa:	4818      	ldr	r0, [pc, #96]	@ (800180c <HAL_InitTick+0xf0>)
 80017ac:	f001 f9b4 	bl	8002b18 <HAL_TIM_Base_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017b6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11b      	bne.n	80017f6 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017be:	4813      	ldr	r0, [pc, #76]	@ (800180c <HAL_InitTick+0xf0>)
 80017c0:	f001 fa02 	bl	8002bc8 <HAL_TIM_Base_Start_IT>
 80017c4:	4603      	mov	r3, r0
 80017c6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017ca:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d111      	bne.n	80017f6 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80017d2:	2036      	movs	r0, #54	@ 0x36
 80017d4:	f000 fa63 	bl	8001c9e <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2b0f      	cmp	r3, #15
 80017dc:	d808      	bhi.n	80017f0 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80017de:	2200      	movs	r2, #0
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	2036      	movs	r0, #54	@ 0x36
 80017e4:	f000 fa3f 	bl	8001c66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001814 <HAL_InitTick+0xf8>)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6013      	str	r3, [r2, #0]
 80017ee:	e002      	b.n	80017f6 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3738      	adds	r7, #56	@ 0x38
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	40021000 	.word	0x40021000
 8001808:	431bde83 	.word	0x431bde83
 800180c:	2000065c 	.word	0x2000065c
 8001810:	40001000 	.word	0x40001000
 8001814:	20000004 	.word	0x20000004

08001818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001818:	b480      	push	{r7}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <NMI_Handler+0x4>

08001820 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <HardFault_Handler+0x4>

08001828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <MemManage_Handler+0x4>

08001830 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <BusFault_Handler+0x4>

08001838 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <UsageFault_Handler+0x4>

08001840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	bc80      	pop	{r7}
 800184a:	4770      	bx	lr

0800184c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <UART4_IRQHandler+0x10>)
 8001852:	f001 fcb3 	bl	80031bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	200001f4 	.word	0x200001f4

08001860 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <TIM6_IRQHandler+0x10>)
 8001866:	f001 fa0f 	bl	8002c88 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000065c 	.word	0x2000065c

08001874 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return 1;
 8001878:	2301      	movs	r3, #1
}
 800187a:	4618      	mov	r0, r3
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <_kill>:

int _kill(int pid, int sig)
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800188c:	f005 ffe2 	bl	8007854 <__errno>
 8001890:	4603      	mov	r3, r0
 8001892:	2216      	movs	r2, #22
 8001894:	601a      	str	r2, [r3, #0]
  return -1;
 8001896:	f04f 33ff 	mov.w	r3, #4294967295
}
 800189a:	4618      	mov	r0, r3
 800189c:	3708      	adds	r7, #8
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}

080018a2 <_exit>:

void _exit (int status)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
 80018a8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018aa:	f04f 31ff 	mov.w	r1, #4294967295
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffe7 	bl	8001882 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018b4:	bf00      	nop
 80018b6:	e7fd      	b.n	80018b4 <_exit+0x12>

080018b8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
 80018c8:	e00a      	b.n	80018e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018ca:	f3af 8000 	nop.w
 80018ce:	4601      	mov	r1, r0
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	1c5a      	adds	r2, r3, #1
 80018d4:	60ba      	str	r2, [r7, #8]
 80018d6:	b2ca      	uxtb	r2, r1
 80018d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018da:	697b      	ldr	r3, [r7, #20]
 80018dc:	3301      	adds	r3, #1
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	697a      	ldr	r2, [r7, #20]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	dbf0      	blt.n	80018ca <_read+0x12>
  }

  return len;
 80018e8:	687b      	ldr	r3, [r7, #4]
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b086      	sub	sp, #24
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	60f8      	str	r0, [r7, #12]
 80018fa:	60b9      	str	r1, [r7, #8]
 80018fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fe:	2300      	movs	r3, #0
 8001900:	617b      	str	r3, [r7, #20]
 8001902:	e009      	b.n	8001918 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	1c5a      	adds	r2, r3, #1
 8001908:	60ba      	str	r2, [r7, #8]
 800190a:	781b      	ldrb	r3, [r3, #0]
 800190c:	4618      	mov	r0, r3
 800190e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	429a      	cmp	r2, r3
 800191e:	dbf1      	blt.n	8001904 <_write+0x12>
  }
  return len;
 8001920:	687b      	ldr	r3, [r7, #4]
}
 8001922:	4618      	mov	r0, r3
 8001924:	3718      	adds	r7, #24
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}

0800192a <_close>:

int _close(int file)
{
 800192a:	b480      	push	{r7}
 800192c:	b083      	sub	sp, #12
 800192e:	af00      	add	r7, sp, #0
 8001930:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001936:	4618      	mov	r0, r3
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001950:	605a      	str	r2, [r3, #4]
  return 0;
 8001952:	2300      	movs	r3, #0
}
 8001954:	4618      	mov	r0, r3
 8001956:	370c      	adds	r7, #12
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr

0800195e <_isatty>:

int _isatty(int file)
{
 800195e:	b480      	push	{r7}
 8001960:	b083      	sub	sp, #12
 8001962:	af00      	add	r7, sp, #0
 8001964:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001966:	2301      	movs	r3, #1
}
 8001968:	4618      	mov	r0, r3
 800196a:	370c      	adds	r7, #12
 800196c:	46bd      	mov	sp, r7
 800196e:	bc80      	pop	{r7}
 8001970:	4770      	bx	lr

08001972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001972:	b480      	push	{r7}
 8001974:	b085      	sub	sp, #20
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
	...

0800198c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b086      	sub	sp, #24
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001994:	4a14      	ldr	r2, [pc, #80]	@ (80019e8 <_sbrk+0x5c>)
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <_sbrk+0x60>)
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <_sbrk+0x64>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d102      	bne.n	80019ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019a8:	4b11      	ldr	r3, [pc, #68]	@ (80019f0 <_sbrk+0x64>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	@ (80019f4 <_sbrk+0x68>)
 80019ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ae:	4b10      	ldr	r3, [pc, #64]	@ (80019f0 <_sbrk+0x64>)
 80019b0:	681a      	ldr	r2, [r3, #0]
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	4413      	add	r3, r2
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d207      	bcs.n	80019cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019bc:	f005 ff4a 	bl	8007854 <__errno>
 80019c0:	4603      	mov	r3, r0
 80019c2:	220c      	movs	r2, #12
 80019c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019c6:	f04f 33ff 	mov.w	r3, #4294967295
 80019ca:	e009      	b.n	80019e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019cc:	4b08      	ldr	r3, [pc, #32]	@ (80019f0 <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019d2:	4b07      	ldr	r3, [pc, #28]	@ (80019f0 <_sbrk+0x64>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4413      	add	r3, r2
 80019da:	4a05      	ldr	r2, [pc, #20]	@ (80019f0 <_sbrk+0x64>)
 80019dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019de:	68fb      	ldr	r3, [r7, #12]
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	3718      	adds	r7, #24
 80019e4:	46bd      	mov	sp, r7
 80019e6:	bd80      	pop	{r7, pc}
 80019e8:	20010000 	.word	0x20010000
 80019ec:	00000400 	.word	0x00000400
 80019f0:	200006a4 	.word	0x200006a4
 80019f4:	20002140 	.word	0x20002140

080019f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bc80      	pop	{r7}
 8001a02:	4770      	bx	lr

08001a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a04:	f7ff fff8 	bl	80019f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a08:	480b      	ldr	r0, [pc, #44]	@ (8001a38 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a0a:	490c      	ldr	r1, [pc, #48]	@ (8001a3c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a0c:	4a0c      	ldr	r2, [pc, #48]	@ (8001a40 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a10:	e002      	b.n	8001a18 <LoopCopyDataInit>

08001a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a16:	3304      	adds	r3, #4

08001a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a1c:	d3f9      	bcc.n	8001a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a1e:	4a09      	ldr	r2, [pc, #36]	@ (8001a44 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a20:	4c09      	ldr	r4, [pc, #36]	@ (8001a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a24:	e001      	b.n	8001a2a <LoopFillZerobss>

08001a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a28:	3204      	adds	r2, #4

08001a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a2c:	d3fb      	bcc.n	8001a26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a2e:	f005 ff17 	bl	8007860 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a32:	f7ff f993 	bl	8000d5c <main>
  bx lr
 8001a36:	4770      	bx	lr
  ldr r0, =_sdata
 8001a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a3c:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a40:	0800bf08 	.word	0x0800bf08
  ldr r2, =_sbss
 8001a44:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a48:	20002140 	.word	0x20002140

08001a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a4c:	e7fe      	b.n	8001a4c <ADC1_2_IRQHandler>
	...

08001a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a54:	4b08      	ldr	r3, [pc, #32]	@ (8001a78 <HAL_Init+0x28>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a07      	ldr	r2, [pc, #28]	@ (8001a78 <HAL_Init+0x28>)
 8001a5a:	f043 0310 	orr.w	r3, r3, #16
 8001a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a60:	2003      	movs	r0, #3
 8001a62:	f000 f8f5 	bl	8001c50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a66:	2000      	movs	r0, #0
 8001a68:	f7ff fe58 	bl	800171c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a6c:	f7ff fdca 	bl	8001604 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a70:	2300      	movs	r3, #0
}
 8001a72:	4618      	mov	r0, r3
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	40022000 	.word	0x40022000

08001a7c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a80:	4b05      	ldr	r3, [pc, #20]	@ (8001a98 <HAL_IncTick+0x1c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	461a      	mov	r2, r3
 8001a86:	4b05      	ldr	r3, [pc, #20]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4a03      	ldr	r2, [pc, #12]	@ (8001a9c <HAL_IncTick+0x20>)
 8001a8e:	6013      	str	r3, [r2, #0]
}
 8001a90:	bf00      	nop
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bc80      	pop	{r7}
 8001a96:	4770      	bx	lr
 8001a98:	20000008 	.word	0x20000008
 8001a9c:	200006a8 	.word	0x200006a8

08001aa0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8001aa4:	4b02      	ldr	r3, [pc, #8]	@ (8001ab0 <HAL_GetTick+0x10>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bc80      	pop	{r7}
 8001aae:	4770      	bx	lr
 8001ab0:	200006a8 	.word	0x200006a8

08001ab4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001abc:	f7ff fff0 	bl	8001aa0 <HAL_GetTick>
 8001ac0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001acc:	d005      	beq.n	8001ada <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ace:	4b0a      	ldr	r3, [pc, #40]	@ (8001af8 <HAL_Delay+0x44>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001ada:	bf00      	nop
 8001adc:	f7ff ffe0 	bl	8001aa0 <HAL_GetTick>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d8f7      	bhi.n	8001adc <HAL_Delay+0x28>
  {
  }
}
 8001aec:	bf00      	nop
 8001aee:	bf00      	nop
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	20000008 	.word	0x20000008

08001afc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	f003 0307 	and.w	r3, r3, #7
 8001b0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b0e:	68db      	ldr	r3, [r3, #12]
 8001b10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b12:	68ba      	ldr	r2, [r7, #8]
 8001b14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b18:	4013      	ands	r3, r2
 8001b1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2e:	4a04      	ldr	r2, [pc, #16]	@ (8001b40 <__NVIC_SetPriorityGrouping+0x44>)
 8001b30:	68bb      	ldr	r3, [r7, #8]
 8001b32:	60d3      	str	r3, [r2, #12]
}
 8001b34:	bf00      	nop
 8001b36:	3714      	adds	r7, #20
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bc80      	pop	{r7}
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b44:	b480      	push	{r7}
 8001b46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b48:	4b04      	ldr	r3, [pc, #16]	@ (8001b5c <__NVIC_GetPriorityGrouping+0x18>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	0a1b      	lsrs	r3, r3, #8
 8001b4e:	f003 0307 	and.w	r3, r3, #7
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	db0b      	blt.n	8001b8a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b72:	79fb      	ldrb	r3, [r7, #7]
 8001b74:	f003 021f 	and.w	r2, r3, #31
 8001b78:	4906      	ldr	r1, [pc, #24]	@ (8001b94 <__NVIC_EnableIRQ+0x34>)
 8001b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7e:	095b      	lsrs	r3, r3, #5
 8001b80:	2001      	movs	r0, #1
 8001b82:	fa00 f202 	lsl.w	r2, r0, r2
 8001b86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	370c      	adds	r7, #12
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr
 8001b94:	e000e100 	.word	0xe000e100

08001b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	6039      	str	r1, [r7, #0]
 8001ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	db0a      	blt.n	8001bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	b2da      	uxtb	r2, r3
 8001bb0:	490c      	ldr	r1, [pc, #48]	@ (8001be4 <__NVIC_SetPriority+0x4c>)
 8001bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb6:	0112      	lsls	r2, r2, #4
 8001bb8:	b2d2      	uxtb	r2, r2
 8001bba:	440b      	add	r3, r1
 8001bbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bc0:	e00a      	b.n	8001bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	b2da      	uxtb	r2, r3
 8001bc6:	4908      	ldr	r1, [pc, #32]	@ (8001be8 <__NVIC_SetPriority+0x50>)
 8001bc8:	79fb      	ldrb	r3, [r7, #7]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	3b04      	subs	r3, #4
 8001bd0:	0112      	lsls	r2, r2, #4
 8001bd2:	b2d2      	uxtb	r2, r2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	761a      	strb	r2, [r3, #24]
}
 8001bd8:	bf00      	nop
 8001bda:	370c      	adds	r7, #12
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bc80      	pop	{r7}
 8001be0:	4770      	bx	lr
 8001be2:	bf00      	nop
 8001be4:	e000e100 	.word	0xe000e100
 8001be8:	e000ed00 	.word	0xe000ed00

08001bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b089      	sub	sp, #36	@ 0x24
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	60f8      	str	r0, [r7, #12]
 8001bf4:	60b9      	str	r1, [r7, #8]
 8001bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	f003 0307 	and.w	r3, r3, #7
 8001bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	f1c3 0307 	rsb	r3, r3, #7
 8001c06:	2b04      	cmp	r3, #4
 8001c08:	bf28      	it	cs
 8001c0a:	2304      	movcs	r3, #4
 8001c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0e:	69fb      	ldr	r3, [r7, #28]
 8001c10:	3304      	adds	r3, #4
 8001c12:	2b06      	cmp	r3, #6
 8001c14:	d902      	bls.n	8001c1c <NVIC_EncodePriority+0x30>
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3b03      	subs	r3, #3
 8001c1a:	e000      	b.n	8001c1e <NVIC_EncodePriority+0x32>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c20:	f04f 32ff 	mov.w	r2, #4294967295
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43da      	mvns	r2, r3
 8001c2c:	68bb      	ldr	r3, [r7, #8]
 8001c2e:	401a      	ands	r2, r3
 8001c30:	697b      	ldr	r3, [r7, #20]
 8001c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c34:	f04f 31ff 	mov.w	r1, #4294967295
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3e:	43d9      	mvns	r1, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c44:	4313      	orrs	r3, r2
         );
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3724      	adds	r7, #36	@ 0x24
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f7ff ff4f 	bl	8001afc <__NVIC_SetPriorityGrouping>
}
 8001c5e:	bf00      	nop
 8001c60:	3708      	adds	r7, #8
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c66:	b580      	push	{r7, lr}
 8001c68:	b086      	sub	sp, #24
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	60b9      	str	r1, [r7, #8]
 8001c70:	607a      	str	r2, [r7, #4]
 8001c72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c78:	f7ff ff64 	bl	8001b44 <__NVIC_GetPriorityGrouping>
 8001c7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68b9      	ldr	r1, [r7, #8]
 8001c82:	6978      	ldr	r0, [r7, #20]
 8001c84:	f7ff ffb2 	bl	8001bec <NVIC_EncodePriority>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f7ff ff81 	bl	8001b98 <__NVIC_SetPriority>
}
 8001c96:	bf00      	nop
 8001c98:	3718      	adds	r7, #24
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}

08001c9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c9e:	b580      	push	{r7, lr}
 8001ca0:	b082      	sub	sp, #8
 8001ca2:	af00      	add	r7, sp, #0
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ca8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff57 	bl	8001b60 <__NVIC_EnableIRQ>
}
 8001cb2:	bf00      	nop
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b085      	sub	sp, #20
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b02      	cmp	r3, #2
 8001cd0:	d008      	beq.n	8001ce4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2204      	movs	r2, #4
 8001cd6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2200      	movs	r2, #0
 8001cdc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e020      	b.n	8001d26 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	681a      	ldr	r2, [r3, #0]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f022 020e 	bic.w	r2, r2, #14
 8001cf2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	fa01 f202 	lsl.w	r2, r1, r2
 8001d12:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b02      	cmp	r3, #2
 8001d46:	d005      	beq.n	8001d54 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	73fb      	strb	r3, [r7, #15]
 8001d52:	e0d6      	b.n	8001f02 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f022 020e 	bic.w	r2, r2, #14
 8001d62:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0201 	bic.w	r2, r2, #1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	461a      	mov	r2, r3
 8001d7a:	4b64      	ldr	r3, [pc, #400]	@ (8001f0c <HAL_DMA_Abort_IT+0x1dc>)
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d958      	bls.n	8001e32 <HAL_DMA_Abort_IT+0x102>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a62      	ldr	r2, [pc, #392]	@ (8001f10 <HAL_DMA_Abort_IT+0x1e0>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d04f      	beq.n	8001e2a <HAL_DMA_Abort_IT+0xfa>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a61      	ldr	r2, [pc, #388]	@ (8001f14 <HAL_DMA_Abort_IT+0x1e4>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d048      	beq.n	8001e26 <HAL_DMA_Abort_IT+0xf6>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a5f      	ldr	r2, [pc, #380]	@ (8001f18 <HAL_DMA_Abort_IT+0x1e8>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d040      	beq.n	8001e20 <HAL_DMA_Abort_IT+0xf0>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a5e      	ldr	r2, [pc, #376]	@ (8001f1c <HAL_DMA_Abort_IT+0x1ec>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d038      	beq.n	8001e1a <HAL_DMA_Abort_IT+0xea>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a5c      	ldr	r2, [pc, #368]	@ (8001f20 <HAL_DMA_Abort_IT+0x1f0>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d030      	beq.n	8001e14 <HAL_DMA_Abort_IT+0xe4>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a5b      	ldr	r2, [pc, #364]	@ (8001f24 <HAL_DMA_Abort_IT+0x1f4>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d028      	beq.n	8001e0e <HAL_DMA_Abort_IT+0xde>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a52      	ldr	r2, [pc, #328]	@ (8001f0c <HAL_DMA_Abort_IT+0x1dc>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d020      	beq.n	8001e08 <HAL_DMA_Abort_IT+0xd8>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a57      	ldr	r2, [pc, #348]	@ (8001f28 <HAL_DMA_Abort_IT+0x1f8>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d019      	beq.n	8001e04 <HAL_DMA_Abort_IT+0xd4>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a55      	ldr	r2, [pc, #340]	@ (8001f2c <HAL_DMA_Abort_IT+0x1fc>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d012      	beq.n	8001e00 <HAL_DMA_Abort_IT+0xd0>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a54      	ldr	r2, [pc, #336]	@ (8001f30 <HAL_DMA_Abort_IT+0x200>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d00a      	beq.n	8001dfa <HAL_DMA_Abort_IT+0xca>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a52      	ldr	r2, [pc, #328]	@ (8001f34 <HAL_DMA_Abort_IT+0x204>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d102      	bne.n	8001df4 <HAL_DMA_Abort_IT+0xc4>
 8001dee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001df2:	e01b      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001df4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001df8:	e018      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001dfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001dfe:	e015      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e00:	2310      	movs	r3, #16
 8001e02:	e013      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e04:	2301      	movs	r3, #1
 8001e06:	e011      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e0c:	e00e      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e0e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e12:	e00b      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e14:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e18:	e008      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1e:	e005      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e24:	e002      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e26:	2310      	movs	r3, #16
 8001e28:	e000      	b.n	8001e2c <HAL_DMA_Abort_IT+0xfc>
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	4a42      	ldr	r2, [pc, #264]	@ (8001f38 <HAL_DMA_Abort_IT+0x208>)
 8001e2e:	6053      	str	r3, [r2, #4]
 8001e30:	e057      	b.n	8001ee2 <HAL_DMA_Abort_IT+0x1b2>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4a36      	ldr	r2, [pc, #216]	@ (8001f10 <HAL_DMA_Abort_IT+0x1e0>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d04f      	beq.n	8001edc <HAL_DMA_Abort_IT+0x1ac>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a34      	ldr	r2, [pc, #208]	@ (8001f14 <HAL_DMA_Abort_IT+0x1e4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d048      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x1a8>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a33      	ldr	r2, [pc, #204]	@ (8001f18 <HAL_DMA_Abort_IT+0x1e8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d040      	beq.n	8001ed2 <HAL_DMA_Abort_IT+0x1a2>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a31      	ldr	r2, [pc, #196]	@ (8001f1c <HAL_DMA_Abort_IT+0x1ec>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d038      	beq.n	8001ecc <HAL_DMA_Abort_IT+0x19c>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a30      	ldr	r2, [pc, #192]	@ (8001f20 <HAL_DMA_Abort_IT+0x1f0>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d030      	beq.n	8001ec6 <HAL_DMA_Abort_IT+0x196>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a2e      	ldr	r2, [pc, #184]	@ (8001f24 <HAL_DMA_Abort_IT+0x1f4>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d028      	beq.n	8001ec0 <HAL_DMA_Abort_IT+0x190>
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a26      	ldr	r2, [pc, #152]	@ (8001f0c <HAL_DMA_Abort_IT+0x1dc>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d020      	beq.n	8001eba <HAL_DMA_Abort_IT+0x18a>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a2a      	ldr	r2, [pc, #168]	@ (8001f28 <HAL_DMA_Abort_IT+0x1f8>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d019      	beq.n	8001eb6 <HAL_DMA_Abort_IT+0x186>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a29      	ldr	r2, [pc, #164]	@ (8001f2c <HAL_DMA_Abort_IT+0x1fc>)
 8001e88:	4293      	cmp	r3, r2
 8001e8a:	d012      	beq.n	8001eb2 <HAL_DMA_Abort_IT+0x182>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a27      	ldr	r2, [pc, #156]	@ (8001f30 <HAL_DMA_Abort_IT+0x200>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d00a      	beq.n	8001eac <HAL_DMA_Abort_IT+0x17c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a26      	ldr	r2, [pc, #152]	@ (8001f34 <HAL_DMA_Abort_IT+0x204>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d102      	bne.n	8001ea6 <HAL_DMA_Abort_IT+0x176>
 8001ea0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea4:	e01b      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001ea6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eaa:	e018      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001eac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001eb0:	e015      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001eb2:	2310      	movs	r3, #16
 8001eb4:	e013      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e011      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001eba:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001ebe:	e00e      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001ec0:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ec4:	e00b      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001ec6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001eca:	e008      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed0:	e005      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001ed2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001ed6:	e002      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001ed8:	2310      	movs	r3, #16
 8001eda:	e000      	b.n	8001ede <HAL_DMA_Abort_IT+0x1ae>
 8001edc:	2301      	movs	r3, #1
 8001ede:	4a17      	ldr	r2, [pc, #92]	@ (8001f3c <HAL_DMA_Abort_IT+0x20c>)
 8001ee0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2201      	movs	r2, #1
 8001ee6:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	4798      	blx	r3
    } 
  }
  return status;
 8001f02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	3710      	adds	r7, #16
 8001f08:	46bd      	mov	sp, r7
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	40020080 	.word	0x40020080
 8001f10:	40020008 	.word	0x40020008
 8001f14:	4002001c 	.word	0x4002001c
 8001f18:	40020030 	.word	0x40020030
 8001f1c:	40020044 	.word	0x40020044
 8001f20:	40020058 	.word	0x40020058
 8001f24:	4002006c 	.word	0x4002006c
 8001f28:	40020408 	.word	0x40020408
 8001f2c:	4002041c 	.word	0x4002041c
 8001f30:	40020430 	.word	0x40020430
 8001f34:	40020444 	.word	0x40020444
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020000 	.word	0x40020000

08001f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b08b      	sub	sp, #44	@ 0x2c
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f52:	e179      	b.n	8002248 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f54:	2201      	movs	r2, #1
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	69fa      	ldr	r2, [r7, #28]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f68:	69ba      	ldr	r2, [r7, #24]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	f040 8168 	bne.w	8002242 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4a96      	ldr	r2, [pc, #600]	@ (80021d0 <HAL_GPIO_Init+0x290>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d05e      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f7c:	4a94      	ldr	r2, [pc, #592]	@ (80021d0 <HAL_GPIO_Init+0x290>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d875      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f82:	4a94      	ldr	r2, [pc, #592]	@ (80021d4 <HAL_GPIO_Init+0x294>)
 8001f84:	4293      	cmp	r3, r2
 8001f86:	d058      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f88:	4a92      	ldr	r2, [pc, #584]	@ (80021d4 <HAL_GPIO_Init+0x294>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d86f      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f8e:	4a92      	ldr	r2, [pc, #584]	@ (80021d8 <HAL_GPIO_Init+0x298>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d052      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001f94:	4a90      	ldr	r2, [pc, #576]	@ (80021d8 <HAL_GPIO_Init+0x298>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d869      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001f9a:	4a90      	ldr	r2, [pc, #576]	@ (80021dc <HAL_GPIO_Init+0x29c>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d04c      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fa0:	4a8e      	ldr	r2, [pc, #568]	@ (80021dc <HAL_GPIO_Init+0x29c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d863      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fa6:	4a8e      	ldr	r2, [pc, #568]	@ (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d046      	beq.n	800203a <HAL_GPIO_Init+0xfa>
 8001fac:	4a8c      	ldr	r2, [pc, #560]	@ (80021e0 <HAL_GPIO_Init+0x2a0>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d85d      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fb2:	2b12      	cmp	r3, #18
 8001fb4:	d82a      	bhi.n	800200c <HAL_GPIO_Init+0xcc>
 8001fb6:	2b12      	cmp	r3, #18
 8001fb8:	d859      	bhi.n	800206e <HAL_GPIO_Init+0x12e>
 8001fba:	a201      	add	r2, pc, #4	@ (adr r2, 8001fc0 <HAL_GPIO_Init+0x80>)
 8001fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc0:	0800203b 	.word	0x0800203b
 8001fc4:	08002015 	.word	0x08002015
 8001fc8:	08002027 	.word	0x08002027
 8001fcc:	08002069 	.word	0x08002069
 8001fd0:	0800206f 	.word	0x0800206f
 8001fd4:	0800206f 	.word	0x0800206f
 8001fd8:	0800206f 	.word	0x0800206f
 8001fdc:	0800206f 	.word	0x0800206f
 8001fe0:	0800206f 	.word	0x0800206f
 8001fe4:	0800206f 	.word	0x0800206f
 8001fe8:	0800206f 	.word	0x0800206f
 8001fec:	0800206f 	.word	0x0800206f
 8001ff0:	0800206f 	.word	0x0800206f
 8001ff4:	0800206f 	.word	0x0800206f
 8001ff8:	0800206f 	.word	0x0800206f
 8001ffc:	0800206f 	.word	0x0800206f
 8002000:	0800206f 	.word	0x0800206f
 8002004:	0800201d 	.word	0x0800201d
 8002008:	08002031 	.word	0x08002031
 800200c:	4a75      	ldr	r2, [pc, #468]	@ (80021e4 <HAL_GPIO_Init+0x2a4>)
 800200e:	4293      	cmp	r3, r2
 8002010:	d013      	beq.n	800203a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002012:	e02c      	b.n	800206e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	68db      	ldr	r3, [r3, #12]
 8002018:	623b      	str	r3, [r7, #32]
          break;
 800201a:	e029      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	68db      	ldr	r3, [r3, #12]
 8002020:	3304      	adds	r3, #4
 8002022:	623b      	str	r3, [r7, #32]
          break;
 8002024:	e024      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	3308      	adds	r3, #8
 800202c:	623b      	str	r3, [r7, #32]
          break;
 800202e:	e01f      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	330c      	adds	r3, #12
 8002036:	623b      	str	r3, [r7, #32]
          break;
 8002038:	e01a      	b.n	8002070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	2b00      	cmp	r3, #0
 8002040:	d102      	bne.n	8002048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002042:	2304      	movs	r3, #4
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e013      	b.n	8002070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	689b      	ldr	r3, [r3, #8]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002050:	2308      	movs	r3, #8
 8002052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	69fa      	ldr	r2, [r7, #28]
 8002058:	611a      	str	r2, [r3, #16]
          break;
 800205a:	e009      	b.n	8002070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800205c:	2308      	movs	r3, #8
 800205e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	69fa      	ldr	r2, [r7, #28]
 8002064:	615a      	str	r2, [r3, #20]
          break;
 8002066:	e003      	b.n	8002070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002068:	2300      	movs	r3, #0
 800206a:	623b      	str	r3, [r7, #32]
          break;
 800206c:	e000      	b.n	8002070 <HAL_GPIO_Init+0x130>
          break;
 800206e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002070:	69bb      	ldr	r3, [r7, #24]
 8002072:	2bff      	cmp	r3, #255	@ 0xff
 8002074:	d801      	bhi.n	800207a <HAL_GPIO_Init+0x13a>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	e001      	b.n	800207e <HAL_GPIO_Init+0x13e>
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	3304      	adds	r3, #4
 800207e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002080:	69bb      	ldr	r3, [r7, #24]
 8002082:	2bff      	cmp	r3, #255	@ 0xff
 8002084:	d802      	bhi.n	800208c <HAL_GPIO_Init+0x14c>
 8002086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	e002      	b.n	8002092 <HAL_GPIO_Init+0x152>
 800208c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800208e:	3b08      	subs	r3, #8
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	681a      	ldr	r2, [r3, #0]
 8002098:	210f      	movs	r1, #15
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	fa01 f303 	lsl.w	r3, r1, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	401a      	ands	r2, r3
 80020a4:	6a39      	ldr	r1, [r7, #32]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ac:	431a      	orrs	r2, r3
 80020ae:	697b      	ldr	r3, [r7, #20]
 80020b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	f000 80c1 	beq.w	8002242 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020c0:	4b49      	ldr	r3, [pc, #292]	@ (80021e8 <HAL_GPIO_Init+0x2a8>)
 80020c2:	699b      	ldr	r3, [r3, #24]
 80020c4:	4a48      	ldr	r2, [pc, #288]	@ (80021e8 <HAL_GPIO_Init+0x2a8>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6193      	str	r3, [r2, #24]
 80020cc:	4b46      	ldr	r3, [pc, #280]	@ (80021e8 <HAL_GPIO_Init+0x2a8>)
 80020ce:	699b      	ldr	r3, [r3, #24]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	60bb      	str	r3, [r7, #8]
 80020d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80020d8:	4a44      	ldr	r2, [pc, #272]	@ (80021ec <HAL_GPIO_Init+0x2ac>)
 80020da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020dc:	089b      	lsrs	r3, r3, #2
 80020de:	3302      	adds	r3, #2
 80020e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	68fa      	ldr	r2, [r7, #12]
 80020f8:	4013      	ands	r3, r2
 80020fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4a3c      	ldr	r2, [pc, #240]	@ (80021f0 <HAL_GPIO_Init+0x2b0>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d01f      	beq.n	8002144 <HAL_GPIO_Init+0x204>
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	4a3b      	ldr	r2, [pc, #236]	@ (80021f4 <HAL_GPIO_Init+0x2b4>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d019      	beq.n	8002140 <HAL_GPIO_Init+0x200>
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4a3a      	ldr	r2, [pc, #232]	@ (80021f8 <HAL_GPIO_Init+0x2b8>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d013      	beq.n	800213c <HAL_GPIO_Init+0x1fc>
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a39      	ldr	r2, [pc, #228]	@ (80021fc <HAL_GPIO_Init+0x2bc>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d00d      	beq.n	8002138 <HAL_GPIO_Init+0x1f8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a38      	ldr	r2, [pc, #224]	@ (8002200 <HAL_GPIO_Init+0x2c0>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d007      	beq.n	8002134 <HAL_GPIO_Init+0x1f4>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	4a37      	ldr	r2, [pc, #220]	@ (8002204 <HAL_GPIO_Init+0x2c4>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d101      	bne.n	8002130 <HAL_GPIO_Init+0x1f0>
 800212c:	2305      	movs	r3, #5
 800212e:	e00a      	b.n	8002146 <HAL_GPIO_Init+0x206>
 8002130:	2306      	movs	r3, #6
 8002132:	e008      	b.n	8002146 <HAL_GPIO_Init+0x206>
 8002134:	2304      	movs	r3, #4
 8002136:	e006      	b.n	8002146 <HAL_GPIO_Init+0x206>
 8002138:	2303      	movs	r3, #3
 800213a:	e004      	b.n	8002146 <HAL_GPIO_Init+0x206>
 800213c:	2302      	movs	r3, #2
 800213e:	e002      	b.n	8002146 <HAL_GPIO_Init+0x206>
 8002140:	2301      	movs	r3, #1
 8002142:	e000      	b.n	8002146 <HAL_GPIO_Init+0x206>
 8002144:	2300      	movs	r3, #0
 8002146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002148:	f002 0203 	and.w	r2, r2, #3
 800214c:	0092      	lsls	r2, r2, #2
 800214e:	4093      	lsls	r3, r2
 8002150:	68fa      	ldr	r2, [r7, #12]
 8002152:	4313      	orrs	r3, r2
 8002154:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002156:	4925      	ldr	r1, [pc, #148]	@ (80021ec <HAL_GPIO_Init+0x2ac>)
 8002158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800215a:	089b      	lsrs	r3, r3, #2
 800215c:	3302      	adds	r3, #2
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002170:	4b25      	ldr	r3, [pc, #148]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	4924      	ldr	r1, [pc, #144]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 8002176:	69bb      	ldr	r3, [r7, #24]
 8002178:	4313      	orrs	r3, r2
 800217a:	608b      	str	r3, [r1, #8]
 800217c:	e006      	b.n	800218c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800217e:	4b22      	ldr	r3, [pc, #136]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 8002180:	689a      	ldr	r2, [r3, #8]
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	43db      	mvns	r3, r3
 8002186:	4920      	ldr	r1, [pc, #128]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 8002188:	4013      	ands	r3, r2
 800218a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002194:	2b00      	cmp	r3, #0
 8002196:	d006      	beq.n	80021a6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 800219a:	68da      	ldr	r2, [r3, #12]
 800219c:	491a      	ldr	r1, [pc, #104]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 800219e:	69bb      	ldr	r3, [r7, #24]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	60cb      	str	r3, [r1, #12]
 80021a4:	e006      	b.n	80021b4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021a6:	4b18      	ldr	r3, [pc, #96]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 80021a8:	68da      	ldr	r2, [r3, #12]
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	43db      	mvns	r3, r3
 80021ae:	4916      	ldr	r1, [pc, #88]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d025      	beq.n	800220c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021c0:	4b11      	ldr	r3, [pc, #68]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4910      	ldr	r1, [pc, #64]	@ (8002208 <HAL_GPIO_Init+0x2c8>)
 80021c6:	69bb      	ldr	r3, [r7, #24]
 80021c8:	4313      	orrs	r3, r2
 80021ca:	604b      	str	r3, [r1, #4]
 80021cc:	e025      	b.n	800221a <HAL_GPIO_Init+0x2da>
 80021ce:	bf00      	nop
 80021d0:	10320000 	.word	0x10320000
 80021d4:	10310000 	.word	0x10310000
 80021d8:	10220000 	.word	0x10220000
 80021dc:	10210000 	.word	0x10210000
 80021e0:	10120000 	.word	0x10120000
 80021e4:	10110000 	.word	0x10110000
 80021e8:	40021000 	.word	0x40021000
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40010800 	.word	0x40010800
 80021f4:	40010c00 	.word	0x40010c00
 80021f8:	40011000 	.word	0x40011000
 80021fc:	40011400 	.word	0x40011400
 8002200:	40011800 	.word	0x40011800
 8002204:	40011c00 	.word	0x40011c00
 8002208:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800220c:	4b15      	ldr	r3, [pc, #84]	@ (8002264 <HAL_GPIO_Init+0x324>)
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	69bb      	ldr	r3, [r7, #24]
 8002212:	43db      	mvns	r3, r3
 8002214:	4913      	ldr	r1, [pc, #76]	@ (8002264 <HAL_GPIO_Init+0x324>)
 8002216:	4013      	ands	r3, r2
 8002218:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d006      	beq.n	8002234 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002226:	4b0f      	ldr	r3, [pc, #60]	@ (8002264 <HAL_GPIO_Init+0x324>)
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	490e      	ldr	r1, [pc, #56]	@ (8002264 <HAL_GPIO_Init+0x324>)
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	4313      	orrs	r3, r2
 8002230:	600b      	str	r3, [r1, #0]
 8002232:	e006      	b.n	8002242 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002234:	4b0b      	ldr	r3, [pc, #44]	@ (8002264 <HAL_GPIO_Init+0x324>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	43db      	mvns	r3, r3
 800223c:	4909      	ldr	r1, [pc, #36]	@ (8002264 <HAL_GPIO_Init+0x324>)
 800223e:	4013      	ands	r3, r2
 8002240:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002244:	3301      	adds	r3, #1
 8002246:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	681a      	ldr	r2, [r3, #0]
 800224c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800224e:	fa22 f303 	lsr.w	r3, r2, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	f47f ae7e 	bne.w	8001f54 <HAL_GPIO_Init+0x14>
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	372c      	adds	r7, #44	@ 0x2c
 800225e:	46bd      	mov	sp, r7
 8002260:	bc80      	pop	{r7}
 8002262:	4770      	bx	lr
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	460b      	mov	r3, r1
 8002272:	807b      	strh	r3, [r7, #2]
 8002274:	4613      	mov	r3, r2
 8002276:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002278:	787b      	ldrb	r3, [r7, #1]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227e:	887a      	ldrh	r2, [r7, #2]
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002284:	e003      	b.n	800228e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002286:	887b      	ldrh	r3, [r7, #2]
 8002288:	041a      	lsls	r2, r3, #16
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	611a      	str	r2, [r3, #16]
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	bc80      	pop	{r7}
 8002296:	4770      	bx	lr

08002298 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d101      	bne.n	80022aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e272      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0301 	and.w	r3, r3, #1
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	f000 8087 	beq.w	80023c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022b8:	4b92      	ldr	r3, [pc, #584]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f003 030c 	and.w	r3, r3, #12
 80022c0:	2b04      	cmp	r3, #4
 80022c2:	d00c      	beq.n	80022de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022c4:	4b8f      	ldr	r3, [pc, #572]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f003 030c 	and.w	r3, r3, #12
 80022cc:	2b08      	cmp	r3, #8
 80022ce:	d112      	bne.n	80022f6 <HAL_RCC_OscConfig+0x5e>
 80022d0:	4b8c      	ldr	r3, [pc, #560]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022dc:	d10b      	bne.n	80022f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	4b89      	ldr	r3, [pc, #548]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d06c      	beq.n	80023c4 <HAL_RCC_OscConfig+0x12c>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d168      	bne.n	80023c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e24c      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022fe:	d106      	bne.n	800230e <HAL_RCC_OscConfig+0x76>
 8002300:	4b80      	ldr	r3, [pc, #512]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a7f      	ldr	r2, [pc, #508]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002306:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800230a:	6013      	str	r3, [r2, #0]
 800230c:	e02e      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d10c      	bne.n	8002330 <HAL_RCC_OscConfig+0x98>
 8002316:	4b7b      	ldr	r3, [pc, #492]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4a7a      	ldr	r2, [pc, #488]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800231c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002320:	6013      	str	r3, [r2, #0]
 8002322:	4b78      	ldr	r3, [pc, #480]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	4a77      	ldr	r2, [pc, #476]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002328:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800232c:	6013      	str	r3, [r2, #0]
 800232e:	e01d      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002338:	d10c      	bne.n	8002354 <HAL_RCC_OscConfig+0xbc>
 800233a:	4b72      	ldr	r3, [pc, #456]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a71      	ldr	r2, [pc, #452]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002344:	6013      	str	r3, [r2, #0]
 8002346:	4b6f      	ldr	r3, [pc, #444]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a6e      	ldr	r2, [pc, #440]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800234c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002350:	6013      	str	r3, [r2, #0]
 8002352:	e00b      	b.n	800236c <HAL_RCC_OscConfig+0xd4>
 8002354:	4b6b      	ldr	r3, [pc, #428]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a6a      	ldr	r2, [pc, #424]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800235a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800235e:	6013      	str	r3, [r2, #0]
 8002360:	4b68      	ldr	r3, [pc, #416]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a67      	ldr	r2, [pc, #412]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800236a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d013      	beq.n	800239c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fb94 	bl	8001aa0 <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800237c:	f7ff fb90 	bl	8001aa0 <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b64      	cmp	r3, #100	@ 0x64
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e200      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238e:	4b5d      	ldr	r3, [pc, #372]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d0f0      	beq.n	800237c <HAL_RCC_OscConfig+0xe4>
 800239a:	e014      	b.n	80023c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800239c:	f7ff fb80 	bl	8001aa0 <HAL_GetTick>
 80023a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a2:	e008      	b.n	80023b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a4:	f7ff fb7c 	bl	8001aa0 <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	2b64      	cmp	r3, #100	@ 0x64
 80023b0:	d901      	bls.n	80023b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023b2:	2303      	movs	r3, #3
 80023b4:	e1ec      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023b6:	4b53      	ldr	r3, [pc, #332]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d1f0      	bne.n	80023a4 <HAL_RCC_OscConfig+0x10c>
 80023c2:	e000      	b.n	80023c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d063      	beq.n	800249a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d2:	4b4c      	ldr	r3, [pc, #304]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	f003 030c 	and.w	r3, r3, #12
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00b      	beq.n	80023f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80023de:	4b49      	ldr	r3, [pc, #292]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f003 030c 	and.w	r3, r3, #12
 80023e6:	2b08      	cmp	r3, #8
 80023e8:	d11c      	bne.n	8002424 <HAL_RCC_OscConfig+0x18c>
 80023ea:	4b46      	ldr	r3, [pc, #280]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d116      	bne.n	8002424 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023f6:	4b43      	ldr	r3, [pc, #268]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d005      	beq.n	800240e <HAL_RCC_OscConfig+0x176>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	2b01      	cmp	r3, #1
 8002408:	d001      	beq.n	800240e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e1c0      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800240e:	4b3d      	ldr	r3, [pc, #244]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	695b      	ldr	r3, [r3, #20]
 800241a:	00db      	lsls	r3, r3, #3
 800241c:	4939      	ldr	r1, [pc, #228]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800241e:	4313      	orrs	r3, r2
 8002420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	e03a      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	691b      	ldr	r3, [r3, #16]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d020      	beq.n	800246e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800242c:	4b36      	ldr	r3, [pc, #216]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 800242e:	2201      	movs	r2, #1
 8002430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002432:	f7ff fb35 	bl	8001aa0 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002438:	e008      	b.n	800244c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800243a:	f7ff fb31 	bl	8001aa0 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	2b02      	cmp	r3, #2
 8002446:	d901      	bls.n	800244c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e1a1      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800244c:	4b2d      	ldr	r3, [pc, #180]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0302 	and.w	r3, r3, #2
 8002454:	2b00      	cmp	r3, #0
 8002456:	d0f0      	beq.n	800243a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002458:	4b2a      	ldr	r3, [pc, #168]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	695b      	ldr	r3, [r3, #20]
 8002464:	00db      	lsls	r3, r3, #3
 8002466:	4927      	ldr	r1, [pc, #156]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002468:	4313      	orrs	r3, r2
 800246a:	600b      	str	r3, [r1, #0]
 800246c:	e015      	b.n	800249a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800246e:	4b26      	ldr	r3, [pc, #152]	@ (8002508 <HAL_RCC_OscConfig+0x270>)
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002474:	f7ff fb14 	bl	8001aa0 <HAL_GetTick>
 8002478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800247a:	e008      	b.n	800248e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800247c:	f7ff fb10 	bl	8001aa0 <HAL_GetTick>
 8002480:	4602      	mov	r2, r0
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	1ad3      	subs	r3, r2, r3
 8002486:	2b02      	cmp	r3, #2
 8002488:	d901      	bls.n	800248e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800248a:	2303      	movs	r3, #3
 800248c:	e180      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248e:	4b1d      	ldr	r3, [pc, #116]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0302 	and.w	r3, r3, #2
 8002496:	2b00      	cmp	r3, #0
 8002498:	d1f0      	bne.n	800247c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f003 0308 	and.w	r3, r3, #8
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d03a      	beq.n	800251c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	699b      	ldr	r3, [r3, #24]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d019      	beq.n	80024e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024ae:	4b17      	ldr	r3, [pc, #92]	@ (800250c <HAL_RCC_OscConfig+0x274>)
 80024b0:	2201      	movs	r2, #1
 80024b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024b4:	f7ff faf4 	bl	8001aa0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024bc:	f7ff faf0 	bl	8001aa0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e160      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002504 <HAL_RCC_OscConfig+0x26c>)
 80024d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80024da:	2001      	movs	r0, #1
 80024dc:	f000 fafe 	bl	8002adc <RCC_Delay>
 80024e0:	e01c      	b.n	800251c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024e2:	4b0a      	ldr	r3, [pc, #40]	@ (800250c <HAL_RCC_OscConfig+0x274>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e8:	f7ff fada 	bl	8001aa0 <HAL_GetTick>
 80024ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ee:	e00f      	b.n	8002510 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024f0:	f7ff fad6 	bl	8001aa0 <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d908      	bls.n	8002510 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024fe:	2303      	movs	r3, #3
 8002500:	e146      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000
 8002508:	42420000 	.word	0x42420000
 800250c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002510:	4b92      	ldr	r3, [pc, #584]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002512:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002514:	f003 0302 	and.w	r3, r3, #2
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1e9      	bne.n	80024f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	f000 80a6 	beq.w	8002676 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2300      	movs	r3, #0
 800252c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800252e:	4b8b      	ldr	r3, [pc, #556]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10d      	bne.n	8002556 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800253a:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 800253c:	69db      	ldr	r3, [r3, #28]
 800253e:	4a87      	ldr	r2, [pc, #540]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002540:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002544:	61d3      	str	r3, [r2, #28]
 8002546:	4b85      	ldr	r3, [pc, #532]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254e:	60bb      	str	r3, [r7, #8]
 8002550:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002552:	2301      	movs	r3, #1
 8002554:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	4b82      	ldr	r3, [pc, #520]	@ (8002760 <HAL_RCC_OscConfig+0x4c8>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800255e:	2b00      	cmp	r3, #0
 8002560:	d118      	bne.n	8002594 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002562:	4b7f      	ldr	r3, [pc, #508]	@ (8002760 <HAL_RCC_OscConfig+0x4c8>)
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a7e      	ldr	r2, [pc, #504]	@ (8002760 <HAL_RCC_OscConfig+0x4c8>)
 8002568:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800256c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800256e:	f7ff fa97 	bl	8001aa0 <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002576:	f7ff fa93 	bl	8001aa0 <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b64      	cmp	r3, #100	@ 0x64
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e103      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002588:	4b75      	ldr	r3, [pc, #468]	@ (8002760 <HAL_RCC_OscConfig+0x4c8>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	2b01      	cmp	r3, #1
 800259a:	d106      	bne.n	80025aa <HAL_RCC_OscConfig+0x312>
 800259c:	4b6f      	ldr	r3, [pc, #444]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 800259e:	6a1b      	ldr	r3, [r3, #32]
 80025a0:	4a6e      	ldr	r2, [pc, #440]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6213      	str	r3, [r2, #32]
 80025a8:	e02d      	b.n	8002606 <HAL_RCC_OscConfig+0x36e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d10c      	bne.n	80025cc <HAL_RCC_OscConfig+0x334>
 80025b2:	4b6a      	ldr	r3, [pc, #424]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a69      	ldr	r2, [pc, #420]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	6213      	str	r3, [r2, #32]
 80025be:	4b67      	ldr	r3, [pc, #412]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a66      	ldr	r2, [pc, #408]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025c4:	f023 0304 	bic.w	r3, r3, #4
 80025c8:	6213      	str	r3, [r2, #32]
 80025ca:	e01c      	b.n	8002606 <HAL_RCC_OscConfig+0x36e>
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d10c      	bne.n	80025ee <HAL_RCC_OscConfig+0x356>
 80025d4:	4b61      	ldr	r3, [pc, #388]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025d6:	6a1b      	ldr	r3, [r3, #32]
 80025d8:	4a60      	ldr	r2, [pc, #384]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025da:	f043 0304 	orr.w	r3, r3, #4
 80025de:	6213      	str	r3, [r2, #32]
 80025e0:	4b5e      	ldr	r3, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025e2:	6a1b      	ldr	r3, [r3, #32]
 80025e4:	4a5d      	ldr	r2, [pc, #372]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025e6:	f043 0301 	orr.w	r3, r3, #1
 80025ea:	6213      	str	r3, [r2, #32]
 80025ec:	e00b      	b.n	8002606 <HAL_RCC_OscConfig+0x36e>
 80025ee:	4b5b      	ldr	r3, [pc, #364]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	6a1b      	ldr	r3, [r3, #32]
 80025f2:	4a5a      	ldr	r2, [pc, #360]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025f4:	f023 0301 	bic.w	r3, r3, #1
 80025f8:	6213      	str	r3, [r2, #32]
 80025fa:	4b58      	ldr	r3, [pc, #352]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	4a57      	ldr	r2, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002600:	f023 0304 	bic.w	r3, r3, #4
 8002604:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68db      	ldr	r3, [r3, #12]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d015      	beq.n	800263a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800260e:	f7ff fa47 	bl	8001aa0 <HAL_GetTick>
 8002612:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	e00a      	b.n	800262c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002616:	f7ff fa43 	bl	8001aa0 <HAL_GetTick>
 800261a:	4602      	mov	r2, r0
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	1ad3      	subs	r3, r2, r3
 8002620:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002624:	4293      	cmp	r3, r2
 8002626:	d901      	bls.n	800262c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e0b1      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800262c:	4b4b      	ldr	r3, [pc, #300]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 800262e:	6a1b      	ldr	r3, [r3, #32]
 8002630:	f003 0302 	and.w	r3, r3, #2
 8002634:	2b00      	cmp	r3, #0
 8002636:	d0ee      	beq.n	8002616 <HAL_RCC_OscConfig+0x37e>
 8002638:	e014      	b.n	8002664 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff fa31 	bl	8001aa0 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7ff fa2d 	bl	8001aa0 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e09b      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002658:	4b40      	ldr	r3, [pc, #256]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d1ee      	bne.n	8002642 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002664:	7dfb      	ldrb	r3, [r7, #23]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d105      	bne.n	8002676 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800266a:	4b3c      	ldr	r3, [pc, #240]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	4a3b      	ldr	r2, [pc, #236]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002670:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002674:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	69db      	ldr	r3, [r3, #28]
 800267a:	2b00      	cmp	r3, #0
 800267c:	f000 8087 	beq.w	800278e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002680:	4b36      	ldr	r3, [pc, #216]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f003 030c 	and.w	r3, r3, #12
 8002688:	2b08      	cmp	r3, #8
 800268a:	d061      	beq.n	8002750 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	69db      	ldr	r3, [r3, #28]
 8002690:	2b02      	cmp	r3, #2
 8002692:	d146      	bne.n	8002722 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002694:	4b33      	ldr	r3, [pc, #204]	@ (8002764 <HAL_RCC_OscConfig+0x4cc>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800269a:	f7ff fa01 	bl	8001aa0 <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026a0:	e008      	b.n	80026b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026a2:	f7ff f9fd 	bl	8001aa0 <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d901      	bls.n	80026b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e06d      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026b4:	4b29      	ldr	r3, [pc, #164]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d1f0      	bne.n	80026a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6a1b      	ldr	r3, [r3, #32]
 80026c4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026c8:	d108      	bne.n	80026dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026ca:	4b24      	ldr	r3, [pc, #144]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	4921      	ldr	r1, [pc, #132]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	4313      	orrs	r3, r2
 80026da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026dc:	4b1f      	ldr	r3, [pc, #124]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6a19      	ldr	r1, [r3, #32]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026ec:	430b      	orrs	r3, r1
 80026ee:	491b      	ldr	r1, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x4cc>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7ff f9d1 	bl	8001aa0 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff f9cd 	bl	8001aa0 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e03d      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x46a>
 8002720:	e035      	b.n	800278e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x4cc>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff f9ba 	bl	8001aa0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff f9b6 	bl	8001aa0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e026      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x4c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x498>
 800274e:	e01e      	b.n	800278e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	69db      	ldr	r3, [r3, #28]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e019      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
 800275c:	40021000 	.word	0x40021000
 8002760:	40007000 	.word	0x40007000
 8002764:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002768:	4b0b      	ldr	r3, [pc, #44]	@ (8002798 <HAL_RCC_OscConfig+0x500>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	429a      	cmp	r2, r3
 800277a:	d106      	bne.n	800278a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002786:	429a      	cmp	r2, r3
 8002788:	d001      	beq.n	800278e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	e000      	b.n	8002790 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800278e:	2300      	movs	r3, #0
}
 8002790:	4618      	mov	r0, r3
 8002792:	3718      	adds	r7, #24
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	40021000 	.word	0x40021000

0800279c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b084      	sub	sp, #16
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d101      	bne.n	80027b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0d0      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027b0:	4b6a      	ldr	r3, [pc, #424]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	683a      	ldr	r2, [r7, #0]
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d910      	bls.n	80027e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027be:	4b67      	ldr	r3, [pc, #412]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f023 0207 	bic.w	r2, r3, #7
 80027c6:	4965      	ldr	r1, [pc, #404]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027ce:	4b63      	ldr	r3, [pc, #396]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0307 	and.w	r3, r3, #7
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	429a      	cmp	r2, r3
 80027da:	d001      	beq.n	80027e0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e0b8      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d020      	beq.n	800282e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0304 	and.w	r3, r3, #4
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d005      	beq.n	8002804 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027f8:	4b59      	ldr	r3, [pc, #356]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	4a58      	ldr	r2, [pc, #352]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 80027fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002802:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d005      	beq.n	800281c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002810:	4b53      	ldr	r3, [pc, #332]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	4a52      	ldr	r2, [pc, #328]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002816:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800281a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800281c:	4b50      	ldr	r3, [pc, #320]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	494d      	ldr	r1, [pc, #308]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	4313      	orrs	r3, r2
 800282c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 0301 	and.w	r3, r3, #1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d040      	beq.n	80028bc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d107      	bne.n	8002852 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b47      	ldr	r3, [pc, #284]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d115      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e07f      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b02      	cmp	r3, #2
 8002858:	d107      	bne.n	800286a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800285a:	4b41      	ldr	r3, [pc, #260]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002862:	2b00      	cmp	r3, #0
 8002864:	d109      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e073      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800286a:	4b3d      	ldr	r3, [pc, #244]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0302 	and.w	r3, r3, #2
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e06b      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800287a:	4b39      	ldr	r3, [pc, #228]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f023 0203 	bic.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	4936      	ldr	r1, [pc, #216]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	4313      	orrs	r3, r2
 800288a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800288c:	f7ff f908 	bl	8001aa0 <HAL_GetTick>
 8002890:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002892:	e00a      	b.n	80028aa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002894:	f7ff f904 	bl	8001aa0 <HAL_GetTick>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	1ad3      	subs	r3, r2, r3
 800289e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e053      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028aa:	4b2d      	ldr	r3, [pc, #180]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 020c 	and.w	r2, r3, #12
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d1eb      	bne.n	8002894 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028bc:	4b27      	ldr	r3, [pc, #156]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0307 	and.w	r3, r3, #7
 80028c4:	683a      	ldr	r2, [r7, #0]
 80028c6:	429a      	cmp	r2, r3
 80028c8:	d210      	bcs.n	80028ec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ca:	4b24      	ldr	r3, [pc, #144]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f023 0207 	bic.w	r2, r3, #7
 80028d2:	4922      	ldr	r1, [pc, #136]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028da:	4b20      	ldr	r3, [pc, #128]	@ (800295c <HAL_RCC_ClockConfig+0x1c0>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	683a      	ldr	r2, [r7, #0]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d001      	beq.n	80028ec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e032      	b.n	8002952 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0304 	and.w	r3, r3, #4
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d008      	beq.n	800290a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f8:	4b19      	ldr	r3, [pc, #100]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	4916      	ldr	r1, [pc, #88]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	4313      	orrs	r3, r2
 8002908:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f003 0308 	and.w	r3, r3, #8
 8002912:	2b00      	cmp	r3, #0
 8002914:	d009      	beq.n	800292a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002916:	4b12      	ldr	r3, [pc, #72]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	691b      	ldr	r3, [r3, #16]
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	490e      	ldr	r1, [pc, #56]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800292a:	f000 f821 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 800292e:	4602      	mov	r2, r0
 8002930:	4b0b      	ldr	r3, [pc, #44]	@ (8002960 <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	091b      	lsrs	r3, r3, #4
 8002936:	f003 030f 	and.w	r3, r3, #15
 800293a:	490a      	ldr	r1, [pc, #40]	@ (8002964 <HAL_RCC_ClockConfig+0x1c8>)
 800293c:	5ccb      	ldrb	r3, [r1, r3]
 800293e:	fa22 f303 	lsr.w	r3, r2, r3
 8002942:	4a09      	ldr	r2, [pc, #36]	@ (8002968 <HAL_RCC_ClockConfig+0x1cc>)
 8002944:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <HAL_RCC_ClockConfig+0x1d0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4618      	mov	r0, r3
 800294c:	f7fe fee6 	bl	800171c <HAL_InitTick>

  return HAL_OK;
 8002950:	2300      	movs	r3, #0
}
 8002952:	4618      	mov	r0, r3
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	40022000 	.word	0x40022000
 8002960:	40021000 	.word	0x40021000
 8002964:	0800baa0 	.word	0x0800baa0
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002976:	2300      	movs	r3, #0
 8002978:	60fb      	str	r3, [r7, #12]
 800297a:	2300      	movs	r3, #0
 800297c:	60bb      	str	r3, [r7, #8]
 800297e:	2300      	movs	r3, #0
 8002980:	617b      	str	r3, [r7, #20]
 8002982:	2300      	movs	r3, #0
 8002984:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x94>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f003 030c 	and.w	r3, r3, #12
 8002996:	2b04      	cmp	r3, #4
 8002998:	d002      	beq.n	80029a0 <HAL_RCC_GetSysClockFreq+0x30>
 800299a:	2b08      	cmp	r3, #8
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_GetSysClockFreq+0x36>
 800299e:	e027      	b.n	80029f0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029a0:	4b19      	ldr	r3, [pc, #100]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80029a2:	613b      	str	r3, [r7, #16]
      break;
 80029a4:	e027      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	0c9b      	lsrs	r3, r3, #18
 80029aa:	f003 030f 	and.w	r3, r3, #15
 80029ae:	4a17      	ldr	r2, [pc, #92]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x9c>)
 80029b0:	5cd3      	ldrb	r3, [r2, r3]
 80029b2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d010      	beq.n	80029e0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029be:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x94>)
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	0c5b      	lsrs	r3, r3, #17
 80029c4:	f003 0301 	and.w	r3, r3, #1
 80029c8:	4a11      	ldr	r2, [pc, #68]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0xa0>)
 80029ca:	5cd3      	ldrb	r3, [r2, r3]
 80029cc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80029d2:	fb03 f202 	mul.w	r2, r3, r2
 80029d6:	68bb      	ldr	r3, [r7, #8]
 80029d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
 80029de:	e004      	b.n	80029ea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a0c      	ldr	r2, [pc, #48]	@ (8002a14 <HAL_RCC_GetSysClockFreq+0xa4>)
 80029e4:	fb02 f303 	mul.w	r3, r2, r3
 80029e8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	613b      	str	r3, [r7, #16]
      break;
 80029ee:	e002      	b.n	80029f6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029f0:	4b05      	ldr	r3, [pc, #20]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x98>)
 80029f2:	613b      	str	r3, [r7, #16]
      break;
 80029f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029f6:	693b      	ldr	r3, [r7, #16]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bc80      	pop	{r7}
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	40021000 	.word	0x40021000
 8002a08:	007a1200 	.word	0x007a1200
 8002a0c:	0800bab8 	.word	0x0800bab8
 8002a10:	0800bac8 	.word	0x0800bac8
 8002a14:	003d0900 	.word	0x003d0900

08002a18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a1c:	4b02      	ldr	r3, [pc, #8]	@ (8002a28 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bc80      	pop	{r7}
 8002a26:	4770      	bx	lr
 8002a28:	20000000 	.word	0x20000000

08002a2c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a30:	f7ff fff2 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a34:	4602      	mov	r2, r0
 8002a36:	4b05      	ldr	r3, [pc, #20]	@ (8002a4c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	0a1b      	lsrs	r3, r3, #8
 8002a3c:	f003 0307 	and.w	r3, r3, #7
 8002a40:	4903      	ldr	r1, [pc, #12]	@ (8002a50 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a42:	5ccb      	ldrb	r3, [r1, r3]
 8002a44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	0800bab0 	.word	0x0800bab0

08002a54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a58:	f7ff ffde 	bl	8002a18 <HAL_RCC_GetHCLKFreq>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	4b05      	ldr	r3, [pc, #20]	@ (8002a74 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	0adb      	lsrs	r3, r3, #11
 8002a64:	f003 0307 	and.w	r3, r3, #7
 8002a68:	4903      	ldr	r1, [pc, #12]	@ (8002a78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a6a:	5ccb      	ldrb	r3, [r1, r3]
 8002a6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	40021000 	.word	0x40021000
 8002a78:	0800bab0 	.word	0x0800bab0

08002a7c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b083      	sub	sp, #12
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	220f      	movs	r2, #15
 8002a8a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a8c:	4b11      	ldr	r3, [pc, #68]	@ (8002ad4 <HAL_RCC_GetClockConfig+0x58>)
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0203 	and.w	r2, r3, #3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_RCC_GetClockConfig+0x58>)
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_RCC_GetClockConfig+0x58>)
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_RCC_GetClockConfig+0x58>)
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	08db      	lsrs	r3, r3, #3
 8002ab6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002abe:	4b06      	ldr	r3, [pc, #24]	@ (8002ad8 <HAL_RCC_GetClockConfig+0x5c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0207 	and.w	r2, r3, #7
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr
 8002ad4:	40021000 	.word	0x40021000
 8002ad8:	40022000 	.word	0x40022000

08002adc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b085      	sub	sp, #20
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8002b10 <RCC_Delay+0x34>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b14 <RCC_Delay+0x38>)
 8002aea:	fba2 2303 	umull	r2, r3, r2, r3
 8002aee:	0a5b      	lsrs	r3, r3, #9
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	fb02 f303 	mul.w	r3, r2, r3
 8002af6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002af8:	bf00      	nop
  }
  while (Delay --);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	1e5a      	subs	r2, r3, #1
 8002afe:	60fa      	str	r2, [r7, #12]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d1f9      	bne.n	8002af8 <RCC_Delay+0x1c>
}
 8002b04:	bf00      	nop
 8002b06:	bf00      	nop
 8002b08:	3714      	adds	r7, #20
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000000 	.word	0x20000000
 8002b14:	10624dd3 	.word	0x10624dd3

08002b18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b082      	sub	sp, #8
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d101      	bne.n	8002b2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e041      	b.n	8002bae <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d106      	bne.n	8002b44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b3e:	6878      	ldr	r0, [r7, #4]
 8002b40:	f000 f839 	bl	8002bb6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2202      	movs	r2, #2
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681a      	ldr	r2, [r3, #0]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	3304      	adds	r3, #4
 8002b54:	4619      	mov	r1, r3
 8002b56:	4610      	mov	r0, r2
 8002b58:	f000 f9c2 	bl	8002ee0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2201      	movs	r2, #1
 8002b60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2201      	movs	r2, #1
 8002b78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2201      	movs	r2, #1
 8002b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2201      	movs	r2, #1
 8002b88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2201      	movs	r2, #1
 8002b90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2201      	movs	r2, #1
 8002b98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002bb6:	b480      	push	{r7}
 8002bb8:	b083      	sub	sp, #12
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bbe:	bf00      	nop
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bc80      	pop	{r7}
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b085      	sub	sp, #20
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bd6:	b2db      	uxtb	r3, r3
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d001      	beq.n	8002be0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e044      	b.n	8002c6a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2202      	movs	r2, #2
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68da      	ldr	r2, [r3, #12]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f042 0201 	orr.w	r2, r2, #1
 8002bf6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_TIM_Base_Start_IT+0xac>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d018      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x6c>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a1c      	ldr	r2, [pc, #112]	@ (8002c78 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x6c>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c14:	d00e      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x6c>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a18      	ldr	r2, [pc, #96]	@ (8002c7c <HAL_TIM_Base_Start_IT+0xb4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x6c>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x6c>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d111      	bne.n	8002c58 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 0307 	and.w	r3, r3, #7
 8002c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d010      	beq.n	8002c68 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f042 0201 	orr.w	r2, r2, #1
 8002c54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c56:	e007      	b.n	8002c68 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f042 0201 	orr.w	r2, r2, #1
 8002c66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012c00 	.word	0x40012c00
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40000400 	.word	0x40000400
 8002c80:	40000800 	.word	0x40000800
 8002c84:	40000c00 	.word	0x40000c00

08002c88 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b082      	sub	sp, #8
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	f003 0302 	and.w	r3, r3, #2
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d122      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d11b      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0202 	mvn.w	r2, #2
 8002cb4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2201      	movs	r2, #1
 8002cba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	f003 0303 	and.w	r3, r3, #3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d003      	beq.n	8002cd2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 f8ed 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002cd0:	e005      	b.n	8002cde <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f8e0 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f000 f8ef 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0304 	and.w	r3, r3, #4
 8002cee:	2b04      	cmp	r3, #4
 8002cf0:	d122      	bne.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0304 	and.w	r3, r3, #4
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d11b      	bne.n	8002d38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0204 	mvn.w	r2, #4
 8002d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	699b      	ldr	r3, [r3, #24]
 8002d16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	f000 f8c3 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002d24:	e005      	b.n	8002d32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d26:	6878      	ldr	r0, [r7, #4]
 8002d28:	f000 f8b6 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d2c:	6878      	ldr	r0, [r7, #4]
 8002d2e:	f000 f8c5 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	691b      	ldr	r3, [r3, #16]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b08      	cmp	r3, #8
 8002d44:	d122      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	68db      	ldr	r3, [r3, #12]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d11b      	bne.n	8002d8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f06f 0208 	mvn.w	r2, #8
 8002d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2204      	movs	r2, #4
 8002d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	69db      	ldr	r3, [r3, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d003      	beq.n	8002d7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d72:	6878      	ldr	r0, [r7, #4]
 8002d74:	f000 f899 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002d78:	e005      	b.n	8002d86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f000 f88c 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	f000 f89b 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	691b      	ldr	r3, [r3, #16]
 8002d92:	f003 0310 	and.w	r3, r3, #16
 8002d96:	2b10      	cmp	r3, #16
 8002d98:	d122      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b10      	cmp	r3, #16
 8002da6:	d11b      	bne.n	8002de0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f06f 0210 	mvn.w	r2, #16
 8002db0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2208      	movs	r2, #8
 8002db6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	69db      	ldr	r3, [r3, #28]
 8002dbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d003      	beq.n	8002dce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f000 f86f 	bl	8002eaa <HAL_TIM_IC_CaptureCallback>
 8002dcc:	e005      	b.n	8002dda <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f862 	bl	8002e98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dd4:	6878      	ldr	r0, [r7, #4]
 8002dd6:	f000 f871 	bl	8002ebc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d10e      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	f003 0301 	and.w	r3, r3, #1
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d107      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f06f 0201 	mvn.w	r2, #1
 8002e04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7fe f930 	bl	800106c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e16:	2b80      	cmp	r3, #128	@ 0x80
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e24:	2b80      	cmp	r3, #128	@ 0x80
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f000 f8d7 	bl	8002fe6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e42:	2b40      	cmp	r3, #64	@ 0x40
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e50:	2b40      	cmp	r3, #64	@ 0x40
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f835 	bl	8002ece <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0320 	and.w	r3, r3, #32
 8002e6e:	2b20      	cmp	r3, #32
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0220 	mvn.w	r2, #32
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8a2 	bl	8002fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}

08002e98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b083      	sub	sp, #12
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ea0:	bf00      	nop
 8002ea2:	370c      	adds	r7, #12
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bc80      	pop	{r7}
 8002ea8:	4770      	bx	lr

08002eaa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002eb2:	bf00      	nop
 8002eb4:	370c      	adds	r7, #12
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bc80      	pop	{r7}
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bc80      	pop	{r7}
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bc80      	pop	{r7}
 8002ede:	4770      	bx	lr

08002ee0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
 8002ee8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a33      	ldr	r2, [pc, #204]	@ (8002fc0 <TIM_Base_SetConfig+0xe0>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d013      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a32      	ldr	r2, [pc, #200]	@ (8002fc4 <TIM_Base_SetConfig+0xe4>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00f      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f06:	d00b      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fc8 <TIM_Base_SetConfig+0xe8>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d007      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a2e      	ldr	r2, [pc, #184]	@ (8002fcc <TIM_Base_SetConfig+0xec>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d003      	beq.n	8002f20 <TIM_Base_SetConfig+0x40>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a2d      	ldr	r2, [pc, #180]	@ (8002fd0 <TIM_Base_SetConfig+0xf0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d108      	bne.n	8002f32 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	685b      	ldr	r3, [r3, #4]
 8002f2c:	68fa      	ldr	r2, [r7, #12]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a22      	ldr	r2, [pc, #136]	@ (8002fc0 <TIM_Base_SetConfig+0xe0>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d013      	beq.n	8002f62 <TIM_Base_SetConfig+0x82>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a21      	ldr	r2, [pc, #132]	@ (8002fc4 <TIM_Base_SetConfig+0xe4>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d00f      	beq.n	8002f62 <TIM_Base_SetConfig+0x82>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f48:	d00b      	beq.n	8002f62 <TIM_Base_SetConfig+0x82>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a1e      	ldr	r2, [pc, #120]	@ (8002fc8 <TIM_Base_SetConfig+0xe8>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d007      	beq.n	8002f62 <TIM_Base_SetConfig+0x82>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a1d      	ldr	r2, [pc, #116]	@ (8002fcc <TIM_Base_SetConfig+0xec>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d003      	beq.n	8002f62 <TIM_Base_SetConfig+0x82>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1c      	ldr	r2, [pc, #112]	@ (8002fd0 <TIM_Base_SetConfig+0xf0>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d108      	bne.n	8002f74 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	68fa      	ldr	r2, [r7, #12]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	695b      	ldr	r3, [r3, #20]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68fa      	ldr	r2, [r7, #12]
 8002f86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	689a      	ldr	r2, [r3, #8]
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a09      	ldr	r2, [pc, #36]	@ (8002fc0 <TIM_Base_SetConfig+0xe0>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0xc8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a08      	ldr	r2, [pc, #32]	@ (8002fc4 <TIM_Base_SetConfig+0xe4>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d103      	bne.n	8002fb0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bc80      	pop	{r7}
 8002fbe:	4770      	bx	lr
 8002fc0:	40012c00 	.word	0x40012c00
 8002fc4:	40013400 	.word	0x40013400
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00

08002fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bc80      	pop	{r7}
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr

08002ff8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d101      	bne.n	800300a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	e042      	b.n	8003090 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003010:	b2db      	uxtb	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fe fb28 	bl	8001674 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	@ 0x24
 8003028:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68da      	ldr	r2, [r3, #12]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800303a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 fd3f 	bl	8003ac0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	691a      	ldr	r2, [r3, #16]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003050:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695a      	ldr	r2, [r3, #20]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003060:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68da      	ldr	r2, [r3, #12]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003070:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2200      	movs	r2, #0
 8003076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2220      	movs	r2, #32
 800307c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2220      	movs	r2, #32
 8003084:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800308e:	2300      	movs	r3, #0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003098:	b480      	push	{r7}
 800309a:	b085      	sub	sp, #20
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	4613      	mov	r3, r2
 80030a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b20      	cmp	r3, #32
 80030b0:	d121      	bne.n	80030f6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Transmit_IT+0x26>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e01a      	b.n	80030f8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	88fa      	ldrh	r2, [r7, #6]
 80030d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	2200      	movs	r2, #0
 80030d8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2221      	movs	r2, #33	@ 0x21
 80030de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80030f0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b08c      	sub	sp, #48	@ 0x30
 8003106:	af00      	add	r7, sp, #0
 8003108:	60f8      	str	r0, [r7, #12]
 800310a:	60b9      	str	r1, [r7, #8]
 800310c:	4613      	mov	r3, r2
 800310e:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b20      	cmp	r3, #32
 800311a:	d14a      	bne.n	80031b2 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8003122:	88fb      	ldrh	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e043      	b.n	80031b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2201      	movs	r2, #1
 8003130:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	2200      	movs	r2, #0
 8003136:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003138:	88fb      	ldrh	r3, [r7, #6]
 800313a:	461a      	mov	r2, r3
 800313c:	68b9      	ldr	r1, [r7, #8]
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fae9 	bl	8003716 <UART_Start_Receive_IT>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800314a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800314e:	2b00      	cmp	r3, #0
 8003150:	d12c      	bne.n	80031ac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003156:	2b01      	cmp	r3, #1
 8003158:	d125      	bne.n	80031a6 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 800315a:	2300      	movs	r3, #0
 800315c:	613b      	str	r3, [r7, #16]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	613b      	str	r3, [r7, #16]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	613b      	str	r3, [r7, #16]
 800316e:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	330c      	adds	r3, #12
 8003176:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003178:	69bb      	ldr	r3, [r7, #24]
 800317a:	e853 3f00 	ldrex	r3, [r3]
 800317e:	617b      	str	r3, [r7, #20]
   return(result);
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f043 0310 	orr.w	r3, r3, #16
 8003186:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	330c      	adds	r3, #12
 800318e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003190:	627a      	str	r2, [r7, #36]	@ 0x24
 8003192:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003194:	6a39      	ldr	r1, [r7, #32]
 8003196:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003198:	e841 2300 	strex	r3, r2, [r1]
 800319c:	61fb      	str	r3, [r7, #28]
   return(result);
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d1e5      	bne.n	8003170 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80031a4:	e002      	b.n	80031ac <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80031ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031b0:	e000      	b.n	80031b4 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80031b2:	2302      	movs	r3, #2
  }
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3730      	adds	r7, #48	@ 0x30
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}

080031bc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b0ba      	sub	sp, #232	@ 0xe8
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80031e8:	2300      	movs	r3, #0
 80031ea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80031ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80031f2:	f003 030f 	and.w	r3, r3, #15
 80031f6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80031fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10f      	bne.n	8003222 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b00      	cmp	r3, #0
 800320c:	d009      	beq.n	8003222 <HAL_UART_IRQHandler+0x66>
 800320e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003212:	f003 0320 	and.w	r3, r3, #32
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 fb91 	bl	8003942 <UART_Receive_IT>
      return;
 8003220:	e25b      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003222:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80de 	beq.w	80033e8 <HAL_UART_IRQHandler+0x22c>
 800322c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b00      	cmp	r3, #0
 8003236:	d106      	bne.n	8003246 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003238:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003240:	2b00      	cmp	r3, #0
 8003242:	f000 80d1 	beq.w	80033e8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003246:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_UART_IRQHandler+0xae>
 8003252:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003256:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800325a:	2b00      	cmp	r3, #0
 800325c:	d005      	beq.n	800326a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003262:	f043 0201 	orr.w	r2, r3, #1
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800326a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800326e:	f003 0304 	and.w	r3, r3, #4
 8003272:	2b00      	cmp	r3, #0
 8003274:	d00b      	beq.n	800328e <HAL_UART_IRQHandler+0xd2>
 8003276:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800327a:	f003 0301 	and.w	r3, r3, #1
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	f043 0202 	orr.w	r2, r3, #2
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d00b      	beq.n	80032b2 <HAL_UART_IRQHandler+0xf6>
 800329a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800329e:	f003 0301 	and.w	r3, r3, #1
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d005      	beq.n	80032b2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032aa:	f043 0204 	orr.w	r2, r3, #4
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032b6:	f003 0308 	and.w	r3, r3, #8
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d011      	beq.n	80032e2 <HAL_UART_IRQHandler+0x126>
 80032be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032c2:	f003 0320 	and.w	r3, r3, #32
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d105      	bne.n	80032d6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ce:	f003 0301 	and.w	r3, r3, #1
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032da:	f043 0208 	orr.w	r2, r3, #8
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	f000 81f2 	beq.w	80036d0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80032ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f0:	f003 0320 	and.w	r3, r3, #32
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d008      	beq.n	800330a <HAL_UART_IRQHandler+0x14e>
 80032f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032fc:	f003 0320 	and.w	r3, r3, #32
 8003300:	2b00      	cmp	r3, #0
 8003302:	d002      	beq.n	800330a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f000 fb1c 	bl	8003942 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	695b      	ldr	r3, [r3, #20]
 8003310:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003314:	2b00      	cmp	r3, #0
 8003316:	bf14      	ite	ne
 8003318:	2301      	movne	r3, #1
 800331a:	2300      	moveq	r3, #0
 800331c:	b2db      	uxtb	r3, r3
 800331e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d103      	bne.n	8003336 <HAL_UART_IRQHandler+0x17a>
 800332e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003332:	2b00      	cmp	r3, #0
 8003334:	d04f      	beq.n	80033d6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003336:	6878      	ldr	r0, [r7, #4]
 8003338:	f000 fa26 	bl	8003788 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003346:	2b00      	cmp	r3, #0
 8003348:	d041      	beq.n	80033ce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	3314      	adds	r3, #20
 8003350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003358:	e853 3f00 	ldrex	r3, [r3]
 800335c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003360:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003368:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3314      	adds	r3, #20
 8003372:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003376:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800337a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800337e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003382:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003386:	e841 2300 	strex	r3, r2, [r1]
 800338a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800338e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1d9      	bne.n	800334a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d013      	beq.n	80033c6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033a2:	4a7e      	ldr	r2, [pc, #504]	@ (800359c <HAL_UART_IRQHandler+0x3e0>)
 80033a4:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe fcc0 	bl	8001d30 <HAL_DMA_Abort_IT>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d016      	beq.n	80033e4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033c0:	4610      	mov	r0, r2
 80033c2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c4:	e00e      	b.n	80033e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f000 f99c 	bl	8003704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033cc:	e00a      	b.n	80033e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f998 	bl	8003704 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	e006      	b.n	80033e4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 f994 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80033e2:	e175      	b.n	80036d0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033e4:	bf00      	nop
    return;
 80033e6:	e173      	b.n	80036d0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	f040 814f 	bne.w	8003690 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f6:	f003 0310 	and.w	r3, r3, #16
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 8148 	beq.w	8003690 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003404:	f003 0310 	and.w	r3, r3, #16
 8003408:	2b00      	cmp	r3, #0
 800340a:	f000 8141 	beq.w	8003690 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800340e:	2300      	movs	r3, #0
 8003410:	60bb      	str	r3, [r7, #8]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	60bb      	str	r3, [r7, #8]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	60bb      	str	r3, [r7, #8]
 8003422:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	695b      	ldr	r3, [r3, #20]
 800342a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	f000 80b6 	beq.w	80035a0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003440:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003444:	2b00      	cmp	r3, #0
 8003446:	f000 8145 	beq.w	80036d4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800344e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003452:	429a      	cmp	r2, r3
 8003454:	f080 813e 	bcs.w	80036d4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800345e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b20      	cmp	r3, #32
 8003468:	f000 8088 	beq.w	800357c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	330c      	adds	r3, #12
 8003472:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003476:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800347a:	e853 3f00 	ldrex	r3, [r3]
 800347e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003482:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003486:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800348a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	330c      	adds	r3, #12
 8003494:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003498:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800349c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034a8:	e841 2300 	strex	r3, r2, [r1]
 80034ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d1d9      	bne.n	800346c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	3314      	adds	r3, #20
 80034be:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034c2:	e853 3f00 	ldrex	r3, [r3]
 80034c6:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034ca:	f023 0301 	bic.w	r3, r3, #1
 80034ce:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80034dc:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80034e0:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e2:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80034e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80034e8:	e841 2300 	strex	r3, r2, [r1]
 80034ec:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80034ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d1e1      	bne.n	80034b8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034fc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80034fe:	e853 3f00 	ldrex	r3, [r3]
 8003502:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003504:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003506:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800350a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	3314      	adds	r3, #20
 8003514:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003518:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800351a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800351e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003526:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e3      	bne.n	80034f4 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2220      	movs	r2, #32
 8003530:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	330c      	adds	r3, #12
 8003540:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003542:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003544:	e853 3f00 	ldrex	r3, [r3]
 8003548:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800354a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800354c:	f023 0310 	bic.w	r3, r3, #16
 8003550:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	330c      	adds	r3, #12
 800355a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800355e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003560:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003566:	e841 2300 	strex	r3, r2, [r1]
 800356a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800356c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1e3      	bne.n	800353a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003576:	4618      	mov	r0, r3
 8003578:	f7fe fb9f 	bl	8001cba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2202      	movs	r2, #2
 8003580:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800358a:	b29b      	uxth	r3, r3
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	b29b      	uxth	r3, r3
 8003590:	4619      	mov	r1, r3
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7fd fbae 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003598:	e09c      	b.n	80036d4 <HAL_UART_IRQHandler+0x518>
 800359a:	bf00      	nop
 800359c:	0800384d 	.word	0x0800384d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 808e 	beq.w	80036d8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	f000 8089 	beq.w	80036d8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	330c      	adds	r3, #12
 80035cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035d0:	e853 3f00 	ldrex	r3, [r3]
 80035d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80035d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80035dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	330c      	adds	r3, #12
 80035e6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80035ea:	647a      	str	r2, [r7, #68]	@ 0x44
 80035ec:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80035f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035f2:	e841 2300 	strex	r3, r2, [r1]
 80035f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80035f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d1e3      	bne.n	80035c6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	3314      	adds	r3, #20
 8003604:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003608:	e853 3f00 	ldrex	r3, [r3]
 800360c:	623b      	str	r3, [r7, #32]
   return(result);
 800360e:	6a3b      	ldr	r3, [r7, #32]
 8003610:	f023 0301 	bic.w	r3, r3, #1
 8003614:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3314      	adds	r3, #20
 800361e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003622:	633a      	str	r2, [r7, #48]	@ 0x30
 8003624:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003626:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003628:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800362a:	e841 2300 	strex	r3, r2, [r1]
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1e3      	bne.n	80035fe <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2220      	movs	r2, #32
 800363a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	330c      	adds	r3, #12
 800364a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	60fb      	str	r3, [r7, #12]
   return(result);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f023 0310 	bic.w	r3, r3, #16
 800365a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	330c      	adds	r3, #12
 8003664:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003668:	61fa      	str	r2, [r7, #28]
 800366a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	69b9      	ldr	r1, [r7, #24]
 800366e:	69fa      	ldr	r2, [r7, #28]
 8003670:	e841 2300 	strex	r3, r2, [r1]
 8003674:	617b      	str	r3, [r7, #20]
   return(result);
 8003676:	697b      	ldr	r3, [r7, #20]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d1e3      	bne.n	8003644 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2202      	movs	r2, #2
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003682:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003686:	4619      	mov	r1, r3
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f7fd fb33 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800368e:	e023      	b.n	80036d8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003690:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003694:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003698:	2b00      	cmp	r3, #0
 800369a:	d009      	beq.n	80036b0 <HAL_UART_IRQHandler+0x4f4>
 800369c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d003      	beq.n	80036b0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036a8:	6878      	ldr	r0, [r7, #4]
 80036aa:	f000 f8e3 	bl	8003874 <UART_Transmit_IT>
    return;
 80036ae:	e014      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d00e      	beq.n	80036da <HAL_UART_IRQHandler+0x51e>
 80036bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d008      	beq.n	80036da <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 f922 	bl	8003912 <UART_EndTransmit_IT>
    return;
 80036ce:	e004      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
    return;
 80036d0:	bf00      	nop
 80036d2:	e002      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
      return;
 80036d4:	bf00      	nop
 80036d6:	e000      	b.n	80036da <HAL_UART_IRQHandler+0x51e>
      return;
 80036d8:	bf00      	nop
  }
}
 80036da:	37e8      	adds	r7, #232	@ 0xe8
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}

080036e0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bc80      	pop	{r7}
 80036f0:	4770      	bx	lr

080036f2 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80036fa:	bf00      	nop
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	bc80      	pop	{r7}
 8003702:	4770      	bx	lr

08003704 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	bc80      	pop	{r7}
 8003714:	4770      	bx	lr

08003716 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003716:	b480      	push	{r7}
 8003718:	b085      	sub	sp, #20
 800371a:	af00      	add	r7, sp, #0
 800371c:	60f8      	str	r0, [r7, #12]
 800371e:	60b9      	str	r1, [r7, #8]
 8003720:	4613      	mov	r3, r2
 8003722:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	68ba      	ldr	r2, [r7, #8]
 8003728:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	88fa      	ldrh	r2, [r7, #6]
 800372e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	88fa      	ldrh	r2, [r7, #6]
 8003734:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2222      	movs	r2, #34	@ 0x22
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d007      	beq.n	800375c <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68da      	ldr	r2, [r3, #12]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800375a:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	695a      	ldr	r2, [r3, #20]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	68da      	ldr	r2, [r3, #12]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f042 0220 	orr.w	r2, r2, #32
 800377a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3714      	adds	r7, #20
 8003782:	46bd      	mov	sp, r7
 8003784:	bc80      	pop	{r7}
 8003786:	4770      	bx	lr

08003788 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003788:	b480      	push	{r7}
 800378a:	b095      	sub	sp, #84	@ 0x54
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	330c      	adds	r3, #12
 8003796:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800379a:	e853 3f00 	ldrex	r3, [r3]
 800379e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	330c      	adds	r3, #12
 80037ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037b8:	e841 2300 	strex	r3, r2, [r1]
 80037bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d1e5      	bne.n	8003790 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	3314      	adds	r3, #20
 80037ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037cc:	6a3b      	ldr	r3, [r7, #32]
 80037ce:	e853 3f00 	ldrex	r3, [r3]
 80037d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	f023 0301 	bic.w	r3, r3, #1
 80037da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	3314      	adds	r3, #20
 80037e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ec:	e841 2300 	strex	r3, r2, [r1]
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1e5      	bne.n	80037c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d119      	bne.n	8003834 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	330c      	adds	r3, #12
 8003806:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	e853 3f00 	ldrex	r3, [r3]
 800380e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	f023 0310 	bic.w	r3, r3, #16
 8003816:	647b      	str	r3, [r7, #68]	@ 0x44
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	330c      	adds	r3, #12
 800381e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003820:	61ba      	str	r2, [r7, #24]
 8003822:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003824:	6979      	ldr	r1, [r7, #20]
 8003826:	69ba      	ldr	r2, [r7, #24]
 8003828:	e841 2300 	strex	r3, r2, [r1]
 800382c:	613b      	str	r3, [r7, #16]
   return(result);
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1e5      	bne.n	8003800 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2220      	movs	r2, #32
 8003838:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003842:	bf00      	nop
 8003844:	3754      	adds	r7, #84	@ 0x54
 8003846:	46bd      	mov	sp, r7
 8003848:	bc80      	pop	{r7}
 800384a:	4770      	bx	lr

0800384c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	2200      	movs	r2, #0
 8003864:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	f7ff ff4c 	bl	8003704 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800386c:	bf00      	nop
 800386e:	3710      	adds	r7, #16
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003874:	b480      	push	{r7}
 8003876:	b085      	sub	sp, #20
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003882:	b2db      	uxtb	r3, r3
 8003884:	2b21      	cmp	r3, #33	@ 0x21
 8003886:	d13e      	bne.n	8003906 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003890:	d114      	bne.n	80038bc <UART_Transmit_IT+0x48>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	691b      	ldr	r3, [r3, #16]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d110      	bne.n	80038bc <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a1b      	ldr	r3, [r3, #32]
 800389e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	881b      	ldrh	r3, [r3, #0]
 80038a4:	461a      	mov	r2, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038ae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	621a      	str	r2, [r3, #32]
 80038ba:	e008      	b.n	80038ce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6a1b      	ldr	r3, [r3, #32]
 80038c0:	1c59      	adds	r1, r3, #1
 80038c2:	687a      	ldr	r2, [r7, #4]
 80038c4:	6211      	str	r1, [r2, #32]
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038d2:	b29b      	uxth	r3, r3
 80038d4:	3b01      	subs	r3, #1
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	4619      	mov	r1, r3
 80038dc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d10f      	bne.n	8003902 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68da      	ldr	r2, [r3, #12]
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80038f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	68da      	ldr	r2, [r3, #12]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003900:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3714      	adds	r7, #20
 800390c:	46bd      	mov	sp, r7
 800390e:	bc80      	pop	{r7}
 8003910:	4770      	bx	lr

08003912 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003912:	b580      	push	{r7, lr}
 8003914:	b082      	sub	sp, #8
 8003916:	af00      	add	r7, sp, #0
 8003918:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	68da      	ldr	r2, [r3, #12]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003928:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2220      	movs	r2, #32
 800392e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff fed4 	bl	80036e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3708      	adds	r7, #8
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003942:	b580      	push	{r7, lr}
 8003944:	b08c      	sub	sp, #48	@ 0x30
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003950:	b2db      	uxtb	r3, r3
 8003952:	2b22      	cmp	r3, #34	@ 0x22
 8003954:	f040 80ae 	bne.w	8003ab4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003960:	d117      	bne.n	8003992 <UART_Receive_IT+0x50>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d113      	bne.n	8003992 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800396a:	2300      	movs	r3, #0
 800396c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003972:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	b29b      	uxth	r3, r3
 800397c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003980:	b29a      	uxth	r2, r3
 8003982:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003984:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800398a:	1c9a      	adds	r2, r3, #2
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003990:	e026      	b.n	80039e0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003996:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	689b      	ldr	r3, [r3, #8]
 80039a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a4:	d007      	beq.n	80039b6 <UART_Receive_IT+0x74>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <UART_Receive_IT+0x82>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d106      	bne.n	80039c4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	b2da      	uxtb	r2, r3
 80039be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039c0:	701a      	strb	r2, [r3, #0]
 80039c2:	e008      	b.n	80039d6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039d0:	b2da      	uxtb	r2, r3
 80039d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039d4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039da:	1c5a      	adds	r2, r3, #1
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	4619      	mov	r1, r3
 80039ee:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d15d      	bne.n	8003ab0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68da      	ldr	r2, [r3, #12]
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0220 	bic.w	r2, r2, #32
 8003a02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68da      	ldr	r2, [r3, #12]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	695a      	ldr	r2, [r3, #20]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d135      	bne.n	8003aa6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	e853 3f00 	ldrex	r3, [r3]
 8003a4e:	613b      	str	r3, [r7, #16]
   return(result);
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	f023 0310 	bic.w	r3, r3, #16
 8003a56:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	330c      	adds	r3, #12
 8003a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a60:	623a      	str	r2, [r7, #32]
 8003a62:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a64:	69f9      	ldr	r1, [r7, #28]
 8003a66:	6a3a      	ldr	r2, [r7, #32]
 8003a68:	e841 2300 	strex	r3, r2, [r1]
 8003a6c:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a6e:	69bb      	ldr	r3, [r7, #24]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d1e5      	bne.n	8003a40 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0310 	and.w	r3, r3, #16
 8003a7e:	2b10      	cmp	r3, #16
 8003a80:	d10a      	bne.n	8003a98 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003a82:	2300      	movs	r3, #0
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7fd f928 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
 8003aa4:	e002      	b.n	8003aac <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	f7ff fe23 	bl	80036f2 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	e002      	b.n	8003ab6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	e000      	b.n	8003ab6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ab4:	2302      	movs	r3, #2
  }
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	3730      	adds	r7, #48	@ 0x30
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	68da      	ldr	r2, [r3, #12]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	431a      	orrs	r2, r3
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	695b      	ldr	r3, [r3, #20]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003afa:	f023 030c 	bic.w	r3, r3, #12
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6812      	ldr	r2, [r2, #0]
 8003b02:	68b9      	ldr	r1, [r7, #8]
 8003b04:	430b      	orrs	r3, r1
 8003b06:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	695b      	ldr	r3, [r3, #20]
 8003b0e:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	699a      	ldr	r2, [r3, #24]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a2c      	ldr	r2, [pc, #176]	@ (8003bd4 <UART_SetConfig+0x114>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d103      	bne.n	8003b30 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b28:	f7fe ff94 	bl	8002a54 <HAL_RCC_GetPCLK2Freq>
 8003b2c:	60f8      	str	r0, [r7, #12]
 8003b2e:	e002      	b.n	8003b36 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b30:	f7fe ff7c 	bl	8002a2c <HAL_RCC_GetPCLK1Freq>
 8003b34:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b36:	68fa      	ldr	r2, [r7, #12]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	009a      	lsls	r2, r3, #2
 8003b40:	441a      	add	r2, r3
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4c:	4a22      	ldr	r2, [pc, #136]	@ (8003bd8 <UART_SetConfig+0x118>)
 8003b4e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b52:	095b      	lsrs	r3, r3, #5
 8003b54:	0119      	lsls	r1, r3, #4
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	009a      	lsls	r2, r3, #2
 8003b60:	441a      	add	r2, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b6c:	4b1a      	ldr	r3, [pc, #104]	@ (8003bd8 <UART_SetConfig+0x118>)
 8003b6e:	fba3 0302 	umull	r0, r3, r3, r2
 8003b72:	095b      	lsrs	r3, r3, #5
 8003b74:	2064      	movs	r0, #100	@ 0x64
 8003b76:	fb00 f303 	mul.w	r3, r0, r3
 8003b7a:	1ad3      	subs	r3, r2, r3
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	3332      	adds	r3, #50	@ 0x32
 8003b80:	4a15      	ldr	r2, [pc, #84]	@ (8003bd8 <UART_SetConfig+0x118>)
 8003b82:	fba2 2303 	umull	r2, r3, r2, r3
 8003b86:	095b      	lsrs	r3, r3, #5
 8003b88:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b8c:	4419      	add	r1, r3
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	4613      	mov	r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	4413      	add	r3, r2
 8003b96:	009a      	lsls	r2, r3, #2
 8003b98:	441a      	add	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	009b      	lsls	r3, r3, #2
 8003ba0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8003bd8 <UART_SetConfig+0x118>)
 8003ba6:	fba3 0302 	umull	r0, r3, r3, r2
 8003baa:	095b      	lsrs	r3, r3, #5
 8003bac:	2064      	movs	r0, #100	@ 0x64
 8003bae:	fb00 f303 	mul.w	r3, r0, r3
 8003bb2:	1ad3      	subs	r3, r2, r3
 8003bb4:	011b      	lsls	r3, r3, #4
 8003bb6:	3332      	adds	r3, #50	@ 0x32
 8003bb8:	4a07      	ldr	r2, [pc, #28]	@ (8003bd8 <UART_SetConfig+0x118>)
 8003bba:	fba2 2303 	umull	r2, r3, r2, r3
 8003bbe:	095b      	lsrs	r3, r3, #5
 8003bc0:	f003 020f 	and.w	r2, r3, #15
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	440a      	add	r2, r1
 8003bca:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bcc:	bf00      	nop
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	40013800 	.word	0x40013800
 8003bd8:	51eb851f 	.word	0x51eb851f

08003bdc <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003bdc:	b480      	push	{r7}
 8003bde:	b085      	sub	sp, #20
 8003be0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003be2:	f3ef 8305 	mrs	r3, IPSR
 8003be6:	60bb      	str	r3, [r7, #8]
  return(result);
 8003be8:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10f      	bne.n	8003c0e <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bee:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf2:	607b      	str	r3, [r7, #4]
  return(result);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d109      	bne.n	8003c0e <osKernelInitialize+0x32>
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <osKernelInitialize+0x60>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d109      	bne.n	8003c16 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c02:	f3ef 8311 	mrs	r3, BASEPRI
 8003c06:	603b      	str	r3, [r7, #0]
  return(result);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003c0e:	f06f 0305 	mvn.w	r3, #5
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e00c      	b.n	8003c30 <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c16:	4b09      	ldr	r3, [pc, #36]	@ (8003c3c <osKernelInitialize+0x60>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d105      	bne.n	8003c2a <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003c1e:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <osKernelInitialize+0x60>)
 8003c20:	2201      	movs	r2, #1
 8003c22:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
 8003c28:	e002      	b.n	8003c30 <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c2a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c2e:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c30:	68fb      	ldr	r3, [r7, #12]
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3714      	adds	r7, #20
 8003c36:	46bd      	mov	sp, r7
 8003c38:	bc80      	pop	{r7}
 8003c3a:	4770      	bx	lr
 8003c3c:	200006ac 	.word	0x200006ac

08003c40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b084      	sub	sp, #16
 8003c44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c46:	f3ef 8305 	mrs	r3, IPSR
 8003c4a:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c4c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d10f      	bne.n	8003c72 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c52:	f3ef 8310 	mrs	r3, PRIMASK
 8003c56:	607b      	str	r3, [r7, #4]
  return(result);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <osKernelStart+0x32>
 8003c5e:	4b11      	ldr	r3, [pc, #68]	@ (8003ca4 <osKernelStart+0x64>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d109      	bne.n	8003c7a <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c66:	f3ef 8311 	mrs	r3, BASEPRI
 8003c6a:	603b      	str	r3, [r7, #0]
  return(result);
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d003      	beq.n	8003c7a <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c72:	f06f 0305 	mvn.w	r3, #5
 8003c76:	60fb      	str	r3, [r7, #12]
 8003c78:	e00e      	b.n	8003c98 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <osKernelStart+0x64>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d107      	bne.n	8003c92 <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003c82:	4b08      	ldr	r3, [pc, #32]	@ (8003ca4 <osKernelStart+0x64>)
 8003c84:	2202      	movs	r2, #2
 8003c86:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003c88:	f001 f9d4 	bl	8005034 <vTaskStartScheduler>
      stat = osOK;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
 8003c90:	e002      	b.n	8003c98 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003c92:	f04f 33ff 	mov.w	r3, #4294967295
 8003c96:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c98:	68fb      	ldr	r3, [r7, #12]
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	3710      	adds	r7, #16
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	bf00      	nop
 8003ca4:	200006ac 	.word	0x200006ac

08003ca8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b092      	sub	sp, #72	@ 0x48
 8003cac:	af04      	add	r7, sp, #16
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	60b9      	str	r1, [r7, #8]
 8003cb2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003cb8:	f3ef 8305 	mrs	r3, IPSR
 8003cbc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	f040 8094 	bne.w	8003dee <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cc6:	f3ef 8310 	mrs	r3, PRIMASK
 8003cca:	623b      	str	r3, [r7, #32]
  return(result);
 8003ccc:	6a3b      	ldr	r3, [r7, #32]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f040 808d 	bne.w	8003dee <osThreadNew+0x146>
 8003cd4:	4b48      	ldr	r3, [pc, #288]	@ (8003df8 <osThreadNew+0x150>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d106      	bne.n	8003cea <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003cdc:	f3ef 8311 	mrs	r3, BASEPRI
 8003ce0:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ce2:	69fb      	ldr	r3, [r7, #28]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f040 8082 	bne.w	8003dee <osThreadNew+0x146>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d07e      	beq.n	8003dee <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003cf0:	2380      	movs	r3, #128	@ 0x80
 8003cf2:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003cf4:	2318      	movs	r3, #24
 8003cf6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003cfc:	f107 031b 	add.w	r3, r7, #27
 8003d00:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003d02:	f04f 33ff 	mov.w	r3, #4294967295
 8003d06:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d045      	beq.n	8003d9a <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <osThreadNew+0x74>
        name = attr->name;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d002      	beq.n	8003d2a <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <osThreadNew+0x9a>
 8003d30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d32:	2b38      	cmp	r3, #56	@ 0x38
 8003d34:	d805      	bhi.n	8003d42 <osThreadNew+0x9a>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f003 0301 	and.w	r3, r3, #1
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d001      	beq.n	8003d46 <osThreadNew+0x9e>
        return (NULL);
 8003d42:	2300      	movs	r3, #0
 8003d44:	e054      	b.n	8003df0 <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d003      	beq.n	8003d56 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	695b      	ldr	r3, [r3, #20]
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00e      	beq.n	8003d7c <osThreadNew+0xd4>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	2b5b      	cmp	r3, #91	@ 0x5b
 8003d64:	d90a      	bls.n	8003d7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d006      	beq.n	8003d7c <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <osThreadNew+0xd4>
        mem = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d7a:	e010      	b.n	8003d9e <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d10c      	bne.n	8003d9e <osThreadNew+0xf6>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d108      	bne.n	8003d9e <osThreadNew+0xf6>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d104      	bne.n	8003d9e <osThreadNew+0xf6>
          mem = 0;
 8003d94:	2300      	movs	r3, #0
 8003d96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d98:	e001      	b.n	8003d9e <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003d9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d110      	bne.n	8003dc6 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dac:	9202      	str	r2, [sp, #8]
 8003dae:	9301      	str	r3, [sp, #4]
 8003db0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003db2:	9300      	str	r3, [sp, #0]
 8003db4:	68bb      	ldr	r3, [r7, #8]
 8003db6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003db8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003dba:	68f8      	ldr	r0, [r7, #12]
 8003dbc:	f000 fee8 	bl	8004b90 <xTaskCreateStatic>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	617b      	str	r3, [r7, #20]
 8003dc4:	e013      	b.n	8003dee <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d110      	bne.n	8003dee <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dce:	b29a      	uxth	r2, r3
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	9301      	str	r3, [sp, #4]
 8003dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dd8:	9300      	str	r3, [sp, #0]
 8003dda:	68bb      	ldr	r3, [r7, #8]
 8003ddc:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003dde:	68f8      	ldr	r0, [r7, #12]
 8003de0:	f000 ff35 	bl	8004c4e <xTaskCreate>
 8003de4:	4603      	mov	r3, r0
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d001      	beq.n	8003dee <osThreadNew+0x146>
          hTask = NULL;
 8003dea:	2300      	movs	r3, #0
 8003dec:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003dee:	697b      	ldr	r3, [r7, #20]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3738      	adds	r7, #56	@ 0x38
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}
 8003df8:	200006ac 	.word	0x200006ac

08003dfc <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e04:	f3ef 8305 	mrs	r3, IPSR
 8003e08:	613b      	str	r3, [r7, #16]
  return(result);
 8003e0a:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10f      	bne.n	8003e30 <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e10:	f3ef 8310 	mrs	r3, PRIMASK
 8003e14:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d109      	bne.n	8003e30 <osDelay+0x34>
 8003e1c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e54 <osDelay+0x58>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d109      	bne.n	8003e38 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e24:	f3ef 8311 	mrs	r3, BASEPRI
 8003e28:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <osDelay+0x3c>
    stat = osErrorISR;
 8003e30:	f06f 0305 	mvn.w	r3, #5
 8003e34:	617b      	str	r3, [r7, #20]
 8003e36:	e007      	b.n	8003e48 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003e42:	6878      	ldr	r0, [r7, #4]
 8003e44:	f001 f8c0 	bl	8004fc8 <vTaskDelay>
    }
  }

  return (stat);
 8003e48:	697b      	ldr	r3, [r7, #20]
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	200006ac 	.word	0x200006ac

08003e58 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b08c      	sub	sp, #48	@ 0x30
 8003e5c:	af02      	add	r7, sp, #8
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e64:	2300      	movs	r3, #0
 8003e66:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e68:	f3ef 8305 	mrs	r3, IPSR
 8003e6c:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e6e:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d16f      	bne.n	8003f54 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e74:	f3ef 8310 	mrs	r3, PRIMASK
 8003e78:	617b      	str	r3, [r7, #20]
  return(result);
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d169      	bne.n	8003f54 <osMessageQueueNew+0xfc>
 8003e80:	4b37      	ldr	r3, [pc, #220]	@ (8003f60 <osMessageQueueNew+0x108>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d105      	bne.n	8003e94 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e88:	f3ef 8311 	mrs	r3, BASEPRI
 8003e8c:	613b      	str	r3, [r7, #16]
  return(result);
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d15f      	bne.n	8003f54 <osMessageQueueNew+0xfc>
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d05c      	beq.n	8003f54 <osMessageQueueNew+0xfc>
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d059      	beq.n	8003f54 <osMessageQueueNew+0xfc>
    mem = -1;
 8003ea0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ea4:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d029      	beq.n	8003f00 <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d012      	beq.n	8003eda <osMessageQueueNew+0x82>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	68db      	ldr	r3, [r3, #12]
 8003eb8:	2b4f      	cmp	r3, #79	@ 0x4f
 8003eba:	d90e      	bls.n	8003eda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d00a      	beq.n	8003eda <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	695a      	ldr	r2, [r3, #20]
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	68b9      	ldr	r1, [r7, #8]
 8003ecc:	fb01 f303 	mul.w	r3, r1, r3
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <osMessageQueueNew+0x82>
        mem = 1;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	623b      	str	r3, [r7, #32]
 8003ed8:	e014      	b.n	8003f04 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d110      	bne.n	8003f04 <osMessageQueueNew+0xac>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d10c      	bne.n	8003f04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d108      	bne.n	8003f04 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d104      	bne.n	8003f04 <osMessageQueueNew+0xac>
          mem = 0;
 8003efa:	2300      	movs	r3, #0
 8003efc:	623b      	str	r3, [r7, #32]
 8003efe:	e001      	b.n	8003f04 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003f00:	2300      	movs	r3, #0
 8003f02:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f04:	6a3b      	ldr	r3, [r7, #32]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d10b      	bne.n	8003f22 <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691a      	ldr	r2, [r3, #16]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	2100      	movs	r1, #0
 8003f14:	9100      	str	r1, [sp, #0]
 8003f16:	68b9      	ldr	r1, [r7, #8]
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 f96f 	bl	80041fc <xQueueGenericCreateStatic>
 8003f1e:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f20:	e008      	b.n	8003f34 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003f22:	6a3b      	ldr	r3, [r7, #32]
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d105      	bne.n	8003f34 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003f28:	2200      	movs	r2, #0
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	68f8      	ldr	r0, [r7, #12]
 8003f2e:	f000 f9e1 	bl	80042f4 <xQueueGenericCreate>
 8003f32:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00c      	beq.n	8003f54 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	61fb      	str	r3, [r7, #28]
 8003f46:	e001      	b.n	8003f4c <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003f48:	2300      	movs	r3, #0
 8003f4a:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003f4c:	69f9      	ldr	r1, [r7, #28]
 8003f4e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f50:	f000 fdc2 	bl	8004ad8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3728      	adds	r7, #40	@ 0x28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	200006ac 	.word	0x200006ac

08003f64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f64:	b480      	push	{r7}
 8003f66:	b085      	sub	sp, #20
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	4a06      	ldr	r2, [pc, #24]	@ (8003f8c <vApplicationGetIdleTaskMemory+0x28>)
 8003f74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	4a05      	ldr	r2, [pc, #20]	@ (8003f90 <vApplicationGetIdleTaskMemory+0x2c>)
 8003f7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2280      	movs	r2, #128	@ 0x80
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3714      	adds	r7, #20
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bc80      	pop	{r7}
 8003f8a:	4770      	bx	lr
 8003f8c:	200006b0 	.word	0x200006b0
 8003f90:	2000070c 	.word	0x2000070c

08003f94 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003f94:	b480      	push	{r7}
 8003f96:	b085      	sub	sp, #20
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	60f8      	str	r0, [r7, #12]
 8003f9c:	60b9      	str	r1, [r7, #8]
 8003f9e:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	4a07      	ldr	r2, [pc, #28]	@ (8003fc0 <vApplicationGetTimerTaskMemory+0x2c>)
 8003fa4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	4a06      	ldr	r2, [pc, #24]	@ (8003fc4 <vApplicationGetTimerTaskMemory+0x30>)
 8003faa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fb2:	601a      	str	r2, [r3, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	2000090c 	.word	0x2000090c
 8003fc4:	20000968 	.word	0x20000968

08003fc8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b083      	sub	sp, #12
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	f103 0208 	add.w	r2, r3, #8
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f04f 32ff 	mov.w	r2, #4294967295
 8003fe0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	f103 0208 	add.w	r2, r3, #8
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	f103 0208 	add.w	r2, r3, #8
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003ffc:	bf00      	nop
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	bc80      	pop	{r7}
 8004004:	4770      	bx	lr

08004006 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	bc80      	pop	{r7}
 800401c:	4770      	bx	lr

0800401e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800401e:	b480      	push	{r7}
 8004020:	b085      	sub	sp, #20
 8004022:	af00      	add	r7, sp, #0
 8004024:	6078      	str	r0, [r7, #4]
 8004026:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68fa      	ldr	r2, [r7, #12]
 8004032:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	689a      	ldr	r2, [r3, #8]
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	689b      	ldr	r3, [r3, #8]
 8004040:	683a      	ldr	r2, [r7, #0]
 8004042:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	683a      	ldr	r2, [r7, #0]
 8004048:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	1c5a      	adds	r2, r3, #1
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	601a      	str	r2, [r3, #0]
}
 800405a:	bf00      	nop
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	bc80      	pop	{r7}
 8004062:	4770      	bx	lr

08004064 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407a:	d103      	bne.n	8004084 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	691b      	ldr	r3, [r3, #16]
 8004080:	60fb      	str	r3, [r7, #12]
 8004082:	e00c      	b.n	800409e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3308      	adds	r3, #8
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e002      	b.n	8004092 <vListInsert+0x2e>
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	60fb      	str	r3, [r7, #12]
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	429a      	cmp	r2, r3
 800409c:	d2f6      	bcs.n	800408c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	685a      	ldr	r2, [r3, #4]
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040a6:	683b      	ldr	r3, [r7, #0]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	683a      	ldr	r2, [r7, #0]
 80040ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	601a      	str	r2, [r3, #0]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr

080040d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	6892      	ldr	r2, [r2, #8]
 80040ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	6852      	ldr	r2, [r2, #4]
 80040f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d103      	bne.n	8004108 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	1e5a      	subs	r2, r3, #1
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	bc80      	pop	{r7}
 8004124:	4770      	bx	lr
	...

08004128 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b084      	sub	sp, #16
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10b      	bne.n	8004154 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800413c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004140:	f383 8811 	msr	BASEPRI, r3
 8004144:	f3bf 8f6f 	isb	sy
 8004148:	f3bf 8f4f 	dsb	sy
 800414c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800414e:	bf00      	nop
 8004150:	bf00      	nop
 8004152:	e7fd      	b.n	8004150 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004154:	f002 f8ba 	bl	80062cc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004160:	68f9      	ldr	r1, [r7, #12]
 8004162:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004164:	fb01 f303 	mul.w	r3, r1, r3
 8004168:	441a      	add	r2, r3
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2200      	movs	r2, #0
 8004172:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004184:	3b01      	subs	r3, #1
 8004186:	68f9      	ldr	r1, [r7, #12]
 8004188:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800418a:	fb01 f303 	mul.w	r3, r1, r3
 800418e:	441a      	add	r2, r3
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	@ 0xff
 8004198:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	22ff      	movs	r2, #255	@ 0xff
 80041a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d114      	bne.n	80041d4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	691b      	ldr	r3, [r3, #16]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d01a      	beq.n	80041e8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	3310      	adds	r3, #16
 80041b6:	4618      	mov	r0, r3
 80041b8:	f001 f9ce 	bl	8005558 <xTaskRemoveFromEventList>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d012      	beq.n	80041e8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <xQueueGenericReset+0xd0>)
 80041c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	e009      	b.n	80041e8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	3310      	adds	r3, #16
 80041d8:	4618      	mov	r0, r3
 80041da:	f7ff fef5 	bl	8003fc8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3324      	adds	r3, #36	@ 0x24
 80041e2:	4618      	mov	r0, r3
 80041e4:	f7ff fef0 	bl	8003fc8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80041e8:	f002 f8a0 	bl	800632c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80041ec:	2301      	movs	r3, #1
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3710      	adds	r7, #16
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	e000ed04 	.word	0xe000ed04

080041fc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b08e      	sub	sp, #56	@ 0x38
 8004200:	af02      	add	r7, sp, #8
 8004202:	60f8      	str	r0, [r7, #12]
 8004204:	60b9      	str	r1, [r7, #8]
 8004206:	607a      	str	r2, [r7, #4]
 8004208:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d10b      	bne.n	8004228 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004210:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004214:	f383 8811 	msr	BASEPRI, r3
 8004218:	f3bf 8f6f 	isb	sy
 800421c:	f3bf 8f4f 	dsb	sy
 8004220:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004222:	bf00      	nop
 8004224:	bf00      	nop
 8004226:	e7fd      	b.n	8004224 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800422e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004232:	f383 8811 	msr	BASEPRI, r3
 8004236:	f3bf 8f6f 	isb	sy
 800423a:	f3bf 8f4f 	dsb	sy
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004240:	bf00      	nop
 8004242:	bf00      	nop
 8004244:	e7fd      	b.n	8004242 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <xQueueGenericCreateStatic+0x56>
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d001      	beq.n	8004256 <xQueueGenericCreateStatic+0x5a>
 8004252:	2301      	movs	r3, #1
 8004254:	e000      	b.n	8004258 <xQueueGenericCreateStatic+0x5c>
 8004256:	2300      	movs	r3, #0
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10b      	bne.n	8004274 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	623b      	str	r3, [r7, #32]
}
 800426e:	bf00      	nop
 8004270:	bf00      	nop
 8004272:	e7fd      	b.n	8004270 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d102      	bne.n	8004280 <xQueueGenericCreateStatic+0x84>
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d101      	bne.n	8004284 <xQueueGenericCreateStatic+0x88>
 8004280:	2301      	movs	r3, #1
 8004282:	e000      	b.n	8004286 <xQueueGenericCreateStatic+0x8a>
 8004284:	2300      	movs	r3, #0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10b      	bne.n	80042a2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800428a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428e:	f383 8811 	msr	BASEPRI, r3
 8004292:	f3bf 8f6f 	isb	sy
 8004296:	f3bf 8f4f 	dsb	sy
 800429a:	61fb      	str	r3, [r7, #28]
}
 800429c:	bf00      	nop
 800429e:	bf00      	nop
 80042a0:	e7fd      	b.n	800429e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042a2:	2350      	movs	r3, #80	@ 0x50
 80042a4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	2b50      	cmp	r3, #80	@ 0x50
 80042aa:	d00b      	beq.n	80042c4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042b0:	f383 8811 	msr	BASEPRI, r3
 80042b4:	f3bf 8f6f 	isb	sy
 80042b8:	f3bf 8f4f 	dsb	sy
 80042bc:	61bb      	str	r3, [r7, #24]
}
 80042be:	bf00      	nop
 80042c0:	bf00      	nop
 80042c2:	e7fd      	b.n	80042c0 <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00d      	beq.n	80042ea <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042d6:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80042da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042dc:	9300      	str	r3, [sp, #0]
 80042de:	4613      	mov	r3, r2
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	68b9      	ldr	r1, [r7, #8]
 80042e4:	68f8      	ldr	r0, [r7, #12]
 80042e6:	f000 f844 	bl	8004372 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80042ec:	4618      	mov	r0, r3
 80042ee:	3730      	adds	r7, #48	@ 0x30
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b08a      	sub	sp, #40	@ 0x28
 80042f8:	af02      	add	r7, sp, #8
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10b      	bne.n	8004320 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430c:	f383 8811 	msr	BASEPRI, r3
 8004310:	f3bf 8f6f 	isb	sy
 8004314:	f3bf 8f4f 	dsb	sy
 8004318:	613b      	str	r3, [r7, #16]
}
 800431a:	bf00      	nop
 800431c:	bf00      	nop
 800431e:	e7fd      	b.n	800431c <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d102      	bne.n	800432c <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004326:	2300      	movs	r3, #0
 8004328:	61fb      	str	r3, [r7, #28]
 800432a:	e004      	b.n	8004336 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	fb02 f303 	mul.w	r3, r2, r3
 8004334:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	3350      	adds	r3, #80	@ 0x50
 800433a:	4618      	mov	r0, r3
 800433c:	f002 f8c8 	bl	80064d0 <pvPortMalloc>
 8004340:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d00f      	beq.n	8004368 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	3350      	adds	r3, #80	@ 0x50
 800434c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004356:	79fa      	ldrb	r2, [r7, #7]
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	9300      	str	r3, [sp, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	697a      	ldr	r2, [r7, #20]
 8004360:	68b9      	ldr	r1, [r7, #8]
 8004362:	68f8      	ldr	r0, [r7, #12]
 8004364:	f000 f805 	bl	8004372 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004368:	69bb      	ldr	r3, [r7, #24]
	}
 800436a:	4618      	mov	r0, r3
 800436c:	3720      	adds	r7, #32
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}

08004372 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004372:	b580      	push	{r7, lr}
 8004374:	b084      	sub	sp, #16
 8004376:	af00      	add	r7, sp, #0
 8004378:	60f8      	str	r0, [r7, #12]
 800437a:	60b9      	str	r1, [r7, #8]
 800437c:	607a      	str	r2, [r7, #4]
 800437e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d103      	bne.n	800438e <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	601a      	str	r2, [r3, #0]
 800438c:	e002      	b.n	8004394 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004394:	69bb      	ldr	r3, [r7, #24]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800439a:	69bb      	ldr	r3, [r7, #24]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043a0:	2101      	movs	r1, #1
 80043a2:	69b8      	ldr	r0, [r7, #24]
 80043a4:	f7ff fec0 	bl	8004128 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	78fa      	ldrb	r2, [r7, #3]
 80043ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b08e      	sub	sp, #56	@ 0x38
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
 80043c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043c6:	2300      	movs	r3, #0
 80043c8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d10b      	bne.n	80043ec <xQueueGenericSend+0x34>
	__asm volatile
 80043d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043d8:	f383 8811 	msr	BASEPRI, r3
 80043dc:	f3bf 8f6f 	isb	sy
 80043e0:	f3bf 8f4f 	dsb	sy
 80043e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80043e6:	bf00      	nop
 80043e8:	bf00      	nop
 80043ea:	e7fd      	b.n	80043e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043ec:	68bb      	ldr	r3, [r7, #8]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d103      	bne.n	80043fa <xQueueGenericSend+0x42>
 80043f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <xQueueGenericSend+0x46>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e000      	b.n	8004400 <xQueueGenericSend+0x48>
 80043fe:	2300      	movs	r3, #0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d10b      	bne.n	800441c <xQueueGenericSend+0x64>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	e7fd      	b.n	8004418 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d103      	bne.n	800442a <xQueueGenericSend+0x72>
 8004422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004424:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004426:	2b01      	cmp	r3, #1
 8004428:	d101      	bne.n	800442e <xQueueGenericSend+0x76>
 800442a:	2301      	movs	r3, #1
 800442c:	e000      	b.n	8004430 <xQueueGenericSend+0x78>
 800442e:	2300      	movs	r3, #0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d10b      	bne.n	800444c <xQueueGenericSend+0x94>
	__asm volatile
 8004434:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004438:	f383 8811 	msr	BASEPRI, r3
 800443c:	f3bf 8f6f 	isb	sy
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	623b      	str	r3, [r7, #32]
}
 8004446:	bf00      	nop
 8004448:	bf00      	nop
 800444a:	e7fd      	b.n	8004448 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800444c:	f001 fa48 	bl	80058e0 <xTaskGetSchedulerState>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d102      	bne.n	800445c <xQueueGenericSend+0xa4>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <xQueueGenericSend+0xa8>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <xQueueGenericSend+0xaa>
 8004460:	2300      	movs	r3, #0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d10b      	bne.n	800447e <xQueueGenericSend+0xc6>
	__asm volatile
 8004466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800446a:	f383 8811 	msr	BASEPRI, r3
 800446e:	f3bf 8f6f 	isb	sy
 8004472:	f3bf 8f4f 	dsb	sy
 8004476:	61fb      	str	r3, [r7, #28]
}
 8004478:	bf00      	nop
 800447a:	bf00      	nop
 800447c:	e7fd      	b.n	800447a <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800447e:	f001 ff25 	bl	80062cc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004484:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004486:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004488:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800448a:	429a      	cmp	r2, r3
 800448c:	d302      	bcc.n	8004494 <xQueueGenericSend+0xdc>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d129      	bne.n	80044e8 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800449a:	f000 fa0d 	bl	80048b8 <prvCopyDataToQueue>
 800449e:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d010      	beq.n	80044ca <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044aa:	3324      	adds	r3, #36	@ 0x24
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f853 	bl	8005558 <xTaskRemoveFromEventList>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d013      	beq.n	80044e0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044b8:	4b3f      	ldr	r3, [pc, #252]	@ (80045b8 <xQueueGenericSend+0x200>)
 80044ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044be:	601a      	str	r2, [r3, #0]
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	f3bf 8f6f 	isb	sy
 80044c8:	e00a      	b.n	80044e0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d007      	beq.n	80044e0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044d0:	4b39      	ldr	r3, [pc, #228]	@ (80045b8 <xQueueGenericSend+0x200>)
 80044d2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80044e0:	f001 ff24 	bl	800632c <vPortExitCritical>
				return pdPASS;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e063      	b.n	80045b0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d103      	bne.n	80044f6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80044ee:	f001 ff1d 	bl	800632c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80044f2:	2300      	movs	r3, #0
 80044f4:	e05c      	b.n	80045b0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80044f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80044fc:	f107 0314 	add.w	r3, r7, #20
 8004500:	4618      	mov	r0, r3
 8004502:	f001 f88d 	bl	8005620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004506:	2301      	movs	r3, #1
 8004508:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800450a:	f001 ff0f 	bl	800632c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800450e:	f000 fdf9 	bl	8005104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004512:	f001 fedb 	bl	80062cc <vPortEnterCritical>
 8004516:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800451c:	b25b      	sxtb	r3, r3
 800451e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004522:	d103      	bne.n	800452c <xQueueGenericSend+0x174>
 8004524:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800452c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800452e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004532:	b25b      	sxtb	r3, r3
 8004534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004538:	d103      	bne.n	8004542 <xQueueGenericSend+0x18a>
 800453a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004542:	f001 fef3 	bl	800632c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004546:	1d3a      	adds	r2, r7, #4
 8004548:	f107 0314 	add.w	r3, r7, #20
 800454c:	4611      	mov	r1, r2
 800454e:	4618      	mov	r0, r3
 8004550:	f001 f87c 	bl	800564c <xTaskCheckForTimeOut>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d124      	bne.n	80045a4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800455a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800455c:	f000 faa4 	bl	8004aa8 <prvIsQueueFull>
 8004560:	4603      	mov	r3, r0
 8004562:	2b00      	cmp	r3, #0
 8004564:	d018      	beq.n	8004598 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	3310      	adds	r3, #16
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	4611      	mov	r1, r2
 800456e:	4618      	mov	r0, r3
 8004570:	f000 ffa0 	bl	80054b4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004574:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004576:	f000 fa2f 	bl	80049d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800457a:	f000 fdd1 	bl	8005120 <xTaskResumeAll>
 800457e:	4603      	mov	r3, r0
 8004580:	2b00      	cmp	r3, #0
 8004582:	f47f af7c 	bne.w	800447e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004586:	4b0c      	ldr	r3, [pc, #48]	@ (80045b8 <xQueueGenericSend+0x200>)
 8004588:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800458c:	601a      	str	r2, [r3, #0]
 800458e:	f3bf 8f4f 	dsb	sy
 8004592:	f3bf 8f6f 	isb	sy
 8004596:	e772      	b.n	800447e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800459a:	f000 fa1d 	bl	80049d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800459e:	f000 fdbf 	bl	8005120 <xTaskResumeAll>
 80045a2:	e76c      	b.n	800447e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045a4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045a6:	f000 fa17 	bl	80049d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045aa:	f000 fdb9 	bl	8005120 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045ae:	2300      	movs	r3, #0
		}
	}
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3738      	adds	r7, #56	@ 0x38
 80045b4:	46bd      	mov	sp, r7
 80045b6:	bd80      	pop	{r7, pc}
 80045b8:	e000ed04 	.word	0xe000ed04

080045bc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b08e      	sub	sp, #56	@ 0x38
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	60f8      	str	r0, [r7, #12]
 80045c4:	60b9      	str	r1, [r7, #8]
 80045c6:	607a      	str	r2, [r7, #4]
 80045c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d10b      	bne.n	80045ec <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80045d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045d8:	f383 8811 	msr	BASEPRI, r3
 80045dc:	f3bf 8f6f 	isb	sy
 80045e0:	f3bf 8f4f 	dsb	sy
 80045e4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80045e6:	bf00      	nop
 80045e8:	bf00      	nop
 80045ea:	e7fd      	b.n	80045e8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d103      	bne.n	80045fa <xQueueGenericSendFromISR+0x3e>
 80045f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d101      	bne.n	80045fe <xQueueGenericSendFromISR+0x42>
 80045fa:	2301      	movs	r3, #1
 80045fc:	e000      	b.n	8004600 <xQueueGenericSendFromISR+0x44>
 80045fe:	2300      	movs	r3, #0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d10b      	bne.n	800461c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004608:	f383 8811 	msr	BASEPRI, r3
 800460c:	f3bf 8f6f 	isb	sy
 8004610:	f3bf 8f4f 	dsb	sy
 8004614:	623b      	str	r3, [r7, #32]
}
 8004616:	bf00      	nop
 8004618:	bf00      	nop
 800461a:	e7fd      	b.n	8004618 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	2b02      	cmp	r3, #2
 8004620:	d103      	bne.n	800462a <xQueueGenericSendFromISR+0x6e>
 8004622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <xQueueGenericSendFromISR+0x72>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <xQueueGenericSendFromISR+0x74>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d10b      	bne.n	800464c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	61fb      	str	r3, [r7, #28]
}
 8004646:	bf00      	nop
 8004648:	bf00      	nop
 800464a:	e7fd      	b.n	8004648 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800464c:	f001 ff00 	bl	8006450 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004650:	f3ef 8211 	mrs	r2, BASEPRI
 8004654:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004658:	f383 8811 	msr	BASEPRI, r3
 800465c:	f3bf 8f6f 	isb	sy
 8004660:	f3bf 8f4f 	dsb	sy
 8004664:	61ba      	str	r2, [r7, #24]
 8004666:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004668:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800466a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800466c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004670:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004672:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004674:	429a      	cmp	r2, r3
 8004676:	d302      	bcc.n	800467e <xQueueGenericSendFromISR+0xc2>
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2b02      	cmp	r3, #2
 800467c:	d12c      	bne.n	80046d8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800467e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004680:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004684:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	68b9      	ldr	r1, [r7, #8]
 800468c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800468e:	f000 f913 	bl	80048b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004692:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 8004696:	f1b3 3fff 	cmp.w	r3, #4294967295
 800469a:	d112      	bne.n	80046c2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d016      	beq.n	80046d2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a6:	3324      	adds	r3, #36	@ 0x24
 80046a8:	4618      	mov	r0, r3
 80046aa:	f000 ff55 	bl	8005558 <xTaskRemoveFromEventList>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00e      	beq.n	80046d2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d00b      	beq.n	80046d2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	601a      	str	r2, [r3, #0]
 80046c0:	e007      	b.n	80046d2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046c6:	3301      	adds	r3, #1
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	b25a      	sxtb	r2, r3
 80046cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80046d2:	2301      	movs	r3, #1
 80046d4:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 80046d6:	e001      	b.n	80046dc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80046d8:	2300      	movs	r3, #0
 80046da:	637b      	str	r3, [r7, #52]	@ 0x34
 80046dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046de:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80046e6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80046e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3738      	adds	r7, #56	@ 0x38
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
	...

080046f4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08c      	sub	sp, #48	@ 0x30
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004700:	2300      	movs	r3, #0
 8004702:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004708:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800470a:	2b00      	cmp	r3, #0
 800470c:	d10b      	bne.n	8004726 <xQueueReceive+0x32>
	__asm volatile
 800470e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	623b      	str	r3, [r7, #32]
}
 8004720:	bf00      	nop
 8004722:	bf00      	nop
 8004724:	e7fd      	b.n	8004722 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d103      	bne.n	8004734 <xQueueReceive+0x40>
 800472c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800472e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004730:	2b00      	cmp	r3, #0
 8004732:	d101      	bne.n	8004738 <xQueueReceive+0x44>
 8004734:	2301      	movs	r3, #1
 8004736:	e000      	b.n	800473a <xQueueReceive+0x46>
 8004738:	2300      	movs	r3, #0
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10b      	bne.n	8004756 <xQueueReceive+0x62>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	61fb      	str	r3, [r7, #28]
}
 8004750:	bf00      	nop
 8004752:	bf00      	nop
 8004754:	e7fd      	b.n	8004752 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004756:	f001 f8c3 	bl	80058e0 <xTaskGetSchedulerState>
 800475a:	4603      	mov	r3, r0
 800475c:	2b00      	cmp	r3, #0
 800475e:	d102      	bne.n	8004766 <xQueueReceive+0x72>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <xQueueReceive+0x76>
 8004766:	2301      	movs	r3, #1
 8004768:	e000      	b.n	800476c <xQueueReceive+0x78>
 800476a:	2300      	movs	r3, #0
 800476c:	2b00      	cmp	r3, #0
 800476e:	d10b      	bne.n	8004788 <xQueueReceive+0x94>
	__asm volatile
 8004770:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004774:	f383 8811 	msr	BASEPRI, r3
 8004778:	f3bf 8f6f 	isb	sy
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	61bb      	str	r3, [r7, #24]
}
 8004782:	bf00      	nop
 8004784:	bf00      	nop
 8004786:	e7fd      	b.n	8004784 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004788:	f001 fda0 	bl	80062cc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800478c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800478e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004790:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004794:	2b00      	cmp	r3, #0
 8004796:	d01f      	beq.n	80047d8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004798:	68b9      	ldr	r1, [r7, #8]
 800479a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800479c:	f000 f8f6 	bl	800498c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047a2:	1e5a      	subs	r2, r3, #1
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047aa:	691b      	ldr	r3, [r3, #16]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00f      	beq.n	80047d0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047b2:	3310      	adds	r3, #16
 80047b4:	4618      	mov	r0, r3
 80047b6:	f000 fecf 	bl	8005558 <xTaskRemoveFromEventList>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d007      	beq.n	80047d0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047c0:	4b3c      	ldr	r3, [pc, #240]	@ (80048b4 <xQueueReceive+0x1c0>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047d0:	f001 fdac 	bl	800632c <vPortExitCritical>
				return pdPASS;
 80047d4:	2301      	movs	r3, #1
 80047d6:	e069      	b.n	80048ac <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d103      	bne.n	80047e6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80047de:	f001 fda5 	bl	800632c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80047e2:	2300      	movs	r3, #0
 80047e4:	e062      	b.n	80048ac <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80047e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80047ec:	f107 0310 	add.w	r3, r7, #16
 80047f0:	4618      	mov	r0, r3
 80047f2:	f000 ff15 	bl	8005620 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80047f6:	2301      	movs	r3, #1
 80047f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80047fa:	f001 fd97 	bl	800632c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80047fe:	f000 fc81 	bl	8005104 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004802:	f001 fd63 	bl	80062cc <vPortEnterCritical>
 8004806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004808:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800480c:	b25b      	sxtb	r3, r3
 800480e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004812:	d103      	bne.n	800481c <xQueueReceive+0x128>
 8004814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004816:	2200      	movs	r2, #0
 8004818:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004822:	b25b      	sxtb	r3, r3
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d103      	bne.n	8004832 <xQueueReceive+0x13e>
 800482a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482c:	2200      	movs	r2, #0
 800482e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004832:	f001 fd7b 	bl	800632c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004836:	1d3a      	adds	r2, r7, #4
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	4611      	mov	r1, r2
 800483e:	4618      	mov	r0, r3
 8004840:	f000 ff04 	bl	800564c <xTaskCheckForTimeOut>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d123      	bne.n	8004892 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800484a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800484c:	f000 f916 	bl	8004a7c <prvIsQueueEmpty>
 8004850:	4603      	mov	r3, r0
 8004852:	2b00      	cmp	r3, #0
 8004854:	d017      	beq.n	8004886 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004858:	3324      	adds	r3, #36	@ 0x24
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	4611      	mov	r1, r2
 800485e:	4618      	mov	r0, r3
 8004860:	f000 fe28 	bl	80054b4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004864:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004866:	f000 f8b7 	bl	80049d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800486a:	f000 fc59 	bl	8005120 <xTaskResumeAll>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d189      	bne.n	8004788 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004874:	4b0f      	ldr	r3, [pc, #60]	@ (80048b4 <xQueueReceive+0x1c0>)
 8004876:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800487a:	601a      	str	r2, [r3, #0]
 800487c:	f3bf 8f4f 	dsb	sy
 8004880:	f3bf 8f6f 	isb	sy
 8004884:	e780      	b.n	8004788 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004886:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004888:	f000 f8a6 	bl	80049d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800488c:	f000 fc48 	bl	8005120 <xTaskResumeAll>
 8004890:	e77a      	b.n	8004788 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004894:	f000 f8a0 	bl	80049d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004898:	f000 fc42 	bl	8005120 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800489c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800489e:	f000 f8ed 	bl	8004a7c <prvIsQueueEmpty>
 80048a2:	4603      	mov	r3, r0
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	f43f af6f 	beq.w	8004788 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048aa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3730      	adds	r7, #48	@ 0x30
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}
 80048b4:	e000ed04 	.word	0xe000ed04

080048b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b086      	sub	sp, #24
 80048bc:	af00      	add	r7, sp, #0
 80048be:	60f8      	str	r0, [r7, #12]
 80048c0:	60b9      	str	r1, [r7, #8]
 80048c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d10d      	bne.n	80048f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d14d      	bne.n	800497a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f001 f81a 	bl	800591c <xTaskPriorityDisinherit>
 80048e8:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	605a      	str	r2, [r3, #4]
 80048f0:	e043      	b.n	800497a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d119      	bne.n	800492c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	6898      	ldr	r0, [r3, #8]
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004900:	461a      	mov	r2, r3
 8004902:	68b9      	ldr	r1, [r7, #8]
 8004904:	f002 ffe1 	bl	80078ca <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004910:	441a      	add	r2, r3
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	689a      	ldr	r2, [r3, #8]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	429a      	cmp	r2, r3
 8004920:	d32b      	bcc.n	800497a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	609a      	str	r2, [r3, #8]
 800492a:	e026      	b.n	800497a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	68d8      	ldr	r0, [r3, #12]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004934:	461a      	mov	r2, r3
 8004936:	68b9      	ldr	r1, [r7, #8]
 8004938:	f002 ffc7 	bl	80078ca <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	68da      	ldr	r2, [r3, #12]
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004944:	425b      	negs	r3, r3
 8004946:	441a      	add	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	68da      	ldr	r2, [r3, #12]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d207      	bcs.n	8004968 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	685a      	ldr	r2, [r3, #4]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	425b      	negs	r3, r3
 8004962:	441a      	add	r2, r3
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2b02      	cmp	r3, #2
 800496c:	d105      	bne.n	800497a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800496e:	693b      	ldr	r3, [r7, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d002      	beq.n	800497a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3b01      	subs	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1c5a      	adds	r2, r3, #1
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004982:	697b      	ldr	r3, [r7, #20]
}
 8004984:	4618      	mov	r0, r3
 8004986:	3718      	adds	r7, #24
 8004988:	46bd      	mov	sp, r7
 800498a:	bd80      	pop	{r7, pc}

0800498c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b082      	sub	sp, #8
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d018      	beq.n	80049d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	68da      	ldr	r2, [r3, #12]
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049a6:	441a      	add	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	68da      	ldr	r2, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d303      	bcc.n	80049c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	68d9      	ldr	r1, [r3, #12]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c8:	461a      	mov	r2, r3
 80049ca:	6838      	ldr	r0, [r7, #0]
 80049cc:	f002 ff7d 	bl	80078ca <memcpy>
	}
}
 80049d0:	bf00      	nop
 80049d2:	3708      	adds	r7, #8
 80049d4:	46bd      	mov	sp, r7
 80049d6:	bd80      	pop	{r7, pc}

080049d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049e0:	f001 fc74 	bl	80062cc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80049ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049ec:	e011      	b.n	8004a12 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d012      	beq.n	8004a1c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	3324      	adds	r3, #36	@ 0x24
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fdac 	bl	8005558 <xTaskRemoveFromEventList>
 8004a00:	4603      	mov	r3, r0
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d001      	beq.n	8004a0a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a06:	f000 fe85 	bl	8005714 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a0a:	7bfb      	ldrb	r3, [r7, #15]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	dce9      	bgt.n	80049ee <prvUnlockQueue+0x16>
 8004a1a:	e000      	b.n	8004a1e <prvUnlockQueue+0x46>
					break;
 8004a1c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	22ff      	movs	r2, #255	@ 0xff
 8004a22:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a26:	f001 fc81 	bl	800632c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a2a:	f001 fc4f 	bl	80062cc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a34:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a36:	e011      	b.n	8004a5c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d012      	beq.n	8004a66 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3310      	adds	r3, #16
 8004a44:	4618      	mov	r0, r3
 8004a46:	f000 fd87 	bl	8005558 <xTaskRemoveFromEventList>
 8004a4a:	4603      	mov	r3, r0
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d001      	beq.n	8004a54 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a50:	f000 fe60 	bl	8005714 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a54:	7bbb      	ldrb	r3, [r7, #14]
 8004a56:	3b01      	subs	r3, #1
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a5c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	dce9      	bgt.n	8004a38 <prvUnlockQueue+0x60>
 8004a64:	e000      	b.n	8004a68 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a66:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	22ff      	movs	r2, #255	@ 0xff
 8004a6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a70:	f001 fc5c 	bl	800632c <vPortExitCritical>
}
 8004a74:	bf00      	nop
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a84:	f001 fc22 	bl	80062cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d102      	bne.n	8004a96 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a90:	2301      	movs	r3, #1
 8004a92:	60fb      	str	r3, [r7, #12]
 8004a94:	e001      	b.n	8004a9a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004a9a:	f001 fc47 	bl	800632c <vPortExitCritical>

	return xReturn;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab0:	f001 fc0c 	bl	80062cc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d102      	bne.n	8004ac6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	e001      	b.n	8004aca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aca:	f001 fc2f 	bl	800632c <vPortExitCritical>

	return xReturn;
 8004ace:	68fb      	ldr	r3, [r7, #12]
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	3710      	adds	r7, #16
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	bd80      	pop	{r7, pc}

08004ad8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	60fb      	str	r3, [r7, #12]
 8004ae6:	e014      	b.n	8004b12 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ae8:	4a0e      	ldr	r2, [pc, #56]	@ (8004b24 <vQueueAddToRegistry+0x4c>)
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d10b      	bne.n	8004b0c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004af4:	490b      	ldr	r1, [pc, #44]	@ (8004b24 <vQueueAddToRegistry+0x4c>)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	683a      	ldr	r2, [r7, #0]
 8004afa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004afe:	4a09      	ldr	r2, [pc, #36]	@ (8004b24 <vQueueAddToRegistry+0x4c>)
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	00db      	lsls	r3, r3, #3
 8004b04:	4413      	add	r3, r2
 8004b06:	687a      	ldr	r2, [r7, #4]
 8004b08:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b0a:	e006      	b.n	8004b1a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	3301      	adds	r3, #1
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2b07      	cmp	r3, #7
 8004b16:	d9e7      	bls.n	8004ae8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b18:	bf00      	nop
 8004b1a:	bf00      	nop
 8004b1c:	3714      	adds	r7, #20
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bc80      	pop	{r7}
 8004b22:	4770      	bx	lr
 8004b24:	20000d68 	.word	0x20000d68

08004b28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b38:	f001 fbc8 	bl	80062cc <vPortEnterCritical>
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b42:	b25b      	sxtb	r3, r3
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d103      	bne.n	8004b52 <vQueueWaitForMessageRestricted+0x2a>
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b58:	b25b      	sxtb	r3, r3
 8004b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b5e:	d103      	bne.n	8004b68 <vQueueWaitForMessageRestricted+0x40>
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b68:	f001 fbe0 	bl	800632c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d106      	bne.n	8004b82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	3324      	adds	r3, #36	@ 0x24
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	68b9      	ldr	r1, [r7, #8]
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	f000 fcbf 	bl	8005500 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004b82:	6978      	ldr	r0, [r7, #20]
 8004b84:	f7ff ff28 	bl	80049d8 <prvUnlockQueue>
	}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08e      	sub	sp, #56	@ 0x38
 8004b94:	af04      	add	r7, sp, #16
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
 8004b9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10b      	bne.n	8004bbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8004ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba8:	f383 8811 	msr	BASEPRI, r3
 8004bac:	f3bf 8f6f 	isb	sy
 8004bb0:	f3bf 8f4f 	dsb	sy
 8004bb4:	623b      	str	r3, [r7, #32]
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	e7fd      	b.n	8004bb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004bbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d10b      	bne.n	8004bda <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc6:	f383 8811 	msr	BASEPRI, r3
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	f3bf 8f4f 	dsb	sy
 8004bd2:	61fb      	str	r3, [r7, #28]
}
 8004bd4:	bf00      	nop
 8004bd6:	bf00      	nop
 8004bd8:	e7fd      	b.n	8004bd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004bda:	235c      	movs	r3, #92	@ 0x5c
 8004bdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004be2:	d00b      	beq.n	8004bfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61bb      	str	r3, [r7, #24]
}
 8004bf6:	bf00      	nop
 8004bf8:	bf00      	nop
 8004bfa:	e7fd      	b.n	8004bf8 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004bfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d01e      	beq.n	8004c40 <xTaskCreateStatic+0xb0>
 8004c02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d01b      	beq.n	8004c40 <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c0a:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c0e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c14:	2202      	movs	r2, #2
 8004c16:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	9303      	str	r3, [sp, #12]
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	9302      	str	r3, [sp, #8]
 8004c22:	f107 0314 	add.w	r3, r7, #20
 8004c26:	9301      	str	r3, [sp, #4]
 8004c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2a:	9300      	str	r3, [sp, #0]
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	687a      	ldr	r2, [r7, #4]
 8004c30:	68b9      	ldr	r1, [r7, #8]
 8004c32:	68f8      	ldr	r0, [r7, #12]
 8004c34:	f000 f850 	bl	8004cd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c38:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c3a:	f000 f8d5 	bl	8004de8 <prvAddNewTaskToReadyList>
 8004c3e:	e001      	b.n	8004c44 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004c40:	2300      	movs	r3, #0
 8004c42:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c44:	697b      	ldr	r3, [r7, #20]
	}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3728      	adds	r7, #40	@ 0x28
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b08c      	sub	sp, #48	@ 0x30
 8004c52:	af04      	add	r7, sp, #16
 8004c54:	60f8      	str	r0, [r7, #12]
 8004c56:	60b9      	str	r1, [r7, #8]
 8004c58:	603b      	str	r3, [r7, #0]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c5e:	88fb      	ldrh	r3, [r7, #6]
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4618      	mov	r0, r3
 8004c64:	f001 fc34 	bl	80064d0 <pvPortMalloc>
 8004c68:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00e      	beq.n	8004c8e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c70:	205c      	movs	r0, #92	@ 0x5c
 8004c72:	f001 fc2d 	bl	80064d0 <pvPortMalloc>
 8004c76:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d003      	beq.n	8004c86 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004c7e:	69fb      	ldr	r3, [r7, #28]
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c84:	e005      	b.n	8004c92 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004c86:	6978      	ldr	r0, [r7, #20]
 8004c88:	f001 fcea 	bl	8006660 <vPortFree>
 8004c8c:	e001      	b.n	8004c92 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004c8e:	2300      	movs	r3, #0
 8004c90:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004c92:	69fb      	ldr	r3, [r7, #28]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d017      	beq.n	8004cc8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ca0:	88fa      	ldrh	r2, [r7, #6]
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	9303      	str	r3, [sp, #12]
 8004ca6:	69fb      	ldr	r3, [r7, #28]
 8004ca8:	9302      	str	r3, [sp, #8]
 8004caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cac:	9301      	str	r3, [sp, #4]
 8004cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	68b9      	ldr	r1, [r7, #8]
 8004cb6:	68f8      	ldr	r0, [r7, #12]
 8004cb8:	f000 f80e 	bl	8004cd8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cbc:	69f8      	ldr	r0, [r7, #28]
 8004cbe:	f000 f893 	bl	8004de8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61bb      	str	r3, [r7, #24]
 8004cc6:	e002      	b.n	8004cce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cc8:	f04f 33ff 	mov.w	r3, #4294967295
 8004ccc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cce:	69bb      	ldr	r3, [r7, #24]
	}
 8004cd0:	4618      	mov	r0, r3
 8004cd2:	3720      	adds	r7, #32
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b088      	sub	sp, #32
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	60f8      	str	r0, [r7, #12]
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	607a      	str	r2, [r7, #4]
 8004ce4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	461a      	mov	r2, r3
 8004cf0:	21a5      	movs	r1, #165	@ 0xa5
 8004cf2:	f002 fd5c 	bl	80077ae <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d00:	3b01      	subs	r3, #1
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	4413      	add	r3, r2
 8004d06:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	f023 0307 	bic.w	r3, r3, #7
 8004d0e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d10:	69bb      	ldr	r3, [r7, #24]
 8004d12:	f003 0307 	and.w	r3, r3, #7
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00b      	beq.n	8004d32 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d1e:	f383 8811 	msr	BASEPRI, r3
 8004d22:	f3bf 8f6f 	isb	sy
 8004d26:	f3bf 8f4f 	dsb	sy
 8004d2a:	617b      	str	r3, [r7, #20]
}
 8004d2c:	bf00      	nop
 8004d2e:	bf00      	nop
 8004d30:	e7fd      	b.n	8004d2e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d32:	2300      	movs	r3, #0
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	e012      	b.n	8004d5e <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	69fb      	ldr	r3, [r7, #28]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	7819      	ldrb	r1, [r3, #0]
 8004d40:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	4413      	add	r3, r2
 8004d46:	3334      	adds	r3, #52	@ 0x34
 8004d48:	460a      	mov	r2, r1
 8004d4a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	69fb      	ldr	r3, [r7, #28]
 8004d50:	4413      	add	r3, r2
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d006      	beq.n	8004d66 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	3301      	adds	r3, #1
 8004d5c:	61fb      	str	r3, [r7, #28]
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2b0f      	cmp	r3, #15
 8004d62:	d9e9      	bls.n	8004d38 <prvInitialiseNewTask+0x60>
 8004d64:	e000      	b.n	8004d68 <prvInitialiseNewTask+0x90>
		{
			break;
 8004d66:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d72:	2b37      	cmp	r3, #55	@ 0x37
 8004d74:	d901      	bls.n	8004d7a <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004d76:	2337      	movs	r3, #55	@ 0x37
 8004d78:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004d80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d82:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d84:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d88:	2200      	movs	r2, #0
 8004d8a:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d8e:	3304      	adds	r3, #4
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7ff f938 	bl	8004006 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d98:	3318      	adds	r3, #24
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7ff f933 	bl	8004006 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004da6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004da8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db8:	2200      	movs	r2, #0
 8004dba:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	68f9      	ldr	r1, [r7, #12]
 8004dc8:	69b8      	ldr	r0, [r7, #24]
 8004dca:	f001 f98b 	bl	80060e4 <pxPortInitialiseStack>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dd2:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004dd4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d002      	beq.n	8004de0 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004dda:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ddc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dde:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de0:	bf00      	nop
 8004de2:	3720      	adds	r7, #32
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b082      	sub	sp, #8
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004df0:	f001 fa6c 	bl	80062cc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004df4:	4b2d      	ldr	r3, [pc, #180]	@ (8004eac <prvAddNewTaskToReadyList+0xc4>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3301      	adds	r3, #1
 8004dfa:	4a2c      	ldr	r2, [pc, #176]	@ (8004eac <prvAddNewTaskToReadyList+0xc4>)
 8004dfc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004dfe:	4b2c      	ldr	r3, [pc, #176]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d109      	bne.n	8004e1a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e06:	4a2a      	ldr	r2, [pc, #168]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e0c:	4b27      	ldr	r3, [pc, #156]	@ (8004eac <prvAddNewTaskToReadyList+0xc4>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	d110      	bne.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e14:	f000 fca2 	bl	800575c <prvInitialiseTaskLists>
 8004e18:	e00d      	b.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e1a:	4b26      	ldr	r3, [pc, #152]	@ (8004eb4 <prvAddNewTaskToReadyList+0xcc>)
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e22:	4b23      	ldr	r3, [pc, #140]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d802      	bhi.n	8004e36 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e30:	4a1f      	ldr	r2, [pc, #124]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e36:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <prvAddNewTaskToReadyList+0xd0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	4a1e      	ldr	r2, [pc, #120]	@ (8004eb8 <prvAddNewTaskToReadyList+0xd0>)
 8004e3e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e40:	4b1d      	ldr	r3, [pc, #116]	@ (8004eb8 <prvAddNewTaskToReadyList+0xd0>)
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ebc <prvAddNewTaskToReadyList+0xd4>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d903      	bls.n	8004e5c <prvAddNewTaskToReadyList+0x74>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	4a18      	ldr	r2, [pc, #96]	@ (8004ebc <prvAddNewTaskToReadyList+0xd4>)
 8004e5a:	6013      	str	r3, [r2, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	009b      	lsls	r3, r3, #2
 8004e68:	4a15      	ldr	r2, [pc, #84]	@ (8004ec0 <prvAddNewTaskToReadyList+0xd8>)
 8004e6a:	441a      	add	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f7ff f8d3 	bl	800401e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004e78:	f001 fa58 	bl	800632c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004e7c:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb4 <prvAddNewTaskToReadyList+0xcc>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00e      	beq.n	8004ea2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004e84:	4b0a      	ldr	r3, [pc, #40]	@ (8004eb0 <prvAddNewTaskToReadyList+0xc8>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d207      	bcs.n	8004ea2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004e92:	4b0c      	ldr	r3, [pc, #48]	@ (8004ec4 <prvAddNewTaskToReadyList+0xdc>)
 8004e94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e98:	601a      	str	r2, [r3, #0]
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ea2:	bf00      	nop
 8004ea4:	3708      	adds	r7, #8
 8004ea6:	46bd      	mov	sp, r7
 8004ea8:	bd80      	pop	{r7, pc}
 8004eaa:	bf00      	nop
 8004eac:	2000127c 	.word	0x2000127c
 8004eb0:	20000da8 	.word	0x20000da8
 8004eb4:	20001288 	.word	0x20001288
 8004eb8:	20001298 	.word	0x20001298
 8004ebc:	20001284 	.word	0x20001284
 8004ec0:	20000dac 	.word	0x20000dac
 8004ec4:	e000ed04 	.word	0xe000ed04

08004ec8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b08a      	sub	sp, #40	@ 0x28
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d10b      	bne.n	8004ef4 <vTaskDelayUntil+0x2c>
	__asm volatile
 8004edc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee0:	f383 8811 	msr	BASEPRI, r3
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	f3bf 8f4f 	dsb	sy
 8004eec:	617b      	str	r3, [r7, #20]
}
 8004eee:	bf00      	nop
 8004ef0:	bf00      	nop
 8004ef2:	e7fd      	b.n	8004ef0 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d10b      	bne.n	8004f12 <vTaskDelayUntil+0x4a>
	__asm volatile
 8004efa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004efe:	f383 8811 	msr	BASEPRI, r3
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	613b      	str	r3, [r7, #16]
}
 8004f0c:	bf00      	nop
 8004f0e:	bf00      	nop
 8004f10:	e7fd      	b.n	8004f0e <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004f12:	4b2a      	ldr	r3, [pc, #168]	@ (8004fbc <vTaskDelayUntil+0xf4>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d00b      	beq.n	8004f32 <vTaskDelayUntil+0x6a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	60fb      	str	r3, [r7, #12]
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004f32:	f000 f8e7 	bl	8005104 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004f36:	4b22      	ldr	r3, [pc, #136]	@ (8004fc0 <vTaskDelayUntil+0xf8>)
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	4413      	add	r3, r2
 8004f44:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	6a3a      	ldr	r2, [r7, #32]
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d20b      	bcs.n	8004f68 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	69fa      	ldr	r2, [r7, #28]
 8004f56:	429a      	cmp	r2, r3
 8004f58:	d211      	bcs.n	8004f7e <vTaskDelayUntil+0xb6>
 8004f5a:	69fa      	ldr	r2, [r7, #28]
 8004f5c:	6a3b      	ldr	r3, [r7, #32]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d90d      	bls.n	8004f7e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004f62:	2301      	movs	r3, #1
 8004f64:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f66:	e00a      	b.n	8004f7e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	69fa      	ldr	r2, [r7, #28]
 8004f6e:	429a      	cmp	r2, r3
 8004f70:	d303      	bcc.n	8004f7a <vTaskDelayUntil+0xb2>
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	6a3b      	ldr	r3, [r7, #32]
 8004f76:	429a      	cmp	r2, r3
 8004f78:	d901      	bls.n	8004f7e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d006      	beq.n	8004f98 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004f8a:	69fa      	ldr	r2, [r7, #28]
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	1ad3      	subs	r3, r2, r3
 8004f90:	2100      	movs	r1, #0
 8004f92:	4618      	mov	r0, r3
 8004f94:	f000 fd32 	bl	80059fc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004f98:	f000 f8c2 	bl	8005120 <xTaskResumeAll>
 8004f9c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d107      	bne.n	8004fb4 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004fa4:	4b07      	ldr	r3, [pc, #28]	@ (8004fc4 <vTaskDelayUntil+0xfc>)
 8004fa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004faa:	601a      	str	r2, [r3, #0]
 8004fac:	f3bf 8f4f 	dsb	sy
 8004fb0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fb4:	bf00      	nop
 8004fb6:	3728      	adds	r7, #40	@ 0x28
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	200012a4 	.word	0x200012a4
 8004fc0:	20001280 	.word	0x20001280
 8004fc4:	e000ed04 	.word	0xe000ed04

08004fc8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004fd0:	2300      	movs	r3, #0
 8004fd2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d018      	beq.n	800500c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004fda:	4b14      	ldr	r3, [pc, #80]	@ (800502c <vTaskDelay+0x64>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00b      	beq.n	8004ffa <vTaskDelay+0x32>
	__asm volatile
 8004fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fe6:	f383 8811 	msr	BASEPRI, r3
 8004fea:	f3bf 8f6f 	isb	sy
 8004fee:	f3bf 8f4f 	dsb	sy
 8004ff2:	60bb      	str	r3, [r7, #8]
}
 8004ff4:	bf00      	nop
 8004ff6:	bf00      	nop
 8004ff8:	e7fd      	b.n	8004ff6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004ffa:	f000 f883 	bl	8005104 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004ffe:	2100      	movs	r1, #0
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 fcfb 	bl	80059fc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005006:	f000 f88b 	bl	8005120 <xTaskResumeAll>
 800500a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d107      	bne.n	8005022 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005012:	4b07      	ldr	r3, [pc, #28]	@ (8005030 <vTaskDelay+0x68>)
 8005014:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005022:	bf00      	nop
 8005024:	3710      	adds	r7, #16
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}
 800502a:	bf00      	nop
 800502c:	200012a4 	.word	0x200012a4
 8005030:	e000ed04 	.word	0xe000ed04

08005034 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005034:	b580      	push	{r7, lr}
 8005036:	b08a      	sub	sp, #40	@ 0x28
 8005038:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800503e:	2300      	movs	r3, #0
 8005040:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005042:	463a      	mov	r2, r7
 8005044:	1d39      	adds	r1, r7, #4
 8005046:	f107 0308 	add.w	r3, r7, #8
 800504a:	4618      	mov	r0, r3
 800504c:	f7fe ff8a 	bl	8003f64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005050:	6839      	ldr	r1, [r7, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68ba      	ldr	r2, [r7, #8]
 8005056:	9202      	str	r2, [sp, #8]
 8005058:	9301      	str	r3, [sp, #4]
 800505a:	2300      	movs	r3, #0
 800505c:	9300      	str	r3, [sp, #0]
 800505e:	2300      	movs	r3, #0
 8005060:	460a      	mov	r2, r1
 8005062:	4922      	ldr	r1, [pc, #136]	@ (80050ec <vTaskStartScheduler+0xb8>)
 8005064:	4822      	ldr	r0, [pc, #136]	@ (80050f0 <vTaskStartScheduler+0xbc>)
 8005066:	f7ff fd93 	bl	8004b90 <xTaskCreateStatic>
 800506a:	4603      	mov	r3, r0
 800506c:	4a21      	ldr	r2, [pc, #132]	@ (80050f4 <vTaskStartScheduler+0xc0>)
 800506e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005070:	4b20      	ldr	r3, [pc, #128]	@ (80050f4 <vTaskStartScheduler+0xc0>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d002      	beq.n	800507e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005078:	2301      	movs	r3, #1
 800507a:	617b      	str	r3, [r7, #20]
 800507c:	e001      	b.n	8005082 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800507e:	2300      	movs	r3, #0
 8005080:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2b01      	cmp	r3, #1
 8005086:	d102      	bne.n	800508e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005088:	f000 fd0c 	bl	8005aa4 <xTimerCreateTimerTask>
 800508c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2b01      	cmp	r3, #1
 8005092:	d116      	bne.n	80050c2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	613b      	str	r3, [r7, #16]
}
 80050a6:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050a8:	4b13      	ldr	r3, [pc, #76]	@ (80050f8 <vTaskStartScheduler+0xc4>)
 80050aa:	f04f 32ff 	mov.w	r2, #4294967295
 80050ae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050b0:	4b12      	ldr	r3, [pc, #72]	@ (80050fc <vTaskStartScheduler+0xc8>)
 80050b2:	2201      	movs	r2, #1
 80050b4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050b6:	4b12      	ldr	r3, [pc, #72]	@ (8005100 <vTaskStartScheduler+0xcc>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050bc:	f001 f894 	bl	80061e8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050c0:	e00f      	b.n	80050e2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050c8:	d10b      	bne.n	80050e2 <vTaskStartScheduler+0xae>
	__asm volatile
 80050ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ce:	f383 8811 	msr	BASEPRI, r3
 80050d2:	f3bf 8f6f 	isb	sy
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	60fb      	str	r3, [r7, #12]
}
 80050dc:	bf00      	nop
 80050de:	bf00      	nop
 80050e0:	e7fd      	b.n	80050de <vTaskStartScheduler+0xaa>
}
 80050e2:	bf00      	nop
 80050e4:	3718      	adds	r7, #24
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	0800afa0 	.word	0x0800afa0
 80050f0:	0800572d 	.word	0x0800572d
 80050f4:	200012a0 	.word	0x200012a0
 80050f8:	2000129c 	.word	0x2000129c
 80050fc:	20001288 	.word	0x20001288
 8005100:	20001280 	.word	0x20001280

08005104 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005108:	4b04      	ldr	r3, [pc, #16]	@ (800511c <vTaskSuspendAll+0x18>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3301      	adds	r3, #1
 800510e:	4a03      	ldr	r2, [pc, #12]	@ (800511c <vTaskSuspendAll+0x18>)
 8005110:	6013      	str	r3, [r2, #0]
}
 8005112:	bf00      	nop
 8005114:	46bd      	mov	sp, r7
 8005116:	bc80      	pop	{r7}
 8005118:	4770      	bx	lr
 800511a:	bf00      	nop
 800511c:	200012a4 	.word	0x200012a4

08005120 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005126:	2300      	movs	r3, #0
 8005128:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800512a:	2300      	movs	r3, #0
 800512c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800512e:	4b42      	ldr	r3, [pc, #264]	@ (8005238 <xTaskResumeAll+0x118>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10b      	bne.n	800514e <xTaskResumeAll+0x2e>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	603b      	str	r3, [r7, #0]
}
 8005148:	bf00      	nop
 800514a:	bf00      	nop
 800514c:	e7fd      	b.n	800514a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800514e:	f001 f8bd 	bl	80062cc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005152:	4b39      	ldr	r3, [pc, #228]	@ (8005238 <xTaskResumeAll+0x118>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	3b01      	subs	r3, #1
 8005158:	4a37      	ldr	r2, [pc, #220]	@ (8005238 <xTaskResumeAll+0x118>)
 800515a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800515c:	4b36      	ldr	r3, [pc, #216]	@ (8005238 <xTaskResumeAll+0x118>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d162      	bne.n	800522a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005164:	4b35      	ldr	r3, [pc, #212]	@ (800523c <xTaskResumeAll+0x11c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d05e      	beq.n	800522a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800516c:	e02f      	b.n	80051ce <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800516e:	4b34      	ldr	r3, [pc, #208]	@ (8005240 <xTaskResumeAll+0x120>)
 8005170:	68db      	ldr	r3, [r3, #12]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3318      	adds	r3, #24
 800517a:	4618      	mov	r0, r3
 800517c:	f7fe ffaa 	bl	80040d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3304      	adds	r3, #4
 8005184:	4618      	mov	r0, r3
 8005186:	f7fe ffa5 	bl	80040d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518e:	4b2d      	ldr	r3, [pc, #180]	@ (8005244 <xTaskResumeAll+0x124>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	429a      	cmp	r2, r3
 8005194:	d903      	bls.n	800519e <xTaskResumeAll+0x7e>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800519a:	4a2a      	ldr	r2, [pc, #168]	@ (8005244 <xTaskResumeAll+0x124>)
 800519c:	6013      	str	r3, [r2, #0]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	4a27      	ldr	r2, [pc, #156]	@ (8005248 <xTaskResumeAll+0x128>)
 80051ac:	441a      	add	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f7fe ff32 	bl	800401e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051be:	4b23      	ldr	r3, [pc, #140]	@ (800524c <xTaskResumeAll+0x12c>)
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d302      	bcc.n	80051ce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051c8:	4b21      	ldr	r3, [pc, #132]	@ (8005250 <xTaskResumeAll+0x130>)
 80051ca:	2201      	movs	r2, #1
 80051cc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ce:	4b1c      	ldr	r3, [pc, #112]	@ (8005240 <xTaskResumeAll+0x120>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1cb      	bne.n	800516e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051dc:	f000 fb5c 	bl	8005898 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80051e0:	4b1c      	ldr	r3, [pc, #112]	@ (8005254 <xTaskResumeAll+0x134>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d010      	beq.n	800520e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051ec:	f000 f844 	bl	8005278 <xTaskIncrementTick>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d002      	beq.n	80051fc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051f6:	4b16      	ldr	r3, [pc, #88]	@ (8005250 <xTaskResumeAll+0x130>)
 80051f8:	2201      	movs	r2, #1
 80051fa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	3b01      	subs	r3, #1
 8005200:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1f1      	bne.n	80051ec <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005208:	4b12      	ldr	r3, [pc, #72]	@ (8005254 <xTaskResumeAll+0x134>)
 800520a:	2200      	movs	r2, #0
 800520c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800520e:	4b10      	ldr	r3, [pc, #64]	@ (8005250 <xTaskResumeAll+0x130>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d009      	beq.n	800522a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005216:	2301      	movs	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800521a:	4b0f      	ldr	r3, [pc, #60]	@ (8005258 <xTaskResumeAll+0x138>)
 800521c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f3bf 8f4f 	dsb	sy
 8005226:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f001 f87f 	bl	800632c <vPortExitCritical>

	return xAlreadyYielded;
 800522e:	68bb      	ldr	r3, [r7, #8]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}
 8005238:	200012a4 	.word	0x200012a4
 800523c:	2000127c 	.word	0x2000127c
 8005240:	2000123c 	.word	0x2000123c
 8005244:	20001284 	.word	0x20001284
 8005248:	20000dac 	.word	0x20000dac
 800524c:	20000da8 	.word	0x20000da8
 8005250:	20001290 	.word	0x20001290
 8005254:	2000128c 	.word	0x2000128c
 8005258:	e000ed04 	.word	0xe000ed04

0800525c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005262:	4b04      	ldr	r3, [pc, #16]	@ (8005274 <xTaskGetTickCount+0x18>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005268:	687b      	ldr	r3, [r7, #4]
}
 800526a:	4618      	mov	r0, r3
 800526c:	370c      	adds	r7, #12
 800526e:	46bd      	mov	sp, r7
 8005270:	bc80      	pop	{r7}
 8005272:	4770      	bx	lr
 8005274:	20001280 	.word	0x20001280

08005278 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005282:	4b52      	ldr	r3, [pc, #328]	@ (80053cc <xTaskIncrementTick+0x154>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	2b00      	cmp	r3, #0
 8005288:	f040 808f 	bne.w	80053aa <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800528c:	4b50      	ldr	r3, [pc, #320]	@ (80053d0 <xTaskIncrementTick+0x158>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3301      	adds	r3, #1
 8005292:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005294:	4a4e      	ldr	r2, [pc, #312]	@ (80053d0 <xTaskIncrementTick+0x158>)
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800529a:	693b      	ldr	r3, [r7, #16]
 800529c:	2b00      	cmp	r3, #0
 800529e:	d121      	bne.n	80052e4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052a0:	4b4c      	ldr	r3, [pc, #304]	@ (80053d4 <xTaskIncrementTick+0x15c>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00b      	beq.n	80052c2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80052aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052ae:	f383 8811 	msr	BASEPRI, r3
 80052b2:	f3bf 8f6f 	isb	sy
 80052b6:	f3bf 8f4f 	dsb	sy
 80052ba:	603b      	str	r3, [r7, #0]
}
 80052bc:	bf00      	nop
 80052be:	bf00      	nop
 80052c0:	e7fd      	b.n	80052be <xTaskIncrementTick+0x46>
 80052c2:	4b44      	ldr	r3, [pc, #272]	@ (80053d4 <xTaskIncrementTick+0x15c>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	60fb      	str	r3, [r7, #12]
 80052c8:	4b43      	ldr	r3, [pc, #268]	@ (80053d8 <xTaskIncrementTick+0x160>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a41      	ldr	r2, [pc, #260]	@ (80053d4 <xTaskIncrementTick+0x15c>)
 80052ce:	6013      	str	r3, [r2, #0]
 80052d0:	4a41      	ldr	r2, [pc, #260]	@ (80053d8 <xTaskIncrementTick+0x160>)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6013      	str	r3, [r2, #0]
 80052d6:	4b41      	ldr	r3, [pc, #260]	@ (80053dc <xTaskIncrementTick+0x164>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	3301      	adds	r3, #1
 80052dc:	4a3f      	ldr	r2, [pc, #252]	@ (80053dc <xTaskIncrementTick+0x164>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	f000 fada 	bl	8005898 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052e4:	4b3e      	ldr	r3, [pc, #248]	@ (80053e0 <xTaskIncrementTick+0x168>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d34e      	bcc.n	800538c <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ee:	4b39      	ldr	r3, [pc, #228]	@ (80053d4 <xTaskIncrementTick+0x15c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <xTaskIncrementTick+0x84>
 80052f8:	2301      	movs	r3, #1
 80052fa:	e000      	b.n	80052fe <xTaskIncrementTick+0x86>
 80052fc:	2300      	movs	r3, #0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d004      	beq.n	800530c <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005302:	4b37      	ldr	r3, [pc, #220]	@ (80053e0 <xTaskIncrementTick+0x168>)
 8005304:	f04f 32ff 	mov.w	r2, #4294967295
 8005308:	601a      	str	r2, [r3, #0]
					break;
 800530a:	e03f      	b.n	800538c <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800530c:	4b31      	ldr	r3, [pc, #196]	@ (80053d4 <xTaskIncrementTick+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	429a      	cmp	r2, r3
 8005322:	d203      	bcs.n	800532c <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005324:	4a2e      	ldr	r2, [pc, #184]	@ (80053e0 <xTaskIncrementTick+0x168>)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6013      	str	r3, [r2, #0]
						break;
 800532a:	e02f      	b.n	800538c <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	3304      	adds	r3, #4
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fecf 	bl	80040d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d004      	beq.n	8005348 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	3318      	adds	r3, #24
 8005342:	4618      	mov	r0, r3
 8005344:	f7fe fec6 	bl	80040d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800534c:	4b25      	ldr	r3, [pc, #148]	@ (80053e4 <xTaskIncrementTick+0x16c>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	429a      	cmp	r2, r3
 8005352:	d903      	bls.n	800535c <xTaskIncrementTick+0xe4>
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	4a22      	ldr	r2, [pc, #136]	@ (80053e4 <xTaskIncrementTick+0x16c>)
 800535a:	6013      	str	r3, [r2, #0]
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005360:	4613      	mov	r3, r2
 8005362:	009b      	lsls	r3, r3, #2
 8005364:	4413      	add	r3, r2
 8005366:	009b      	lsls	r3, r3, #2
 8005368:	4a1f      	ldr	r2, [pc, #124]	@ (80053e8 <xTaskIncrementTick+0x170>)
 800536a:	441a      	add	r2, r3
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	3304      	adds	r3, #4
 8005370:	4619      	mov	r1, r3
 8005372:	4610      	mov	r0, r2
 8005374:	f7fe fe53 	bl	800401e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800537c:	4b1b      	ldr	r3, [pc, #108]	@ (80053ec <xTaskIncrementTick+0x174>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005382:	429a      	cmp	r2, r3
 8005384:	d3b3      	bcc.n	80052ee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005386:	2301      	movs	r3, #1
 8005388:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800538a:	e7b0      	b.n	80052ee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800538c:	4b17      	ldr	r3, [pc, #92]	@ (80053ec <xTaskIncrementTick+0x174>)
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005392:	4915      	ldr	r1, [pc, #84]	@ (80053e8 <xTaskIncrementTick+0x170>)
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	440b      	add	r3, r1
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d907      	bls.n	80053b4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053a4:	2301      	movs	r3, #1
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	e004      	b.n	80053b4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053aa:	4b11      	ldr	r3, [pc, #68]	@ (80053f0 <xTaskIncrementTick+0x178>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	3301      	adds	r3, #1
 80053b0:	4a0f      	ldr	r2, [pc, #60]	@ (80053f0 <xTaskIncrementTick+0x178>)
 80053b2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053b4:	4b0f      	ldr	r3, [pc, #60]	@ (80053f4 <xTaskIncrementTick+0x17c>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d001      	beq.n	80053c0 <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053c0:	697b      	ldr	r3, [r7, #20]
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3718      	adds	r7, #24
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bd80      	pop	{r7, pc}
 80053ca:	bf00      	nop
 80053cc:	200012a4 	.word	0x200012a4
 80053d0:	20001280 	.word	0x20001280
 80053d4:	20001234 	.word	0x20001234
 80053d8:	20001238 	.word	0x20001238
 80053dc:	20001294 	.word	0x20001294
 80053e0:	2000129c 	.word	0x2000129c
 80053e4:	20001284 	.word	0x20001284
 80053e8:	20000dac 	.word	0x20000dac
 80053ec:	20000da8 	.word	0x20000da8
 80053f0:	2000128c 	.word	0x2000128c
 80053f4:	20001290 	.word	0x20001290

080053f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053fe:	4b28      	ldr	r3, [pc, #160]	@ (80054a0 <vTaskSwitchContext+0xa8>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d003      	beq.n	800540e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005406:	4b27      	ldr	r3, [pc, #156]	@ (80054a4 <vTaskSwitchContext+0xac>)
 8005408:	2201      	movs	r2, #1
 800540a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800540c:	e042      	b.n	8005494 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800540e:	4b25      	ldr	r3, [pc, #148]	@ (80054a4 <vTaskSwitchContext+0xac>)
 8005410:	2200      	movs	r2, #0
 8005412:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005414:	4b24      	ldr	r3, [pc, #144]	@ (80054a8 <vTaskSwitchContext+0xb0>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	60fb      	str	r3, [r7, #12]
 800541a:	e011      	b.n	8005440 <vTaskSwitchContext+0x48>
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <vTaskSwitchContext+0x42>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	607b      	str	r3, [r7, #4]
}
 8005434:	bf00      	nop
 8005436:	bf00      	nop
 8005438:	e7fd      	b.n	8005436 <vTaskSwitchContext+0x3e>
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	3b01      	subs	r3, #1
 800543e:	60fb      	str	r3, [r7, #12]
 8005440:	491a      	ldr	r1, [pc, #104]	@ (80054ac <vTaskSwitchContext+0xb4>)
 8005442:	68fa      	ldr	r2, [r7, #12]
 8005444:	4613      	mov	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d0e3      	beq.n	800541c <vTaskSwitchContext+0x24>
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4a13      	ldr	r2, [pc, #76]	@ (80054ac <vTaskSwitchContext+0xb4>)
 8005460:	4413      	add	r3, r2
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	605a      	str	r2, [r3, #4]
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	685a      	ldr	r2, [r3, #4]
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	3308      	adds	r3, #8
 8005476:	429a      	cmp	r2, r3
 8005478:	d104      	bne.n	8005484 <vTaskSwitchContext+0x8c>
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	685b      	ldr	r3, [r3, #4]
 8005488:	68db      	ldr	r3, [r3, #12]
 800548a:	4a09      	ldr	r2, [pc, #36]	@ (80054b0 <vTaskSwitchContext+0xb8>)
 800548c:	6013      	str	r3, [r2, #0]
 800548e:	4a06      	ldr	r2, [pc, #24]	@ (80054a8 <vTaskSwitchContext+0xb0>)
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	6013      	str	r3, [r2, #0]
}
 8005494:	bf00      	nop
 8005496:	3714      	adds	r7, #20
 8005498:	46bd      	mov	sp, r7
 800549a:	bc80      	pop	{r7}
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	200012a4 	.word	0x200012a4
 80054a4:	20001290 	.word	0x20001290
 80054a8:	20001284 	.word	0x20001284
 80054ac:	20000dac 	.word	0x20000dac
 80054b0:	20000da8 	.word	0x20000da8

080054b4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b084      	sub	sp, #16
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
 80054bc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10b      	bne.n	80054dc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054dc:	4b07      	ldr	r3, [pc, #28]	@ (80054fc <vTaskPlaceOnEventList+0x48>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	3318      	adds	r3, #24
 80054e2:	4619      	mov	r1, r3
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f7fe fdbd 	bl	8004064 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054ea:	2101      	movs	r1, #1
 80054ec:	6838      	ldr	r0, [r7, #0]
 80054ee:	f000 fa85 	bl	80059fc <prvAddCurrentTaskToDelayedList>
}
 80054f2:	bf00      	nop
 80054f4:	3710      	adds	r7, #16
 80054f6:	46bd      	mov	sp, r7
 80054f8:	bd80      	pop	{r7, pc}
 80054fa:	bf00      	nop
 80054fc:	20000da8 	.word	0x20000da8

08005500 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005500:	b580      	push	{r7, lr}
 8005502:	b086      	sub	sp, #24
 8005504:	af00      	add	r7, sp, #0
 8005506:	60f8      	str	r0, [r7, #12]
 8005508:	60b9      	str	r1, [r7, #8]
 800550a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d10b      	bne.n	800552a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005512:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005516:	f383 8811 	msr	BASEPRI, r3
 800551a:	f3bf 8f6f 	isb	sy
 800551e:	f3bf 8f4f 	dsb	sy
 8005522:	617b      	str	r3, [r7, #20]
}
 8005524:	bf00      	nop
 8005526:	bf00      	nop
 8005528:	e7fd      	b.n	8005526 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800552a:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <vTaskPlaceOnEventListRestricted+0x54>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	3318      	adds	r3, #24
 8005530:	4619      	mov	r1, r3
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f7fe fd73 	bl	800401e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d002      	beq.n	8005544 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295
 8005542:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005544:	6879      	ldr	r1, [r7, #4]
 8005546:	68b8      	ldr	r0, [r7, #8]
 8005548:	f000 fa58 	bl	80059fc <prvAddCurrentTaskToDelayedList>
	}
 800554c:	bf00      	nop
 800554e:	3718      	adds	r7, #24
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	20000da8 	.word	0x20000da8

08005558 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68db      	ldr	r3, [r3, #12]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d10b      	bne.n	8005586 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800556e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005572:	f383 8811 	msr	BASEPRI, r3
 8005576:	f3bf 8f6f 	isb	sy
 800557a:	f3bf 8f4f 	dsb	sy
 800557e:	60fb      	str	r3, [r7, #12]
}
 8005580:	bf00      	nop
 8005582:	bf00      	nop
 8005584:	e7fd      	b.n	8005582 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	3318      	adds	r3, #24
 800558a:	4618      	mov	r0, r3
 800558c:	f7fe fda2 	bl	80040d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005590:	4b1d      	ldr	r3, [pc, #116]	@ (8005608 <xTaskRemoveFromEventList+0xb0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11d      	bne.n	80055d4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	3304      	adds	r3, #4
 800559c:	4618      	mov	r0, r3
 800559e:	f7fe fd99 	bl	80040d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055a6:	4b19      	ldr	r3, [pc, #100]	@ (800560c <xTaskRemoveFromEventList+0xb4>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d903      	bls.n	80055b6 <xTaskRemoveFromEventList+0x5e>
 80055ae:	693b      	ldr	r3, [r7, #16]
 80055b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b2:	4a16      	ldr	r2, [pc, #88]	@ (800560c <xTaskRemoveFromEventList+0xb4>)
 80055b4:	6013      	str	r3, [r2, #0]
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	009b      	lsls	r3, r3, #2
 80055c2:	4a13      	ldr	r2, [pc, #76]	@ (8005610 <xTaskRemoveFromEventList+0xb8>)
 80055c4:	441a      	add	r2, r3
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	3304      	adds	r3, #4
 80055ca:	4619      	mov	r1, r3
 80055cc:	4610      	mov	r0, r2
 80055ce:	f7fe fd26 	bl	800401e <vListInsertEnd>
 80055d2:	e005      	b.n	80055e0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3318      	adds	r3, #24
 80055d8:	4619      	mov	r1, r3
 80055da:	480e      	ldr	r0, [pc, #56]	@ (8005614 <xTaskRemoveFromEventList+0xbc>)
 80055dc:	f7fe fd1f 	bl	800401e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e4:	4b0c      	ldr	r3, [pc, #48]	@ (8005618 <xTaskRemoveFromEventList+0xc0>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d905      	bls.n	80055fa <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055ee:	2301      	movs	r3, #1
 80055f0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055f2:	4b0a      	ldr	r3, [pc, #40]	@ (800561c <xTaskRemoveFromEventList+0xc4>)
 80055f4:	2201      	movs	r2, #1
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	e001      	b.n	80055fe <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055fa:	2300      	movs	r3, #0
 80055fc:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80055fe:	697b      	ldr	r3, [r7, #20]
}
 8005600:	4618      	mov	r0, r3
 8005602:	3718      	adds	r7, #24
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}
 8005608:	200012a4 	.word	0x200012a4
 800560c:	20001284 	.word	0x20001284
 8005610:	20000dac 	.word	0x20000dac
 8005614:	2000123c 	.word	0x2000123c
 8005618:	20000da8 	.word	0x20000da8
 800561c:	20001290 	.word	0x20001290

08005620 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005628:	4b06      	ldr	r3, [pc, #24]	@ (8005644 <vTaskInternalSetTimeOutState+0x24>)
 800562a:	681a      	ldr	r2, [r3, #0]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005630:	4b05      	ldr	r3, [pc, #20]	@ (8005648 <vTaskInternalSetTimeOutState+0x28>)
 8005632:	681a      	ldr	r2, [r3, #0]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]
}
 8005638:	bf00      	nop
 800563a:	370c      	adds	r7, #12
 800563c:	46bd      	mov	sp, r7
 800563e:	bc80      	pop	{r7}
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20001294 	.word	0x20001294
 8005648:	20001280 	.word	0x20001280

0800564c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b088      	sub	sp, #32
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d10b      	bne.n	8005674 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800565c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005660:	f383 8811 	msr	BASEPRI, r3
 8005664:	f3bf 8f6f 	isb	sy
 8005668:	f3bf 8f4f 	dsb	sy
 800566c:	613b      	str	r3, [r7, #16]
}
 800566e:	bf00      	nop
 8005670:	bf00      	nop
 8005672:	e7fd      	b.n	8005670 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10b      	bne.n	8005692 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	60fb      	str	r3, [r7, #12]
}
 800568c:	bf00      	nop
 800568e:	bf00      	nop
 8005690:	e7fd      	b.n	800568e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005692:	f000 fe1b 	bl	80062cc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005696:	4b1d      	ldr	r3, [pc, #116]	@ (800570c <xTaskCheckForTimeOut+0xc0>)
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	685b      	ldr	r3, [r3, #4]
 80056a0:	69ba      	ldr	r2, [r7, #24]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ae:	d102      	bne.n	80056b6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	e023      	b.n	80056fe <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	4b15      	ldr	r3, [pc, #84]	@ (8005710 <xTaskCheckForTimeOut+0xc4>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	429a      	cmp	r2, r3
 80056c0:	d007      	beq.n	80056d2 <xTaskCheckForTimeOut+0x86>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d302      	bcc.n	80056d2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056cc:	2301      	movs	r3, #1
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e015      	b.n	80056fe <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	697a      	ldr	r2, [r7, #20]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d20b      	bcs.n	80056f4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	681a      	ldr	r2, [r3, #0]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	1ad2      	subs	r2, r2, r3
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7ff ff99 	bl	8005620 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ee:	2300      	movs	r3, #0
 80056f0:	61fb      	str	r3, [r7, #28]
 80056f2:	e004      	b.n	80056fe <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	2200      	movs	r2, #0
 80056f8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056fa:	2301      	movs	r3, #1
 80056fc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056fe:	f000 fe15 	bl	800632c <vPortExitCritical>

	return xReturn;
 8005702:	69fb      	ldr	r3, [r7, #28]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3720      	adds	r7, #32
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20001280 	.word	0x20001280
 8005710:	20001294 	.word	0x20001294

08005714 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005714:	b480      	push	{r7}
 8005716:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005718:	4b03      	ldr	r3, [pc, #12]	@ (8005728 <vTaskMissedYield+0x14>)
 800571a:	2201      	movs	r2, #1
 800571c:	601a      	str	r2, [r3, #0]
}
 800571e:	bf00      	nop
 8005720:	46bd      	mov	sp, r7
 8005722:	bc80      	pop	{r7}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20001290 	.word	0x20001290

0800572c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b082      	sub	sp, #8
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005734:	f000 f852 	bl	80057dc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005738:	4b06      	ldr	r3, [pc, #24]	@ (8005754 <prvIdleTask+0x28>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	2b01      	cmp	r3, #1
 800573e:	d9f9      	bls.n	8005734 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005740:	4b05      	ldr	r3, [pc, #20]	@ (8005758 <prvIdleTask+0x2c>)
 8005742:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005746:	601a      	str	r2, [r3, #0]
 8005748:	f3bf 8f4f 	dsb	sy
 800574c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005750:	e7f0      	b.n	8005734 <prvIdleTask+0x8>
 8005752:	bf00      	nop
 8005754:	20000dac 	.word	0x20000dac
 8005758:	e000ed04 	.word	0xe000ed04

0800575c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b082      	sub	sp, #8
 8005760:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
 8005766:	e00c      	b.n	8005782 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	4613      	mov	r3, r2
 800576c:	009b      	lsls	r3, r3, #2
 800576e:	4413      	add	r3, r2
 8005770:	009b      	lsls	r3, r3, #2
 8005772:	4a12      	ldr	r2, [pc, #72]	@ (80057bc <prvInitialiseTaskLists+0x60>)
 8005774:	4413      	add	r3, r2
 8005776:	4618      	mov	r0, r3
 8005778:	f7fe fc26 	bl	8003fc8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	3301      	adds	r3, #1
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b37      	cmp	r3, #55	@ 0x37
 8005786:	d9ef      	bls.n	8005768 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005788:	480d      	ldr	r0, [pc, #52]	@ (80057c0 <prvInitialiseTaskLists+0x64>)
 800578a:	f7fe fc1d 	bl	8003fc8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800578e:	480d      	ldr	r0, [pc, #52]	@ (80057c4 <prvInitialiseTaskLists+0x68>)
 8005790:	f7fe fc1a 	bl	8003fc8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005794:	480c      	ldr	r0, [pc, #48]	@ (80057c8 <prvInitialiseTaskLists+0x6c>)
 8005796:	f7fe fc17 	bl	8003fc8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800579a:	480c      	ldr	r0, [pc, #48]	@ (80057cc <prvInitialiseTaskLists+0x70>)
 800579c:	f7fe fc14 	bl	8003fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057a0:	480b      	ldr	r0, [pc, #44]	@ (80057d0 <prvInitialiseTaskLists+0x74>)
 80057a2:	f7fe fc11 	bl	8003fc8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057a6:	4b0b      	ldr	r3, [pc, #44]	@ (80057d4 <prvInitialiseTaskLists+0x78>)
 80057a8:	4a05      	ldr	r2, [pc, #20]	@ (80057c0 <prvInitialiseTaskLists+0x64>)
 80057aa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057ac:	4b0a      	ldr	r3, [pc, #40]	@ (80057d8 <prvInitialiseTaskLists+0x7c>)
 80057ae:	4a05      	ldr	r2, [pc, #20]	@ (80057c4 <prvInitialiseTaskLists+0x68>)
 80057b0:	601a      	str	r2, [r3, #0]
}
 80057b2:	bf00      	nop
 80057b4:	3708      	adds	r7, #8
 80057b6:	46bd      	mov	sp, r7
 80057b8:	bd80      	pop	{r7, pc}
 80057ba:	bf00      	nop
 80057bc:	20000dac 	.word	0x20000dac
 80057c0:	2000120c 	.word	0x2000120c
 80057c4:	20001220 	.word	0x20001220
 80057c8:	2000123c 	.word	0x2000123c
 80057cc:	20001250 	.word	0x20001250
 80057d0:	20001268 	.word	0x20001268
 80057d4:	20001234 	.word	0x20001234
 80057d8:	20001238 	.word	0x20001238

080057dc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b082      	sub	sp, #8
 80057e0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e2:	e019      	b.n	8005818 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057e4:	f000 fd72 	bl	80062cc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80057e8:	4b10      	ldr	r3, [pc, #64]	@ (800582c <prvCheckTasksWaitingTermination+0x50>)
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	3304      	adds	r3, #4
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fc6d 	bl	80040d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057fa:	4b0d      	ldr	r3, [pc, #52]	@ (8005830 <prvCheckTasksWaitingTermination+0x54>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	3b01      	subs	r3, #1
 8005800:	4a0b      	ldr	r2, [pc, #44]	@ (8005830 <prvCheckTasksWaitingTermination+0x54>)
 8005802:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005804:	4b0b      	ldr	r3, [pc, #44]	@ (8005834 <prvCheckTasksWaitingTermination+0x58>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	3b01      	subs	r3, #1
 800580a:	4a0a      	ldr	r2, [pc, #40]	@ (8005834 <prvCheckTasksWaitingTermination+0x58>)
 800580c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800580e:	f000 fd8d 	bl	800632c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f810 	bl	8005838 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005818:	4b06      	ldr	r3, [pc, #24]	@ (8005834 <prvCheckTasksWaitingTermination+0x58>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d1e1      	bne.n	80057e4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005820:	bf00      	nop
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	20001250 	.word	0x20001250
 8005830:	2000127c 	.word	0x2000127c
 8005834:	20001264 	.word	0x20001264

08005838 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005838:	b580      	push	{r7, lr}
 800583a:	b084      	sub	sp, #16
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005846:	2b00      	cmp	r3, #0
 8005848:	d108      	bne.n	800585c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800584e:	4618      	mov	r0, r3
 8005850:	f000 ff06 	bl	8006660 <vPortFree>
				vPortFree( pxTCB );
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f000 ff03 	bl	8006660 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800585a:	e019      	b.n	8005890 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005862:	2b01      	cmp	r3, #1
 8005864:	d103      	bne.n	800586e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005866:	6878      	ldr	r0, [r7, #4]
 8005868:	f000 fefa 	bl	8006660 <vPortFree>
	}
 800586c:	e010      	b.n	8005890 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005874:	2b02      	cmp	r3, #2
 8005876:	d00b      	beq.n	8005890 <prvDeleteTCB+0x58>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	60fb      	str	r3, [r7, #12]
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <prvDeleteTCB+0x54>
	}
 8005890:	bf00      	nop
 8005892:	3710      	adds	r7, #16
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}

08005898 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005898:	b480      	push	{r7}
 800589a:	b083      	sub	sp, #12
 800589c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800589e:	4b0e      	ldr	r3, [pc, #56]	@ (80058d8 <prvResetNextTaskUnblockTime+0x40>)
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d101      	bne.n	80058ac <prvResetNextTaskUnblockTime+0x14>
 80058a8:	2301      	movs	r3, #1
 80058aa:	e000      	b.n	80058ae <prvResetNextTaskUnblockTime+0x16>
 80058ac:	2300      	movs	r3, #0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d004      	beq.n	80058bc <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058b2:	4b0a      	ldr	r3, [pc, #40]	@ (80058dc <prvResetNextTaskUnblockTime+0x44>)
 80058b4:	f04f 32ff 	mov.w	r2, #4294967295
 80058b8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058ba:	e008      	b.n	80058ce <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058bc:	4b06      	ldr	r3, [pc, #24]	@ (80058d8 <prvResetNextTaskUnblockTime+0x40>)
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	68db      	ldr	r3, [r3, #12]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	4a04      	ldr	r2, [pc, #16]	@ (80058dc <prvResetNextTaskUnblockTime+0x44>)
 80058cc:	6013      	str	r3, [r2, #0]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bc80      	pop	{r7}
 80058d6:	4770      	bx	lr
 80058d8:	20001234 	.word	0x20001234
 80058dc:	2000129c 	.word	0x2000129c

080058e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058e0:	b480      	push	{r7}
 80058e2:	b083      	sub	sp, #12
 80058e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058e6:	4b0b      	ldr	r3, [pc, #44]	@ (8005914 <xTaskGetSchedulerState+0x34>)
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d102      	bne.n	80058f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058ee:	2301      	movs	r3, #1
 80058f0:	607b      	str	r3, [r7, #4]
 80058f2:	e008      	b.n	8005906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058f4:	4b08      	ldr	r3, [pc, #32]	@ (8005918 <xTaskGetSchedulerState+0x38>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d102      	bne.n	8005902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058fc:	2302      	movs	r3, #2
 80058fe:	607b      	str	r3, [r7, #4]
 8005900:	e001      	b.n	8005906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005902:	2300      	movs	r3, #0
 8005904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005906:	687b      	ldr	r3, [r7, #4]
	}
 8005908:	4618      	mov	r0, r3
 800590a:	370c      	adds	r7, #12
 800590c:	46bd      	mov	sp, r7
 800590e:	bc80      	pop	{r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	20001288 	.word	0x20001288
 8005918:	200012a4 	.word	0x200012a4

0800591c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800591c:	b580      	push	{r7, lr}
 800591e:	b086      	sub	sp, #24
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005928:	2300      	movs	r3, #0
 800592a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d058      	beq.n	80059e4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005932:	4b2f      	ldr	r3, [pc, #188]	@ (80059f0 <xTaskPriorityDisinherit+0xd4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	429a      	cmp	r2, r3
 800593a:	d00b      	beq.n	8005954 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800593c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005940:	f383 8811 	msr	BASEPRI, r3
 8005944:	f3bf 8f6f 	isb	sy
 8005948:	f3bf 8f4f 	dsb	sy
 800594c:	60fb      	str	r3, [r7, #12]
}
 800594e:	bf00      	nop
 8005950:	bf00      	nop
 8005952:	e7fd      	b.n	8005950 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10b      	bne.n	8005974 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	60bb      	str	r3, [r7, #8]
}
 800596e:	bf00      	nop
 8005970:	bf00      	nop
 8005972:	e7fd      	b.n	8005970 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005978:	1e5a      	subs	r2, r3, #1
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005986:	429a      	cmp	r2, r3
 8005988:	d02c      	beq.n	80059e4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800598a:	693b      	ldr	r3, [r7, #16]
 800598c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800598e:	2b00      	cmp	r3, #0
 8005990:	d128      	bne.n	80059e4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	3304      	adds	r3, #4
 8005996:	4618      	mov	r0, r3
 8005998:	f7fe fb9c 	bl	80040d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800599c:	693b      	ldr	r3, [r7, #16]
 800599e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059a8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059b4:	4b0f      	ldr	r3, [pc, #60]	@ (80059f4 <xTaskPriorityDisinherit+0xd8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d903      	bls.n	80059c4 <xTaskPriorityDisinherit+0xa8>
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c0:	4a0c      	ldr	r2, [pc, #48]	@ (80059f4 <xTaskPriorityDisinherit+0xd8>)
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059c8:	4613      	mov	r3, r2
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	4413      	add	r3, r2
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	4a09      	ldr	r2, [pc, #36]	@ (80059f8 <xTaskPriorityDisinherit+0xdc>)
 80059d2:	441a      	add	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	3304      	adds	r3, #4
 80059d8:	4619      	mov	r1, r3
 80059da:	4610      	mov	r0, r2
 80059dc:	f7fe fb1f 	bl	800401e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059e0:	2301      	movs	r3, #1
 80059e2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059e4:	697b      	ldr	r3, [r7, #20]
	}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	20000da8 	.word	0x20000da8
 80059f4:	20001284 	.word	0x20001284
 80059f8:	20000dac 	.word	0x20000dac

080059fc <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a06:	4b21      	ldr	r3, [pc, #132]	@ (8005a8c <prvAddCurrentTaskToDelayedList+0x90>)
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a0c:	4b20      	ldr	r3, [pc, #128]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	3304      	adds	r3, #4
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fe fb5e 	bl	80040d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a1e:	d10a      	bne.n	8005a36 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d007      	beq.n	8005a36 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a26:	4b1a      	ldr	r3, [pc, #104]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3304      	adds	r3, #4
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	4819      	ldr	r0, [pc, #100]	@ (8005a94 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a30:	f7fe faf5 	bl	800401e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a34:	e026      	b.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	4413      	add	r3, r2
 8005a3c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a3e:	4b14      	ldr	r3, [pc, #80]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	68ba      	ldr	r2, [r7, #8]
 8005a44:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a46:	68ba      	ldr	r2, [r7, #8]
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d209      	bcs.n	8005a62 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a4e:	4b12      	ldr	r3, [pc, #72]	@ (8005a98 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a50:	681a      	ldr	r2, [r3, #0]
 8005a52:	4b0f      	ldr	r3, [pc, #60]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4610      	mov	r0, r2
 8005a5c:	f7fe fb02 	bl	8004064 <vListInsert>
}
 8005a60:	e010      	b.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a62:	4b0e      	ldr	r3, [pc, #56]	@ (8005a9c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	4b0a      	ldr	r3, [pc, #40]	@ (8005a90 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe faf8 	bl	8004064 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a74:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	68ba      	ldr	r2, [r7, #8]
 8005a7a:	429a      	cmp	r2, r3
 8005a7c:	d202      	bcs.n	8005a84 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a7e:	4a08      	ldr	r2, [pc, #32]	@ (8005aa0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	6013      	str	r3, [r2, #0]
}
 8005a84:	bf00      	nop
 8005a86:	3710      	adds	r7, #16
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	bd80      	pop	{r7, pc}
 8005a8c:	20001280 	.word	0x20001280
 8005a90:	20000da8 	.word	0x20000da8
 8005a94:	20001268 	.word	0x20001268
 8005a98:	20001238 	.word	0x20001238
 8005a9c:	20001234 	.word	0x20001234
 8005aa0:	2000129c 	.word	0x2000129c

08005aa4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b08a      	sub	sp, #40	@ 0x28
 8005aa8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005aae:	f000 fad9 	bl	8006064 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ab2:	4b1d      	ldr	r3, [pc, #116]	@ (8005b28 <xTimerCreateTimerTask+0x84>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d021      	beq.n	8005afe <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005ac2:	1d3a      	adds	r2, r7, #4
 8005ac4:	f107 0108 	add.w	r1, r7, #8
 8005ac8:	f107 030c 	add.w	r3, r7, #12
 8005acc:	4618      	mov	r0, r3
 8005ace:	f7fe fa61 	bl	8003f94 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ad2:	6879      	ldr	r1, [r7, #4]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	9202      	str	r2, [sp, #8]
 8005ada:	9301      	str	r3, [sp, #4]
 8005adc:	2302      	movs	r3, #2
 8005ade:	9300      	str	r3, [sp, #0]
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	460a      	mov	r2, r1
 8005ae4:	4911      	ldr	r1, [pc, #68]	@ (8005b2c <xTimerCreateTimerTask+0x88>)
 8005ae6:	4812      	ldr	r0, [pc, #72]	@ (8005b30 <xTimerCreateTimerTask+0x8c>)
 8005ae8:	f7ff f852 	bl	8004b90 <xTaskCreateStatic>
 8005aec:	4603      	mov	r3, r0
 8005aee:	4a11      	ldr	r2, [pc, #68]	@ (8005b34 <xTimerCreateTimerTask+0x90>)
 8005af0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005af2:	4b10      	ldr	r3, [pc, #64]	@ (8005b34 <xTimerCreateTimerTask+0x90>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005afa:	2301      	movs	r3, #1
 8005afc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10b      	bne.n	8005b1c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	613b      	str	r3, [r7, #16]
}
 8005b16:	bf00      	nop
 8005b18:	bf00      	nop
 8005b1a:	e7fd      	b.n	8005b18 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b1c:	697b      	ldr	r3, [r7, #20]
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3718      	adds	r7, #24
 8005b22:	46bd      	mov	sp, r7
 8005b24:	bd80      	pop	{r7, pc}
 8005b26:	bf00      	nop
 8005b28:	200012d8 	.word	0x200012d8
 8005b2c:	0800afa8 	.word	0x0800afa8
 8005b30:	08005c59 	.word	0x08005c59
 8005b34:	200012dc 	.word	0x200012dc

08005b38 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b08a      	sub	sp, #40	@ 0x28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	607a      	str	r2, [r7, #4]
 8005b44:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b46:	2300      	movs	r3, #0
 8005b48:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	623b      	str	r3, [r7, #32]
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b68:	4b19      	ldr	r3, [pc, #100]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d02a      	beq.n	8005bc6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	2b05      	cmp	r3, #5
 8005b80:	dc18      	bgt.n	8005bb4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b82:	f7ff fead 	bl	80058e0 <xTaskGetSchedulerState>
 8005b86:	4603      	mov	r3, r0
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d109      	bne.n	8005ba0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b8c:	4b10      	ldr	r3, [pc, #64]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005b8e:	6818      	ldr	r0, [r3, #0]
 8005b90:	f107 0110 	add.w	r1, r7, #16
 8005b94:	2300      	movs	r3, #0
 8005b96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b98:	f7fe fc0e 	bl	80043b8 <xQueueGenericSend>
 8005b9c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b9e:	e012      	b.n	8005bc6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005ba2:	6818      	ldr	r0, [r3, #0]
 8005ba4:	f107 0110 	add.w	r1, r7, #16
 8005ba8:	2300      	movs	r3, #0
 8005baa:	2200      	movs	r2, #0
 8005bac:	f7fe fc04 	bl	80043b8 <xQueueGenericSend>
 8005bb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bb2:	e008      	b.n	8005bc6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005bb4:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <xTimerGenericCommand+0x98>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	f107 0110 	add.w	r1, r7, #16
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	f7fe fcfc 	bl	80045bc <xQueueGenericSendFromISR>
 8005bc4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bc8:	4618      	mov	r0, r3
 8005bca:	3728      	adds	r7, #40	@ 0x28
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}
 8005bd0:	200012d8 	.word	0x200012d8

08005bd4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af02      	add	r7, sp, #8
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005bde:	4b1d      	ldr	r3, [pc, #116]	@ (8005c54 <prvProcessExpiredTimer+0x80>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	68db      	ldr	r3, [r3, #12]
 8005be4:	68db      	ldr	r3, [r3, #12]
 8005be6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	3304      	adds	r3, #4
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7fe fa71 	bl	80040d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	69db      	ldr	r3, [r3, #28]
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d123      	bne.n	8005c42 <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	699a      	ldr	r2, [r3, #24]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	18d1      	adds	r1, r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	683a      	ldr	r2, [r7, #0]
 8005c06:	6978      	ldr	r0, [r7, #20]
 8005c08:	f000 f8cc 	bl	8005da4 <prvInsertTimerInActiveList>
 8005c0c:	4603      	mov	r3, r0
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d017      	beq.n	8005c42 <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c12:	2300      	movs	r3, #0
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	2300      	movs	r3, #0
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	2100      	movs	r1, #0
 8005c1c:	6978      	ldr	r0, [r7, #20]
 8005c1e:	f7ff ff8b 	bl	8005b38 <xTimerGenericCommand>
 8005c22:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c24:	693b      	ldr	r3, [r7, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d10b      	bne.n	8005c42 <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005c2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2e:	f383 8811 	msr	BASEPRI, r3
 8005c32:	f3bf 8f6f 	isb	sy
 8005c36:	f3bf 8f4f 	dsb	sy
 8005c3a:	60fb      	str	r3, [r7, #12]
}
 8005c3c:	bf00      	nop
 8005c3e:	bf00      	nop
 8005c40:	e7fd      	b.n	8005c3e <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c46:	6978      	ldr	r0, [r7, #20]
 8005c48:	4798      	blx	r3
}
 8005c4a:	bf00      	nop
 8005c4c:	3718      	adds	r7, #24
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	bd80      	pop	{r7, pc}
 8005c52:	bf00      	nop
 8005c54:	200012d0 	.word	0x200012d0

08005c58 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c60:	f107 0308 	add.w	r3, r7, #8
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f859 	bl	8005d1c <prvGetNextExpireTime>
 8005c6a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	68f8      	ldr	r0, [r7, #12]
 8005c72:	f000 f805 	bl	8005c80 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c76:	f000 f8d7 	bl	8005e28 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c7a:	bf00      	nop
 8005c7c:	e7f0      	b.n	8005c60 <prvTimerTask+0x8>
	...

08005c80 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c8a:	f7ff fa3b 	bl	8005104 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c8e:	f107 0308 	add.w	r3, r7, #8
 8005c92:	4618      	mov	r0, r3
 8005c94:	f000 f866 	bl	8005d64 <prvSampleTimeNow>
 8005c98:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d130      	bne.n	8005d02 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <prvProcessTimerOrBlockTask+0x3c>
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d806      	bhi.n	8005cbc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cae:	f7ff fa37 	bl	8005120 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cb2:	68f9      	ldr	r1, [r7, #12]
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f7ff ff8d 	bl	8005bd4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005cba:	e024      	b.n	8005d06 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d008      	beq.n	8005cd4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cc2:	4b13      	ldr	r3, [pc, #76]	@ (8005d10 <prvProcessTimerOrBlockTask+0x90>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	bf0c      	ite	eq
 8005ccc:	2301      	moveq	r3, #1
 8005cce:	2300      	movne	r3, #0
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <prvProcessTimerOrBlockTask+0x94>)
 8005cd6:	6818      	ldr	r0, [r3, #0]
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	683a      	ldr	r2, [r7, #0]
 8005ce0:	4619      	mov	r1, r3
 8005ce2:	f7fe ff21 	bl	8004b28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005ce6:	f7ff fa1b 	bl	8005120 <xTaskResumeAll>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d10a      	bne.n	8005d06 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cf0:	4b09      	ldr	r3, [pc, #36]	@ (8005d18 <prvProcessTimerOrBlockTask+0x98>)
 8005cf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cf6:	601a      	str	r2, [r3, #0]
 8005cf8:	f3bf 8f4f 	dsb	sy
 8005cfc:	f3bf 8f6f 	isb	sy
}
 8005d00:	e001      	b.n	8005d06 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d02:	f7ff fa0d 	bl	8005120 <xTaskResumeAll>
}
 8005d06:	bf00      	nop
 8005d08:	3710      	adds	r7, #16
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	200012d4 	.word	0x200012d4
 8005d14:	200012d8 	.word	0x200012d8
 8005d18:	e000ed04 	.word	0xe000ed04

08005d1c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b085      	sub	sp, #20
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d24:	4b0e      	ldr	r3, [pc, #56]	@ (8005d60 <prvGetNextExpireTime+0x44>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	bf0c      	ite	eq
 8005d2e:	2301      	moveq	r3, #1
 8005d30:	2300      	movne	r3, #0
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	461a      	mov	r2, r3
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d105      	bne.n	8005d4e <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d42:	4b07      	ldr	r3, [pc, #28]	@ (8005d60 <prvGetNextExpireTime+0x44>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	68db      	ldr	r3, [r3, #12]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	60fb      	str	r3, [r7, #12]
 8005d4c:	e001      	b.n	8005d52 <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d52:	68fb      	ldr	r3, [r7, #12]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3714      	adds	r7, #20
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bc80      	pop	{r7}
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	200012d0 	.word	0x200012d0

08005d64 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b084      	sub	sp, #16
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d6c:	f7ff fa76 	bl	800525c <xTaskGetTickCount>
 8005d70:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d72:	4b0b      	ldr	r3, [pc, #44]	@ (8005da0 <prvSampleTimeNow+0x3c>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	68fa      	ldr	r2, [r7, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d205      	bcs.n	8005d88 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d7c:	f000 f910 	bl	8005fa0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2201      	movs	r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	e002      	b.n	8005d8e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d8e:	4a04      	ldr	r2, [pc, #16]	@ (8005da0 <prvSampleTimeNow+0x3c>)
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d94:	68fb      	ldr	r3, [r7, #12]
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3710      	adds	r7, #16
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	200012e0 	.word	0x200012e0

08005da4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
 8005db0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005db2:	2300      	movs	r3, #0
 8005db4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	68ba      	ldr	r2, [r7, #8]
 8005dba:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	68fa      	ldr	r2, [r7, #12]
 8005dc0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dc2:	68ba      	ldr	r2, [r7, #8]
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	d812      	bhi.n	8005df0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	1ad2      	subs	r2, r2, r3
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d302      	bcc.n	8005dde <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	e01b      	b.n	8005e16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dde:	4b10      	ldr	r3, [pc, #64]	@ (8005e20 <prvInsertTimerInActiveList+0x7c>)
 8005de0:	681a      	ldr	r2, [r3, #0]
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3304      	adds	r3, #4
 8005de6:	4619      	mov	r1, r3
 8005de8:	4610      	mov	r0, r2
 8005dea:	f7fe f93b 	bl	8004064 <vListInsert>
 8005dee:	e012      	b.n	8005e16 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d206      	bcs.n	8005e06 <prvInsertTimerInActiveList+0x62>
 8005df8:	68ba      	ldr	r2, [r7, #8]
 8005dfa:	683b      	ldr	r3, [r7, #0]
 8005dfc:	429a      	cmp	r2, r3
 8005dfe:	d302      	bcc.n	8005e06 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e00:	2301      	movs	r3, #1
 8005e02:	617b      	str	r3, [r7, #20]
 8005e04:	e007      	b.n	8005e16 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e06:	4b07      	ldr	r3, [pc, #28]	@ (8005e24 <prvInsertTimerInActiveList+0x80>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	3304      	adds	r3, #4
 8005e0e:	4619      	mov	r1, r3
 8005e10:	4610      	mov	r0, r2
 8005e12:	f7fe f927 	bl	8004064 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e16:	697b      	ldr	r3, [r7, #20]
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	200012d4 	.word	0x200012d4
 8005e24:	200012d0 	.word	0x200012d0

08005e28 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b08e      	sub	sp, #56	@ 0x38
 8005e2c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e2e:	e0a5      	b.n	8005f7c <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	da19      	bge.n	8005e6a <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e36:	1d3b      	adds	r3, r7, #4
 8005e38:	3304      	adds	r3, #4
 8005e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10b      	bne.n	8005e5a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e46:	f383 8811 	msr	BASEPRI, r3
 8005e4a:	f3bf 8f6f 	isb	sy
 8005e4e:	f3bf 8f4f 	dsb	sy
 8005e52:	61fb      	str	r3, [r7, #28]
}
 8005e54:	bf00      	nop
 8005e56:	bf00      	nop
 8005e58:	e7fd      	b.n	8005e56 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e60:	6850      	ldr	r0, [r2, #4]
 8005e62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e64:	6892      	ldr	r2, [r2, #8]
 8005e66:	4611      	mov	r1, r2
 8005e68:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	f2c0 8085 	blt.w	8005f7c <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e78:	695b      	ldr	r3, [r3, #20]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e80:	3304      	adds	r3, #4
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7fe f926 	bl	80040d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e88:	463b      	mov	r3, r7
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	f7ff ff6a 	bl	8005d64 <prvSampleTimeNow>
 8005e90:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2b09      	cmp	r3, #9
 8005e96:	d86c      	bhi.n	8005f72 <prvProcessReceivedCommands+0x14a>
 8005e98:	a201      	add	r2, pc, #4	@ (adr r2, 8005ea0 <prvProcessReceivedCommands+0x78>)
 8005e9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e9e:	bf00      	nop
 8005ea0:	08005ec9 	.word	0x08005ec9
 8005ea4:	08005ec9 	.word	0x08005ec9
 8005ea8:	08005ec9 	.word	0x08005ec9
 8005eac:	08005f73 	.word	0x08005f73
 8005eb0:	08005f27 	.word	0x08005f27
 8005eb4:	08005f61 	.word	0x08005f61
 8005eb8:	08005ec9 	.word	0x08005ec9
 8005ebc:	08005ec9 	.word	0x08005ec9
 8005ec0:	08005f73 	.word	0x08005f73
 8005ec4:	08005f27 	.word	0x08005f27
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ec8:	68ba      	ldr	r2, [r7, #8]
 8005eca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ecc:	699b      	ldr	r3, [r3, #24]
 8005ece:	18d1      	adds	r1, r2, r3
 8005ed0:	68bb      	ldr	r3, [r7, #8]
 8005ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ed6:	f7ff ff65 	bl	8005da4 <prvInsertTimerInActiveList>
 8005eda:	4603      	mov	r3, r0
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d04a      	beq.n	8005f76 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ee6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eea:	69db      	ldr	r3, [r3, #28]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d142      	bne.n	8005f76 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef4:	699b      	ldr	r3, [r3, #24]
 8005ef6:	441a      	add	r2, r3
 8005ef8:	2300      	movs	r3, #0
 8005efa:	9300      	str	r3, [sp, #0]
 8005efc:	2300      	movs	r3, #0
 8005efe:	2100      	movs	r1, #0
 8005f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f02:	f7ff fe19 	bl	8005b38 <xTimerGenericCommand>
 8005f06:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f08:	6a3b      	ldr	r3, [r7, #32]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d133      	bne.n	8005f76 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	61bb      	str	r3, [r7, #24]
}
 8005f20:	bf00      	nop
 8005f22:	bf00      	nop
 8005f24:	e7fd      	b.n	8005f22 <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	699b      	ldr	r3, [r3, #24]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d10b      	bne.n	8005f4c <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005f34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f38:	f383 8811 	msr	BASEPRI, r3
 8005f3c:	f3bf 8f6f 	isb	sy
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	617b      	str	r3, [r7, #20]
}
 8005f46:	bf00      	nop
 8005f48:	bf00      	nop
 8005f4a:	e7fd      	b.n	8005f48 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4e:	699a      	ldr	r2, [r3, #24]
 8005f50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f52:	18d1      	adds	r1, r2, r3
 8005f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f5a:	f7ff ff23 	bl	8005da4 <prvInsertTimerInActiveList>
					break;
 8005f5e:	e00d      	b.n	8005f7c <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f62:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d107      	bne.n	8005f7a <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005f6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f6c:	f000 fb78 	bl	8006660 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f70:	e003      	b.n	8005f7a <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005f72:	bf00      	nop
 8005f74:	e002      	b.n	8005f7c <prvProcessReceivedCommands+0x154>
					break;
 8005f76:	bf00      	nop
 8005f78:	e000      	b.n	8005f7c <prvProcessReceivedCommands+0x154>
					break;
 8005f7a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005f7c:	4b07      	ldr	r3, [pc, #28]	@ (8005f9c <prvProcessReceivedCommands+0x174>)
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	1d39      	adds	r1, r7, #4
 8005f82:	2200      	movs	r2, #0
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fbb5 	bl	80046f4 <xQueueReceive>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	f47f af4f 	bne.w	8005e30 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005f92:	bf00      	nop
 8005f94:	bf00      	nop
 8005f96:	3730      	adds	r7, #48	@ 0x30
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	200012d8 	.word	0x200012d8

08005fa0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b088      	sub	sp, #32
 8005fa4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fa6:	e046      	b.n	8006036 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fa8:	4b2c      	ldr	r3, [pc, #176]	@ (800605c <prvSwitchTimerLists+0xbc>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	68db      	ldr	r3, [r3, #12]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fb2:	4b2a      	ldr	r3, [pc, #168]	@ (800605c <prvSwitchTimerLists+0xbc>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7fe f887 	bl	80040d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fca:	68f8      	ldr	r0, [r7, #12]
 8005fcc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	69db      	ldr	r3, [r3, #28]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d12f      	bne.n	8006036 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	693a      	ldr	r2, [r7, #16]
 8005fdc:	4413      	add	r3, r2
 8005fde:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005fe0:	68ba      	ldr	r2, [r7, #8]
 8005fe2:	693b      	ldr	r3, [r7, #16]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d90e      	bls.n	8006006 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	68fa      	ldr	r2, [r7, #12]
 8005ff2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ff4:	4b19      	ldr	r3, [pc, #100]	@ (800605c <prvSwitchTimerLists+0xbc>)
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	3304      	adds	r3, #4
 8005ffc:	4619      	mov	r1, r3
 8005ffe:	4610      	mov	r0, r2
 8006000:	f7fe f830 	bl	8004064 <vListInsert>
 8006004:	e017      	b.n	8006036 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006006:	2300      	movs	r3, #0
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	693a      	ldr	r2, [r7, #16]
 800600e:	2100      	movs	r1, #0
 8006010:	68f8      	ldr	r0, [r7, #12]
 8006012:	f7ff fd91 	bl	8005b38 <xTimerGenericCommand>
 8006016:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d10b      	bne.n	8006036 <prvSwitchTimerLists+0x96>
	__asm volatile
 800601e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006022:	f383 8811 	msr	BASEPRI, r3
 8006026:	f3bf 8f6f 	isb	sy
 800602a:	f3bf 8f4f 	dsb	sy
 800602e:	603b      	str	r3, [r7, #0]
}
 8006030:	bf00      	nop
 8006032:	bf00      	nop
 8006034:	e7fd      	b.n	8006032 <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006036:	4b09      	ldr	r3, [pc, #36]	@ (800605c <prvSwitchTimerLists+0xbc>)
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d1b3      	bne.n	8005fa8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006040:	4b06      	ldr	r3, [pc, #24]	@ (800605c <prvSwitchTimerLists+0xbc>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006046:	4b06      	ldr	r3, [pc, #24]	@ (8006060 <prvSwitchTimerLists+0xc0>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	4a04      	ldr	r2, [pc, #16]	@ (800605c <prvSwitchTimerLists+0xbc>)
 800604c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800604e:	4a04      	ldr	r2, [pc, #16]	@ (8006060 <prvSwitchTimerLists+0xc0>)
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	6013      	str	r3, [r2, #0]
}
 8006054:	bf00      	nop
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}
 800605c:	200012d0 	.word	0x200012d0
 8006060:	200012d4 	.word	0x200012d4

08006064 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b082      	sub	sp, #8
 8006068:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800606a:	f000 f92f 	bl	80062cc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800606e:	4b15      	ldr	r3, [pc, #84]	@ (80060c4 <prvCheckForValidListAndQueue+0x60>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d120      	bne.n	80060b8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006076:	4814      	ldr	r0, [pc, #80]	@ (80060c8 <prvCheckForValidListAndQueue+0x64>)
 8006078:	f7fd ffa6 	bl	8003fc8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800607c:	4813      	ldr	r0, [pc, #76]	@ (80060cc <prvCheckForValidListAndQueue+0x68>)
 800607e:	f7fd ffa3 	bl	8003fc8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006082:	4b13      	ldr	r3, [pc, #76]	@ (80060d0 <prvCheckForValidListAndQueue+0x6c>)
 8006084:	4a10      	ldr	r2, [pc, #64]	@ (80060c8 <prvCheckForValidListAndQueue+0x64>)
 8006086:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006088:	4b12      	ldr	r3, [pc, #72]	@ (80060d4 <prvCheckForValidListAndQueue+0x70>)
 800608a:	4a10      	ldr	r2, [pc, #64]	@ (80060cc <prvCheckForValidListAndQueue+0x68>)
 800608c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800608e:	2300      	movs	r3, #0
 8006090:	9300      	str	r3, [sp, #0]
 8006092:	4b11      	ldr	r3, [pc, #68]	@ (80060d8 <prvCheckForValidListAndQueue+0x74>)
 8006094:	4a11      	ldr	r2, [pc, #68]	@ (80060dc <prvCheckForValidListAndQueue+0x78>)
 8006096:	2110      	movs	r1, #16
 8006098:	200a      	movs	r0, #10
 800609a:	f7fe f8af 	bl	80041fc <xQueueGenericCreateStatic>
 800609e:	4603      	mov	r3, r0
 80060a0:	4a08      	ldr	r2, [pc, #32]	@ (80060c4 <prvCheckForValidListAndQueue+0x60>)
 80060a2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060a4:	4b07      	ldr	r3, [pc, #28]	@ (80060c4 <prvCheckForValidListAndQueue+0x60>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060ac:	4b05      	ldr	r3, [pc, #20]	@ (80060c4 <prvCheckForValidListAndQueue+0x60>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	490b      	ldr	r1, [pc, #44]	@ (80060e0 <prvCheckForValidListAndQueue+0x7c>)
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fe fd10 	bl	8004ad8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060b8:	f000 f938 	bl	800632c <vPortExitCritical>
}
 80060bc:	bf00      	nop
 80060be:	46bd      	mov	sp, r7
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	bf00      	nop
 80060c4:	200012d8 	.word	0x200012d8
 80060c8:	200012a8 	.word	0x200012a8
 80060cc:	200012bc 	.word	0x200012bc
 80060d0:	200012d0 	.word	0x200012d0
 80060d4:	200012d4 	.word	0x200012d4
 80060d8:	20001384 	.word	0x20001384
 80060dc:	200012e4 	.word	0x200012e4
 80060e0:	0800afb0 	.word	0x0800afb0

080060e4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80060e4:	b480      	push	{r7}
 80060e6:	b085      	sub	sp, #20
 80060e8:	af00      	add	r7, sp, #0
 80060ea:	60f8      	str	r0, [r7, #12]
 80060ec:	60b9      	str	r1, [r7, #8]
 80060ee:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	3b04      	subs	r3, #4
 80060f4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80060fc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	3b04      	subs	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	f023 0201 	bic.w	r2, r3, #1
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b04      	subs	r3, #4
 8006112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006114:	4a08      	ldr	r2, [pc, #32]	@ (8006138 <pxPortInitialiseStack+0x54>)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	3b14      	subs	r3, #20
 800611e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3b20      	subs	r3, #32
 800612a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800612c:	68fb      	ldr	r3, [r7, #12]
}
 800612e:	4618      	mov	r0, r3
 8006130:	3714      	adds	r7, #20
 8006132:	46bd      	mov	sp, r7
 8006134:	bc80      	pop	{r7}
 8006136:	4770      	bx	lr
 8006138:	0800613d 	.word	0x0800613d

0800613c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800613c:	b480      	push	{r7}
 800613e:	b085      	sub	sp, #20
 8006140:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006142:	2300      	movs	r3, #0
 8006144:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006146:	4b12      	ldr	r3, [pc, #72]	@ (8006190 <prvTaskExitError+0x54>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d00b      	beq.n	8006168 <prvTaskExitError+0x2c>
	__asm volatile
 8006150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006154:	f383 8811 	msr	BASEPRI, r3
 8006158:	f3bf 8f6f 	isb	sy
 800615c:	f3bf 8f4f 	dsb	sy
 8006160:	60fb      	str	r3, [r7, #12]
}
 8006162:	bf00      	nop
 8006164:	bf00      	nop
 8006166:	e7fd      	b.n	8006164 <prvTaskExitError+0x28>
	__asm volatile
 8006168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800616c:	f383 8811 	msr	BASEPRI, r3
 8006170:	f3bf 8f6f 	isb	sy
 8006174:	f3bf 8f4f 	dsb	sy
 8006178:	60bb      	str	r3, [r7, #8]
}
 800617a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800617c:	bf00      	nop
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d0fc      	beq.n	800617e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006184:	bf00      	nop
 8006186:	bf00      	nop
 8006188:	3714      	adds	r7, #20
 800618a:	46bd      	mov	sp, r7
 800618c:	bc80      	pop	{r7}
 800618e:	4770      	bx	lr
 8006190:	2000000c 	.word	0x2000000c
	...

080061a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061a0:	4b07      	ldr	r3, [pc, #28]	@ (80061c0 <pxCurrentTCBConst2>)
 80061a2:	6819      	ldr	r1, [r3, #0]
 80061a4:	6808      	ldr	r0, [r1, #0]
 80061a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061aa:	f380 8809 	msr	PSP, r0
 80061ae:	f3bf 8f6f 	isb	sy
 80061b2:	f04f 0000 	mov.w	r0, #0
 80061b6:	f380 8811 	msr	BASEPRI, r0
 80061ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80061be:	4770      	bx	lr

080061c0 <pxCurrentTCBConst2>:
 80061c0:	20000da8 	.word	0x20000da8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop

080061c8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061c8:	4806      	ldr	r0, [pc, #24]	@ (80061e4 <prvPortStartFirstTask+0x1c>)
 80061ca:	6800      	ldr	r0, [r0, #0]
 80061cc:	6800      	ldr	r0, [r0, #0]
 80061ce:	f380 8808 	msr	MSP, r0
 80061d2:	b662      	cpsie	i
 80061d4:	b661      	cpsie	f
 80061d6:	f3bf 8f4f 	dsb	sy
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	df00      	svc	0
 80061e0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80061e2:	bf00      	nop
 80061e4:	e000ed08 	.word	0xe000ed08

080061e8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80061ee:	4b32      	ldr	r3, [pc, #200]	@ (80062b8 <xPortStartScheduler+0xd0>)
 80061f0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b2db      	uxtb	r3, r3
 80061f8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	22ff      	movs	r2, #255	@ 0xff
 80061fe:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	781b      	ldrb	r3, [r3, #0]
 8006204:	b2db      	uxtb	r3, r3
 8006206:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006208:	78fb      	ldrb	r3, [r7, #3]
 800620a:	b2db      	uxtb	r3, r3
 800620c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006210:	b2da      	uxtb	r2, r3
 8006212:	4b2a      	ldr	r3, [pc, #168]	@ (80062bc <xPortStartScheduler+0xd4>)
 8006214:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006216:	4b2a      	ldr	r3, [pc, #168]	@ (80062c0 <xPortStartScheduler+0xd8>)
 8006218:	2207      	movs	r2, #7
 800621a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800621c:	e009      	b.n	8006232 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800621e:	4b28      	ldr	r3, [pc, #160]	@ (80062c0 <xPortStartScheduler+0xd8>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	3b01      	subs	r3, #1
 8006224:	4a26      	ldr	r2, [pc, #152]	@ (80062c0 <xPortStartScheduler+0xd8>)
 8006226:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	005b      	lsls	r3, r3, #1
 800622e:	b2db      	uxtb	r3, r3
 8006230:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006232:	78fb      	ldrb	r3, [r7, #3]
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800623a:	2b80      	cmp	r3, #128	@ 0x80
 800623c:	d0ef      	beq.n	800621e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800623e:	4b20      	ldr	r3, [pc, #128]	@ (80062c0 <xPortStartScheduler+0xd8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f1c3 0307 	rsb	r3, r3, #7
 8006246:	2b04      	cmp	r3, #4
 8006248:	d00b      	beq.n	8006262 <xPortStartScheduler+0x7a>
	__asm volatile
 800624a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800624e:	f383 8811 	msr	BASEPRI, r3
 8006252:	f3bf 8f6f 	isb	sy
 8006256:	f3bf 8f4f 	dsb	sy
 800625a:	60bb      	str	r3, [r7, #8]
}
 800625c:	bf00      	nop
 800625e:	bf00      	nop
 8006260:	e7fd      	b.n	800625e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006262:	4b17      	ldr	r3, [pc, #92]	@ (80062c0 <xPortStartScheduler+0xd8>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	021b      	lsls	r3, r3, #8
 8006268:	4a15      	ldr	r2, [pc, #84]	@ (80062c0 <xPortStartScheduler+0xd8>)
 800626a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800626c:	4b14      	ldr	r3, [pc, #80]	@ (80062c0 <xPortStartScheduler+0xd8>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006274:	4a12      	ldr	r2, [pc, #72]	@ (80062c0 <xPortStartScheduler+0xd8>)
 8006276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006280:	4b10      	ldr	r3, [pc, #64]	@ (80062c4 <xPortStartScheduler+0xdc>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4a0f      	ldr	r2, [pc, #60]	@ (80062c4 <xPortStartScheduler+0xdc>)
 8006286:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800628a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800628c:	4b0d      	ldr	r3, [pc, #52]	@ (80062c4 <xPortStartScheduler+0xdc>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a0c      	ldr	r2, [pc, #48]	@ (80062c4 <xPortStartScheduler+0xdc>)
 8006292:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8006296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006298:	f000 f8b8 	bl	800640c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800629c:	4b0a      	ldr	r3, [pc, #40]	@ (80062c8 <xPortStartScheduler+0xe0>)
 800629e:	2200      	movs	r2, #0
 80062a0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062a2:	f7ff ff91 	bl	80061c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062a6:	f7ff f8a7 	bl	80053f8 <vTaskSwitchContext>
	prvTaskExitError();
 80062aa:	f7ff ff47 	bl	800613c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	e000e400 	.word	0xe000e400
 80062bc:	200013d4 	.word	0x200013d4
 80062c0:	200013d8 	.word	0x200013d8
 80062c4:	e000ed20 	.word	0xe000ed20
 80062c8:	2000000c 	.word	0x2000000c

080062cc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062cc:	b480      	push	{r7}
 80062ce:	b083      	sub	sp, #12
 80062d0:	af00      	add	r7, sp, #0
	__asm volatile
 80062d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d6:	f383 8811 	msr	BASEPRI, r3
 80062da:	f3bf 8f6f 	isb	sy
 80062de:	f3bf 8f4f 	dsb	sy
 80062e2:	607b      	str	r3, [r7, #4]
}
 80062e4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80062e6:	4b0f      	ldr	r3, [pc, #60]	@ (8006324 <vPortEnterCritical+0x58>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3301      	adds	r3, #1
 80062ec:	4a0d      	ldr	r2, [pc, #52]	@ (8006324 <vPortEnterCritical+0x58>)
 80062ee:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80062f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006324 <vPortEnterCritical+0x58>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b01      	cmp	r3, #1
 80062f6:	d110      	bne.n	800631a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80062f8:	4b0b      	ldr	r3, [pc, #44]	@ (8006328 <vPortEnterCritical+0x5c>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	b2db      	uxtb	r3, r3
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <vPortEnterCritical+0x4e>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	603b      	str	r3, [r7, #0]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <vPortEnterCritical+0x4a>
	}
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	bc80      	pop	{r7}
 8006322:	4770      	bx	lr
 8006324:	2000000c 	.word	0x2000000c
 8006328:	e000ed04 	.word	0xe000ed04

0800632c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006332:	4b12      	ldr	r3, [pc, #72]	@ (800637c <vPortExitCritical+0x50>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d10b      	bne.n	8006352 <vPortExitCritical+0x26>
	__asm volatile
 800633a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800633e:	f383 8811 	msr	BASEPRI, r3
 8006342:	f3bf 8f6f 	isb	sy
 8006346:	f3bf 8f4f 	dsb	sy
 800634a:	607b      	str	r3, [r7, #4]
}
 800634c:	bf00      	nop
 800634e:	bf00      	nop
 8006350:	e7fd      	b.n	800634e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006352:	4b0a      	ldr	r3, [pc, #40]	@ (800637c <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	3b01      	subs	r3, #1
 8006358:	4a08      	ldr	r2, [pc, #32]	@ (800637c <vPortExitCritical+0x50>)
 800635a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800635c:	4b07      	ldr	r3, [pc, #28]	@ (800637c <vPortExitCritical+0x50>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d105      	bne.n	8006370 <vPortExitCritical+0x44>
 8006364:	2300      	movs	r3, #0
 8006366:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	f383 8811 	msr	BASEPRI, r3
}
 800636e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006370:	bf00      	nop
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	bc80      	pop	{r7}
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	2000000c 	.word	0x2000000c

08006380 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006380:	f3ef 8009 	mrs	r0, PSP
 8006384:	f3bf 8f6f 	isb	sy
 8006388:	4b0d      	ldr	r3, [pc, #52]	@ (80063c0 <pxCurrentTCBConst>)
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006390:	6010      	str	r0, [r2, #0]
 8006392:	e92d 4008 	stmdb	sp!, {r3, lr}
 8006396:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800639a:	f380 8811 	msr	BASEPRI, r0
 800639e:	f7ff f82b 	bl	80053f8 <vTaskSwitchContext>
 80063a2:	f04f 0000 	mov.w	r0, #0
 80063a6:	f380 8811 	msr	BASEPRI, r0
 80063aa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063ae:	6819      	ldr	r1, [r3, #0]
 80063b0:	6808      	ldr	r0, [r1, #0]
 80063b2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063b6:	f380 8809 	msr	PSP, r0
 80063ba:	f3bf 8f6f 	isb	sy
 80063be:	4770      	bx	lr

080063c0 <pxCurrentTCBConst>:
 80063c0:	20000da8 	.word	0x20000da8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063c4:	bf00      	nop
 80063c6:	bf00      	nop

080063c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
	__asm volatile
 80063ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063d2:	f383 8811 	msr	BASEPRI, r3
 80063d6:	f3bf 8f6f 	isb	sy
 80063da:	f3bf 8f4f 	dsb	sy
 80063de:	607b      	str	r3, [r7, #4]
}
 80063e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80063e2:	f7fe ff49 	bl	8005278 <xTaskIncrementTick>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d003      	beq.n	80063f4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80063ec:	4b06      	ldr	r3, [pc, #24]	@ (8006408 <SysTick_Handler+0x40>)
 80063ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80063f2:	601a      	str	r2, [r3, #0]
 80063f4:	2300      	movs	r3, #0
 80063f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	f383 8811 	msr	BASEPRI, r3
}
 80063fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}
 8006408:	e000ed04 	.word	0xe000ed04

0800640c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800640c:	b480      	push	{r7}
 800640e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006410:	4b0a      	ldr	r3, [pc, #40]	@ (800643c <vPortSetupTimerInterrupt+0x30>)
 8006412:	2200      	movs	r2, #0
 8006414:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006416:	4b0a      	ldr	r3, [pc, #40]	@ (8006440 <vPortSetupTimerInterrupt+0x34>)
 8006418:	2200      	movs	r2, #0
 800641a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800641c:	4b09      	ldr	r3, [pc, #36]	@ (8006444 <vPortSetupTimerInterrupt+0x38>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	4a09      	ldr	r2, [pc, #36]	@ (8006448 <vPortSetupTimerInterrupt+0x3c>)
 8006422:	fba2 2303 	umull	r2, r3, r2, r3
 8006426:	099b      	lsrs	r3, r3, #6
 8006428:	4a08      	ldr	r2, [pc, #32]	@ (800644c <vPortSetupTimerInterrupt+0x40>)
 800642a:	3b01      	subs	r3, #1
 800642c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800642e:	4b03      	ldr	r3, [pc, #12]	@ (800643c <vPortSetupTimerInterrupt+0x30>)
 8006430:	2207      	movs	r2, #7
 8006432:	601a      	str	r2, [r3, #0]
}
 8006434:	bf00      	nop
 8006436:	46bd      	mov	sp, r7
 8006438:	bc80      	pop	{r7}
 800643a:	4770      	bx	lr
 800643c:	e000e010 	.word	0xe000e010
 8006440:	e000e018 	.word	0xe000e018
 8006444:	20000000 	.word	0x20000000
 8006448:	10624dd3 	.word	0x10624dd3
 800644c:	e000e014 	.word	0xe000e014

08006450 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006450:	b480      	push	{r7}
 8006452:	b085      	sub	sp, #20
 8006454:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006456:	f3ef 8305 	mrs	r3, IPSR
 800645a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	2b0f      	cmp	r3, #15
 8006460:	d915      	bls.n	800648e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006462:	4a17      	ldr	r2, [pc, #92]	@ (80064c0 <vPortValidateInterruptPriority+0x70>)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	4413      	add	r3, r2
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800646c:	4b15      	ldr	r3, [pc, #84]	@ (80064c4 <vPortValidateInterruptPriority+0x74>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	7afa      	ldrb	r2, [r7, #11]
 8006472:	429a      	cmp	r2, r3
 8006474:	d20b      	bcs.n	800648e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006476:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800647a:	f383 8811 	msr	BASEPRI, r3
 800647e:	f3bf 8f6f 	isb	sy
 8006482:	f3bf 8f4f 	dsb	sy
 8006486:	607b      	str	r3, [r7, #4]
}
 8006488:	bf00      	nop
 800648a:	bf00      	nop
 800648c:	e7fd      	b.n	800648a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800648e:	4b0e      	ldr	r3, [pc, #56]	@ (80064c8 <vPortValidateInterruptPriority+0x78>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006496:	4b0d      	ldr	r3, [pc, #52]	@ (80064cc <vPortValidateInterruptPriority+0x7c>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d90b      	bls.n	80064b6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	603b      	str	r3, [r7, #0]
}
 80064b0:	bf00      	nop
 80064b2:	bf00      	nop
 80064b4:	e7fd      	b.n	80064b2 <vPortValidateInterruptPriority+0x62>
	}
 80064b6:	bf00      	nop
 80064b8:	3714      	adds	r7, #20
 80064ba:	46bd      	mov	sp, r7
 80064bc:	bc80      	pop	{r7}
 80064be:	4770      	bx	lr
 80064c0:	e000e3f0 	.word	0xe000e3f0
 80064c4:	200013d4 	.word	0x200013d4
 80064c8:	e000ed0c 	.word	0xe000ed0c
 80064cc:	200013d8 	.word	0x200013d8

080064d0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08a      	sub	sp, #40	@ 0x28
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064dc:	f7fe fe12 	bl	8005104 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80064e0:	4b5a      	ldr	r3, [pc, #360]	@ (800664c <pvPortMalloc+0x17c>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d101      	bne.n	80064ec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80064e8:	f000 f916 	bl	8006718 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80064ec:	4b58      	ldr	r3, [pc, #352]	@ (8006650 <pvPortMalloc+0x180>)
 80064ee:	681a      	ldr	r2, [r3, #0]
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4013      	ands	r3, r2
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	f040 8090 	bne.w	800661a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d01e      	beq.n	800653e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006500:	2208      	movs	r2, #8
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4413      	add	r3, r2
 8006506:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	2b00      	cmp	r3, #0
 8006510:	d015      	beq.n	800653e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f023 0307 	bic.w	r3, r3, #7
 8006518:	3308      	adds	r3, #8
 800651a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	f003 0307 	and.w	r3, r3, #7
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00b      	beq.n	800653e <pvPortMalloc+0x6e>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	617b      	str	r3, [r7, #20]
}
 8006538:	bf00      	nop
 800653a:	bf00      	nop
 800653c:	e7fd      	b.n	800653a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d06a      	beq.n	800661a <pvPortMalloc+0x14a>
 8006544:	4b43      	ldr	r3, [pc, #268]	@ (8006654 <pvPortMalloc+0x184>)
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	429a      	cmp	r2, r3
 800654c:	d865      	bhi.n	800661a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800654e:	4b42      	ldr	r3, [pc, #264]	@ (8006658 <pvPortMalloc+0x188>)
 8006550:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006552:	4b41      	ldr	r3, [pc, #260]	@ (8006658 <pvPortMalloc+0x188>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006558:	e004      	b.n	8006564 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800655e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d903      	bls.n	8006576 <pvPortMalloc+0xa6>
 800656e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d1f1      	bne.n	800655a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006576:	4b35      	ldr	r3, [pc, #212]	@ (800664c <pvPortMalloc+0x17c>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800657c:	429a      	cmp	r2, r3
 800657e:	d04c      	beq.n	800661a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006580:	6a3b      	ldr	r3, [r7, #32]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	2208      	movs	r2, #8
 8006586:	4413      	add	r3, r2
 8006588:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	6a3b      	ldr	r3, [r7, #32]
 8006590:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006594:	685a      	ldr	r2, [r3, #4]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	1ad2      	subs	r2, r2, r3
 800659a:	2308      	movs	r3, #8
 800659c:	005b      	lsls	r3, r3, #1
 800659e:	429a      	cmp	r2, r3
 80065a0:	d920      	bls.n	80065e4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	4413      	add	r3, r2
 80065a8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065aa:	69bb      	ldr	r3, [r7, #24]
 80065ac:	f003 0307 	and.w	r3, r3, #7
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00b      	beq.n	80065cc <pvPortMalloc+0xfc>
	__asm volatile
 80065b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065b8:	f383 8811 	msr	BASEPRI, r3
 80065bc:	f3bf 8f6f 	isb	sy
 80065c0:	f3bf 8f4f 	dsb	sy
 80065c4:	613b      	str	r3, [r7, #16]
}
 80065c6:	bf00      	nop
 80065c8:	bf00      	nop
 80065ca:	e7fd      	b.n	80065c8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ce:	685a      	ldr	r2, [r3, #4]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	1ad2      	subs	r2, r2, r3
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065de:	69b8      	ldr	r0, [r7, #24]
 80065e0:	f000 f8fc 	bl	80067dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80065e4:	4b1b      	ldr	r3, [pc, #108]	@ (8006654 <pvPortMalloc+0x184>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	685b      	ldr	r3, [r3, #4]
 80065ec:	1ad3      	subs	r3, r2, r3
 80065ee:	4a19      	ldr	r2, [pc, #100]	@ (8006654 <pvPortMalloc+0x184>)
 80065f0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80065f2:	4b18      	ldr	r3, [pc, #96]	@ (8006654 <pvPortMalloc+0x184>)
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	4b19      	ldr	r3, [pc, #100]	@ (800665c <pvPortMalloc+0x18c>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d203      	bcs.n	8006606 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80065fe:	4b15      	ldr	r3, [pc, #84]	@ (8006654 <pvPortMalloc+0x184>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a16      	ldr	r2, [pc, #88]	@ (800665c <pvPortMalloc+0x18c>)
 8006604:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	685a      	ldr	r2, [r3, #4]
 800660a:	4b11      	ldr	r3, [pc, #68]	@ (8006650 <pvPortMalloc+0x180>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	431a      	orrs	r2, r3
 8006610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006612:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006616:	2200      	movs	r2, #0
 8006618:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800661a:	f7fe fd81 	bl	8005120 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800661e:	69fb      	ldr	r3, [r7, #28]
 8006620:	f003 0307 	and.w	r3, r3, #7
 8006624:	2b00      	cmp	r3, #0
 8006626:	d00b      	beq.n	8006640 <pvPortMalloc+0x170>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	60fb      	str	r3, [r7, #12]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <pvPortMalloc+0x16c>
	return pvReturn;
 8006640:	69fb      	ldr	r3, [r7, #28]
}
 8006642:	4618      	mov	r0, r3
 8006644:	3728      	adds	r7, #40	@ 0x28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20001fe4 	.word	0x20001fe4
 8006650:	20001ff0 	.word	0x20001ff0
 8006654:	20001fe8 	.word	0x20001fe8
 8006658:	20001fdc 	.word	0x20001fdc
 800665c:	20001fec 	.word	0x20001fec

08006660 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b086      	sub	sp, #24
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d04a      	beq.n	8006708 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006672:	2308      	movs	r3, #8
 8006674:	425b      	negs	r3, r3
 8006676:	697a      	ldr	r2, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	4b22      	ldr	r3, [pc, #136]	@ (8006710 <vPortFree+0xb0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4013      	ands	r3, r2
 800668a:	2b00      	cmp	r3, #0
 800668c:	d10b      	bne.n	80066a6 <vPortFree+0x46>
	__asm volatile
 800668e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006692:	f383 8811 	msr	BASEPRI, r3
 8006696:	f3bf 8f6f 	isb	sy
 800669a:	f3bf 8f4f 	dsb	sy
 800669e:	60fb      	str	r3, [r7, #12]
}
 80066a0:	bf00      	nop
 80066a2:	bf00      	nop
 80066a4:	e7fd      	b.n	80066a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00b      	beq.n	80066c6 <vPortFree+0x66>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60bb      	str	r3, [r7, #8]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	685a      	ldr	r2, [r3, #4]
 80066ca:	4b11      	ldr	r3, [pc, #68]	@ (8006710 <vPortFree+0xb0>)
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d019      	beq.n	8006708 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d115      	bne.n	8006708 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066dc:	693b      	ldr	r3, [r7, #16]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	4b0b      	ldr	r3, [pc, #44]	@ (8006710 <vPortFree+0xb0>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	43db      	mvns	r3, r3
 80066e6:	401a      	ands	r2, r3
 80066e8:	693b      	ldr	r3, [r7, #16]
 80066ea:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80066ec:	f7fe fd0a 	bl	8005104 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80066f0:	693b      	ldr	r3, [r7, #16]
 80066f2:	685a      	ldr	r2, [r3, #4]
 80066f4:	4b07      	ldr	r3, [pc, #28]	@ (8006714 <vPortFree+0xb4>)
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4413      	add	r3, r2
 80066fa:	4a06      	ldr	r2, [pc, #24]	@ (8006714 <vPortFree+0xb4>)
 80066fc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80066fe:	6938      	ldr	r0, [r7, #16]
 8006700:	f000 f86c 	bl	80067dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006704:	f7fe fd0c 	bl	8005120 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006708:	bf00      	nop
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}
 8006710:	20001ff0 	.word	0x20001ff0
 8006714:	20001fe8 	.word	0x20001fe8

08006718 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800671e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006722:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006724:	4b27      	ldr	r3, [pc, #156]	@ (80067c4 <prvHeapInit+0xac>)
 8006726:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f003 0307 	and.w	r3, r3, #7
 800672e:	2b00      	cmp	r3, #0
 8006730:	d00c      	beq.n	800674c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3307      	adds	r3, #7
 8006736:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006740:	68ba      	ldr	r2, [r7, #8]
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	1ad3      	subs	r3, r2, r3
 8006746:	4a1f      	ldr	r2, [pc, #124]	@ (80067c4 <prvHeapInit+0xac>)
 8006748:	4413      	add	r3, r2
 800674a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006750:	4a1d      	ldr	r2, [pc, #116]	@ (80067c8 <prvHeapInit+0xb0>)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006756:	4b1c      	ldr	r3, [pc, #112]	@ (80067c8 <prvHeapInit+0xb0>)
 8006758:	2200      	movs	r2, #0
 800675a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	4413      	add	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006764:	2208      	movs	r2, #8
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	1a9b      	subs	r3, r3, r2
 800676a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f023 0307 	bic.w	r3, r3, #7
 8006772:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	4a15      	ldr	r2, [pc, #84]	@ (80067cc <prvHeapInit+0xb4>)
 8006778:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800677a:	4b14      	ldr	r3, [pc, #80]	@ (80067cc <prvHeapInit+0xb4>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	2200      	movs	r2, #0
 8006780:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006782:	4b12      	ldr	r3, [pc, #72]	@ (80067cc <prvHeapInit+0xb4>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	2200      	movs	r2, #0
 8006788:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68fa      	ldr	r2, [r7, #12]
 8006792:	1ad2      	subs	r2, r2, r3
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006798:	4b0c      	ldr	r3, [pc, #48]	@ (80067cc <prvHeapInit+0xb4>)
 800679a:	681a      	ldr	r2, [r3, #0]
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	685b      	ldr	r3, [r3, #4]
 80067a4:	4a0a      	ldr	r2, [pc, #40]	@ (80067d0 <prvHeapInit+0xb8>)
 80067a6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	685b      	ldr	r3, [r3, #4]
 80067ac:	4a09      	ldr	r2, [pc, #36]	@ (80067d4 <prvHeapInit+0xbc>)
 80067ae:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067b0:	4b09      	ldr	r3, [pc, #36]	@ (80067d8 <prvHeapInit+0xc0>)
 80067b2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	bc80      	pop	{r7}
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	200013dc 	.word	0x200013dc
 80067c8:	20001fdc 	.word	0x20001fdc
 80067cc:	20001fe4 	.word	0x20001fe4
 80067d0:	20001fec 	.word	0x20001fec
 80067d4:	20001fe8 	.word	0x20001fe8
 80067d8:	20001ff0 	.word	0x20001ff0

080067dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80067e4:	4b27      	ldr	r3, [pc, #156]	@ (8006884 <prvInsertBlockIntoFreeList+0xa8>)
 80067e6:	60fb      	str	r3, [r7, #12]
 80067e8:	e002      	b.n	80067f0 <prvInsertBlockIntoFreeList+0x14>
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	60fb      	str	r3, [r7, #12]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	687a      	ldr	r2, [r7, #4]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d8f7      	bhi.n	80067ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	685b      	ldr	r3, [r3, #4]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	4413      	add	r3, r2
 8006806:	687a      	ldr	r2, [r7, #4]
 8006808:	429a      	cmp	r2, r3
 800680a:	d108      	bne.n	800681e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	441a      	add	r2, r3
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	68ba      	ldr	r2, [r7, #8]
 8006828:	441a      	add	r2, r3
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	429a      	cmp	r2, r3
 8006830:	d118      	bne.n	8006864 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	4b14      	ldr	r3, [pc, #80]	@ (8006888 <prvInsertBlockIntoFreeList+0xac>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d00d      	beq.n	800685a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685a      	ldr	r2, [r3, #4]
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	441a      	add	r2, r3
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	601a      	str	r2, [r3, #0]
 8006858:	e008      	b.n	800686c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800685a:	4b0b      	ldr	r3, [pc, #44]	@ (8006888 <prvInsertBlockIntoFreeList+0xac>)
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	601a      	str	r2, [r3, #0]
 8006862:	e003      	b.n	800686c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681a      	ldr	r2, [r3, #0]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d002      	beq.n	800687a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800687a:	bf00      	nop
 800687c:	3714      	adds	r7, #20
 800687e:	46bd      	mov	sp, r7
 8006880:	bc80      	pop	{r7}
 8006882:	4770      	bx	lr
 8006884:	20001fdc 	.word	0x20001fdc
 8006888:	20001fe4 	.word	0x20001fe4

0800688c <__cvt>:
 800688c:	2b00      	cmp	r3, #0
 800688e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006892:	461d      	mov	r5, r3
 8006894:	bfbb      	ittet	lt
 8006896:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 800689a:	461d      	movlt	r5, r3
 800689c:	2300      	movge	r3, #0
 800689e:	232d      	movlt	r3, #45	@ 0x2d
 80068a0:	b088      	sub	sp, #32
 80068a2:	4614      	mov	r4, r2
 80068a4:	bfb8      	it	lt
 80068a6:	4614      	movlt	r4, r2
 80068a8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068aa:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80068ac:	7013      	strb	r3, [r2, #0]
 80068ae:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068b0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80068b4:	f023 0820 	bic.w	r8, r3, #32
 80068b8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068bc:	d005      	beq.n	80068ca <__cvt+0x3e>
 80068be:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068c2:	d100      	bne.n	80068c6 <__cvt+0x3a>
 80068c4:	3601      	adds	r6, #1
 80068c6:	2302      	movs	r3, #2
 80068c8:	e000      	b.n	80068cc <__cvt+0x40>
 80068ca:	2303      	movs	r3, #3
 80068cc:	aa07      	add	r2, sp, #28
 80068ce:	9204      	str	r2, [sp, #16]
 80068d0:	aa06      	add	r2, sp, #24
 80068d2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068d6:	e9cd 3600 	strd	r3, r6, [sp]
 80068da:	4622      	mov	r2, r4
 80068dc:	462b      	mov	r3, r5
 80068de:	f001 f88f 	bl	8007a00 <_dtoa_r>
 80068e2:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80068e6:	4607      	mov	r7, r0
 80068e8:	d119      	bne.n	800691e <__cvt+0x92>
 80068ea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80068ec:	07db      	lsls	r3, r3, #31
 80068ee:	d50e      	bpl.n	800690e <__cvt+0x82>
 80068f0:	eb00 0906 	add.w	r9, r0, r6
 80068f4:	2200      	movs	r2, #0
 80068f6:	2300      	movs	r3, #0
 80068f8:	4620      	mov	r0, r4
 80068fa:	4629      	mov	r1, r5
 80068fc:	f7fa f8c4 	bl	8000a88 <__aeabi_dcmpeq>
 8006900:	b108      	cbz	r0, 8006906 <__cvt+0x7a>
 8006902:	f8cd 901c 	str.w	r9, [sp, #28]
 8006906:	2230      	movs	r2, #48	@ 0x30
 8006908:	9b07      	ldr	r3, [sp, #28]
 800690a:	454b      	cmp	r3, r9
 800690c:	d31e      	bcc.n	800694c <__cvt+0xc0>
 800690e:	4638      	mov	r0, r7
 8006910:	9b07      	ldr	r3, [sp, #28]
 8006912:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006914:	1bdb      	subs	r3, r3, r7
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	b008      	add	sp, #32
 800691a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800691e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006922:	eb00 0906 	add.w	r9, r0, r6
 8006926:	d1e5      	bne.n	80068f4 <__cvt+0x68>
 8006928:	7803      	ldrb	r3, [r0, #0]
 800692a:	2b30      	cmp	r3, #48	@ 0x30
 800692c:	d10a      	bne.n	8006944 <__cvt+0xb8>
 800692e:	2200      	movs	r2, #0
 8006930:	2300      	movs	r3, #0
 8006932:	4620      	mov	r0, r4
 8006934:	4629      	mov	r1, r5
 8006936:	f7fa f8a7 	bl	8000a88 <__aeabi_dcmpeq>
 800693a:	b918      	cbnz	r0, 8006944 <__cvt+0xb8>
 800693c:	f1c6 0601 	rsb	r6, r6, #1
 8006940:	f8ca 6000 	str.w	r6, [sl]
 8006944:	f8da 3000 	ldr.w	r3, [sl]
 8006948:	4499      	add	r9, r3
 800694a:	e7d3      	b.n	80068f4 <__cvt+0x68>
 800694c:	1c59      	adds	r1, r3, #1
 800694e:	9107      	str	r1, [sp, #28]
 8006950:	701a      	strb	r2, [r3, #0]
 8006952:	e7d9      	b.n	8006908 <__cvt+0x7c>

08006954 <__exponent>:
 8006954:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006956:	2900      	cmp	r1, #0
 8006958:	bfb6      	itet	lt
 800695a:	232d      	movlt	r3, #45	@ 0x2d
 800695c:	232b      	movge	r3, #43	@ 0x2b
 800695e:	4249      	neglt	r1, r1
 8006960:	2909      	cmp	r1, #9
 8006962:	7002      	strb	r2, [r0, #0]
 8006964:	7043      	strb	r3, [r0, #1]
 8006966:	dd29      	ble.n	80069bc <__exponent+0x68>
 8006968:	f10d 0307 	add.w	r3, sp, #7
 800696c:	461d      	mov	r5, r3
 800696e:	270a      	movs	r7, #10
 8006970:	fbb1 f6f7 	udiv	r6, r1, r7
 8006974:	461a      	mov	r2, r3
 8006976:	fb07 1416 	mls	r4, r7, r6, r1
 800697a:	3430      	adds	r4, #48	@ 0x30
 800697c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006980:	460c      	mov	r4, r1
 8006982:	2c63      	cmp	r4, #99	@ 0x63
 8006984:	4631      	mov	r1, r6
 8006986:	f103 33ff 	add.w	r3, r3, #4294967295
 800698a:	dcf1      	bgt.n	8006970 <__exponent+0x1c>
 800698c:	3130      	adds	r1, #48	@ 0x30
 800698e:	1e94      	subs	r4, r2, #2
 8006990:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006994:	4623      	mov	r3, r4
 8006996:	1c41      	adds	r1, r0, #1
 8006998:	42ab      	cmp	r3, r5
 800699a:	d30a      	bcc.n	80069b2 <__exponent+0x5e>
 800699c:	f10d 0309 	add.w	r3, sp, #9
 80069a0:	1a9b      	subs	r3, r3, r2
 80069a2:	42ac      	cmp	r4, r5
 80069a4:	bf88      	it	hi
 80069a6:	2300      	movhi	r3, #0
 80069a8:	3302      	adds	r3, #2
 80069aa:	4403      	add	r3, r0
 80069ac:	1a18      	subs	r0, r3, r0
 80069ae:	b003      	add	sp, #12
 80069b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069b2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069b6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069ba:	e7ed      	b.n	8006998 <__exponent+0x44>
 80069bc:	2330      	movs	r3, #48	@ 0x30
 80069be:	3130      	adds	r1, #48	@ 0x30
 80069c0:	7083      	strb	r3, [r0, #2]
 80069c2:	70c1      	strb	r1, [r0, #3]
 80069c4:	1d03      	adds	r3, r0, #4
 80069c6:	e7f1      	b.n	80069ac <__exponent+0x58>

080069c8 <_printf_float>:
 80069c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069cc:	b091      	sub	sp, #68	@ 0x44
 80069ce:	460c      	mov	r4, r1
 80069d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069d4:	4616      	mov	r6, r2
 80069d6:	461f      	mov	r7, r3
 80069d8:	4605      	mov	r5, r0
 80069da:	f000 fef1 	bl	80077c0 <_localeconv_r>
 80069de:	6803      	ldr	r3, [r0, #0]
 80069e0:	4618      	mov	r0, r3
 80069e2:	9308      	str	r3, [sp, #32]
 80069e4:	f7f9 fc24 	bl	8000230 <strlen>
 80069e8:	2300      	movs	r3, #0
 80069ea:	930e      	str	r3, [sp, #56]	@ 0x38
 80069ec:	f8d8 3000 	ldr.w	r3, [r8]
 80069f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80069f2:	3307      	adds	r3, #7
 80069f4:	f023 0307 	bic.w	r3, r3, #7
 80069f8:	f103 0208 	add.w	r2, r3, #8
 80069fc:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a00:	f8d4 b000 	ldr.w	fp, [r4]
 8006a04:	f8c8 2000 	str.w	r2, [r8]
 8006a08:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a0c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a12:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a16:	f04f 32ff 	mov.w	r2, #4294967295
 8006a1a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a1e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a22:	4b9c      	ldr	r3, [pc, #624]	@ (8006c94 <_printf_float+0x2cc>)
 8006a24:	f7fa f862 	bl	8000aec <__aeabi_dcmpun>
 8006a28:	bb70      	cbnz	r0, 8006a88 <_printf_float+0xc0>
 8006a2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a2e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a32:	4b98      	ldr	r3, [pc, #608]	@ (8006c94 <_printf_float+0x2cc>)
 8006a34:	f7fa f83c 	bl	8000ab0 <__aeabi_dcmple>
 8006a38:	bb30      	cbnz	r0, 8006a88 <_printf_float+0xc0>
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	2300      	movs	r3, #0
 8006a3e:	4640      	mov	r0, r8
 8006a40:	4649      	mov	r1, r9
 8006a42:	f7fa f82b 	bl	8000a9c <__aeabi_dcmplt>
 8006a46:	b110      	cbz	r0, 8006a4e <_printf_float+0x86>
 8006a48:	232d      	movs	r3, #45	@ 0x2d
 8006a4a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a4e:	4a92      	ldr	r2, [pc, #584]	@ (8006c98 <_printf_float+0x2d0>)
 8006a50:	4b92      	ldr	r3, [pc, #584]	@ (8006c9c <_printf_float+0x2d4>)
 8006a52:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a56:	bf94      	ite	ls
 8006a58:	4690      	movls	r8, r2
 8006a5a:	4698      	movhi	r8, r3
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	f04f 0900 	mov.w	r9, #0
 8006a62:	6123      	str	r3, [r4, #16]
 8006a64:	f02b 0304 	bic.w	r3, fp, #4
 8006a68:	6023      	str	r3, [r4, #0]
 8006a6a:	4633      	mov	r3, r6
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4628      	mov	r0, r5
 8006a70:	9700      	str	r7, [sp, #0]
 8006a72:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a74:	f000 f9d4 	bl	8006e20 <_printf_common>
 8006a78:	3001      	adds	r0, #1
 8006a7a:	f040 8090 	bne.w	8006b9e <_printf_float+0x1d6>
 8006a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8006a82:	b011      	add	sp, #68	@ 0x44
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	4642      	mov	r2, r8
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	4640      	mov	r0, r8
 8006a8e:	4649      	mov	r1, r9
 8006a90:	f7fa f82c 	bl	8000aec <__aeabi_dcmpun>
 8006a94:	b148      	cbz	r0, 8006aaa <_printf_float+0xe2>
 8006a96:	464b      	mov	r3, r9
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	bfb8      	it	lt
 8006a9c:	232d      	movlt	r3, #45	@ 0x2d
 8006a9e:	4a80      	ldr	r2, [pc, #512]	@ (8006ca0 <_printf_float+0x2d8>)
 8006aa0:	bfb8      	it	lt
 8006aa2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006aa6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ca4 <_printf_float+0x2dc>)
 8006aa8:	e7d3      	b.n	8006a52 <_printf_float+0x8a>
 8006aaa:	6863      	ldr	r3, [r4, #4]
 8006aac:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ab0:	1c5a      	adds	r2, r3, #1
 8006ab2:	d13f      	bne.n	8006b34 <_printf_float+0x16c>
 8006ab4:	2306      	movs	r3, #6
 8006ab6:	6063      	str	r3, [r4, #4]
 8006ab8:	2200      	movs	r2, #0
 8006aba:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006abe:	6023      	str	r3, [r4, #0]
 8006ac0:	9206      	str	r2, [sp, #24]
 8006ac2:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ac4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ac8:	aa0d      	add	r2, sp, #52	@ 0x34
 8006aca:	9203      	str	r2, [sp, #12]
 8006acc:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006ad0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006ad4:	6863      	ldr	r3, [r4, #4]
 8006ad6:	4642      	mov	r2, r8
 8006ad8:	9300      	str	r3, [sp, #0]
 8006ada:	4628      	mov	r0, r5
 8006adc:	464b      	mov	r3, r9
 8006ade:	910a      	str	r1, [sp, #40]	@ 0x28
 8006ae0:	f7ff fed4 	bl	800688c <__cvt>
 8006ae4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006ae6:	4680      	mov	r8, r0
 8006ae8:	2947      	cmp	r1, #71	@ 0x47
 8006aea:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006aec:	d128      	bne.n	8006b40 <_printf_float+0x178>
 8006aee:	1cc8      	adds	r0, r1, #3
 8006af0:	db02      	blt.n	8006af8 <_printf_float+0x130>
 8006af2:	6863      	ldr	r3, [r4, #4]
 8006af4:	4299      	cmp	r1, r3
 8006af6:	dd40      	ble.n	8006b7a <_printf_float+0x1b2>
 8006af8:	f1aa 0a02 	sub.w	sl, sl, #2
 8006afc:	fa5f fa8a 	uxtb.w	sl, sl
 8006b00:	4652      	mov	r2, sl
 8006b02:	3901      	subs	r1, #1
 8006b04:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b08:	910d      	str	r1, [sp, #52]	@ 0x34
 8006b0a:	f7ff ff23 	bl	8006954 <__exponent>
 8006b0e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b10:	4681      	mov	r9, r0
 8006b12:	1813      	adds	r3, r2, r0
 8006b14:	2a01      	cmp	r2, #1
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	dc02      	bgt.n	8006b20 <_printf_float+0x158>
 8006b1a:	6822      	ldr	r2, [r4, #0]
 8006b1c:	07d2      	lsls	r2, r2, #31
 8006b1e:	d501      	bpl.n	8006b24 <_printf_float+0x15c>
 8006b20:	3301      	adds	r3, #1
 8006b22:	6123      	str	r3, [r4, #16]
 8006b24:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d09e      	beq.n	8006a6a <_printf_float+0xa2>
 8006b2c:	232d      	movs	r3, #45	@ 0x2d
 8006b2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b32:	e79a      	b.n	8006a6a <_printf_float+0xa2>
 8006b34:	2947      	cmp	r1, #71	@ 0x47
 8006b36:	d1bf      	bne.n	8006ab8 <_printf_float+0xf0>
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d1bd      	bne.n	8006ab8 <_printf_float+0xf0>
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e7ba      	b.n	8006ab6 <_printf_float+0xee>
 8006b40:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b44:	d9dc      	bls.n	8006b00 <_printf_float+0x138>
 8006b46:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b4a:	d118      	bne.n	8006b7e <_printf_float+0x1b6>
 8006b4c:	2900      	cmp	r1, #0
 8006b4e:	6863      	ldr	r3, [r4, #4]
 8006b50:	dd0b      	ble.n	8006b6a <_printf_float+0x1a2>
 8006b52:	6121      	str	r1, [r4, #16]
 8006b54:	b913      	cbnz	r3, 8006b5c <_printf_float+0x194>
 8006b56:	6822      	ldr	r2, [r4, #0]
 8006b58:	07d0      	lsls	r0, r2, #31
 8006b5a:	d502      	bpl.n	8006b62 <_printf_float+0x19a>
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	440b      	add	r3, r1
 8006b60:	6123      	str	r3, [r4, #16]
 8006b62:	f04f 0900 	mov.w	r9, #0
 8006b66:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b68:	e7dc      	b.n	8006b24 <_printf_float+0x15c>
 8006b6a:	b913      	cbnz	r3, 8006b72 <_printf_float+0x1aa>
 8006b6c:	6822      	ldr	r2, [r4, #0]
 8006b6e:	07d2      	lsls	r2, r2, #31
 8006b70:	d501      	bpl.n	8006b76 <_printf_float+0x1ae>
 8006b72:	3302      	adds	r3, #2
 8006b74:	e7f4      	b.n	8006b60 <_printf_float+0x198>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e7f2      	b.n	8006b60 <_printf_float+0x198>
 8006b7a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006b80:	4299      	cmp	r1, r3
 8006b82:	db05      	blt.n	8006b90 <_printf_float+0x1c8>
 8006b84:	6823      	ldr	r3, [r4, #0]
 8006b86:	6121      	str	r1, [r4, #16]
 8006b88:	07d8      	lsls	r0, r3, #31
 8006b8a:	d5ea      	bpl.n	8006b62 <_printf_float+0x19a>
 8006b8c:	1c4b      	adds	r3, r1, #1
 8006b8e:	e7e7      	b.n	8006b60 <_printf_float+0x198>
 8006b90:	2900      	cmp	r1, #0
 8006b92:	bfcc      	ite	gt
 8006b94:	2201      	movgt	r2, #1
 8006b96:	f1c1 0202 	rsble	r2, r1, #2
 8006b9a:	4413      	add	r3, r2
 8006b9c:	e7e0      	b.n	8006b60 <_printf_float+0x198>
 8006b9e:	6823      	ldr	r3, [r4, #0]
 8006ba0:	055a      	lsls	r2, r3, #21
 8006ba2:	d407      	bmi.n	8006bb4 <_printf_float+0x1ec>
 8006ba4:	6923      	ldr	r3, [r4, #16]
 8006ba6:	4642      	mov	r2, r8
 8006ba8:	4631      	mov	r1, r6
 8006baa:	4628      	mov	r0, r5
 8006bac:	47b8      	blx	r7
 8006bae:	3001      	adds	r0, #1
 8006bb0:	d12b      	bne.n	8006c0a <_printf_float+0x242>
 8006bb2:	e764      	b.n	8006a7e <_printf_float+0xb6>
 8006bb4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bb8:	f240 80dc 	bls.w	8006d74 <_printf_float+0x3ac>
 8006bbc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	f7f9 ff60 	bl	8000a88 <__aeabi_dcmpeq>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	d033      	beq.n	8006c34 <_printf_float+0x26c>
 8006bcc:	2301      	movs	r3, #1
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	4a35      	ldr	r2, [pc, #212]	@ (8006ca8 <_printf_float+0x2e0>)
 8006bd4:	47b8      	blx	r7
 8006bd6:	3001      	adds	r0, #1
 8006bd8:	f43f af51 	beq.w	8006a7e <_printf_float+0xb6>
 8006bdc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006be0:	4543      	cmp	r3, r8
 8006be2:	db02      	blt.n	8006bea <_printf_float+0x222>
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	07d8      	lsls	r0, r3, #31
 8006be8:	d50f      	bpl.n	8006c0a <_printf_float+0x242>
 8006bea:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	47b8      	blx	r7
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	f43f af42 	beq.w	8006a7e <_printf_float+0xb6>
 8006bfa:	f04f 0900 	mov.w	r9, #0
 8006bfe:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c02:	f104 0a1a 	add.w	sl, r4, #26
 8006c06:	45c8      	cmp	r8, r9
 8006c08:	dc09      	bgt.n	8006c1e <_printf_float+0x256>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	079b      	lsls	r3, r3, #30
 8006c0e:	f100 8102 	bmi.w	8006e16 <_printf_float+0x44e>
 8006c12:	68e0      	ldr	r0, [r4, #12]
 8006c14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c16:	4298      	cmp	r0, r3
 8006c18:	bfb8      	it	lt
 8006c1a:	4618      	movlt	r0, r3
 8006c1c:	e731      	b.n	8006a82 <_printf_float+0xba>
 8006c1e:	2301      	movs	r3, #1
 8006c20:	4652      	mov	r2, sl
 8006c22:	4631      	mov	r1, r6
 8006c24:	4628      	mov	r0, r5
 8006c26:	47b8      	blx	r7
 8006c28:	3001      	adds	r0, #1
 8006c2a:	f43f af28 	beq.w	8006a7e <_printf_float+0xb6>
 8006c2e:	f109 0901 	add.w	r9, r9, #1
 8006c32:	e7e8      	b.n	8006c06 <_printf_float+0x23e>
 8006c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	dc38      	bgt.n	8006cac <_printf_float+0x2e4>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4628      	mov	r0, r5
 8006c40:	4a19      	ldr	r2, [pc, #100]	@ (8006ca8 <_printf_float+0x2e0>)
 8006c42:	47b8      	blx	r7
 8006c44:	3001      	adds	r0, #1
 8006c46:	f43f af1a 	beq.w	8006a7e <_printf_float+0xb6>
 8006c4a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c4e:	ea59 0303 	orrs.w	r3, r9, r3
 8006c52:	d102      	bne.n	8006c5a <_printf_float+0x292>
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	07d9      	lsls	r1, r3, #31
 8006c58:	d5d7      	bpl.n	8006c0a <_printf_float+0x242>
 8006c5a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c5e:	4631      	mov	r1, r6
 8006c60:	4628      	mov	r0, r5
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f af0a 	beq.w	8006a7e <_printf_float+0xb6>
 8006c6a:	f04f 0a00 	mov.w	sl, #0
 8006c6e:	f104 0b1a 	add.w	fp, r4, #26
 8006c72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c74:	425b      	negs	r3, r3
 8006c76:	4553      	cmp	r3, sl
 8006c78:	dc01      	bgt.n	8006c7e <_printf_float+0x2b6>
 8006c7a:	464b      	mov	r3, r9
 8006c7c:	e793      	b.n	8006ba6 <_printf_float+0x1de>
 8006c7e:	2301      	movs	r3, #1
 8006c80:	465a      	mov	r2, fp
 8006c82:	4631      	mov	r1, r6
 8006c84:	4628      	mov	r0, r5
 8006c86:	47b8      	blx	r7
 8006c88:	3001      	adds	r0, #1
 8006c8a:	f43f aef8 	beq.w	8006a7e <_printf_float+0xb6>
 8006c8e:	f10a 0a01 	add.w	sl, sl, #1
 8006c92:	e7ee      	b.n	8006c72 <_printf_float+0x2aa>
 8006c94:	7fefffff 	.word	0x7fefffff
 8006c98:	0800baca 	.word	0x0800baca
 8006c9c:	0800bace 	.word	0x0800bace
 8006ca0:	0800bad2 	.word	0x0800bad2
 8006ca4:	0800bad6 	.word	0x0800bad6
 8006ca8:	0800bada 	.word	0x0800bada
 8006cac:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cae:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006cb2:	4553      	cmp	r3, sl
 8006cb4:	bfa8      	it	ge
 8006cb6:	4653      	movge	r3, sl
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	4699      	mov	r9, r3
 8006cbc:	dc36      	bgt.n	8006d2c <_printf_float+0x364>
 8006cbe:	f04f 0b00 	mov.w	fp, #0
 8006cc2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006cc6:	f104 021a 	add.w	r2, r4, #26
 8006cca:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006ccc:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cce:	eba3 0309 	sub.w	r3, r3, r9
 8006cd2:	455b      	cmp	r3, fp
 8006cd4:	dc31      	bgt.n	8006d3a <_printf_float+0x372>
 8006cd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cd8:	459a      	cmp	sl, r3
 8006cda:	dc3a      	bgt.n	8006d52 <_printf_float+0x38a>
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	07da      	lsls	r2, r3, #31
 8006ce0:	d437      	bmi.n	8006d52 <_printf_float+0x38a>
 8006ce2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006ce4:	ebaa 0903 	sub.w	r9, sl, r3
 8006ce8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006cea:	ebaa 0303 	sub.w	r3, sl, r3
 8006cee:	4599      	cmp	r9, r3
 8006cf0:	bfa8      	it	ge
 8006cf2:	4699      	movge	r9, r3
 8006cf4:	f1b9 0f00 	cmp.w	r9, #0
 8006cf8:	dc33      	bgt.n	8006d62 <_printf_float+0x39a>
 8006cfa:	f04f 0800 	mov.w	r8, #0
 8006cfe:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d02:	f104 0b1a 	add.w	fp, r4, #26
 8006d06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d08:	ebaa 0303 	sub.w	r3, sl, r3
 8006d0c:	eba3 0309 	sub.w	r3, r3, r9
 8006d10:	4543      	cmp	r3, r8
 8006d12:	f77f af7a 	ble.w	8006c0a <_printf_float+0x242>
 8006d16:	2301      	movs	r3, #1
 8006d18:	465a      	mov	r2, fp
 8006d1a:	4631      	mov	r1, r6
 8006d1c:	4628      	mov	r0, r5
 8006d1e:	47b8      	blx	r7
 8006d20:	3001      	adds	r0, #1
 8006d22:	f43f aeac 	beq.w	8006a7e <_printf_float+0xb6>
 8006d26:	f108 0801 	add.w	r8, r8, #1
 8006d2a:	e7ec      	b.n	8006d06 <_printf_float+0x33e>
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	4631      	mov	r1, r6
 8006d30:	4628      	mov	r0, r5
 8006d32:	47b8      	blx	r7
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1c2      	bne.n	8006cbe <_printf_float+0x2f6>
 8006d38:	e6a1      	b.n	8006a7e <_printf_float+0xb6>
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	4631      	mov	r1, r6
 8006d3e:	4628      	mov	r0, r5
 8006d40:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d42:	47b8      	blx	r7
 8006d44:	3001      	adds	r0, #1
 8006d46:	f43f ae9a 	beq.w	8006a7e <_printf_float+0xb6>
 8006d4a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d4c:	f10b 0b01 	add.w	fp, fp, #1
 8006d50:	e7bb      	b.n	8006cca <_printf_float+0x302>
 8006d52:	4631      	mov	r1, r6
 8006d54:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d58:	4628      	mov	r0, r5
 8006d5a:	47b8      	blx	r7
 8006d5c:	3001      	adds	r0, #1
 8006d5e:	d1c0      	bne.n	8006ce2 <_printf_float+0x31a>
 8006d60:	e68d      	b.n	8006a7e <_printf_float+0xb6>
 8006d62:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d64:	464b      	mov	r3, r9
 8006d66:	4631      	mov	r1, r6
 8006d68:	4628      	mov	r0, r5
 8006d6a:	4442      	add	r2, r8
 8006d6c:	47b8      	blx	r7
 8006d6e:	3001      	adds	r0, #1
 8006d70:	d1c3      	bne.n	8006cfa <_printf_float+0x332>
 8006d72:	e684      	b.n	8006a7e <_printf_float+0xb6>
 8006d74:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d78:	f1ba 0f01 	cmp.w	sl, #1
 8006d7c:	dc01      	bgt.n	8006d82 <_printf_float+0x3ba>
 8006d7e:	07db      	lsls	r3, r3, #31
 8006d80:	d536      	bpl.n	8006df0 <_printf_float+0x428>
 8006d82:	2301      	movs	r3, #1
 8006d84:	4642      	mov	r2, r8
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	47b8      	blx	r7
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f43f ae76 	beq.w	8006a7e <_printf_float+0xb6>
 8006d92:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d96:	4631      	mov	r1, r6
 8006d98:	4628      	mov	r0, r5
 8006d9a:	47b8      	blx	r7
 8006d9c:	3001      	adds	r0, #1
 8006d9e:	f43f ae6e 	beq.w	8006a7e <_printf_float+0xb6>
 8006da2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006da6:	2200      	movs	r2, #0
 8006da8:	2300      	movs	r3, #0
 8006daa:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dae:	f7f9 fe6b 	bl	8000a88 <__aeabi_dcmpeq>
 8006db2:	b9c0      	cbnz	r0, 8006de6 <_printf_float+0x41e>
 8006db4:	4653      	mov	r3, sl
 8006db6:	f108 0201 	add.w	r2, r8, #1
 8006dba:	4631      	mov	r1, r6
 8006dbc:	4628      	mov	r0, r5
 8006dbe:	47b8      	blx	r7
 8006dc0:	3001      	adds	r0, #1
 8006dc2:	d10c      	bne.n	8006dde <_printf_float+0x416>
 8006dc4:	e65b      	b.n	8006a7e <_printf_float+0xb6>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	465a      	mov	r2, fp
 8006dca:	4631      	mov	r1, r6
 8006dcc:	4628      	mov	r0, r5
 8006dce:	47b8      	blx	r7
 8006dd0:	3001      	adds	r0, #1
 8006dd2:	f43f ae54 	beq.w	8006a7e <_printf_float+0xb6>
 8006dd6:	f108 0801 	add.w	r8, r8, #1
 8006dda:	45d0      	cmp	r8, sl
 8006ddc:	dbf3      	blt.n	8006dc6 <_printf_float+0x3fe>
 8006dde:	464b      	mov	r3, r9
 8006de0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006de4:	e6e0      	b.n	8006ba8 <_printf_float+0x1e0>
 8006de6:	f04f 0800 	mov.w	r8, #0
 8006dea:	f104 0b1a 	add.w	fp, r4, #26
 8006dee:	e7f4      	b.n	8006dda <_printf_float+0x412>
 8006df0:	2301      	movs	r3, #1
 8006df2:	4642      	mov	r2, r8
 8006df4:	e7e1      	b.n	8006dba <_printf_float+0x3f2>
 8006df6:	2301      	movs	r3, #1
 8006df8:	464a      	mov	r2, r9
 8006dfa:	4631      	mov	r1, r6
 8006dfc:	4628      	mov	r0, r5
 8006dfe:	47b8      	blx	r7
 8006e00:	3001      	adds	r0, #1
 8006e02:	f43f ae3c 	beq.w	8006a7e <_printf_float+0xb6>
 8006e06:	f108 0801 	add.w	r8, r8, #1
 8006e0a:	68e3      	ldr	r3, [r4, #12]
 8006e0c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e0e:	1a5b      	subs	r3, r3, r1
 8006e10:	4543      	cmp	r3, r8
 8006e12:	dcf0      	bgt.n	8006df6 <_printf_float+0x42e>
 8006e14:	e6fd      	b.n	8006c12 <_printf_float+0x24a>
 8006e16:	f04f 0800 	mov.w	r8, #0
 8006e1a:	f104 0919 	add.w	r9, r4, #25
 8006e1e:	e7f4      	b.n	8006e0a <_printf_float+0x442>

08006e20 <_printf_common>:
 8006e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e24:	4616      	mov	r6, r2
 8006e26:	4698      	mov	r8, r3
 8006e28:	688a      	ldr	r2, [r1, #8]
 8006e2a:	690b      	ldr	r3, [r1, #16]
 8006e2c:	4607      	mov	r7, r0
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	bfb8      	it	lt
 8006e32:	4613      	movlt	r3, r2
 8006e34:	6033      	str	r3, [r6, #0]
 8006e36:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e40:	b10a      	cbz	r2, 8006e46 <_printf_common+0x26>
 8006e42:	3301      	adds	r3, #1
 8006e44:	6033      	str	r3, [r6, #0]
 8006e46:	6823      	ldr	r3, [r4, #0]
 8006e48:	0699      	lsls	r1, r3, #26
 8006e4a:	bf42      	ittt	mi
 8006e4c:	6833      	ldrmi	r3, [r6, #0]
 8006e4e:	3302      	addmi	r3, #2
 8006e50:	6033      	strmi	r3, [r6, #0]
 8006e52:	6825      	ldr	r5, [r4, #0]
 8006e54:	f015 0506 	ands.w	r5, r5, #6
 8006e58:	d106      	bne.n	8006e68 <_printf_common+0x48>
 8006e5a:	f104 0a19 	add.w	sl, r4, #25
 8006e5e:	68e3      	ldr	r3, [r4, #12]
 8006e60:	6832      	ldr	r2, [r6, #0]
 8006e62:	1a9b      	subs	r3, r3, r2
 8006e64:	42ab      	cmp	r3, r5
 8006e66:	dc2b      	bgt.n	8006ec0 <_printf_common+0xa0>
 8006e68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e6c:	6822      	ldr	r2, [r4, #0]
 8006e6e:	3b00      	subs	r3, #0
 8006e70:	bf18      	it	ne
 8006e72:	2301      	movne	r3, #1
 8006e74:	0692      	lsls	r2, r2, #26
 8006e76:	d430      	bmi.n	8006eda <_printf_common+0xba>
 8006e78:	4641      	mov	r1, r8
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006e80:	47c8      	blx	r9
 8006e82:	3001      	adds	r0, #1
 8006e84:	d023      	beq.n	8006ece <_printf_common+0xae>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	6922      	ldr	r2, [r4, #16]
 8006e8a:	f003 0306 	and.w	r3, r3, #6
 8006e8e:	2b04      	cmp	r3, #4
 8006e90:	bf14      	ite	ne
 8006e92:	2500      	movne	r5, #0
 8006e94:	6833      	ldreq	r3, [r6, #0]
 8006e96:	f04f 0600 	mov.w	r6, #0
 8006e9a:	bf08      	it	eq
 8006e9c:	68e5      	ldreq	r5, [r4, #12]
 8006e9e:	f104 041a 	add.w	r4, r4, #26
 8006ea2:	bf08      	it	eq
 8006ea4:	1aed      	subeq	r5, r5, r3
 8006ea6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006eaa:	bf08      	it	eq
 8006eac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	bfc4      	itt	gt
 8006eb4:	1a9b      	subgt	r3, r3, r2
 8006eb6:	18ed      	addgt	r5, r5, r3
 8006eb8:	42b5      	cmp	r5, r6
 8006eba:	d11a      	bne.n	8006ef2 <_printf_common+0xd2>
 8006ebc:	2000      	movs	r0, #0
 8006ebe:	e008      	b.n	8006ed2 <_printf_common+0xb2>
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	4652      	mov	r2, sl
 8006ec4:	4641      	mov	r1, r8
 8006ec6:	4638      	mov	r0, r7
 8006ec8:	47c8      	blx	r9
 8006eca:	3001      	adds	r0, #1
 8006ecc:	d103      	bne.n	8006ed6 <_printf_common+0xb6>
 8006ece:	f04f 30ff 	mov.w	r0, #4294967295
 8006ed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed6:	3501      	adds	r5, #1
 8006ed8:	e7c1      	b.n	8006e5e <_printf_common+0x3e>
 8006eda:	2030      	movs	r0, #48	@ 0x30
 8006edc:	18e1      	adds	r1, r4, r3
 8006ede:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ee2:	1c5a      	adds	r2, r3, #1
 8006ee4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006ee8:	4422      	add	r2, r4
 8006eea:	3302      	adds	r3, #2
 8006eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006ef0:	e7c2      	b.n	8006e78 <_printf_common+0x58>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	4622      	mov	r2, r4
 8006ef6:	4641      	mov	r1, r8
 8006ef8:	4638      	mov	r0, r7
 8006efa:	47c8      	blx	r9
 8006efc:	3001      	adds	r0, #1
 8006efe:	d0e6      	beq.n	8006ece <_printf_common+0xae>
 8006f00:	3601      	adds	r6, #1
 8006f02:	e7d9      	b.n	8006eb8 <_printf_common+0x98>

08006f04 <_printf_i>:
 8006f04:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f08:	7e0f      	ldrb	r7, [r1, #24]
 8006f0a:	4691      	mov	r9, r2
 8006f0c:	2f78      	cmp	r7, #120	@ 0x78
 8006f0e:	4680      	mov	r8, r0
 8006f10:	460c      	mov	r4, r1
 8006f12:	469a      	mov	sl, r3
 8006f14:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f16:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f1a:	d807      	bhi.n	8006f2c <_printf_i+0x28>
 8006f1c:	2f62      	cmp	r7, #98	@ 0x62
 8006f1e:	d80a      	bhi.n	8006f36 <_printf_i+0x32>
 8006f20:	2f00      	cmp	r7, #0
 8006f22:	f000 80d3 	beq.w	80070cc <_printf_i+0x1c8>
 8006f26:	2f58      	cmp	r7, #88	@ 0x58
 8006f28:	f000 80ba 	beq.w	80070a0 <_printf_i+0x19c>
 8006f2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f30:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f34:	e03a      	b.n	8006fac <_printf_i+0xa8>
 8006f36:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f3a:	2b15      	cmp	r3, #21
 8006f3c:	d8f6      	bhi.n	8006f2c <_printf_i+0x28>
 8006f3e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f44 <_printf_i+0x40>)
 8006f40:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f44:	08006f9d 	.word	0x08006f9d
 8006f48:	08006fb1 	.word	0x08006fb1
 8006f4c:	08006f2d 	.word	0x08006f2d
 8006f50:	08006f2d 	.word	0x08006f2d
 8006f54:	08006f2d 	.word	0x08006f2d
 8006f58:	08006f2d 	.word	0x08006f2d
 8006f5c:	08006fb1 	.word	0x08006fb1
 8006f60:	08006f2d 	.word	0x08006f2d
 8006f64:	08006f2d 	.word	0x08006f2d
 8006f68:	08006f2d 	.word	0x08006f2d
 8006f6c:	08006f2d 	.word	0x08006f2d
 8006f70:	080070b3 	.word	0x080070b3
 8006f74:	08006fdb 	.word	0x08006fdb
 8006f78:	0800706d 	.word	0x0800706d
 8006f7c:	08006f2d 	.word	0x08006f2d
 8006f80:	08006f2d 	.word	0x08006f2d
 8006f84:	080070d5 	.word	0x080070d5
 8006f88:	08006f2d 	.word	0x08006f2d
 8006f8c:	08006fdb 	.word	0x08006fdb
 8006f90:	08006f2d 	.word	0x08006f2d
 8006f94:	08006f2d 	.word	0x08006f2d
 8006f98:	08007075 	.word	0x08007075
 8006f9c:	6833      	ldr	r3, [r6, #0]
 8006f9e:	1d1a      	adds	r2, r3, #4
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6032      	str	r2, [r6, #0]
 8006fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fa8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fac:	2301      	movs	r3, #1
 8006fae:	e09e      	b.n	80070ee <_printf_i+0x1ea>
 8006fb0:	6833      	ldr	r3, [r6, #0]
 8006fb2:	6820      	ldr	r0, [r4, #0]
 8006fb4:	1d19      	adds	r1, r3, #4
 8006fb6:	6031      	str	r1, [r6, #0]
 8006fb8:	0606      	lsls	r6, r0, #24
 8006fba:	d501      	bpl.n	8006fc0 <_printf_i+0xbc>
 8006fbc:	681d      	ldr	r5, [r3, #0]
 8006fbe:	e003      	b.n	8006fc8 <_printf_i+0xc4>
 8006fc0:	0645      	lsls	r5, r0, #25
 8006fc2:	d5fb      	bpl.n	8006fbc <_printf_i+0xb8>
 8006fc4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	da03      	bge.n	8006fd4 <_printf_i+0xd0>
 8006fcc:	232d      	movs	r3, #45	@ 0x2d
 8006fce:	426d      	negs	r5, r5
 8006fd0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006fd4:	230a      	movs	r3, #10
 8006fd6:	4859      	ldr	r0, [pc, #356]	@ (800713c <_printf_i+0x238>)
 8006fd8:	e011      	b.n	8006ffe <_printf_i+0xfa>
 8006fda:	6821      	ldr	r1, [r4, #0]
 8006fdc:	6833      	ldr	r3, [r6, #0]
 8006fde:	0608      	lsls	r0, r1, #24
 8006fe0:	f853 5b04 	ldr.w	r5, [r3], #4
 8006fe4:	d402      	bmi.n	8006fec <_printf_i+0xe8>
 8006fe6:	0649      	lsls	r1, r1, #25
 8006fe8:	bf48      	it	mi
 8006fea:	b2ad      	uxthmi	r5, r5
 8006fec:	2f6f      	cmp	r7, #111	@ 0x6f
 8006fee:	6033      	str	r3, [r6, #0]
 8006ff0:	bf14      	ite	ne
 8006ff2:	230a      	movne	r3, #10
 8006ff4:	2308      	moveq	r3, #8
 8006ff6:	4851      	ldr	r0, [pc, #324]	@ (800713c <_printf_i+0x238>)
 8006ff8:	2100      	movs	r1, #0
 8006ffa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ffe:	6866      	ldr	r6, [r4, #4]
 8007000:	2e00      	cmp	r6, #0
 8007002:	bfa8      	it	ge
 8007004:	6821      	ldrge	r1, [r4, #0]
 8007006:	60a6      	str	r6, [r4, #8]
 8007008:	bfa4      	itt	ge
 800700a:	f021 0104 	bicge.w	r1, r1, #4
 800700e:	6021      	strge	r1, [r4, #0]
 8007010:	b90d      	cbnz	r5, 8007016 <_printf_i+0x112>
 8007012:	2e00      	cmp	r6, #0
 8007014:	d04b      	beq.n	80070ae <_printf_i+0x1aa>
 8007016:	4616      	mov	r6, r2
 8007018:	fbb5 f1f3 	udiv	r1, r5, r3
 800701c:	fb03 5711 	mls	r7, r3, r1, r5
 8007020:	5dc7      	ldrb	r7, [r0, r7]
 8007022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007026:	462f      	mov	r7, r5
 8007028:	42bb      	cmp	r3, r7
 800702a:	460d      	mov	r5, r1
 800702c:	d9f4      	bls.n	8007018 <_printf_i+0x114>
 800702e:	2b08      	cmp	r3, #8
 8007030:	d10b      	bne.n	800704a <_printf_i+0x146>
 8007032:	6823      	ldr	r3, [r4, #0]
 8007034:	07df      	lsls	r7, r3, #31
 8007036:	d508      	bpl.n	800704a <_printf_i+0x146>
 8007038:	6923      	ldr	r3, [r4, #16]
 800703a:	6861      	ldr	r1, [r4, #4]
 800703c:	4299      	cmp	r1, r3
 800703e:	bfde      	ittt	le
 8007040:	2330      	movle	r3, #48	@ 0x30
 8007042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800704a:	1b92      	subs	r2, r2, r6
 800704c:	6122      	str	r2, [r4, #16]
 800704e:	464b      	mov	r3, r9
 8007050:	4621      	mov	r1, r4
 8007052:	4640      	mov	r0, r8
 8007054:	f8cd a000 	str.w	sl, [sp]
 8007058:	aa03      	add	r2, sp, #12
 800705a:	f7ff fee1 	bl	8006e20 <_printf_common>
 800705e:	3001      	adds	r0, #1
 8007060:	d14a      	bne.n	80070f8 <_printf_i+0x1f4>
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	b004      	add	sp, #16
 8007068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	f043 0320 	orr.w	r3, r3, #32
 8007072:	6023      	str	r3, [r4, #0]
 8007074:	2778      	movs	r7, #120	@ 0x78
 8007076:	4832      	ldr	r0, [pc, #200]	@ (8007140 <_printf_i+0x23c>)
 8007078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800707c:	6823      	ldr	r3, [r4, #0]
 800707e:	6831      	ldr	r1, [r6, #0]
 8007080:	061f      	lsls	r7, r3, #24
 8007082:	f851 5b04 	ldr.w	r5, [r1], #4
 8007086:	d402      	bmi.n	800708e <_printf_i+0x18a>
 8007088:	065f      	lsls	r7, r3, #25
 800708a:	bf48      	it	mi
 800708c:	b2ad      	uxthmi	r5, r5
 800708e:	6031      	str	r1, [r6, #0]
 8007090:	07d9      	lsls	r1, r3, #31
 8007092:	bf44      	itt	mi
 8007094:	f043 0320 	orrmi.w	r3, r3, #32
 8007098:	6023      	strmi	r3, [r4, #0]
 800709a:	b11d      	cbz	r5, 80070a4 <_printf_i+0x1a0>
 800709c:	2310      	movs	r3, #16
 800709e:	e7ab      	b.n	8006ff8 <_printf_i+0xf4>
 80070a0:	4826      	ldr	r0, [pc, #152]	@ (800713c <_printf_i+0x238>)
 80070a2:	e7e9      	b.n	8007078 <_printf_i+0x174>
 80070a4:	6823      	ldr	r3, [r4, #0]
 80070a6:	f023 0320 	bic.w	r3, r3, #32
 80070aa:	6023      	str	r3, [r4, #0]
 80070ac:	e7f6      	b.n	800709c <_printf_i+0x198>
 80070ae:	4616      	mov	r6, r2
 80070b0:	e7bd      	b.n	800702e <_printf_i+0x12a>
 80070b2:	6833      	ldr	r3, [r6, #0]
 80070b4:	6825      	ldr	r5, [r4, #0]
 80070b6:	1d18      	adds	r0, r3, #4
 80070b8:	6961      	ldr	r1, [r4, #20]
 80070ba:	6030      	str	r0, [r6, #0]
 80070bc:	062e      	lsls	r6, r5, #24
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	d501      	bpl.n	80070c6 <_printf_i+0x1c2>
 80070c2:	6019      	str	r1, [r3, #0]
 80070c4:	e002      	b.n	80070cc <_printf_i+0x1c8>
 80070c6:	0668      	lsls	r0, r5, #25
 80070c8:	d5fb      	bpl.n	80070c2 <_printf_i+0x1be>
 80070ca:	8019      	strh	r1, [r3, #0]
 80070cc:	2300      	movs	r3, #0
 80070ce:	4616      	mov	r6, r2
 80070d0:	6123      	str	r3, [r4, #16]
 80070d2:	e7bc      	b.n	800704e <_printf_i+0x14a>
 80070d4:	6833      	ldr	r3, [r6, #0]
 80070d6:	2100      	movs	r1, #0
 80070d8:	1d1a      	adds	r2, r3, #4
 80070da:	6032      	str	r2, [r6, #0]
 80070dc:	681e      	ldr	r6, [r3, #0]
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 fbe4 	bl	80078ae <memchr>
 80070e6:	b108      	cbz	r0, 80070ec <_printf_i+0x1e8>
 80070e8:	1b80      	subs	r0, r0, r6
 80070ea:	6060      	str	r0, [r4, #4]
 80070ec:	6863      	ldr	r3, [r4, #4]
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	2300      	movs	r3, #0
 80070f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070f6:	e7aa      	b.n	800704e <_printf_i+0x14a>
 80070f8:	4632      	mov	r2, r6
 80070fa:	4649      	mov	r1, r9
 80070fc:	4640      	mov	r0, r8
 80070fe:	6923      	ldr	r3, [r4, #16]
 8007100:	47d0      	blx	sl
 8007102:	3001      	adds	r0, #1
 8007104:	d0ad      	beq.n	8007062 <_printf_i+0x15e>
 8007106:	6823      	ldr	r3, [r4, #0]
 8007108:	079b      	lsls	r3, r3, #30
 800710a:	d413      	bmi.n	8007134 <_printf_i+0x230>
 800710c:	68e0      	ldr	r0, [r4, #12]
 800710e:	9b03      	ldr	r3, [sp, #12]
 8007110:	4298      	cmp	r0, r3
 8007112:	bfb8      	it	lt
 8007114:	4618      	movlt	r0, r3
 8007116:	e7a6      	b.n	8007066 <_printf_i+0x162>
 8007118:	2301      	movs	r3, #1
 800711a:	4632      	mov	r2, r6
 800711c:	4649      	mov	r1, r9
 800711e:	4640      	mov	r0, r8
 8007120:	47d0      	blx	sl
 8007122:	3001      	adds	r0, #1
 8007124:	d09d      	beq.n	8007062 <_printf_i+0x15e>
 8007126:	3501      	adds	r5, #1
 8007128:	68e3      	ldr	r3, [r4, #12]
 800712a:	9903      	ldr	r1, [sp, #12]
 800712c:	1a5b      	subs	r3, r3, r1
 800712e:	42ab      	cmp	r3, r5
 8007130:	dcf2      	bgt.n	8007118 <_printf_i+0x214>
 8007132:	e7eb      	b.n	800710c <_printf_i+0x208>
 8007134:	2500      	movs	r5, #0
 8007136:	f104 0619 	add.w	r6, r4, #25
 800713a:	e7f5      	b.n	8007128 <_printf_i+0x224>
 800713c:	0800badc 	.word	0x0800badc
 8007140:	0800baed 	.word	0x0800baed

08007144 <_scanf_float>:
 8007144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007148:	b087      	sub	sp, #28
 800714a:	9303      	str	r3, [sp, #12]
 800714c:	688b      	ldr	r3, [r1, #8]
 800714e:	4617      	mov	r7, r2
 8007150:	1e5a      	subs	r2, r3, #1
 8007152:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007156:	bf82      	ittt	hi
 8007158:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800715c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007160:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007164:	460a      	mov	r2, r1
 8007166:	f04f 0500 	mov.w	r5, #0
 800716a:	bf88      	it	hi
 800716c:	608b      	strhi	r3, [r1, #8]
 800716e:	680b      	ldr	r3, [r1, #0]
 8007170:	4680      	mov	r8, r0
 8007172:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007176:	f842 3b1c 	str.w	r3, [r2], #28
 800717a:	460c      	mov	r4, r1
 800717c:	bf98      	it	ls
 800717e:	f04f 0b00 	movls.w	fp, #0
 8007182:	4616      	mov	r6, r2
 8007184:	46aa      	mov	sl, r5
 8007186:	46a9      	mov	r9, r5
 8007188:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800718c:	9201      	str	r2, [sp, #4]
 800718e:	9502      	str	r5, [sp, #8]
 8007190:	68a2      	ldr	r2, [r4, #8]
 8007192:	b152      	cbz	r2, 80071aa <_scanf_float+0x66>
 8007194:	683b      	ldr	r3, [r7, #0]
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	2b4e      	cmp	r3, #78	@ 0x4e
 800719a:	d865      	bhi.n	8007268 <_scanf_float+0x124>
 800719c:	2b40      	cmp	r3, #64	@ 0x40
 800719e:	d83d      	bhi.n	800721c <_scanf_float+0xd8>
 80071a0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80071a4:	b2c8      	uxtb	r0, r1
 80071a6:	280e      	cmp	r0, #14
 80071a8:	d93b      	bls.n	8007222 <_scanf_float+0xde>
 80071aa:	f1b9 0f00 	cmp.w	r9, #0
 80071ae:	d003      	beq.n	80071b8 <_scanf_float+0x74>
 80071b0:	6823      	ldr	r3, [r4, #0]
 80071b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071b6:	6023      	str	r3, [r4, #0]
 80071b8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071bc:	f1ba 0f01 	cmp.w	sl, #1
 80071c0:	f200 8118 	bhi.w	80073f4 <_scanf_float+0x2b0>
 80071c4:	9b01      	ldr	r3, [sp, #4]
 80071c6:	429e      	cmp	r6, r3
 80071c8:	f200 8109 	bhi.w	80073de <_scanf_float+0x29a>
 80071cc:	2001      	movs	r0, #1
 80071ce:	b007      	add	sp, #28
 80071d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071d4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80071d8:	2a0d      	cmp	r2, #13
 80071da:	d8e6      	bhi.n	80071aa <_scanf_float+0x66>
 80071dc:	a101      	add	r1, pc, #4	@ (adr r1, 80071e4 <_scanf_float+0xa0>)
 80071de:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80071e2:	bf00      	nop
 80071e4:	0800732b 	.word	0x0800732b
 80071e8:	080071ab 	.word	0x080071ab
 80071ec:	080071ab 	.word	0x080071ab
 80071f0:	080071ab 	.word	0x080071ab
 80071f4:	0800738b 	.word	0x0800738b
 80071f8:	08007363 	.word	0x08007363
 80071fc:	080071ab 	.word	0x080071ab
 8007200:	080071ab 	.word	0x080071ab
 8007204:	08007339 	.word	0x08007339
 8007208:	080071ab 	.word	0x080071ab
 800720c:	080071ab 	.word	0x080071ab
 8007210:	080071ab 	.word	0x080071ab
 8007214:	080071ab 	.word	0x080071ab
 8007218:	080072f1 	.word	0x080072f1
 800721c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007220:	e7da      	b.n	80071d8 <_scanf_float+0x94>
 8007222:	290e      	cmp	r1, #14
 8007224:	d8c1      	bhi.n	80071aa <_scanf_float+0x66>
 8007226:	a001      	add	r0, pc, #4	@ (adr r0, 800722c <_scanf_float+0xe8>)
 8007228:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800722c:	080072e1 	.word	0x080072e1
 8007230:	080071ab 	.word	0x080071ab
 8007234:	080072e1 	.word	0x080072e1
 8007238:	08007377 	.word	0x08007377
 800723c:	080071ab 	.word	0x080071ab
 8007240:	08007289 	.word	0x08007289
 8007244:	080072c7 	.word	0x080072c7
 8007248:	080072c7 	.word	0x080072c7
 800724c:	080072c7 	.word	0x080072c7
 8007250:	080072c7 	.word	0x080072c7
 8007254:	080072c7 	.word	0x080072c7
 8007258:	080072c7 	.word	0x080072c7
 800725c:	080072c7 	.word	0x080072c7
 8007260:	080072c7 	.word	0x080072c7
 8007264:	080072c7 	.word	0x080072c7
 8007268:	2b6e      	cmp	r3, #110	@ 0x6e
 800726a:	d809      	bhi.n	8007280 <_scanf_float+0x13c>
 800726c:	2b60      	cmp	r3, #96	@ 0x60
 800726e:	d8b1      	bhi.n	80071d4 <_scanf_float+0x90>
 8007270:	2b54      	cmp	r3, #84	@ 0x54
 8007272:	d07b      	beq.n	800736c <_scanf_float+0x228>
 8007274:	2b59      	cmp	r3, #89	@ 0x59
 8007276:	d198      	bne.n	80071aa <_scanf_float+0x66>
 8007278:	2d07      	cmp	r5, #7
 800727a:	d196      	bne.n	80071aa <_scanf_float+0x66>
 800727c:	2508      	movs	r5, #8
 800727e:	e02c      	b.n	80072da <_scanf_float+0x196>
 8007280:	2b74      	cmp	r3, #116	@ 0x74
 8007282:	d073      	beq.n	800736c <_scanf_float+0x228>
 8007284:	2b79      	cmp	r3, #121	@ 0x79
 8007286:	e7f6      	b.n	8007276 <_scanf_float+0x132>
 8007288:	6821      	ldr	r1, [r4, #0]
 800728a:	05c8      	lsls	r0, r1, #23
 800728c:	d51b      	bpl.n	80072c6 <_scanf_float+0x182>
 800728e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007292:	6021      	str	r1, [r4, #0]
 8007294:	f109 0901 	add.w	r9, r9, #1
 8007298:	f1bb 0f00 	cmp.w	fp, #0
 800729c:	d003      	beq.n	80072a6 <_scanf_float+0x162>
 800729e:	3201      	adds	r2, #1
 80072a0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072a4:	60a2      	str	r2, [r4, #8]
 80072a6:	68a3      	ldr	r3, [r4, #8]
 80072a8:	3b01      	subs	r3, #1
 80072aa:	60a3      	str	r3, [r4, #8]
 80072ac:	6923      	ldr	r3, [r4, #16]
 80072ae:	3301      	adds	r3, #1
 80072b0:	6123      	str	r3, [r4, #16]
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	607b      	str	r3, [r7, #4]
 80072ba:	f340 8087 	ble.w	80073cc <_scanf_float+0x288>
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	3301      	adds	r3, #1
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	e764      	b.n	8007190 <_scanf_float+0x4c>
 80072c6:	eb1a 0105 	adds.w	r1, sl, r5
 80072ca:	f47f af6e 	bne.w	80071aa <_scanf_float+0x66>
 80072ce:	460d      	mov	r5, r1
 80072d0:	468a      	mov	sl, r1
 80072d2:	6822      	ldr	r2, [r4, #0]
 80072d4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80072d8:	6022      	str	r2, [r4, #0]
 80072da:	f806 3b01 	strb.w	r3, [r6], #1
 80072de:	e7e2      	b.n	80072a6 <_scanf_float+0x162>
 80072e0:	6822      	ldr	r2, [r4, #0]
 80072e2:	0610      	lsls	r0, r2, #24
 80072e4:	f57f af61 	bpl.w	80071aa <_scanf_float+0x66>
 80072e8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80072ec:	6022      	str	r2, [r4, #0]
 80072ee:	e7f4      	b.n	80072da <_scanf_float+0x196>
 80072f0:	f1ba 0f00 	cmp.w	sl, #0
 80072f4:	d10e      	bne.n	8007314 <_scanf_float+0x1d0>
 80072f6:	f1b9 0f00 	cmp.w	r9, #0
 80072fa:	d10e      	bne.n	800731a <_scanf_float+0x1d6>
 80072fc:	6822      	ldr	r2, [r4, #0]
 80072fe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007302:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007306:	d108      	bne.n	800731a <_scanf_float+0x1d6>
 8007308:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800730c:	f04f 0a01 	mov.w	sl, #1
 8007310:	6022      	str	r2, [r4, #0]
 8007312:	e7e2      	b.n	80072da <_scanf_float+0x196>
 8007314:	f1ba 0f02 	cmp.w	sl, #2
 8007318:	d055      	beq.n	80073c6 <_scanf_float+0x282>
 800731a:	2d01      	cmp	r5, #1
 800731c:	d002      	beq.n	8007324 <_scanf_float+0x1e0>
 800731e:	2d04      	cmp	r5, #4
 8007320:	f47f af43 	bne.w	80071aa <_scanf_float+0x66>
 8007324:	3501      	adds	r5, #1
 8007326:	b2ed      	uxtb	r5, r5
 8007328:	e7d7      	b.n	80072da <_scanf_float+0x196>
 800732a:	f1ba 0f01 	cmp.w	sl, #1
 800732e:	f47f af3c 	bne.w	80071aa <_scanf_float+0x66>
 8007332:	f04f 0a02 	mov.w	sl, #2
 8007336:	e7d0      	b.n	80072da <_scanf_float+0x196>
 8007338:	b97d      	cbnz	r5, 800735a <_scanf_float+0x216>
 800733a:	f1b9 0f00 	cmp.w	r9, #0
 800733e:	f47f af37 	bne.w	80071b0 <_scanf_float+0x6c>
 8007342:	6822      	ldr	r2, [r4, #0]
 8007344:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007348:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800734c:	f040 8103 	bne.w	8007556 <_scanf_float+0x412>
 8007350:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007354:	2501      	movs	r5, #1
 8007356:	6022      	str	r2, [r4, #0]
 8007358:	e7bf      	b.n	80072da <_scanf_float+0x196>
 800735a:	2d03      	cmp	r5, #3
 800735c:	d0e2      	beq.n	8007324 <_scanf_float+0x1e0>
 800735e:	2d05      	cmp	r5, #5
 8007360:	e7de      	b.n	8007320 <_scanf_float+0x1dc>
 8007362:	2d02      	cmp	r5, #2
 8007364:	f47f af21 	bne.w	80071aa <_scanf_float+0x66>
 8007368:	2503      	movs	r5, #3
 800736a:	e7b6      	b.n	80072da <_scanf_float+0x196>
 800736c:	2d06      	cmp	r5, #6
 800736e:	f47f af1c 	bne.w	80071aa <_scanf_float+0x66>
 8007372:	2507      	movs	r5, #7
 8007374:	e7b1      	b.n	80072da <_scanf_float+0x196>
 8007376:	6822      	ldr	r2, [r4, #0]
 8007378:	0591      	lsls	r1, r2, #22
 800737a:	f57f af16 	bpl.w	80071aa <_scanf_float+0x66>
 800737e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	f8cd 9008 	str.w	r9, [sp, #8]
 8007388:	e7a7      	b.n	80072da <_scanf_float+0x196>
 800738a:	6822      	ldr	r2, [r4, #0]
 800738c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007390:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007394:	d006      	beq.n	80073a4 <_scanf_float+0x260>
 8007396:	0550      	lsls	r0, r2, #21
 8007398:	f57f af07 	bpl.w	80071aa <_scanf_float+0x66>
 800739c:	f1b9 0f00 	cmp.w	r9, #0
 80073a0:	f000 80d9 	beq.w	8007556 <_scanf_float+0x412>
 80073a4:	0591      	lsls	r1, r2, #22
 80073a6:	bf58      	it	pl
 80073a8:	9902      	ldrpl	r1, [sp, #8]
 80073aa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073ae:	bf58      	it	pl
 80073b0:	eba9 0101 	subpl.w	r1, r9, r1
 80073b4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80073b8:	f04f 0900 	mov.w	r9, #0
 80073bc:	bf58      	it	pl
 80073be:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073c2:	6022      	str	r2, [r4, #0]
 80073c4:	e789      	b.n	80072da <_scanf_float+0x196>
 80073c6:	f04f 0a03 	mov.w	sl, #3
 80073ca:	e786      	b.n	80072da <_scanf_float+0x196>
 80073cc:	4639      	mov	r1, r7
 80073ce:	4640      	mov	r0, r8
 80073d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073d4:	4798      	blx	r3
 80073d6:	2800      	cmp	r0, #0
 80073d8:	f43f aeda 	beq.w	8007190 <_scanf_float+0x4c>
 80073dc:	e6e5      	b.n	80071aa <_scanf_float+0x66>
 80073de:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80073e2:	463a      	mov	r2, r7
 80073e4:	4640      	mov	r0, r8
 80073e6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80073ea:	4798      	blx	r3
 80073ec:	6923      	ldr	r3, [r4, #16]
 80073ee:	3b01      	subs	r3, #1
 80073f0:	6123      	str	r3, [r4, #16]
 80073f2:	e6e7      	b.n	80071c4 <_scanf_float+0x80>
 80073f4:	1e6b      	subs	r3, r5, #1
 80073f6:	2b06      	cmp	r3, #6
 80073f8:	d824      	bhi.n	8007444 <_scanf_float+0x300>
 80073fa:	2d02      	cmp	r5, #2
 80073fc:	d836      	bhi.n	800746c <_scanf_float+0x328>
 80073fe:	9b01      	ldr	r3, [sp, #4]
 8007400:	429e      	cmp	r6, r3
 8007402:	f67f aee3 	bls.w	80071cc <_scanf_float+0x88>
 8007406:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800740a:	463a      	mov	r2, r7
 800740c:	4640      	mov	r0, r8
 800740e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007412:	4798      	blx	r3
 8007414:	6923      	ldr	r3, [r4, #16]
 8007416:	3b01      	subs	r3, #1
 8007418:	6123      	str	r3, [r4, #16]
 800741a:	e7f0      	b.n	80073fe <_scanf_float+0x2ba>
 800741c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007420:	463a      	mov	r2, r7
 8007422:	4640      	mov	r0, r8
 8007424:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007428:	4798      	blx	r3
 800742a:	6923      	ldr	r3, [r4, #16]
 800742c:	3b01      	subs	r3, #1
 800742e:	6123      	str	r3, [r4, #16]
 8007430:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007434:	fa5f fa8a 	uxtb.w	sl, sl
 8007438:	f1ba 0f02 	cmp.w	sl, #2
 800743c:	d1ee      	bne.n	800741c <_scanf_float+0x2d8>
 800743e:	3d03      	subs	r5, #3
 8007440:	b2ed      	uxtb	r5, r5
 8007442:	1b76      	subs	r6, r6, r5
 8007444:	6823      	ldr	r3, [r4, #0]
 8007446:	05da      	lsls	r2, r3, #23
 8007448:	d530      	bpl.n	80074ac <_scanf_float+0x368>
 800744a:	055b      	lsls	r3, r3, #21
 800744c:	d511      	bpl.n	8007472 <_scanf_float+0x32e>
 800744e:	9b01      	ldr	r3, [sp, #4]
 8007450:	429e      	cmp	r6, r3
 8007452:	f67f aebb 	bls.w	80071cc <_scanf_float+0x88>
 8007456:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800745a:	463a      	mov	r2, r7
 800745c:	4640      	mov	r0, r8
 800745e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007462:	4798      	blx	r3
 8007464:	6923      	ldr	r3, [r4, #16]
 8007466:	3b01      	subs	r3, #1
 8007468:	6123      	str	r3, [r4, #16]
 800746a:	e7f0      	b.n	800744e <_scanf_float+0x30a>
 800746c:	46aa      	mov	sl, r5
 800746e:	46b3      	mov	fp, r6
 8007470:	e7de      	b.n	8007430 <_scanf_float+0x2ec>
 8007472:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007476:	6923      	ldr	r3, [r4, #16]
 8007478:	2965      	cmp	r1, #101	@ 0x65
 800747a:	f103 33ff 	add.w	r3, r3, #4294967295
 800747e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007482:	6123      	str	r3, [r4, #16]
 8007484:	d00c      	beq.n	80074a0 <_scanf_float+0x35c>
 8007486:	2945      	cmp	r1, #69	@ 0x45
 8007488:	d00a      	beq.n	80074a0 <_scanf_float+0x35c>
 800748a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800748e:	463a      	mov	r2, r7
 8007490:	4640      	mov	r0, r8
 8007492:	4798      	blx	r3
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800749a:	3b01      	subs	r3, #1
 800749c:	1eb5      	subs	r5, r6, #2
 800749e:	6123      	str	r3, [r4, #16]
 80074a0:	463a      	mov	r2, r7
 80074a2:	4640      	mov	r0, r8
 80074a4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074a8:	4798      	blx	r3
 80074aa:	462e      	mov	r6, r5
 80074ac:	6822      	ldr	r2, [r4, #0]
 80074ae:	f012 0210 	ands.w	r2, r2, #16
 80074b2:	d001      	beq.n	80074b8 <_scanf_float+0x374>
 80074b4:	2000      	movs	r0, #0
 80074b6:	e68a      	b.n	80071ce <_scanf_float+0x8a>
 80074b8:	7032      	strb	r2, [r6, #0]
 80074ba:	6823      	ldr	r3, [r4, #0]
 80074bc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074c4:	d11c      	bne.n	8007500 <_scanf_float+0x3bc>
 80074c6:	9b02      	ldr	r3, [sp, #8]
 80074c8:	454b      	cmp	r3, r9
 80074ca:	eba3 0209 	sub.w	r2, r3, r9
 80074ce:	d123      	bne.n	8007518 <_scanf_float+0x3d4>
 80074d0:	2200      	movs	r2, #0
 80074d2:	4640      	mov	r0, r8
 80074d4:	9901      	ldr	r1, [sp, #4]
 80074d6:	f002 fbfb 	bl	8009cd0 <_strtod_r>
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	6825      	ldr	r5, [r4, #0]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f015 0f02 	tst.w	r5, #2
 80074e4:	4606      	mov	r6, r0
 80074e6:	460f      	mov	r7, r1
 80074e8:	f103 0204 	add.w	r2, r3, #4
 80074ec:	d01f      	beq.n	800752e <_scanf_float+0x3ea>
 80074ee:	9903      	ldr	r1, [sp, #12]
 80074f0:	600a      	str	r2, [r1, #0]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	e9c3 6700 	strd	r6, r7, [r3]
 80074f8:	68e3      	ldr	r3, [r4, #12]
 80074fa:	3301      	adds	r3, #1
 80074fc:	60e3      	str	r3, [r4, #12]
 80074fe:	e7d9      	b.n	80074b4 <_scanf_float+0x370>
 8007500:	9b04      	ldr	r3, [sp, #16]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0e4      	beq.n	80074d0 <_scanf_float+0x38c>
 8007506:	9905      	ldr	r1, [sp, #20]
 8007508:	230a      	movs	r3, #10
 800750a:	4640      	mov	r0, r8
 800750c:	3101      	adds	r1, #1
 800750e:	f002 fc5f 	bl	8009dd0 <_strtol_r>
 8007512:	9b04      	ldr	r3, [sp, #16]
 8007514:	9e05      	ldr	r6, [sp, #20]
 8007516:	1ac2      	subs	r2, r0, r3
 8007518:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800751c:	429e      	cmp	r6, r3
 800751e:	bf28      	it	cs
 8007520:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007524:	4630      	mov	r0, r6
 8007526:	490d      	ldr	r1, [pc, #52]	@ (800755c <_scanf_float+0x418>)
 8007528:	f000 f8de 	bl	80076e8 <siprintf>
 800752c:	e7d0      	b.n	80074d0 <_scanf_float+0x38c>
 800752e:	076d      	lsls	r5, r5, #29
 8007530:	d4dd      	bmi.n	80074ee <_scanf_float+0x3aa>
 8007532:	9d03      	ldr	r5, [sp, #12]
 8007534:	602a      	str	r2, [r5, #0]
 8007536:	681d      	ldr	r5, [r3, #0]
 8007538:	4602      	mov	r2, r0
 800753a:	460b      	mov	r3, r1
 800753c:	f7f9 fad6 	bl	8000aec <__aeabi_dcmpun>
 8007540:	b120      	cbz	r0, 800754c <_scanf_float+0x408>
 8007542:	4807      	ldr	r0, [pc, #28]	@ (8007560 <_scanf_float+0x41c>)
 8007544:	f000 f9d0 	bl	80078e8 <nanf>
 8007548:	6028      	str	r0, [r5, #0]
 800754a:	e7d5      	b.n	80074f8 <_scanf_float+0x3b4>
 800754c:	4630      	mov	r0, r6
 800754e:	4639      	mov	r1, r7
 8007550:	f7f9 fb2a 	bl	8000ba8 <__aeabi_d2f>
 8007554:	e7f8      	b.n	8007548 <_scanf_float+0x404>
 8007556:	f04f 0900 	mov.w	r9, #0
 800755a:	e62d      	b.n	80071b8 <_scanf_float+0x74>
 800755c:	0800bafe 	.word	0x0800bafe
 8007560:	0800be95 	.word	0x0800be95

08007564 <std>:
 8007564:	2300      	movs	r3, #0
 8007566:	b510      	push	{r4, lr}
 8007568:	4604      	mov	r4, r0
 800756a:	e9c0 3300 	strd	r3, r3, [r0]
 800756e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007572:	6083      	str	r3, [r0, #8]
 8007574:	8181      	strh	r1, [r0, #12]
 8007576:	6643      	str	r3, [r0, #100]	@ 0x64
 8007578:	81c2      	strh	r2, [r0, #14]
 800757a:	6183      	str	r3, [r0, #24]
 800757c:	4619      	mov	r1, r3
 800757e:	2208      	movs	r2, #8
 8007580:	305c      	adds	r0, #92	@ 0x5c
 8007582:	f000 f914 	bl	80077ae <memset>
 8007586:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <std+0x58>)
 8007588:	6224      	str	r4, [r4, #32]
 800758a:	6263      	str	r3, [r4, #36]	@ 0x24
 800758c:	4b0c      	ldr	r3, [pc, #48]	@ (80075c0 <std+0x5c>)
 800758e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007590:	4b0c      	ldr	r3, [pc, #48]	@ (80075c4 <std+0x60>)
 8007592:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007594:	4b0c      	ldr	r3, [pc, #48]	@ (80075c8 <std+0x64>)
 8007596:	6323      	str	r3, [r4, #48]	@ 0x30
 8007598:	4b0c      	ldr	r3, [pc, #48]	@ (80075cc <std+0x68>)
 800759a:	429c      	cmp	r4, r3
 800759c:	d006      	beq.n	80075ac <std+0x48>
 800759e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075a2:	4294      	cmp	r4, r2
 80075a4:	d002      	beq.n	80075ac <std+0x48>
 80075a6:	33d0      	adds	r3, #208	@ 0xd0
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d105      	bne.n	80075b8 <std+0x54>
 80075ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075b4:	f000 b978 	b.w	80078a8 <__retarget_lock_init_recursive>
 80075b8:	bd10      	pop	{r4, pc}
 80075ba:	bf00      	nop
 80075bc:	08007729 	.word	0x08007729
 80075c0:	0800774b 	.word	0x0800774b
 80075c4:	08007783 	.word	0x08007783
 80075c8:	080077a7 	.word	0x080077a7
 80075cc:	20001ff4 	.word	0x20001ff4

080075d0 <stdio_exit_handler>:
 80075d0:	4a02      	ldr	r2, [pc, #8]	@ (80075dc <stdio_exit_handler+0xc>)
 80075d2:	4903      	ldr	r1, [pc, #12]	@ (80075e0 <stdio_exit_handler+0x10>)
 80075d4:	4803      	ldr	r0, [pc, #12]	@ (80075e4 <stdio_exit_handler+0x14>)
 80075d6:	f000 b869 	b.w	80076ac <_fwalk_sglue>
 80075da:	bf00      	nop
 80075dc:	20000010 	.word	0x20000010
 80075e0:	0800a185 	.word	0x0800a185
 80075e4:	20000020 	.word	0x20000020

080075e8 <cleanup_stdio>:
 80075e8:	6841      	ldr	r1, [r0, #4]
 80075ea:	4b0c      	ldr	r3, [pc, #48]	@ (800761c <cleanup_stdio+0x34>)
 80075ec:	b510      	push	{r4, lr}
 80075ee:	4299      	cmp	r1, r3
 80075f0:	4604      	mov	r4, r0
 80075f2:	d001      	beq.n	80075f8 <cleanup_stdio+0x10>
 80075f4:	f002 fdc6 	bl	800a184 <_fflush_r>
 80075f8:	68a1      	ldr	r1, [r4, #8]
 80075fa:	4b09      	ldr	r3, [pc, #36]	@ (8007620 <cleanup_stdio+0x38>)
 80075fc:	4299      	cmp	r1, r3
 80075fe:	d002      	beq.n	8007606 <cleanup_stdio+0x1e>
 8007600:	4620      	mov	r0, r4
 8007602:	f002 fdbf 	bl	800a184 <_fflush_r>
 8007606:	68e1      	ldr	r1, [r4, #12]
 8007608:	4b06      	ldr	r3, [pc, #24]	@ (8007624 <cleanup_stdio+0x3c>)
 800760a:	4299      	cmp	r1, r3
 800760c:	d004      	beq.n	8007618 <cleanup_stdio+0x30>
 800760e:	4620      	mov	r0, r4
 8007610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007614:	f002 bdb6 	b.w	800a184 <_fflush_r>
 8007618:	bd10      	pop	{r4, pc}
 800761a:	bf00      	nop
 800761c:	20001ff4 	.word	0x20001ff4
 8007620:	2000205c 	.word	0x2000205c
 8007624:	200020c4 	.word	0x200020c4

08007628 <global_stdio_init.part.0>:
 8007628:	b510      	push	{r4, lr}
 800762a:	4b0b      	ldr	r3, [pc, #44]	@ (8007658 <global_stdio_init.part.0+0x30>)
 800762c:	4c0b      	ldr	r4, [pc, #44]	@ (800765c <global_stdio_init.part.0+0x34>)
 800762e:	4a0c      	ldr	r2, [pc, #48]	@ (8007660 <global_stdio_init.part.0+0x38>)
 8007630:	4620      	mov	r0, r4
 8007632:	601a      	str	r2, [r3, #0]
 8007634:	2104      	movs	r1, #4
 8007636:	2200      	movs	r2, #0
 8007638:	f7ff ff94 	bl	8007564 <std>
 800763c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007640:	2201      	movs	r2, #1
 8007642:	2109      	movs	r1, #9
 8007644:	f7ff ff8e 	bl	8007564 <std>
 8007648:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800764c:	2202      	movs	r2, #2
 800764e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007652:	2112      	movs	r1, #18
 8007654:	f7ff bf86 	b.w	8007564 <std>
 8007658:	2000212c 	.word	0x2000212c
 800765c:	20001ff4 	.word	0x20001ff4
 8007660:	080075d1 	.word	0x080075d1

08007664 <__sfp_lock_acquire>:
 8007664:	4801      	ldr	r0, [pc, #4]	@ (800766c <__sfp_lock_acquire+0x8>)
 8007666:	f000 b920 	b.w	80078aa <__retarget_lock_acquire_recursive>
 800766a:	bf00      	nop
 800766c:	20002135 	.word	0x20002135

08007670 <__sfp_lock_release>:
 8007670:	4801      	ldr	r0, [pc, #4]	@ (8007678 <__sfp_lock_release+0x8>)
 8007672:	f000 b91b 	b.w	80078ac <__retarget_lock_release_recursive>
 8007676:	bf00      	nop
 8007678:	20002135 	.word	0x20002135

0800767c <__sinit>:
 800767c:	b510      	push	{r4, lr}
 800767e:	4604      	mov	r4, r0
 8007680:	f7ff fff0 	bl	8007664 <__sfp_lock_acquire>
 8007684:	6a23      	ldr	r3, [r4, #32]
 8007686:	b11b      	cbz	r3, 8007690 <__sinit+0x14>
 8007688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800768c:	f7ff bff0 	b.w	8007670 <__sfp_lock_release>
 8007690:	4b04      	ldr	r3, [pc, #16]	@ (80076a4 <__sinit+0x28>)
 8007692:	6223      	str	r3, [r4, #32]
 8007694:	4b04      	ldr	r3, [pc, #16]	@ (80076a8 <__sinit+0x2c>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1f5      	bne.n	8007688 <__sinit+0xc>
 800769c:	f7ff ffc4 	bl	8007628 <global_stdio_init.part.0>
 80076a0:	e7f2      	b.n	8007688 <__sinit+0xc>
 80076a2:	bf00      	nop
 80076a4:	080075e9 	.word	0x080075e9
 80076a8:	2000212c 	.word	0x2000212c

080076ac <_fwalk_sglue>:
 80076ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076b0:	4607      	mov	r7, r0
 80076b2:	4688      	mov	r8, r1
 80076b4:	4614      	mov	r4, r2
 80076b6:	2600      	movs	r6, #0
 80076b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076bc:	f1b9 0901 	subs.w	r9, r9, #1
 80076c0:	d505      	bpl.n	80076ce <_fwalk_sglue+0x22>
 80076c2:	6824      	ldr	r4, [r4, #0]
 80076c4:	2c00      	cmp	r4, #0
 80076c6:	d1f7      	bne.n	80076b8 <_fwalk_sglue+0xc>
 80076c8:	4630      	mov	r0, r6
 80076ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	2b01      	cmp	r3, #1
 80076d2:	d907      	bls.n	80076e4 <_fwalk_sglue+0x38>
 80076d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076d8:	3301      	adds	r3, #1
 80076da:	d003      	beq.n	80076e4 <_fwalk_sglue+0x38>
 80076dc:	4629      	mov	r1, r5
 80076de:	4638      	mov	r0, r7
 80076e0:	47c0      	blx	r8
 80076e2:	4306      	orrs	r6, r0
 80076e4:	3568      	adds	r5, #104	@ 0x68
 80076e6:	e7e9      	b.n	80076bc <_fwalk_sglue+0x10>

080076e8 <siprintf>:
 80076e8:	b40e      	push	{r1, r2, r3}
 80076ea:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80076ee:	b500      	push	{lr}
 80076f0:	b09c      	sub	sp, #112	@ 0x70
 80076f2:	ab1d      	add	r3, sp, #116	@ 0x74
 80076f4:	9002      	str	r0, [sp, #8]
 80076f6:	9006      	str	r0, [sp, #24]
 80076f8:	9107      	str	r1, [sp, #28]
 80076fa:	9104      	str	r1, [sp, #16]
 80076fc:	4808      	ldr	r0, [pc, #32]	@ (8007720 <siprintf+0x38>)
 80076fe:	4909      	ldr	r1, [pc, #36]	@ (8007724 <siprintf+0x3c>)
 8007700:	f853 2b04 	ldr.w	r2, [r3], #4
 8007704:	9105      	str	r1, [sp, #20]
 8007706:	6800      	ldr	r0, [r0, #0]
 8007708:	a902      	add	r1, sp, #8
 800770a:	9301      	str	r3, [sp, #4]
 800770c:	f002 fbbe 	bl	8009e8c <_svfiprintf_r>
 8007710:	2200      	movs	r2, #0
 8007712:	9b02      	ldr	r3, [sp, #8]
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	b01c      	add	sp, #112	@ 0x70
 8007718:	f85d eb04 	ldr.w	lr, [sp], #4
 800771c:	b003      	add	sp, #12
 800771e:	4770      	bx	lr
 8007720:	2000001c 	.word	0x2000001c
 8007724:	ffff0208 	.word	0xffff0208

08007728 <__sread>:
 8007728:	b510      	push	{r4, lr}
 800772a:	460c      	mov	r4, r1
 800772c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007730:	f000 f86c 	bl	800780c <_read_r>
 8007734:	2800      	cmp	r0, #0
 8007736:	bfab      	itete	ge
 8007738:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800773a:	89a3      	ldrhlt	r3, [r4, #12]
 800773c:	181b      	addge	r3, r3, r0
 800773e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007742:	bfac      	ite	ge
 8007744:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007746:	81a3      	strhlt	r3, [r4, #12]
 8007748:	bd10      	pop	{r4, pc}

0800774a <__swrite>:
 800774a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800774e:	461f      	mov	r7, r3
 8007750:	898b      	ldrh	r3, [r1, #12]
 8007752:	4605      	mov	r5, r0
 8007754:	05db      	lsls	r3, r3, #23
 8007756:	460c      	mov	r4, r1
 8007758:	4616      	mov	r6, r2
 800775a:	d505      	bpl.n	8007768 <__swrite+0x1e>
 800775c:	2302      	movs	r3, #2
 800775e:	2200      	movs	r2, #0
 8007760:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007764:	f000 f840 	bl	80077e8 <_lseek_r>
 8007768:	89a3      	ldrh	r3, [r4, #12]
 800776a:	4632      	mov	r2, r6
 800776c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007770:	81a3      	strh	r3, [r4, #12]
 8007772:	4628      	mov	r0, r5
 8007774:	463b      	mov	r3, r7
 8007776:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800777a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800777e:	f000 b857 	b.w	8007830 <_write_r>

08007782 <__sseek>:
 8007782:	b510      	push	{r4, lr}
 8007784:	460c      	mov	r4, r1
 8007786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800778a:	f000 f82d 	bl	80077e8 <_lseek_r>
 800778e:	1c43      	adds	r3, r0, #1
 8007790:	89a3      	ldrh	r3, [r4, #12]
 8007792:	bf15      	itete	ne
 8007794:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007796:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800779a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800779e:	81a3      	strheq	r3, [r4, #12]
 80077a0:	bf18      	it	ne
 80077a2:	81a3      	strhne	r3, [r4, #12]
 80077a4:	bd10      	pop	{r4, pc}

080077a6 <__sclose>:
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	f000 b80d 	b.w	80077c8 <_close_r>

080077ae <memset>:
 80077ae:	4603      	mov	r3, r0
 80077b0:	4402      	add	r2, r0
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d100      	bne.n	80077b8 <memset+0xa>
 80077b6:	4770      	bx	lr
 80077b8:	f803 1b01 	strb.w	r1, [r3], #1
 80077bc:	e7f9      	b.n	80077b2 <memset+0x4>
	...

080077c0 <_localeconv_r>:
 80077c0:	4800      	ldr	r0, [pc, #0]	@ (80077c4 <_localeconv_r+0x4>)
 80077c2:	4770      	bx	lr
 80077c4:	2000015c 	.word	0x2000015c

080077c8 <_close_r>:
 80077c8:	b538      	push	{r3, r4, r5, lr}
 80077ca:	2300      	movs	r3, #0
 80077cc:	4d05      	ldr	r5, [pc, #20]	@ (80077e4 <_close_r+0x1c>)
 80077ce:	4604      	mov	r4, r0
 80077d0:	4608      	mov	r0, r1
 80077d2:	602b      	str	r3, [r5, #0]
 80077d4:	f7fa f8a9 	bl	800192a <_close>
 80077d8:	1c43      	adds	r3, r0, #1
 80077da:	d102      	bne.n	80077e2 <_close_r+0x1a>
 80077dc:	682b      	ldr	r3, [r5, #0]
 80077de:	b103      	cbz	r3, 80077e2 <_close_r+0x1a>
 80077e0:	6023      	str	r3, [r4, #0]
 80077e2:	bd38      	pop	{r3, r4, r5, pc}
 80077e4:	20002130 	.word	0x20002130

080077e8 <_lseek_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	4604      	mov	r4, r0
 80077ec:	4608      	mov	r0, r1
 80077ee:	4611      	mov	r1, r2
 80077f0:	2200      	movs	r2, #0
 80077f2:	4d05      	ldr	r5, [pc, #20]	@ (8007808 <_lseek_r+0x20>)
 80077f4:	602a      	str	r2, [r5, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	f7fa f8bb 	bl	8001972 <_lseek>
 80077fc:	1c43      	adds	r3, r0, #1
 80077fe:	d102      	bne.n	8007806 <_lseek_r+0x1e>
 8007800:	682b      	ldr	r3, [r5, #0]
 8007802:	b103      	cbz	r3, 8007806 <_lseek_r+0x1e>
 8007804:	6023      	str	r3, [r4, #0]
 8007806:	bd38      	pop	{r3, r4, r5, pc}
 8007808:	20002130 	.word	0x20002130

0800780c <_read_r>:
 800780c:	b538      	push	{r3, r4, r5, lr}
 800780e:	4604      	mov	r4, r0
 8007810:	4608      	mov	r0, r1
 8007812:	4611      	mov	r1, r2
 8007814:	2200      	movs	r2, #0
 8007816:	4d05      	ldr	r5, [pc, #20]	@ (800782c <_read_r+0x20>)
 8007818:	602a      	str	r2, [r5, #0]
 800781a:	461a      	mov	r2, r3
 800781c:	f7fa f84c 	bl	80018b8 <_read>
 8007820:	1c43      	adds	r3, r0, #1
 8007822:	d102      	bne.n	800782a <_read_r+0x1e>
 8007824:	682b      	ldr	r3, [r5, #0]
 8007826:	b103      	cbz	r3, 800782a <_read_r+0x1e>
 8007828:	6023      	str	r3, [r4, #0]
 800782a:	bd38      	pop	{r3, r4, r5, pc}
 800782c:	20002130 	.word	0x20002130

08007830 <_write_r>:
 8007830:	b538      	push	{r3, r4, r5, lr}
 8007832:	4604      	mov	r4, r0
 8007834:	4608      	mov	r0, r1
 8007836:	4611      	mov	r1, r2
 8007838:	2200      	movs	r2, #0
 800783a:	4d05      	ldr	r5, [pc, #20]	@ (8007850 <_write_r+0x20>)
 800783c:	602a      	str	r2, [r5, #0]
 800783e:	461a      	mov	r2, r3
 8007840:	f7fa f857 	bl	80018f2 <_write>
 8007844:	1c43      	adds	r3, r0, #1
 8007846:	d102      	bne.n	800784e <_write_r+0x1e>
 8007848:	682b      	ldr	r3, [r5, #0]
 800784a:	b103      	cbz	r3, 800784e <_write_r+0x1e>
 800784c:	6023      	str	r3, [r4, #0]
 800784e:	bd38      	pop	{r3, r4, r5, pc}
 8007850:	20002130 	.word	0x20002130

08007854 <__errno>:
 8007854:	4b01      	ldr	r3, [pc, #4]	@ (800785c <__errno+0x8>)
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	2000001c 	.word	0x2000001c

08007860 <__libc_init_array>:
 8007860:	b570      	push	{r4, r5, r6, lr}
 8007862:	2600      	movs	r6, #0
 8007864:	4d0c      	ldr	r5, [pc, #48]	@ (8007898 <__libc_init_array+0x38>)
 8007866:	4c0d      	ldr	r4, [pc, #52]	@ (800789c <__libc_init_array+0x3c>)
 8007868:	1b64      	subs	r4, r4, r5
 800786a:	10a4      	asrs	r4, r4, #2
 800786c:	42a6      	cmp	r6, r4
 800786e:	d109      	bne.n	8007884 <__libc_init_array+0x24>
 8007870:	f003 fb66 	bl	800af40 <_init>
 8007874:	2600      	movs	r6, #0
 8007876:	4d0a      	ldr	r5, [pc, #40]	@ (80078a0 <__libc_init_array+0x40>)
 8007878:	4c0a      	ldr	r4, [pc, #40]	@ (80078a4 <__libc_init_array+0x44>)
 800787a:	1b64      	subs	r4, r4, r5
 800787c:	10a4      	asrs	r4, r4, #2
 800787e:	42a6      	cmp	r6, r4
 8007880:	d105      	bne.n	800788e <__libc_init_array+0x2e>
 8007882:	bd70      	pop	{r4, r5, r6, pc}
 8007884:	f855 3b04 	ldr.w	r3, [r5], #4
 8007888:	4798      	blx	r3
 800788a:	3601      	adds	r6, #1
 800788c:	e7ee      	b.n	800786c <__libc_init_array+0xc>
 800788e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007892:	4798      	blx	r3
 8007894:	3601      	adds	r6, #1
 8007896:	e7f2      	b.n	800787e <__libc_init_array+0x1e>
 8007898:	0800bf00 	.word	0x0800bf00
 800789c:	0800bf00 	.word	0x0800bf00
 80078a0:	0800bf00 	.word	0x0800bf00
 80078a4:	0800bf04 	.word	0x0800bf04

080078a8 <__retarget_lock_init_recursive>:
 80078a8:	4770      	bx	lr

080078aa <__retarget_lock_acquire_recursive>:
 80078aa:	4770      	bx	lr

080078ac <__retarget_lock_release_recursive>:
 80078ac:	4770      	bx	lr

080078ae <memchr>:
 80078ae:	4603      	mov	r3, r0
 80078b0:	b510      	push	{r4, lr}
 80078b2:	b2c9      	uxtb	r1, r1
 80078b4:	4402      	add	r2, r0
 80078b6:	4293      	cmp	r3, r2
 80078b8:	4618      	mov	r0, r3
 80078ba:	d101      	bne.n	80078c0 <memchr+0x12>
 80078bc:	2000      	movs	r0, #0
 80078be:	e003      	b.n	80078c8 <memchr+0x1a>
 80078c0:	7804      	ldrb	r4, [r0, #0]
 80078c2:	3301      	adds	r3, #1
 80078c4:	428c      	cmp	r4, r1
 80078c6:	d1f6      	bne.n	80078b6 <memchr+0x8>
 80078c8:	bd10      	pop	{r4, pc}

080078ca <memcpy>:
 80078ca:	440a      	add	r2, r1
 80078cc:	4291      	cmp	r1, r2
 80078ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80078d2:	d100      	bne.n	80078d6 <memcpy+0xc>
 80078d4:	4770      	bx	lr
 80078d6:	b510      	push	{r4, lr}
 80078d8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078dc:	4291      	cmp	r1, r2
 80078de:	f803 4f01 	strb.w	r4, [r3, #1]!
 80078e2:	d1f9      	bne.n	80078d8 <memcpy+0xe>
 80078e4:	bd10      	pop	{r4, pc}
	...

080078e8 <nanf>:
 80078e8:	4800      	ldr	r0, [pc, #0]	@ (80078ec <nanf+0x4>)
 80078ea:	4770      	bx	lr
 80078ec:	7fc00000 	.word	0x7fc00000

080078f0 <quorem>:
 80078f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f4:	6903      	ldr	r3, [r0, #16]
 80078f6:	690c      	ldr	r4, [r1, #16]
 80078f8:	4607      	mov	r7, r0
 80078fa:	42a3      	cmp	r3, r4
 80078fc:	db7e      	blt.n	80079fc <quorem+0x10c>
 80078fe:	3c01      	subs	r4, #1
 8007900:	00a3      	lsls	r3, r4, #2
 8007902:	f100 0514 	add.w	r5, r0, #20
 8007906:	f101 0814 	add.w	r8, r1, #20
 800790a:	9300      	str	r3, [sp, #0]
 800790c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007910:	9301      	str	r3, [sp, #4]
 8007912:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007916:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800791a:	3301      	adds	r3, #1
 800791c:	429a      	cmp	r2, r3
 800791e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007922:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007926:	d32e      	bcc.n	8007986 <quorem+0x96>
 8007928:	f04f 0a00 	mov.w	sl, #0
 800792c:	46c4      	mov	ip, r8
 800792e:	46ae      	mov	lr, r5
 8007930:	46d3      	mov	fp, sl
 8007932:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007936:	b298      	uxth	r0, r3
 8007938:	fb06 a000 	mla	r0, r6, r0, sl
 800793c:	0c1b      	lsrs	r3, r3, #16
 800793e:	0c02      	lsrs	r2, r0, #16
 8007940:	fb06 2303 	mla	r3, r6, r3, r2
 8007944:	f8de 2000 	ldr.w	r2, [lr]
 8007948:	b280      	uxth	r0, r0
 800794a:	b292      	uxth	r2, r2
 800794c:	1a12      	subs	r2, r2, r0
 800794e:	445a      	add	r2, fp
 8007950:	f8de 0000 	ldr.w	r0, [lr]
 8007954:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007958:	b29b      	uxth	r3, r3
 800795a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800795e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007962:	b292      	uxth	r2, r2
 8007964:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007968:	45e1      	cmp	r9, ip
 800796a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800796e:	f84e 2b04 	str.w	r2, [lr], #4
 8007972:	d2de      	bcs.n	8007932 <quorem+0x42>
 8007974:	9b00      	ldr	r3, [sp, #0]
 8007976:	58eb      	ldr	r3, [r5, r3]
 8007978:	b92b      	cbnz	r3, 8007986 <quorem+0x96>
 800797a:	9b01      	ldr	r3, [sp, #4]
 800797c:	3b04      	subs	r3, #4
 800797e:	429d      	cmp	r5, r3
 8007980:	461a      	mov	r2, r3
 8007982:	d32f      	bcc.n	80079e4 <quorem+0xf4>
 8007984:	613c      	str	r4, [r7, #16]
 8007986:	4638      	mov	r0, r7
 8007988:	f001 f9c2 	bl	8008d10 <__mcmp>
 800798c:	2800      	cmp	r0, #0
 800798e:	db25      	blt.n	80079dc <quorem+0xec>
 8007990:	4629      	mov	r1, r5
 8007992:	2000      	movs	r0, #0
 8007994:	f858 2b04 	ldr.w	r2, [r8], #4
 8007998:	f8d1 c000 	ldr.w	ip, [r1]
 800799c:	fa1f fe82 	uxth.w	lr, r2
 80079a0:	fa1f f38c 	uxth.w	r3, ip
 80079a4:	eba3 030e 	sub.w	r3, r3, lr
 80079a8:	4403      	add	r3, r0
 80079aa:	0c12      	lsrs	r2, r2, #16
 80079ac:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079b0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079ba:	45c1      	cmp	r9, r8
 80079bc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079c0:	f841 3b04 	str.w	r3, [r1], #4
 80079c4:	d2e6      	bcs.n	8007994 <quorem+0xa4>
 80079c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079ca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ce:	b922      	cbnz	r2, 80079da <quorem+0xea>
 80079d0:	3b04      	subs	r3, #4
 80079d2:	429d      	cmp	r5, r3
 80079d4:	461a      	mov	r2, r3
 80079d6:	d30b      	bcc.n	80079f0 <quorem+0x100>
 80079d8:	613c      	str	r4, [r7, #16]
 80079da:	3601      	adds	r6, #1
 80079dc:	4630      	mov	r0, r6
 80079de:	b003      	add	sp, #12
 80079e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079e4:	6812      	ldr	r2, [r2, #0]
 80079e6:	3b04      	subs	r3, #4
 80079e8:	2a00      	cmp	r2, #0
 80079ea:	d1cb      	bne.n	8007984 <quorem+0x94>
 80079ec:	3c01      	subs	r4, #1
 80079ee:	e7c6      	b.n	800797e <quorem+0x8e>
 80079f0:	6812      	ldr	r2, [r2, #0]
 80079f2:	3b04      	subs	r3, #4
 80079f4:	2a00      	cmp	r2, #0
 80079f6:	d1ef      	bne.n	80079d8 <quorem+0xe8>
 80079f8:	3c01      	subs	r4, #1
 80079fa:	e7ea      	b.n	80079d2 <quorem+0xe2>
 80079fc:	2000      	movs	r0, #0
 80079fe:	e7ee      	b.n	80079de <quorem+0xee>

08007a00 <_dtoa_r>:
 8007a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a04:	4614      	mov	r4, r2
 8007a06:	461d      	mov	r5, r3
 8007a08:	69c7      	ldr	r7, [r0, #28]
 8007a0a:	b097      	sub	sp, #92	@ 0x5c
 8007a0c:	4683      	mov	fp, r0
 8007a0e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a12:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a14:	b97f      	cbnz	r7, 8007a36 <_dtoa_r+0x36>
 8007a16:	2010      	movs	r0, #16
 8007a18:	f000 fe02 	bl	8008620 <malloc>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a22:	b920      	cbnz	r0, 8007a2e <_dtoa_r+0x2e>
 8007a24:	21ef      	movs	r1, #239	@ 0xef
 8007a26:	4ba8      	ldr	r3, [pc, #672]	@ (8007cc8 <_dtoa_r+0x2c8>)
 8007a28:	48a8      	ldr	r0, [pc, #672]	@ (8007ccc <_dtoa_r+0x2cc>)
 8007a2a:	f002 fc15 	bl	800a258 <__assert_func>
 8007a2e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a32:	6007      	str	r7, [r0, #0]
 8007a34:	60c7      	str	r7, [r0, #12]
 8007a36:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a3a:	6819      	ldr	r1, [r3, #0]
 8007a3c:	b159      	cbz	r1, 8007a56 <_dtoa_r+0x56>
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	2301      	movs	r3, #1
 8007a42:	4093      	lsls	r3, r2
 8007a44:	604a      	str	r2, [r1, #4]
 8007a46:	608b      	str	r3, [r1, #8]
 8007a48:	4658      	mov	r0, fp
 8007a4a:	f000 fedf 	bl	800880c <_Bfree>
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a54:	601a      	str	r2, [r3, #0]
 8007a56:	1e2b      	subs	r3, r5, #0
 8007a58:	bfaf      	iteee	ge
 8007a5a:	2300      	movge	r3, #0
 8007a5c:	2201      	movlt	r2, #1
 8007a5e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a62:	9303      	strlt	r3, [sp, #12]
 8007a64:	bfa8      	it	ge
 8007a66:	6033      	strge	r3, [r6, #0]
 8007a68:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a6c:	4b98      	ldr	r3, [pc, #608]	@ (8007cd0 <_dtoa_r+0x2d0>)
 8007a6e:	bfb8      	it	lt
 8007a70:	6032      	strlt	r2, [r6, #0]
 8007a72:	ea33 0308 	bics.w	r3, r3, r8
 8007a76:	d112      	bne.n	8007a9e <_dtoa_r+0x9e>
 8007a78:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a7c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007a84:	4323      	orrs	r3, r4
 8007a86:	f000 8550 	beq.w	800852a <_dtoa_r+0xb2a>
 8007a8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007a8c:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007cd4 <_dtoa_r+0x2d4>
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	f000 8552 	beq.w	800853a <_dtoa_r+0xb3a>
 8007a96:	f10a 0303 	add.w	r3, sl, #3
 8007a9a:	f000 bd4c 	b.w	8008536 <_dtoa_r+0xb36>
 8007a9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aa2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007aa6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2300      	movs	r3, #0
 8007aae:	f7f8 ffeb 	bl	8000a88 <__aeabi_dcmpeq>
 8007ab2:	4607      	mov	r7, r0
 8007ab4:	b158      	cbz	r0, 8007ace <_dtoa_r+0xce>
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007aba:	6013      	str	r3, [r2, #0]
 8007abc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007abe:	b113      	cbz	r3, 8007ac6 <_dtoa_r+0xc6>
 8007ac0:	4b85      	ldr	r3, [pc, #532]	@ (8007cd8 <_dtoa_r+0x2d8>)
 8007ac2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ac4:	6013      	str	r3, [r2, #0]
 8007ac6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007cdc <_dtoa_r+0x2dc>
 8007aca:	f000 bd36 	b.w	800853a <_dtoa_r+0xb3a>
 8007ace:	ab14      	add	r3, sp, #80	@ 0x50
 8007ad0:	9301      	str	r3, [sp, #4]
 8007ad2:	ab15      	add	r3, sp, #84	@ 0x54
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4658      	mov	r0, fp
 8007ad8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007adc:	f001 fa30 	bl	8008f40 <__d2b>
 8007ae0:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007ae4:	4681      	mov	r9, r0
 8007ae6:	2e00      	cmp	r6, #0
 8007ae8:	d077      	beq.n	8007bda <_dtoa_r+0x1da>
 8007aea:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007af0:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007af4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007af8:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007afc:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b00:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b02:	4619      	mov	r1, r3
 8007b04:	2200      	movs	r2, #0
 8007b06:	4b76      	ldr	r3, [pc, #472]	@ (8007ce0 <_dtoa_r+0x2e0>)
 8007b08:	f7f8 fb9e 	bl	8000248 <__aeabi_dsub>
 8007b0c:	a368      	add	r3, pc, #416	@ (adr r3, 8007cb0 <_dtoa_r+0x2b0>)
 8007b0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b12:	f7f8 fd51 	bl	80005b8 <__aeabi_dmul>
 8007b16:	a368      	add	r3, pc, #416	@ (adr r3, 8007cb8 <_dtoa_r+0x2b8>)
 8007b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b1c:	f7f8 fb96 	bl	800024c <__adddf3>
 8007b20:	4604      	mov	r4, r0
 8007b22:	4630      	mov	r0, r6
 8007b24:	460d      	mov	r5, r1
 8007b26:	f7f8 fcdd 	bl	80004e4 <__aeabi_i2d>
 8007b2a:	a365      	add	r3, pc, #404	@ (adr r3, 8007cc0 <_dtoa_r+0x2c0>)
 8007b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b30:	f7f8 fd42 	bl	80005b8 <__aeabi_dmul>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4620      	mov	r0, r4
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7f8 fb86 	bl	800024c <__adddf3>
 8007b40:	4604      	mov	r4, r0
 8007b42:	460d      	mov	r5, r1
 8007b44:	f7f8 ffe8 	bl	8000b18 <__aeabi_d2iz>
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4607      	mov	r7, r0
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	4620      	mov	r0, r4
 8007b50:	4629      	mov	r1, r5
 8007b52:	f7f8 ffa3 	bl	8000a9c <__aeabi_dcmplt>
 8007b56:	b140      	cbz	r0, 8007b6a <_dtoa_r+0x16a>
 8007b58:	4638      	mov	r0, r7
 8007b5a:	f7f8 fcc3 	bl	80004e4 <__aeabi_i2d>
 8007b5e:	4622      	mov	r2, r4
 8007b60:	462b      	mov	r3, r5
 8007b62:	f7f8 ff91 	bl	8000a88 <__aeabi_dcmpeq>
 8007b66:	b900      	cbnz	r0, 8007b6a <_dtoa_r+0x16a>
 8007b68:	3f01      	subs	r7, #1
 8007b6a:	2f16      	cmp	r7, #22
 8007b6c:	d853      	bhi.n	8007c16 <_dtoa_r+0x216>
 8007b6e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b72:	4b5c      	ldr	r3, [pc, #368]	@ (8007ce4 <_dtoa_r+0x2e4>)
 8007b74:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b7c:	f7f8 ff8e 	bl	8000a9c <__aeabi_dcmplt>
 8007b80:	2800      	cmp	r0, #0
 8007b82:	d04a      	beq.n	8007c1a <_dtoa_r+0x21a>
 8007b84:	2300      	movs	r3, #0
 8007b86:	3f01      	subs	r7, #1
 8007b88:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b8a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b8c:	1b9b      	subs	r3, r3, r6
 8007b8e:	1e5a      	subs	r2, r3, #1
 8007b90:	bf46      	itte	mi
 8007b92:	f1c3 0801 	rsbmi	r8, r3, #1
 8007b96:	2300      	movmi	r3, #0
 8007b98:	f04f 0800 	movpl.w	r8, #0
 8007b9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007b9e:	bf48      	it	mi
 8007ba0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007ba2:	2f00      	cmp	r7, #0
 8007ba4:	db3b      	blt.n	8007c1e <_dtoa_r+0x21e>
 8007ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ba8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007baa:	443b      	add	r3, r7
 8007bac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bae:	2300      	movs	r3, #0
 8007bb0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bb2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bb4:	2b09      	cmp	r3, #9
 8007bb6:	d866      	bhi.n	8007c86 <_dtoa_r+0x286>
 8007bb8:	2b05      	cmp	r3, #5
 8007bba:	bfc4      	itt	gt
 8007bbc:	3b04      	subgt	r3, #4
 8007bbe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007bc0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bc2:	bfc8      	it	gt
 8007bc4:	2400      	movgt	r4, #0
 8007bc6:	f1a3 0302 	sub.w	r3, r3, #2
 8007bca:	bfd8      	it	le
 8007bcc:	2401      	movle	r4, #1
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d864      	bhi.n	8007c9c <_dtoa_r+0x29c>
 8007bd2:	e8df f003 	tbb	[pc, r3]
 8007bd6:	382b      	.short	0x382b
 8007bd8:	5636      	.short	0x5636
 8007bda:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bde:	441e      	add	r6, r3
 8007be0:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	bfc1      	itttt	gt
 8007be8:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007bec:	fa08 f803 	lslgt.w	r8, r8, r3
 8007bf0:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007bf4:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007bf8:	bfd6      	itet	le
 8007bfa:	f1c3 0320 	rsble	r3, r3, #32
 8007bfe:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c02:	fa04 f003 	lslle.w	r0, r4, r3
 8007c06:	f7f8 fc5d 	bl	80004c4 <__aeabi_ui2d>
 8007c0a:	2201      	movs	r2, #1
 8007c0c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c10:	3e01      	subs	r6, #1
 8007c12:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c14:	e775      	b.n	8007b02 <_dtoa_r+0x102>
 8007c16:	2301      	movs	r3, #1
 8007c18:	e7b6      	b.n	8007b88 <_dtoa_r+0x188>
 8007c1a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c1c:	e7b5      	b.n	8007b8a <_dtoa_r+0x18a>
 8007c1e:	427b      	negs	r3, r7
 8007c20:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c22:	2300      	movs	r3, #0
 8007c24:	eba8 0807 	sub.w	r8, r8, r7
 8007c28:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c2a:	e7c2      	b.n	8007bb2 <_dtoa_r+0x1b2>
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c30:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	dc35      	bgt.n	8007ca2 <_dtoa_r+0x2a2>
 8007c36:	2301      	movs	r3, #1
 8007c38:	461a      	mov	r2, r3
 8007c3a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c3e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007c40:	e00b      	b.n	8007c5a <_dtoa_r+0x25a>
 8007c42:	2301      	movs	r3, #1
 8007c44:	e7f3      	b.n	8007c2e <_dtoa_r+0x22e>
 8007c46:	2300      	movs	r3, #0
 8007c48:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c4c:	18fb      	adds	r3, r7, r3
 8007c4e:	9308      	str	r3, [sp, #32]
 8007c50:	3301      	adds	r3, #1
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	9307      	str	r3, [sp, #28]
 8007c56:	bfb8      	it	lt
 8007c58:	2301      	movlt	r3, #1
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	2204      	movs	r2, #4
 8007c5e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c62:	f102 0514 	add.w	r5, r2, #20
 8007c66:	429d      	cmp	r5, r3
 8007c68:	d91f      	bls.n	8007caa <_dtoa_r+0x2aa>
 8007c6a:	6041      	str	r1, [r0, #4]
 8007c6c:	4658      	mov	r0, fp
 8007c6e:	f000 fd8d 	bl	800878c <_Balloc>
 8007c72:	4682      	mov	sl, r0
 8007c74:	2800      	cmp	r0, #0
 8007c76:	d139      	bne.n	8007cec <_dtoa_r+0x2ec>
 8007c78:	4602      	mov	r2, r0
 8007c7a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c7e:	4b1a      	ldr	r3, [pc, #104]	@ (8007ce8 <_dtoa_r+0x2e8>)
 8007c80:	e6d2      	b.n	8007a28 <_dtoa_r+0x28>
 8007c82:	2301      	movs	r3, #1
 8007c84:	e7e0      	b.n	8007c48 <_dtoa_r+0x248>
 8007c86:	2401      	movs	r4, #1
 8007c88:	2300      	movs	r3, #0
 8007c8a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007c8c:	9320      	str	r3, [sp, #128]	@ 0x80
 8007c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007c92:	2200      	movs	r2, #0
 8007c94:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c98:	2312      	movs	r3, #18
 8007c9a:	e7d0      	b.n	8007c3e <_dtoa_r+0x23e>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007ca0:	e7f5      	b.n	8007c8e <_dtoa_r+0x28e>
 8007ca2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007ca4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007ca8:	e7d7      	b.n	8007c5a <_dtoa_r+0x25a>
 8007caa:	3101      	adds	r1, #1
 8007cac:	0052      	lsls	r2, r2, #1
 8007cae:	e7d8      	b.n	8007c62 <_dtoa_r+0x262>
 8007cb0:	636f4361 	.word	0x636f4361
 8007cb4:	3fd287a7 	.word	0x3fd287a7
 8007cb8:	8b60c8b3 	.word	0x8b60c8b3
 8007cbc:	3fc68a28 	.word	0x3fc68a28
 8007cc0:	509f79fb 	.word	0x509f79fb
 8007cc4:	3fd34413 	.word	0x3fd34413
 8007cc8:	0800bb10 	.word	0x0800bb10
 8007ccc:	0800bb27 	.word	0x0800bb27
 8007cd0:	7ff00000 	.word	0x7ff00000
 8007cd4:	0800bb0c 	.word	0x0800bb0c
 8007cd8:	0800badb 	.word	0x0800badb
 8007cdc:	0800bada 	.word	0x0800bada
 8007ce0:	3ff80000 	.word	0x3ff80000
 8007ce4:	0800bc20 	.word	0x0800bc20
 8007ce8:	0800bb7f 	.word	0x0800bb7f
 8007cec:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007cf0:	6018      	str	r0, [r3, #0]
 8007cf2:	9b07      	ldr	r3, [sp, #28]
 8007cf4:	2b0e      	cmp	r3, #14
 8007cf6:	f200 80a4 	bhi.w	8007e42 <_dtoa_r+0x442>
 8007cfa:	2c00      	cmp	r4, #0
 8007cfc:	f000 80a1 	beq.w	8007e42 <_dtoa_r+0x442>
 8007d00:	2f00      	cmp	r7, #0
 8007d02:	dd33      	ble.n	8007d6c <_dtoa_r+0x36c>
 8007d04:	4b86      	ldr	r3, [pc, #536]	@ (8007f20 <_dtoa_r+0x520>)
 8007d06:	f007 020f 	and.w	r2, r7, #15
 8007d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d0e:	05f8      	lsls	r0, r7, #23
 8007d10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d14:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d18:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d1c:	d516      	bpl.n	8007d4c <_dtoa_r+0x34c>
 8007d1e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d22:	4b80      	ldr	r3, [pc, #512]	@ (8007f24 <_dtoa_r+0x524>)
 8007d24:	2603      	movs	r6, #3
 8007d26:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d2a:	f7f8 fd6f 	bl	800080c <__aeabi_ddiv>
 8007d2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d32:	f004 040f 	and.w	r4, r4, #15
 8007d36:	4d7b      	ldr	r5, [pc, #492]	@ (8007f24 <_dtoa_r+0x524>)
 8007d38:	b954      	cbnz	r4, 8007d50 <_dtoa_r+0x350>
 8007d3a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d42:	f7f8 fd63 	bl	800080c <__aeabi_ddiv>
 8007d46:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d4a:	e028      	b.n	8007d9e <_dtoa_r+0x39e>
 8007d4c:	2602      	movs	r6, #2
 8007d4e:	e7f2      	b.n	8007d36 <_dtoa_r+0x336>
 8007d50:	07e1      	lsls	r1, r4, #31
 8007d52:	d508      	bpl.n	8007d66 <_dtoa_r+0x366>
 8007d54:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d58:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d5c:	f7f8 fc2c 	bl	80005b8 <__aeabi_dmul>
 8007d60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d64:	3601      	adds	r6, #1
 8007d66:	1064      	asrs	r4, r4, #1
 8007d68:	3508      	adds	r5, #8
 8007d6a:	e7e5      	b.n	8007d38 <_dtoa_r+0x338>
 8007d6c:	f000 80d2 	beq.w	8007f14 <_dtoa_r+0x514>
 8007d70:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d74:	427c      	negs	r4, r7
 8007d76:	4b6a      	ldr	r3, [pc, #424]	@ (8007f20 <_dtoa_r+0x520>)
 8007d78:	f004 020f 	and.w	r2, r4, #15
 8007d7c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d84:	f7f8 fc18 	bl	80005b8 <__aeabi_dmul>
 8007d88:	2602      	movs	r6, #2
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d90:	4d64      	ldr	r5, [pc, #400]	@ (8007f24 <_dtoa_r+0x524>)
 8007d92:	1124      	asrs	r4, r4, #4
 8007d94:	2c00      	cmp	r4, #0
 8007d96:	f040 80b2 	bne.w	8007efe <_dtoa_r+0x4fe>
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1d3      	bne.n	8007d46 <_dtoa_r+0x346>
 8007d9e:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007da2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	f000 80b7 	beq.w	8007f18 <_dtoa_r+0x518>
 8007daa:	2200      	movs	r2, #0
 8007dac:	4620      	mov	r0, r4
 8007dae:	4629      	mov	r1, r5
 8007db0:	4b5d      	ldr	r3, [pc, #372]	@ (8007f28 <_dtoa_r+0x528>)
 8007db2:	f7f8 fe73 	bl	8000a9c <__aeabi_dcmplt>
 8007db6:	2800      	cmp	r0, #0
 8007db8:	f000 80ae 	beq.w	8007f18 <_dtoa_r+0x518>
 8007dbc:	9b07      	ldr	r3, [sp, #28]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	f000 80aa 	beq.w	8007f18 <_dtoa_r+0x518>
 8007dc4:	9b08      	ldr	r3, [sp, #32]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	dd37      	ble.n	8007e3a <_dtoa_r+0x43a>
 8007dca:	1e7b      	subs	r3, r7, #1
 8007dcc:	4620      	mov	r0, r4
 8007dce:	9304      	str	r3, [sp, #16]
 8007dd0:	2200      	movs	r2, #0
 8007dd2:	4629      	mov	r1, r5
 8007dd4:	4b55      	ldr	r3, [pc, #340]	@ (8007f2c <_dtoa_r+0x52c>)
 8007dd6:	f7f8 fbef 	bl	80005b8 <__aeabi_dmul>
 8007dda:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dde:	9c08      	ldr	r4, [sp, #32]
 8007de0:	3601      	adds	r6, #1
 8007de2:	4630      	mov	r0, r6
 8007de4:	f7f8 fb7e 	bl	80004e4 <__aeabi_i2d>
 8007de8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007dec:	f7f8 fbe4 	bl	80005b8 <__aeabi_dmul>
 8007df0:	2200      	movs	r2, #0
 8007df2:	4b4f      	ldr	r3, [pc, #316]	@ (8007f30 <_dtoa_r+0x530>)
 8007df4:	f7f8 fa2a 	bl	800024c <__adddf3>
 8007df8:	4605      	mov	r5, r0
 8007dfa:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007dfe:	2c00      	cmp	r4, #0
 8007e00:	f040 809a 	bne.w	8007f38 <_dtoa_r+0x538>
 8007e04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e08:	2200      	movs	r2, #0
 8007e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f34 <_dtoa_r+0x534>)
 8007e0c:	f7f8 fa1c 	bl	8000248 <__aeabi_dsub>
 8007e10:	4602      	mov	r2, r0
 8007e12:	460b      	mov	r3, r1
 8007e14:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e18:	462a      	mov	r2, r5
 8007e1a:	4633      	mov	r3, r6
 8007e1c:	f7f8 fe5c 	bl	8000ad8 <__aeabi_dcmpgt>
 8007e20:	2800      	cmp	r0, #0
 8007e22:	f040 828e 	bne.w	8008342 <_dtoa_r+0x942>
 8007e26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e30:	f7f8 fe34 	bl	8000a9c <__aeabi_dcmplt>
 8007e34:	2800      	cmp	r0, #0
 8007e36:	f040 8127 	bne.w	8008088 <_dtoa_r+0x688>
 8007e3a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e42:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	f2c0 8163 	blt.w	8008110 <_dtoa_r+0x710>
 8007e4a:	2f0e      	cmp	r7, #14
 8007e4c:	f300 8160 	bgt.w	8008110 <_dtoa_r+0x710>
 8007e50:	4b33      	ldr	r3, [pc, #204]	@ (8007f20 <_dtoa_r+0x520>)
 8007e52:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e56:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e5a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e5e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	da03      	bge.n	8007e6c <_dtoa_r+0x46c>
 8007e64:	9b07      	ldr	r3, [sp, #28]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	f340 8100 	ble.w	800806c <_dtoa_r+0x66c>
 8007e6c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e70:	4656      	mov	r6, sl
 8007e72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e76:	4620      	mov	r0, r4
 8007e78:	4629      	mov	r1, r5
 8007e7a:	f7f8 fcc7 	bl	800080c <__aeabi_ddiv>
 8007e7e:	f7f8 fe4b 	bl	8000b18 <__aeabi_d2iz>
 8007e82:	4680      	mov	r8, r0
 8007e84:	f7f8 fb2e 	bl	80004e4 <__aeabi_i2d>
 8007e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e8c:	f7f8 fb94 	bl	80005b8 <__aeabi_dmul>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4620      	mov	r0, r4
 8007e96:	4629      	mov	r1, r5
 8007e98:	f7f8 f9d6 	bl	8000248 <__aeabi_dsub>
 8007e9c:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ea0:	9d07      	ldr	r5, [sp, #28]
 8007ea2:	f806 4b01 	strb.w	r4, [r6], #1
 8007ea6:	eba6 040a 	sub.w	r4, r6, sl
 8007eaa:	42a5      	cmp	r5, r4
 8007eac:	4602      	mov	r2, r0
 8007eae:	460b      	mov	r3, r1
 8007eb0:	f040 8116 	bne.w	80080e0 <_dtoa_r+0x6e0>
 8007eb4:	f7f8 f9ca 	bl	800024c <__adddf3>
 8007eb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ebc:	4604      	mov	r4, r0
 8007ebe:	460d      	mov	r5, r1
 8007ec0:	f7f8 fe0a 	bl	8000ad8 <__aeabi_dcmpgt>
 8007ec4:	2800      	cmp	r0, #0
 8007ec6:	f040 80f8 	bne.w	80080ba <_dtoa_r+0x6ba>
 8007eca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007ece:	4620      	mov	r0, r4
 8007ed0:	4629      	mov	r1, r5
 8007ed2:	f7f8 fdd9 	bl	8000a88 <__aeabi_dcmpeq>
 8007ed6:	b118      	cbz	r0, 8007ee0 <_dtoa_r+0x4e0>
 8007ed8:	f018 0f01 	tst.w	r8, #1
 8007edc:	f040 80ed 	bne.w	80080ba <_dtoa_r+0x6ba>
 8007ee0:	4649      	mov	r1, r9
 8007ee2:	4658      	mov	r0, fp
 8007ee4:	f000 fc92 	bl	800880c <_Bfree>
 8007ee8:	2300      	movs	r3, #0
 8007eea:	7033      	strb	r3, [r6, #0]
 8007eec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007eee:	3701      	adds	r7, #1
 8007ef0:	601f      	str	r7, [r3, #0]
 8007ef2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	f000 8320 	beq.w	800853a <_dtoa_r+0xb3a>
 8007efa:	601e      	str	r6, [r3, #0]
 8007efc:	e31d      	b.n	800853a <_dtoa_r+0xb3a>
 8007efe:	07e2      	lsls	r2, r4, #31
 8007f00:	d505      	bpl.n	8007f0e <_dtoa_r+0x50e>
 8007f02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f06:	f7f8 fb57 	bl	80005b8 <__aeabi_dmul>
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	3601      	adds	r6, #1
 8007f0e:	1064      	asrs	r4, r4, #1
 8007f10:	3508      	adds	r5, #8
 8007f12:	e73f      	b.n	8007d94 <_dtoa_r+0x394>
 8007f14:	2602      	movs	r6, #2
 8007f16:	e742      	b.n	8007d9e <_dtoa_r+0x39e>
 8007f18:	9c07      	ldr	r4, [sp, #28]
 8007f1a:	9704      	str	r7, [sp, #16]
 8007f1c:	e761      	b.n	8007de2 <_dtoa_r+0x3e2>
 8007f1e:	bf00      	nop
 8007f20:	0800bc20 	.word	0x0800bc20
 8007f24:	0800bbf8 	.word	0x0800bbf8
 8007f28:	3ff00000 	.word	0x3ff00000
 8007f2c:	40240000 	.word	0x40240000
 8007f30:	401c0000 	.word	0x401c0000
 8007f34:	40140000 	.word	0x40140000
 8007f38:	4b70      	ldr	r3, [pc, #448]	@ (80080fc <_dtoa_r+0x6fc>)
 8007f3a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f3c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f40:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f44:	4454      	add	r4, sl
 8007f46:	2900      	cmp	r1, #0
 8007f48:	d045      	beq.n	8007fd6 <_dtoa_r+0x5d6>
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	496c      	ldr	r1, [pc, #432]	@ (8008100 <_dtoa_r+0x700>)
 8007f4e:	f7f8 fc5d 	bl	800080c <__aeabi_ddiv>
 8007f52:	4633      	mov	r3, r6
 8007f54:	462a      	mov	r2, r5
 8007f56:	f7f8 f977 	bl	8000248 <__aeabi_dsub>
 8007f5a:	4656      	mov	r6, sl
 8007f5c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f64:	f7f8 fdd8 	bl	8000b18 <__aeabi_d2iz>
 8007f68:	4605      	mov	r5, r0
 8007f6a:	f7f8 fabb 	bl	80004e4 <__aeabi_i2d>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f76:	f7f8 f967 	bl	8000248 <__aeabi_dsub>
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	3530      	adds	r5, #48	@ 0x30
 8007f80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007f84:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f88:	f806 5b01 	strb.w	r5, [r6], #1
 8007f8c:	f7f8 fd86 	bl	8000a9c <__aeabi_dcmplt>
 8007f90:	2800      	cmp	r0, #0
 8007f92:	d163      	bne.n	800805c <_dtoa_r+0x65c>
 8007f94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f98:	2000      	movs	r0, #0
 8007f9a:	495a      	ldr	r1, [pc, #360]	@ (8008104 <_dtoa_r+0x704>)
 8007f9c:	f7f8 f954 	bl	8000248 <__aeabi_dsub>
 8007fa0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fa4:	f7f8 fd7a 	bl	8000a9c <__aeabi_dcmplt>
 8007fa8:	2800      	cmp	r0, #0
 8007faa:	f040 8087 	bne.w	80080bc <_dtoa_r+0x6bc>
 8007fae:	42a6      	cmp	r6, r4
 8007fb0:	f43f af43 	beq.w	8007e3a <_dtoa_r+0x43a>
 8007fb4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fb8:	2200      	movs	r2, #0
 8007fba:	4b53      	ldr	r3, [pc, #332]	@ (8008108 <_dtoa_r+0x708>)
 8007fbc:	f7f8 fafc 	bl	80005b8 <__aeabi_dmul>
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fca:	4b4f      	ldr	r3, [pc, #316]	@ (8008108 <_dtoa_r+0x708>)
 8007fcc:	f7f8 faf4 	bl	80005b8 <__aeabi_dmul>
 8007fd0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007fd4:	e7c4      	b.n	8007f60 <_dtoa_r+0x560>
 8007fd6:	4631      	mov	r1, r6
 8007fd8:	4628      	mov	r0, r5
 8007fda:	f7f8 faed 	bl	80005b8 <__aeabi_dmul>
 8007fde:	4656      	mov	r6, sl
 8007fe0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fe4:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fea:	f7f8 fd95 	bl	8000b18 <__aeabi_d2iz>
 8007fee:	4605      	mov	r5, r0
 8007ff0:	f7f8 fa78 	bl	80004e4 <__aeabi_i2d>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	460b      	mov	r3, r1
 8007ff8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ffc:	f7f8 f924 	bl	8000248 <__aeabi_dsub>
 8008000:	4602      	mov	r2, r0
 8008002:	460b      	mov	r3, r1
 8008004:	3530      	adds	r5, #48	@ 0x30
 8008006:	f806 5b01 	strb.w	r5, [r6], #1
 800800a:	42a6      	cmp	r6, r4
 800800c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008010:	f04f 0200 	mov.w	r2, #0
 8008014:	d124      	bne.n	8008060 <_dtoa_r+0x660>
 8008016:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800801a:	4b39      	ldr	r3, [pc, #228]	@ (8008100 <_dtoa_r+0x700>)
 800801c:	f7f8 f916 	bl	800024c <__adddf3>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008028:	f7f8 fd56 	bl	8000ad8 <__aeabi_dcmpgt>
 800802c:	2800      	cmp	r0, #0
 800802e:	d145      	bne.n	80080bc <_dtoa_r+0x6bc>
 8008030:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008034:	2000      	movs	r0, #0
 8008036:	4932      	ldr	r1, [pc, #200]	@ (8008100 <_dtoa_r+0x700>)
 8008038:	f7f8 f906 	bl	8000248 <__aeabi_dsub>
 800803c:	4602      	mov	r2, r0
 800803e:	460b      	mov	r3, r1
 8008040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008044:	f7f8 fd2a 	bl	8000a9c <__aeabi_dcmplt>
 8008048:	2800      	cmp	r0, #0
 800804a:	f43f aef6 	beq.w	8007e3a <_dtoa_r+0x43a>
 800804e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008050:	1e73      	subs	r3, r6, #1
 8008052:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008054:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008058:	2b30      	cmp	r3, #48	@ 0x30
 800805a:	d0f8      	beq.n	800804e <_dtoa_r+0x64e>
 800805c:	9f04      	ldr	r7, [sp, #16]
 800805e:	e73f      	b.n	8007ee0 <_dtoa_r+0x4e0>
 8008060:	4b29      	ldr	r3, [pc, #164]	@ (8008108 <_dtoa_r+0x708>)
 8008062:	f7f8 faa9 	bl	80005b8 <__aeabi_dmul>
 8008066:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800806a:	e7bc      	b.n	8007fe6 <_dtoa_r+0x5e6>
 800806c:	d10c      	bne.n	8008088 <_dtoa_r+0x688>
 800806e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008072:	2200      	movs	r2, #0
 8008074:	4b25      	ldr	r3, [pc, #148]	@ (800810c <_dtoa_r+0x70c>)
 8008076:	f7f8 fa9f 	bl	80005b8 <__aeabi_dmul>
 800807a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800807e:	f7f8 fd21 	bl	8000ac4 <__aeabi_dcmpge>
 8008082:	2800      	cmp	r0, #0
 8008084:	f000 815b 	beq.w	800833e <_dtoa_r+0x93e>
 8008088:	2400      	movs	r4, #0
 800808a:	4625      	mov	r5, r4
 800808c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800808e:	4656      	mov	r6, sl
 8008090:	43db      	mvns	r3, r3
 8008092:	9304      	str	r3, [sp, #16]
 8008094:	2700      	movs	r7, #0
 8008096:	4621      	mov	r1, r4
 8008098:	4658      	mov	r0, fp
 800809a:	f000 fbb7 	bl	800880c <_Bfree>
 800809e:	2d00      	cmp	r5, #0
 80080a0:	d0dc      	beq.n	800805c <_dtoa_r+0x65c>
 80080a2:	b12f      	cbz	r7, 80080b0 <_dtoa_r+0x6b0>
 80080a4:	42af      	cmp	r7, r5
 80080a6:	d003      	beq.n	80080b0 <_dtoa_r+0x6b0>
 80080a8:	4639      	mov	r1, r7
 80080aa:	4658      	mov	r0, fp
 80080ac:	f000 fbae 	bl	800880c <_Bfree>
 80080b0:	4629      	mov	r1, r5
 80080b2:	4658      	mov	r0, fp
 80080b4:	f000 fbaa 	bl	800880c <_Bfree>
 80080b8:	e7d0      	b.n	800805c <_dtoa_r+0x65c>
 80080ba:	9704      	str	r7, [sp, #16]
 80080bc:	4633      	mov	r3, r6
 80080be:	461e      	mov	r6, r3
 80080c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080c4:	2a39      	cmp	r2, #57	@ 0x39
 80080c6:	d107      	bne.n	80080d8 <_dtoa_r+0x6d8>
 80080c8:	459a      	cmp	sl, r3
 80080ca:	d1f8      	bne.n	80080be <_dtoa_r+0x6be>
 80080cc:	9a04      	ldr	r2, [sp, #16]
 80080ce:	3201      	adds	r2, #1
 80080d0:	9204      	str	r2, [sp, #16]
 80080d2:	2230      	movs	r2, #48	@ 0x30
 80080d4:	f88a 2000 	strb.w	r2, [sl]
 80080d8:	781a      	ldrb	r2, [r3, #0]
 80080da:	3201      	adds	r2, #1
 80080dc:	701a      	strb	r2, [r3, #0]
 80080de:	e7bd      	b.n	800805c <_dtoa_r+0x65c>
 80080e0:	2200      	movs	r2, #0
 80080e2:	4b09      	ldr	r3, [pc, #36]	@ (8008108 <_dtoa_r+0x708>)
 80080e4:	f7f8 fa68 	bl	80005b8 <__aeabi_dmul>
 80080e8:	2200      	movs	r2, #0
 80080ea:	2300      	movs	r3, #0
 80080ec:	4604      	mov	r4, r0
 80080ee:	460d      	mov	r5, r1
 80080f0:	f7f8 fcca 	bl	8000a88 <__aeabi_dcmpeq>
 80080f4:	2800      	cmp	r0, #0
 80080f6:	f43f aebc 	beq.w	8007e72 <_dtoa_r+0x472>
 80080fa:	e6f1      	b.n	8007ee0 <_dtoa_r+0x4e0>
 80080fc:	0800bc20 	.word	0x0800bc20
 8008100:	3fe00000 	.word	0x3fe00000
 8008104:	3ff00000 	.word	0x3ff00000
 8008108:	40240000 	.word	0x40240000
 800810c:	40140000 	.word	0x40140000
 8008110:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008112:	2a00      	cmp	r2, #0
 8008114:	f000 80db 	beq.w	80082ce <_dtoa_r+0x8ce>
 8008118:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800811a:	2a01      	cmp	r2, #1
 800811c:	f300 80bf 	bgt.w	800829e <_dtoa_r+0x89e>
 8008120:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008122:	2a00      	cmp	r2, #0
 8008124:	f000 80b7 	beq.w	8008296 <_dtoa_r+0x896>
 8008128:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800812c:	4646      	mov	r6, r8
 800812e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008130:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008132:	2101      	movs	r1, #1
 8008134:	441a      	add	r2, r3
 8008136:	4658      	mov	r0, fp
 8008138:	4498      	add	r8, r3
 800813a:	9209      	str	r2, [sp, #36]	@ 0x24
 800813c:	f000 fc64 	bl	8008a08 <__i2b>
 8008140:	4605      	mov	r5, r0
 8008142:	b15e      	cbz	r6, 800815c <_dtoa_r+0x75c>
 8008144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008146:	2b00      	cmp	r3, #0
 8008148:	dd08      	ble.n	800815c <_dtoa_r+0x75c>
 800814a:	42b3      	cmp	r3, r6
 800814c:	bfa8      	it	ge
 800814e:	4633      	movge	r3, r6
 8008150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008152:	eba8 0803 	sub.w	r8, r8, r3
 8008156:	1af6      	subs	r6, r6, r3
 8008158:	1ad3      	subs	r3, r2, r3
 800815a:	9309      	str	r3, [sp, #36]	@ 0x24
 800815c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800815e:	b1f3      	cbz	r3, 800819e <_dtoa_r+0x79e>
 8008160:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008162:	2b00      	cmp	r3, #0
 8008164:	f000 80b7 	beq.w	80082d6 <_dtoa_r+0x8d6>
 8008168:	b18c      	cbz	r4, 800818e <_dtoa_r+0x78e>
 800816a:	4629      	mov	r1, r5
 800816c:	4622      	mov	r2, r4
 800816e:	4658      	mov	r0, fp
 8008170:	f000 fd08 	bl	8008b84 <__pow5mult>
 8008174:	464a      	mov	r2, r9
 8008176:	4601      	mov	r1, r0
 8008178:	4605      	mov	r5, r0
 800817a:	4658      	mov	r0, fp
 800817c:	f000 fc5a 	bl	8008a34 <__multiply>
 8008180:	4649      	mov	r1, r9
 8008182:	9004      	str	r0, [sp, #16]
 8008184:	4658      	mov	r0, fp
 8008186:	f000 fb41 	bl	800880c <_Bfree>
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	4699      	mov	r9, r3
 800818e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008190:	1b1a      	subs	r2, r3, r4
 8008192:	d004      	beq.n	800819e <_dtoa_r+0x79e>
 8008194:	4649      	mov	r1, r9
 8008196:	4658      	mov	r0, fp
 8008198:	f000 fcf4 	bl	8008b84 <__pow5mult>
 800819c:	4681      	mov	r9, r0
 800819e:	2101      	movs	r1, #1
 80081a0:	4658      	mov	r0, fp
 80081a2:	f000 fc31 	bl	8008a08 <__i2b>
 80081a6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081a8:	4604      	mov	r4, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	f000 81c9 	beq.w	8008542 <_dtoa_r+0xb42>
 80081b0:	461a      	mov	r2, r3
 80081b2:	4601      	mov	r1, r0
 80081b4:	4658      	mov	r0, fp
 80081b6:	f000 fce5 	bl	8008b84 <__pow5mult>
 80081ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081bc:	4604      	mov	r4, r0
 80081be:	2b01      	cmp	r3, #1
 80081c0:	f300 808f 	bgt.w	80082e2 <_dtoa_r+0x8e2>
 80081c4:	9b02      	ldr	r3, [sp, #8]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	f040 8087 	bne.w	80082da <_dtoa_r+0x8da>
 80081cc:	9b03      	ldr	r3, [sp, #12]
 80081ce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	f040 8083 	bne.w	80082de <_dtoa_r+0x8de>
 80081d8:	9b03      	ldr	r3, [sp, #12]
 80081da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081de:	0d1b      	lsrs	r3, r3, #20
 80081e0:	051b      	lsls	r3, r3, #20
 80081e2:	b12b      	cbz	r3, 80081f0 <_dtoa_r+0x7f0>
 80081e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081e6:	f108 0801 	add.w	r8, r8, #1
 80081ea:	3301      	adds	r3, #1
 80081ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80081ee:	2301      	movs	r3, #1
 80081f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80081f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	f000 81aa 	beq.w	800854e <_dtoa_r+0xb4e>
 80081fa:	6923      	ldr	r3, [r4, #16]
 80081fc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008200:	6918      	ldr	r0, [r3, #16]
 8008202:	f000 fbb5 	bl	8008970 <__hi0bits>
 8008206:	f1c0 0020 	rsb	r0, r0, #32
 800820a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800820c:	4418      	add	r0, r3
 800820e:	f010 001f 	ands.w	r0, r0, #31
 8008212:	d071      	beq.n	80082f8 <_dtoa_r+0x8f8>
 8008214:	f1c0 0320 	rsb	r3, r0, #32
 8008218:	2b04      	cmp	r3, #4
 800821a:	dd65      	ble.n	80082e8 <_dtoa_r+0x8e8>
 800821c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800821e:	f1c0 001c 	rsb	r0, r0, #28
 8008222:	4403      	add	r3, r0
 8008224:	4480      	add	r8, r0
 8008226:	4406      	add	r6, r0
 8008228:	9309      	str	r3, [sp, #36]	@ 0x24
 800822a:	f1b8 0f00 	cmp.w	r8, #0
 800822e:	dd05      	ble.n	800823c <_dtoa_r+0x83c>
 8008230:	4649      	mov	r1, r9
 8008232:	4642      	mov	r2, r8
 8008234:	4658      	mov	r0, fp
 8008236:	f000 fcff 	bl	8008c38 <__lshift>
 800823a:	4681      	mov	r9, r0
 800823c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823e:	2b00      	cmp	r3, #0
 8008240:	dd05      	ble.n	800824e <_dtoa_r+0x84e>
 8008242:	4621      	mov	r1, r4
 8008244:	461a      	mov	r2, r3
 8008246:	4658      	mov	r0, fp
 8008248:	f000 fcf6 	bl	8008c38 <__lshift>
 800824c:	4604      	mov	r4, r0
 800824e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008250:	2b00      	cmp	r3, #0
 8008252:	d053      	beq.n	80082fc <_dtoa_r+0x8fc>
 8008254:	4621      	mov	r1, r4
 8008256:	4648      	mov	r0, r9
 8008258:	f000 fd5a 	bl	8008d10 <__mcmp>
 800825c:	2800      	cmp	r0, #0
 800825e:	da4d      	bge.n	80082fc <_dtoa_r+0x8fc>
 8008260:	1e7b      	subs	r3, r7, #1
 8008262:	4649      	mov	r1, r9
 8008264:	9304      	str	r3, [sp, #16]
 8008266:	220a      	movs	r2, #10
 8008268:	2300      	movs	r3, #0
 800826a:	4658      	mov	r0, fp
 800826c:	f000 faf0 	bl	8008850 <__multadd>
 8008270:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008272:	4681      	mov	r9, r0
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 816c 	beq.w	8008552 <_dtoa_r+0xb52>
 800827a:	2300      	movs	r3, #0
 800827c:	4629      	mov	r1, r5
 800827e:	220a      	movs	r2, #10
 8008280:	4658      	mov	r0, fp
 8008282:	f000 fae5 	bl	8008850 <__multadd>
 8008286:	9b08      	ldr	r3, [sp, #32]
 8008288:	4605      	mov	r5, r0
 800828a:	2b00      	cmp	r3, #0
 800828c:	dc61      	bgt.n	8008352 <_dtoa_r+0x952>
 800828e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008290:	2b02      	cmp	r3, #2
 8008292:	dc3b      	bgt.n	800830c <_dtoa_r+0x90c>
 8008294:	e05d      	b.n	8008352 <_dtoa_r+0x952>
 8008296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008298:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800829c:	e746      	b.n	800812c <_dtoa_r+0x72c>
 800829e:	9b07      	ldr	r3, [sp, #28]
 80082a0:	1e5c      	subs	r4, r3, #1
 80082a2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082a4:	42a3      	cmp	r3, r4
 80082a6:	bfbf      	itttt	lt
 80082a8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082aa:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80082ac:	1ae3      	sublt	r3, r4, r3
 80082ae:	18d2      	addlt	r2, r2, r3
 80082b0:	bfa8      	it	ge
 80082b2:	1b1c      	subge	r4, r3, r4
 80082b4:	9b07      	ldr	r3, [sp, #28]
 80082b6:	bfbe      	ittt	lt
 80082b8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80082ba:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80082bc:	2400      	movlt	r4, #0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	bfb5      	itete	lt
 80082c2:	eba8 0603 	sublt.w	r6, r8, r3
 80082c6:	4646      	movge	r6, r8
 80082c8:	2300      	movlt	r3, #0
 80082ca:	9b07      	ldrge	r3, [sp, #28]
 80082cc:	e730      	b.n	8008130 <_dtoa_r+0x730>
 80082ce:	4646      	mov	r6, r8
 80082d0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082d2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80082d4:	e735      	b.n	8008142 <_dtoa_r+0x742>
 80082d6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082d8:	e75c      	b.n	8008194 <_dtoa_r+0x794>
 80082da:	2300      	movs	r3, #0
 80082dc:	e788      	b.n	80081f0 <_dtoa_r+0x7f0>
 80082de:	9b02      	ldr	r3, [sp, #8]
 80082e0:	e786      	b.n	80081f0 <_dtoa_r+0x7f0>
 80082e2:	2300      	movs	r3, #0
 80082e4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082e6:	e788      	b.n	80081fa <_dtoa_r+0x7fa>
 80082e8:	d09f      	beq.n	800822a <_dtoa_r+0x82a>
 80082ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80082ec:	331c      	adds	r3, #28
 80082ee:	441a      	add	r2, r3
 80082f0:	4498      	add	r8, r3
 80082f2:	441e      	add	r6, r3
 80082f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80082f6:	e798      	b.n	800822a <_dtoa_r+0x82a>
 80082f8:	4603      	mov	r3, r0
 80082fa:	e7f6      	b.n	80082ea <_dtoa_r+0x8ea>
 80082fc:	9b07      	ldr	r3, [sp, #28]
 80082fe:	9704      	str	r7, [sp, #16]
 8008300:	2b00      	cmp	r3, #0
 8008302:	dc20      	bgt.n	8008346 <_dtoa_r+0x946>
 8008304:	9308      	str	r3, [sp, #32]
 8008306:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008308:	2b02      	cmp	r3, #2
 800830a:	dd1e      	ble.n	800834a <_dtoa_r+0x94a>
 800830c:	9b08      	ldr	r3, [sp, #32]
 800830e:	2b00      	cmp	r3, #0
 8008310:	f47f aebc 	bne.w	800808c <_dtoa_r+0x68c>
 8008314:	4621      	mov	r1, r4
 8008316:	2205      	movs	r2, #5
 8008318:	4658      	mov	r0, fp
 800831a:	f000 fa99 	bl	8008850 <__multadd>
 800831e:	4601      	mov	r1, r0
 8008320:	4604      	mov	r4, r0
 8008322:	4648      	mov	r0, r9
 8008324:	f000 fcf4 	bl	8008d10 <__mcmp>
 8008328:	2800      	cmp	r0, #0
 800832a:	f77f aeaf 	ble.w	800808c <_dtoa_r+0x68c>
 800832e:	2331      	movs	r3, #49	@ 0x31
 8008330:	4656      	mov	r6, sl
 8008332:	f806 3b01 	strb.w	r3, [r6], #1
 8008336:	9b04      	ldr	r3, [sp, #16]
 8008338:	3301      	adds	r3, #1
 800833a:	9304      	str	r3, [sp, #16]
 800833c:	e6aa      	b.n	8008094 <_dtoa_r+0x694>
 800833e:	9c07      	ldr	r4, [sp, #28]
 8008340:	9704      	str	r7, [sp, #16]
 8008342:	4625      	mov	r5, r4
 8008344:	e7f3      	b.n	800832e <_dtoa_r+0x92e>
 8008346:	9b07      	ldr	r3, [sp, #28]
 8008348:	9308      	str	r3, [sp, #32]
 800834a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800834c:	2b00      	cmp	r3, #0
 800834e:	f000 8104 	beq.w	800855a <_dtoa_r+0xb5a>
 8008352:	2e00      	cmp	r6, #0
 8008354:	dd05      	ble.n	8008362 <_dtoa_r+0x962>
 8008356:	4629      	mov	r1, r5
 8008358:	4632      	mov	r2, r6
 800835a:	4658      	mov	r0, fp
 800835c:	f000 fc6c 	bl	8008c38 <__lshift>
 8008360:	4605      	mov	r5, r0
 8008362:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008364:	2b00      	cmp	r3, #0
 8008366:	d05a      	beq.n	800841e <_dtoa_r+0xa1e>
 8008368:	4658      	mov	r0, fp
 800836a:	6869      	ldr	r1, [r5, #4]
 800836c:	f000 fa0e 	bl	800878c <_Balloc>
 8008370:	4606      	mov	r6, r0
 8008372:	b928      	cbnz	r0, 8008380 <_dtoa_r+0x980>
 8008374:	4602      	mov	r2, r0
 8008376:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800837a:	4b83      	ldr	r3, [pc, #524]	@ (8008588 <_dtoa_r+0xb88>)
 800837c:	f7ff bb54 	b.w	8007a28 <_dtoa_r+0x28>
 8008380:	692a      	ldr	r2, [r5, #16]
 8008382:	f105 010c 	add.w	r1, r5, #12
 8008386:	3202      	adds	r2, #2
 8008388:	0092      	lsls	r2, r2, #2
 800838a:	300c      	adds	r0, #12
 800838c:	f7ff fa9d 	bl	80078ca <memcpy>
 8008390:	2201      	movs	r2, #1
 8008392:	4631      	mov	r1, r6
 8008394:	4658      	mov	r0, fp
 8008396:	f000 fc4f 	bl	8008c38 <__lshift>
 800839a:	462f      	mov	r7, r5
 800839c:	4605      	mov	r5, r0
 800839e:	f10a 0301 	add.w	r3, sl, #1
 80083a2:	9307      	str	r3, [sp, #28]
 80083a4:	9b08      	ldr	r3, [sp, #32]
 80083a6:	4453      	add	r3, sl
 80083a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083aa:	9b02      	ldr	r3, [sp, #8]
 80083ac:	f003 0301 	and.w	r3, r3, #1
 80083b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083b2:	9b07      	ldr	r3, [sp, #28]
 80083b4:	4621      	mov	r1, r4
 80083b6:	3b01      	subs	r3, #1
 80083b8:	4648      	mov	r0, r9
 80083ba:	9302      	str	r3, [sp, #8]
 80083bc:	f7ff fa98 	bl	80078f0 <quorem>
 80083c0:	4639      	mov	r1, r7
 80083c2:	9008      	str	r0, [sp, #32]
 80083c4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083c8:	4648      	mov	r0, r9
 80083ca:	f000 fca1 	bl	8008d10 <__mcmp>
 80083ce:	462a      	mov	r2, r5
 80083d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80083d2:	4621      	mov	r1, r4
 80083d4:	4658      	mov	r0, fp
 80083d6:	f000 fcb7 	bl	8008d48 <__mdiff>
 80083da:	68c2      	ldr	r2, [r0, #12]
 80083dc:	4606      	mov	r6, r0
 80083de:	bb02      	cbnz	r2, 8008422 <_dtoa_r+0xa22>
 80083e0:	4601      	mov	r1, r0
 80083e2:	4648      	mov	r0, r9
 80083e4:	f000 fc94 	bl	8008d10 <__mcmp>
 80083e8:	4602      	mov	r2, r0
 80083ea:	4631      	mov	r1, r6
 80083ec:	4658      	mov	r0, fp
 80083ee:	920c      	str	r2, [sp, #48]	@ 0x30
 80083f0:	f000 fa0c 	bl	800880c <_Bfree>
 80083f4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80083f6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80083f8:	9e07      	ldr	r6, [sp, #28]
 80083fa:	ea43 0102 	orr.w	r1, r3, r2
 80083fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008400:	4319      	orrs	r1, r3
 8008402:	d110      	bne.n	8008426 <_dtoa_r+0xa26>
 8008404:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008408:	d029      	beq.n	800845e <_dtoa_r+0xa5e>
 800840a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800840c:	2b00      	cmp	r3, #0
 800840e:	dd02      	ble.n	8008416 <_dtoa_r+0xa16>
 8008410:	9b08      	ldr	r3, [sp, #32]
 8008412:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008416:	9b02      	ldr	r3, [sp, #8]
 8008418:	f883 8000 	strb.w	r8, [r3]
 800841c:	e63b      	b.n	8008096 <_dtoa_r+0x696>
 800841e:	4628      	mov	r0, r5
 8008420:	e7bb      	b.n	800839a <_dtoa_r+0x99a>
 8008422:	2201      	movs	r2, #1
 8008424:	e7e1      	b.n	80083ea <_dtoa_r+0x9ea>
 8008426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008428:	2b00      	cmp	r3, #0
 800842a:	db04      	blt.n	8008436 <_dtoa_r+0xa36>
 800842c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800842e:	430b      	orrs	r3, r1
 8008430:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008432:	430b      	orrs	r3, r1
 8008434:	d120      	bne.n	8008478 <_dtoa_r+0xa78>
 8008436:	2a00      	cmp	r2, #0
 8008438:	dded      	ble.n	8008416 <_dtoa_r+0xa16>
 800843a:	4649      	mov	r1, r9
 800843c:	2201      	movs	r2, #1
 800843e:	4658      	mov	r0, fp
 8008440:	f000 fbfa 	bl	8008c38 <__lshift>
 8008444:	4621      	mov	r1, r4
 8008446:	4681      	mov	r9, r0
 8008448:	f000 fc62 	bl	8008d10 <__mcmp>
 800844c:	2800      	cmp	r0, #0
 800844e:	dc03      	bgt.n	8008458 <_dtoa_r+0xa58>
 8008450:	d1e1      	bne.n	8008416 <_dtoa_r+0xa16>
 8008452:	f018 0f01 	tst.w	r8, #1
 8008456:	d0de      	beq.n	8008416 <_dtoa_r+0xa16>
 8008458:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800845c:	d1d8      	bne.n	8008410 <_dtoa_r+0xa10>
 800845e:	2339      	movs	r3, #57	@ 0x39
 8008460:	9a02      	ldr	r2, [sp, #8]
 8008462:	7013      	strb	r3, [r2, #0]
 8008464:	4633      	mov	r3, r6
 8008466:	461e      	mov	r6, r3
 8008468:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800846c:	3b01      	subs	r3, #1
 800846e:	2a39      	cmp	r2, #57	@ 0x39
 8008470:	d052      	beq.n	8008518 <_dtoa_r+0xb18>
 8008472:	3201      	adds	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	e60e      	b.n	8008096 <_dtoa_r+0x696>
 8008478:	2a00      	cmp	r2, #0
 800847a:	dd07      	ble.n	800848c <_dtoa_r+0xa8c>
 800847c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008480:	d0ed      	beq.n	800845e <_dtoa_r+0xa5e>
 8008482:	9a02      	ldr	r2, [sp, #8]
 8008484:	f108 0301 	add.w	r3, r8, #1
 8008488:	7013      	strb	r3, [r2, #0]
 800848a:	e604      	b.n	8008096 <_dtoa_r+0x696>
 800848c:	9b07      	ldr	r3, [sp, #28]
 800848e:	9a07      	ldr	r2, [sp, #28]
 8008490:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008494:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008496:	4293      	cmp	r3, r2
 8008498:	d028      	beq.n	80084ec <_dtoa_r+0xaec>
 800849a:	4649      	mov	r1, r9
 800849c:	2300      	movs	r3, #0
 800849e:	220a      	movs	r2, #10
 80084a0:	4658      	mov	r0, fp
 80084a2:	f000 f9d5 	bl	8008850 <__multadd>
 80084a6:	42af      	cmp	r7, r5
 80084a8:	4681      	mov	r9, r0
 80084aa:	f04f 0300 	mov.w	r3, #0
 80084ae:	f04f 020a 	mov.w	r2, #10
 80084b2:	4639      	mov	r1, r7
 80084b4:	4658      	mov	r0, fp
 80084b6:	d107      	bne.n	80084c8 <_dtoa_r+0xac8>
 80084b8:	f000 f9ca 	bl	8008850 <__multadd>
 80084bc:	4607      	mov	r7, r0
 80084be:	4605      	mov	r5, r0
 80084c0:	9b07      	ldr	r3, [sp, #28]
 80084c2:	3301      	adds	r3, #1
 80084c4:	9307      	str	r3, [sp, #28]
 80084c6:	e774      	b.n	80083b2 <_dtoa_r+0x9b2>
 80084c8:	f000 f9c2 	bl	8008850 <__multadd>
 80084cc:	4629      	mov	r1, r5
 80084ce:	4607      	mov	r7, r0
 80084d0:	2300      	movs	r3, #0
 80084d2:	220a      	movs	r2, #10
 80084d4:	4658      	mov	r0, fp
 80084d6:	f000 f9bb 	bl	8008850 <__multadd>
 80084da:	4605      	mov	r5, r0
 80084dc:	e7f0      	b.n	80084c0 <_dtoa_r+0xac0>
 80084de:	9b08      	ldr	r3, [sp, #32]
 80084e0:	2700      	movs	r7, #0
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	bfcc      	ite	gt
 80084e6:	461e      	movgt	r6, r3
 80084e8:	2601      	movle	r6, #1
 80084ea:	4456      	add	r6, sl
 80084ec:	4649      	mov	r1, r9
 80084ee:	2201      	movs	r2, #1
 80084f0:	4658      	mov	r0, fp
 80084f2:	f000 fba1 	bl	8008c38 <__lshift>
 80084f6:	4621      	mov	r1, r4
 80084f8:	4681      	mov	r9, r0
 80084fa:	f000 fc09 	bl	8008d10 <__mcmp>
 80084fe:	2800      	cmp	r0, #0
 8008500:	dcb0      	bgt.n	8008464 <_dtoa_r+0xa64>
 8008502:	d102      	bne.n	800850a <_dtoa_r+0xb0a>
 8008504:	f018 0f01 	tst.w	r8, #1
 8008508:	d1ac      	bne.n	8008464 <_dtoa_r+0xa64>
 800850a:	4633      	mov	r3, r6
 800850c:	461e      	mov	r6, r3
 800850e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008512:	2a30      	cmp	r2, #48	@ 0x30
 8008514:	d0fa      	beq.n	800850c <_dtoa_r+0xb0c>
 8008516:	e5be      	b.n	8008096 <_dtoa_r+0x696>
 8008518:	459a      	cmp	sl, r3
 800851a:	d1a4      	bne.n	8008466 <_dtoa_r+0xa66>
 800851c:	9b04      	ldr	r3, [sp, #16]
 800851e:	3301      	adds	r3, #1
 8008520:	9304      	str	r3, [sp, #16]
 8008522:	2331      	movs	r3, #49	@ 0x31
 8008524:	f88a 3000 	strb.w	r3, [sl]
 8008528:	e5b5      	b.n	8008096 <_dtoa_r+0x696>
 800852a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800852c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800858c <_dtoa_r+0xb8c>
 8008530:	b11b      	cbz	r3, 800853a <_dtoa_r+0xb3a>
 8008532:	f10a 0308 	add.w	r3, sl, #8
 8008536:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008538:	6013      	str	r3, [r2, #0]
 800853a:	4650      	mov	r0, sl
 800853c:	b017      	add	sp, #92	@ 0x5c
 800853e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008542:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008544:	2b01      	cmp	r3, #1
 8008546:	f77f ae3d 	ble.w	80081c4 <_dtoa_r+0x7c4>
 800854a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800854c:	930a      	str	r3, [sp, #40]	@ 0x28
 800854e:	2001      	movs	r0, #1
 8008550:	e65b      	b.n	800820a <_dtoa_r+0x80a>
 8008552:	9b08      	ldr	r3, [sp, #32]
 8008554:	2b00      	cmp	r3, #0
 8008556:	f77f aed6 	ble.w	8008306 <_dtoa_r+0x906>
 800855a:	4656      	mov	r6, sl
 800855c:	4621      	mov	r1, r4
 800855e:	4648      	mov	r0, r9
 8008560:	f7ff f9c6 	bl	80078f0 <quorem>
 8008564:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008568:	9b08      	ldr	r3, [sp, #32]
 800856a:	f806 8b01 	strb.w	r8, [r6], #1
 800856e:	eba6 020a 	sub.w	r2, r6, sl
 8008572:	4293      	cmp	r3, r2
 8008574:	ddb3      	ble.n	80084de <_dtoa_r+0xade>
 8008576:	4649      	mov	r1, r9
 8008578:	2300      	movs	r3, #0
 800857a:	220a      	movs	r2, #10
 800857c:	4658      	mov	r0, fp
 800857e:	f000 f967 	bl	8008850 <__multadd>
 8008582:	4681      	mov	r9, r0
 8008584:	e7ea      	b.n	800855c <_dtoa_r+0xb5c>
 8008586:	bf00      	nop
 8008588:	0800bb7f 	.word	0x0800bb7f
 800858c:	0800bb03 	.word	0x0800bb03

08008590 <_free_r>:
 8008590:	b538      	push	{r3, r4, r5, lr}
 8008592:	4605      	mov	r5, r0
 8008594:	2900      	cmp	r1, #0
 8008596:	d040      	beq.n	800861a <_free_r+0x8a>
 8008598:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800859c:	1f0c      	subs	r4, r1, #4
 800859e:	2b00      	cmp	r3, #0
 80085a0:	bfb8      	it	lt
 80085a2:	18e4      	addlt	r4, r4, r3
 80085a4:	f000 f8e6 	bl	8008774 <__malloc_lock>
 80085a8:	4a1c      	ldr	r2, [pc, #112]	@ (800861c <_free_r+0x8c>)
 80085aa:	6813      	ldr	r3, [r2, #0]
 80085ac:	b933      	cbnz	r3, 80085bc <_free_r+0x2c>
 80085ae:	6063      	str	r3, [r4, #4]
 80085b0:	6014      	str	r4, [r2, #0]
 80085b2:	4628      	mov	r0, r5
 80085b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085b8:	f000 b8e2 	b.w	8008780 <__malloc_unlock>
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d908      	bls.n	80085d2 <_free_r+0x42>
 80085c0:	6820      	ldr	r0, [r4, #0]
 80085c2:	1821      	adds	r1, r4, r0
 80085c4:	428b      	cmp	r3, r1
 80085c6:	bf01      	itttt	eq
 80085c8:	6819      	ldreq	r1, [r3, #0]
 80085ca:	685b      	ldreq	r3, [r3, #4]
 80085cc:	1809      	addeq	r1, r1, r0
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	e7ed      	b.n	80085ae <_free_r+0x1e>
 80085d2:	461a      	mov	r2, r3
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	b10b      	cbz	r3, 80085dc <_free_r+0x4c>
 80085d8:	42a3      	cmp	r3, r4
 80085da:	d9fa      	bls.n	80085d2 <_free_r+0x42>
 80085dc:	6811      	ldr	r1, [r2, #0]
 80085de:	1850      	adds	r0, r2, r1
 80085e0:	42a0      	cmp	r0, r4
 80085e2:	d10b      	bne.n	80085fc <_free_r+0x6c>
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	4401      	add	r1, r0
 80085e8:	1850      	adds	r0, r2, r1
 80085ea:	4283      	cmp	r3, r0
 80085ec:	6011      	str	r1, [r2, #0]
 80085ee:	d1e0      	bne.n	80085b2 <_free_r+0x22>
 80085f0:	6818      	ldr	r0, [r3, #0]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	4408      	add	r0, r1
 80085f6:	6010      	str	r0, [r2, #0]
 80085f8:	6053      	str	r3, [r2, #4]
 80085fa:	e7da      	b.n	80085b2 <_free_r+0x22>
 80085fc:	d902      	bls.n	8008604 <_free_r+0x74>
 80085fe:	230c      	movs	r3, #12
 8008600:	602b      	str	r3, [r5, #0]
 8008602:	e7d6      	b.n	80085b2 <_free_r+0x22>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	1821      	adds	r1, r4, r0
 8008608:	428b      	cmp	r3, r1
 800860a:	bf01      	itttt	eq
 800860c:	6819      	ldreq	r1, [r3, #0]
 800860e:	685b      	ldreq	r3, [r3, #4]
 8008610:	1809      	addeq	r1, r1, r0
 8008612:	6021      	streq	r1, [r4, #0]
 8008614:	6063      	str	r3, [r4, #4]
 8008616:	6054      	str	r4, [r2, #4]
 8008618:	e7cb      	b.n	80085b2 <_free_r+0x22>
 800861a:	bd38      	pop	{r3, r4, r5, pc}
 800861c:	2000213c 	.word	0x2000213c

08008620 <malloc>:
 8008620:	4b02      	ldr	r3, [pc, #8]	@ (800862c <malloc+0xc>)
 8008622:	4601      	mov	r1, r0
 8008624:	6818      	ldr	r0, [r3, #0]
 8008626:	f000 b825 	b.w	8008674 <_malloc_r>
 800862a:	bf00      	nop
 800862c:	2000001c 	.word	0x2000001c

08008630 <sbrk_aligned>:
 8008630:	b570      	push	{r4, r5, r6, lr}
 8008632:	4e0f      	ldr	r6, [pc, #60]	@ (8008670 <sbrk_aligned+0x40>)
 8008634:	460c      	mov	r4, r1
 8008636:	6831      	ldr	r1, [r6, #0]
 8008638:	4605      	mov	r5, r0
 800863a:	b911      	cbnz	r1, 8008642 <sbrk_aligned+0x12>
 800863c:	f001 fdf6 	bl	800a22c <_sbrk_r>
 8008640:	6030      	str	r0, [r6, #0]
 8008642:	4621      	mov	r1, r4
 8008644:	4628      	mov	r0, r5
 8008646:	f001 fdf1 	bl	800a22c <_sbrk_r>
 800864a:	1c43      	adds	r3, r0, #1
 800864c:	d103      	bne.n	8008656 <sbrk_aligned+0x26>
 800864e:	f04f 34ff 	mov.w	r4, #4294967295
 8008652:	4620      	mov	r0, r4
 8008654:	bd70      	pop	{r4, r5, r6, pc}
 8008656:	1cc4      	adds	r4, r0, #3
 8008658:	f024 0403 	bic.w	r4, r4, #3
 800865c:	42a0      	cmp	r0, r4
 800865e:	d0f8      	beq.n	8008652 <sbrk_aligned+0x22>
 8008660:	1a21      	subs	r1, r4, r0
 8008662:	4628      	mov	r0, r5
 8008664:	f001 fde2 	bl	800a22c <_sbrk_r>
 8008668:	3001      	adds	r0, #1
 800866a:	d1f2      	bne.n	8008652 <sbrk_aligned+0x22>
 800866c:	e7ef      	b.n	800864e <sbrk_aligned+0x1e>
 800866e:	bf00      	nop
 8008670:	20002138 	.word	0x20002138

08008674 <_malloc_r>:
 8008674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008678:	1ccd      	adds	r5, r1, #3
 800867a:	f025 0503 	bic.w	r5, r5, #3
 800867e:	3508      	adds	r5, #8
 8008680:	2d0c      	cmp	r5, #12
 8008682:	bf38      	it	cc
 8008684:	250c      	movcc	r5, #12
 8008686:	2d00      	cmp	r5, #0
 8008688:	4606      	mov	r6, r0
 800868a:	db01      	blt.n	8008690 <_malloc_r+0x1c>
 800868c:	42a9      	cmp	r1, r5
 800868e:	d904      	bls.n	800869a <_malloc_r+0x26>
 8008690:	230c      	movs	r3, #12
 8008692:	6033      	str	r3, [r6, #0]
 8008694:	2000      	movs	r0, #0
 8008696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800869a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008770 <_malloc_r+0xfc>
 800869e:	f000 f869 	bl	8008774 <__malloc_lock>
 80086a2:	f8d8 3000 	ldr.w	r3, [r8]
 80086a6:	461c      	mov	r4, r3
 80086a8:	bb44      	cbnz	r4, 80086fc <_malloc_r+0x88>
 80086aa:	4629      	mov	r1, r5
 80086ac:	4630      	mov	r0, r6
 80086ae:	f7ff ffbf 	bl	8008630 <sbrk_aligned>
 80086b2:	1c43      	adds	r3, r0, #1
 80086b4:	4604      	mov	r4, r0
 80086b6:	d158      	bne.n	800876a <_malloc_r+0xf6>
 80086b8:	f8d8 4000 	ldr.w	r4, [r8]
 80086bc:	4627      	mov	r7, r4
 80086be:	2f00      	cmp	r7, #0
 80086c0:	d143      	bne.n	800874a <_malloc_r+0xd6>
 80086c2:	2c00      	cmp	r4, #0
 80086c4:	d04b      	beq.n	800875e <_malloc_r+0xea>
 80086c6:	6823      	ldr	r3, [r4, #0]
 80086c8:	4639      	mov	r1, r7
 80086ca:	4630      	mov	r0, r6
 80086cc:	eb04 0903 	add.w	r9, r4, r3
 80086d0:	f001 fdac 	bl	800a22c <_sbrk_r>
 80086d4:	4581      	cmp	r9, r0
 80086d6:	d142      	bne.n	800875e <_malloc_r+0xea>
 80086d8:	6821      	ldr	r1, [r4, #0]
 80086da:	4630      	mov	r0, r6
 80086dc:	1a6d      	subs	r5, r5, r1
 80086de:	4629      	mov	r1, r5
 80086e0:	f7ff ffa6 	bl	8008630 <sbrk_aligned>
 80086e4:	3001      	adds	r0, #1
 80086e6:	d03a      	beq.n	800875e <_malloc_r+0xea>
 80086e8:	6823      	ldr	r3, [r4, #0]
 80086ea:	442b      	add	r3, r5
 80086ec:	6023      	str	r3, [r4, #0]
 80086ee:	f8d8 3000 	ldr.w	r3, [r8]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	bb62      	cbnz	r2, 8008750 <_malloc_r+0xdc>
 80086f6:	f8c8 7000 	str.w	r7, [r8]
 80086fa:	e00f      	b.n	800871c <_malloc_r+0xa8>
 80086fc:	6822      	ldr	r2, [r4, #0]
 80086fe:	1b52      	subs	r2, r2, r5
 8008700:	d420      	bmi.n	8008744 <_malloc_r+0xd0>
 8008702:	2a0b      	cmp	r2, #11
 8008704:	d917      	bls.n	8008736 <_malloc_r+0xc2>
 8008706:	1961      	adds	r1, r4, r5
 8008708:	42a3      	cmp	r3, r4
 800870a:	6025      	str	r5, [r4, #0]
 800870c:	bf18      	it	ne
 800870e:	6059      	strne	r1, [r3, #4]
 8008710:	6863      	ldr	r3, [r4, #4]
 8008712:	bf08      	it	eq
 8008714:	f8c8 1000 	streq.w	r1, [r8]
 8008718:	5162      	str	r2, [r4, r5]
 800871a:	604b      	str	r3, [r1, #4]
 800871c:	4630      	mov	r0, r6
 800871e:	f000 f82f 	bl	8008780 <__malloc_unlock>
 8008722:	f104 000b 	add.w	r0, r4, #11
 8008726:	1d23      	adds	r3, r4, #4
 8008728:	f020 0007 	bic.w	r0, r0, #7
 800872c:	1ac2      	subs	r2, r0, r3
 800872e:	bf1c      	itt	ne
 8008730:	1a1b      	subne	r3, r3, r0
 8008732:	50a3      	strne	r3, [r4, r2]
 8008734:	e7af      	b.n	8008696 <_malloc_r+0x22>
 8008736:	6862      	ldr	r2, [r4, #4]
 8008738:	42a3      	cmp	r3, r4
 800873a:	bf0c      	ite	eq
 800873c:	f8c8 2000 	streq.w	r2, [r8]
 8008740:	605a      	strne	r2, [r3, #4]
 8008742:	e7eb      	b.n	800871c <_malloc_r+0xa8>
 8008744:	4623      	mov	r3, r4
 8008746:	6864      	ldr	r4, [r4, #4]
 8008748:	e7ae      	b.n	80086a8 <_malloc_r+0x34>
 800874a:	463c      	mov	r4, r7
 800874c:	687f      	ldr	r7, [r7, #4]
 800874e:	e7b6      	b.n	80086be <_malloc_r+0x4a>
 8008750:	461a      	mov	r2, r3
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	42a3      	cmp	r3, r4
 8008756:	d1fb      	bne.n	8008750 <_malloc_r+0xdc>
 8008758:	2300      	movs	r3, #0
 800875a:	6053      	str	r3, [r2, #4]
 800875c:	e7de      	b.n	800871c <_malloc_r+0xa8>
 800875e:	230c      	movs	r3, #12
 8008760:	4630      	mov	r0, r6
 8008762:	6033      	str	r3, [r6, #0]
 8008764:	f000 f80c 	bl	8008780 <__malloc_unlock>
 8008768:	e794      	b.n	8008694 <_malloc_r+0x20>
 800876a:	6005      	str	r5, [r0, #0]
 800876c:	e7d6      	b.n	800871c <_malloc_r+0xa8>
 800876e:	bf00      	nop
 8008770:	2000213c 	.word	0x2000213c

08008774 <__malloc_lock>:
 8008774:	4801      	ldr	r0, [pc, #4]	@ (800877c <__malloc_lock+0x8>)
 8008776:	f7ff b898 	b.w	80078aa <__retarget_lock_acquire_recursive>
 800877a:	bf00      	nop
 800877c:	20002134 	.word	0x20002134

08008780 <__malloc_unlock>:
 8008780:	4801      	ldr	r0, [pc, #4]	@ (8008788 <__malloc_unlock+0x8>)
 8008782:	f7ff b893 	b.w	80078ac <__retarget_lock_release_recursive>
 8008786:	bf00      	nop
 8008788:	20002134 	.word	0x20002134

0800878c <_Balloc>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	69c6      	ldr	r6, [r0, #28]
 8008790:	4604      	mov	r4, r0
 8008792:	460d      	mov	r5, r1
 8008794:	b976      	cbnz	r6, 80087b4 <_Balloc+0x28>
 8008796:	2010      	movs	r0, #16
 8008798:	f7ff ff42 	bl	8008620 <malloc>
 800879c:	4602      	mov	r2, r0
 800879e:	61e0      	str	r0, [r4, #28]
 80087a0:	b920      	cbnz	r0, 80087ac <_Balloc+0x20>
 80087a2:	216b      	movs	r1, #107	@ 0x6b
 80087a4:	4b17      	ldr	r3, [pc, #92]	@ (8008804 <_Balloc+0x78>)
 80087a6:	4818      	ldr	r0, [pc, #96]	@ (8008808 <_Balloc+0x7c>)
 80087a8:	f001 fd56 	bl	800a258 <__assert_func>
 80087ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087b0:	6006      	str	r6, [r0, #0]
 80087b2:	60c6      	str	r6, [r0, #12]
 80087b4:	69e6      	ldr	r6, [r4, #28]
 80087b6:	68f3      	ldr	r3, [r6, #12]
 80087b8:	b183      	cbz	r3, 80087dc <_Balloc+0x50>
 80087ba:	69e3      	ldr	r3, [r4, #28]
 80087bc:	68db      	ldr	r3, [r3, #12]
 80087be:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087c2:	b9b8      	cbnz	r0, 80087f4 <_Balloc+0x68>
 80087c4:	2101      	movs	r1, #1
 80087c6:	fa01 f605 	lsl.w	r6, r1, r5
 80087ca:	1d72      	adds	r2, r6, #5
 80087cc:	4620      	mov	r0, r4
 80087ce:	0092      	lsls	r2, r2, #2
 80087d0:	f001 fd60 	bl	800a294 <_calloc_r>
 80087d4:	b160      	cbz	r0, 80087f0 <_Balloc+0x64>
 80087d6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087da:	e00e      	b.n	80087fa <_Balloc+0x6e>
 80087dc:	2221      	movs	r2, #33	@ 0x21
 80087de:	2104      	movs	r1, #4
 80087e0:	4620      	mov	r0, r4
 80087e2:	f001 fd57 	bl	800a294 <_calloc_r>
 80087e6:	69e3      	ldr	r3, [r4, #28]
 80087e8:	60f0      	str	r0, [r6, #12]
 80087ea:	68db      	ldr	r3, [r3, #12]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d1e4      	bne.n	80087ba <_Balloc+0x2e>
 80087f0:	2000      	movs	r0, #0
 80087f2:	bd70      	pop	{r4, r5, r6, pc}
 80087f4:	6802      	ldr	r2, [r0, #0]
 80087f6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80087fa:	2300      	movs	r3, #0
 80087fc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008800:	e7f7      	b.n	80087f2 <_Balloc+0x66>
 8008802:	bf00      	nop
 8008804:	0800bb10 	.word	0x0800bb10
 8008808:	0800bb90 	.word	0x0800bb90

0800880c <_Bfree>:
 800880c:	b570      	push	{r4, r5, r6, lr}
 800880e:	69c6      	ldr	r6, [r0, #28]
 8008810:	4605      	mov	r5, r0
 8008812:	460c      	mov	r4, r1
 8008814:	b976      	cbnz	r6, 8008834 <_Bfree+0x28>
 8008816:	2010      	movs	r0, #16
 8008818:	f7ff ff02 	bl	8008620 <malloc>
 800881c:	4602      	mov	r2, r0
 800881e:	61e8      	str	r0, [r5, #28]
 8008820:	b920      	cbnz	r0, 800882c <_Bfree+0x20>
 8008822:	218f      	movs	r1, #143	@ 0x8f
 8008824:	4b08      	ldr	r3, [pc, #32]	@ (8008848 <_Bfree+0x3c>)
 8008826:	4809      	ldr	r0, [pc, #36]	@ (800884c <_Bfree+0x40>)
 8008828:	f001 fd16 	bl	800a258 <__assert_func>
 800882c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008830:	6006      	str	r6, [r0, #0]
 8008832:	60c6      	str	r6, [r0, #12]
 8008834:	b13c      	cbz	r4, 8008846 <_Bfree+0x3a>
 8008836:	69eb      	ldr	r3, [r5, #28]
 8008838:	6862      	ldr	r2, [r4, #4]
 800883a:	68db      	ldr	r3, [r3, #12]
 800883c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008840:	6021      	str	r1, [r4, #0]
 8008842:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008846:	bd70      	pop	{r4, r5, r6, pc}
 8008848:	0800bb10 	.word	0x0800bb10
 800884c:	0800bb90 	.word	0x0800bb90

08008850 <__multadd>:
 8008850:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008854:	4607      	mov	r7, r0
 8008856:	460c      	mov	r4, r1
 8008858:	461e      	mov	r6, r3
 800885a:	2000      	movs	r0, #0
 800885c:	690d      	ldr	r5, [r1, #16]
 800885e:	f101 0c14 	add.w	ip, r1, #20
 8008862:	f8dc 3000 	ldr.w	r3, [ip]
 8008866:	3001      	adds	r0, #1
 8008868:	b299      	uxth	r1, r3
 800886a:	fb02 6101 	mla	r1, r2, r1, r6
 800886e:	0c1e      	lsrs	r6, r3, #16
 8008870:	0c0b      	lsrs	r3, r1, #16
 8008872:	fb02 3306 	mla	r3, r2, r6, r3
 8008876:	b289      	uxth	r1, r1
 8008878:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800887c:	4285      	cmp	r5, r0
 800887e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008882:	f84c 1b04 	str.w	r1, [ip], #4
 8008886:	dcec      	bgt.n	8008862 <__multadd+0x12>
 8008888:	b30e      	cbz	r6, 80088ce <__multadd+0x7e>
 800888a:	68a3      	ldr	r3, [r4, #8]
 800888c:	42ab      	cmp	r3, r5
 800888e:	dc19      	bgt.n	80088c4 <__multadd+0x74>
 8008890:	6861      	ldr	r1, [r4, #4]
 8008892:	4638      	mov	r0, r7
 8008894:	3101      	adds	r1, #1
 8008896:	f7ff ff79 	bl	800878c <_Balloc>
 800889a:	4680      	mov	r8, r0
 800889c:	b928      	cbnz	r0, 80088aa <__multadd+0x5a>
 800889e:	4602      	mov	r2, r0
 80088a0:	21ba      	movs	r1, #186	@ 0xba
 80088a2:	4b0c      	ldr	r3, [pc, #48]	@ (80088d4 <__multadd+0x84>)
 80088a4:	480c      	ldr	r0, [pc, #48]	@ (80088d8 <__multadd+0x88>)
 80088a6:	f001 fcd7 	bl	800a258 <__assert_func>
 80088aa:	6922      	ldr	r2, [r4, #16]
 80088ac:	f104 010c 	add.w	r1, r4, #12
 80088b0:	3202      	adds	r2, #2
 80088b2:	0092      	lsls	r2, r2, #2
 80088b4:	300c      	adds	r0, #12
 80088b6:	f7ff f808 	bl	80078ca <memcpy>
 80088ba:	4621      	mov	r1, r4
 80088bc:	4638      	mov	r0, r7
 80088be:	f7ff ffa5 	bl	800880c <_Bfree>
 80088c2:	4644      	mov	r4, r8
 80088c4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088c8:	3501      	adds	r5, #1
 80088ca:	615e      	str	r6, [r3, #20]
 80088cc:	6125      	str	r5, [r4, #16]
 80088ce:	4620      	mov	r0, r4
 80088d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088d4:	0800bb7f 	.word	0x0800bb7f
 80088d8:	0800bb90 	.word	0x0800bb90

080088dc <__s2b>:
 80088dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088e0:	4615      	mov	r5, r2
 80088e2:	2209      	movs	r2, #9
 80088e4:	461f      	mov	r7, r3
 80088e6:	3308      	adds	r3, #8
 80088e8:	460c      	mov	r4, r1
 80088ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80088ee:	4606      	mov	r6, r0
 80088f0:	2201      	movs	r2, #1
 80088f2:	2100      	movs	r1, #0
 80088f4:	429a      	cmp	r2, r3
 80088f6:	db09      	blt.n	800890c <__s2b+0x30>
 80088f8:	4630      	mov	r0, r6
 80088fa:	f7ff ff47 	bl	800878c <_Balloc>
 80088fe:	b940      	cbnz	r0, 8008912 <__s2b+0x36>
 8008900:	4602      	mov	r2, r0
 8008902:	21d3      	movs	r1, #211	@ 0xd3
 8008904:	4b18      	ldr	r3, [pc, #96]	@ (8008968 <__s2b+0x8c>)
 8008906:	4819      	ldr	r0, [pc, #100]	@ (800896c <__s2b+0x90>)
 8008908:	f001 fca6 	bl	800a258 <__assert_func>
 800890c:	0052      	lsls	r2, r2, #1
 800890e:	3101      	adds	r1, #1
 8008910:	e7f0      	b.n	80088f4 <__s2b+0x18>
 8008912:	9b08      	ldr	r3, [sp, #32]
 8008914:	2d09      	cmp	r5, #9
 8008916:	6143      	str	r3, [r0, #20]
 8008918:	f04f 0301 	mov.w	r3, #1
 800891c:	6103      	str	r3, [r0, #16]
 800891e:	dd16      	ble.n	800894e <__s2b+0x72>
 8008920:	f104 0909 	add.w	r9, r4, #9
 8008924:	46c8      	mov	r8, r9
 8008926:	442c      	add	r4, r5
 8008928:	f818 3b01 	ldrb.w	r3, [r8], #1
 800892c:	4601      	mov	r1, r0
 800892e:	220a      	movs	r2, #10
 8008930:	4630      	mov	r0, r6
 8008932:	3b30      	subs	r3, #48	@ 0x30
 8008934:	f7ff ff8c 	bl	8008850 <__multadd>
 8008938:	45a0      	cmp	r8, r4
 800893a:	d1f5      	bne.n	8008928 <__s2b+0x4c>
 800893c:	f1a5 0408 	sub.w	r4, r5, #8
 8008940:	444c      	add	r4, r9
 8008942:	1b2d      	subs	r5, r5, r4
 8008944:	1963      	adds	r3, r4, r5
 8008946:	42bb      	cmp	r3, r7
 8008948:	db04      	blt.n	8008954 <__s2b+0x78>
 800894a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800894e:	2509      	movs	r5, #9
 8008950:	340a      	adds	r4, #10
 8008952:	e7f6      	b.n	8008942 <__s2b+0x66>
 8008954:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008958:	4601      	mov	r1, r0
 800895a:	220a      	movs	r2, #10
 800895c:	4630      	mov	r0, r6
 800895e:	3b30      	subs	r3, #48	@ 0x30
 8008960:	f7ff ff76 	bl	8008850 <__multadd>
 8008964:	e7ee      	b.n	8008944 <__s2b+0x68>
 8008966:	bf00      	nop
 8008968:	0800bb7f 	.word	0x0800bb7f
 800896c:	0800bb90 	.word	0x0800bb90

08008970 <__hi0bits>:
 8008970:	4603      	mov	r3, r0
 8008972:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008976:	bf3a      	itte	cc
 8008978:	0403      	lslcc	r3, r0, #16
 800897a:	2010      	movcc	r0, #16
 800897c:	2000      	movcs	r0, #0
 800897e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008982:	bf3c      	itt	cc
 8008984:	021b      	lslcc	r3, r3, #8
 8008986:	3008      	addcc	r0, #8
 8008988:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800898c:	bf3c      	itt	cc
 800898e:	011b      	lslcc	r3, r3, #4
 8008990:	3004      	addcc	r0, #4
 8008992:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008996:	bf3c      	itt	cc
 8008998:	009b      	lslcc	r3, r3, #2
 800899a:	3002      	addcc	r0, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	db05      	blt.n	80089ac <__hi0bits+0x3c>
 80089a0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089a4:	f100 0001 	add.w	r0, r0, #1
 80089a8:	bf08      	it	eq
 80089aa:	2020      	moveq	r0, #32
 80089ac:	4770      	bx	lr

080089ae <__lo0bits>:
 80089ae:	6803      	ldr	r3, [r0, #0]
 80089b0:	4602      	mov	r2, r0
 80089b2:	f013 0007 	ands.w	r0, r3, #7
 80089b6:	d00b      	beq.n	80089d0 <__lo0bits+0x22>
 80089b8:	07d9      	lsls	r1, r3, #31
 80089ba:	d421      	bmi.n	8008a00 <__lo0bits+0x52>
 80089bc:	0798      	lsls	r0, r3, #30
 80089be:	bf49      	itett	mi
 80089c0:	085b      	lsrmi	r3, r3, #1
 80089c2:	089b      	lsrpl	r3, r3, #2
 80089c4:	2001      	movmi	r0, #1
 80089c6:	6013      	strmi	r3, [r2, #0]
 80089c8:	bf5c      	itt	pl
 80089ca:	2002      	movpl	r0, #2
 80089cc:	6013      	strpl	r3, [r2, #0]
 80089ce:	4770      	bx	lr
 80089d0:	b299      	uxth	r1, r3
 80089d2:	b909      	cbnz	r1, 80089d8 <__lo0bits+0x2a>
 80089d4:	2010      	movs	r0, #16
 80089d6:	0c1b      	lsrs	r3, r3, #16
 80089d8:	b2d9      	uxtb	r1, r3
 80089da:	b909      	cbnz	r1, 80089e0 <__lo0bits+0x32>
 80089dc:	3008      	adds	r0, #8
 80089de:	0a1b      	lsrs	r3, r3, #8
 80089e0:	0719      	lsls	r1, r3, #28
 80089e2:	bf04      	itt	eq
 80089e4:	091b      	lsreq	r3, r3, #4
 80089e6:	3004      	addeq	r0, #4
 80089e8:	0799      	lsls	r1, r3, #30
 80089ea:	bf04      	itt	eq
 80089ec:	089b      	lsreq	r3, r3, #2
 80089ee:	3002      	addeq	r0, #2
 80089f0:	07d9      	lsls	r1, r3, #31
 80089f2:	d403      	bmi.n	80089fc <__lo0bits+0x4e>
 80089f4:	085b      	lsrs	r3, r3, #1
 80089f6:	f100 0001 	add.w	r0, r0, #1
 80089fa:	d003      	beq.n	8008a04 <__lo0bits+0x56>
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4770      	bx	lr
 8008a00:	2000      	movs	r0, #0
 8008a02:	4770      	bx	lr
 8008a04:	2020      	movs	r0, #32
 8008a06:	4770      	bx	lr

08008a08 <__i2b>:
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	460c      	mov	r4, r1
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	f7ff febd 	bl	800878c <_Balloc>
 8008a12:	4602      	mov	r2, r0
 8008a14:	b928      	cbnz	r0, 8008a22 <__i2b+0x1a>
 8008a16:	f240 1145 	movw	r1, #325	@ 0x145
 8008a1a:	4b04      	ldr	r3, [pc, #16]	@ (8008a2c <__i2b+0x24>)
 8008a1c:	4804      	ldr	r0, [pc, #16]	@ (8008a30 <__i2b+0x28>)
 8008a1e:	f001 fc1b 	bl	800a258 <__assert_func>
 8008a22:	2301      	movs	r3, #1
 8008a24:	6144      	str	r4, [r0, #20]
 8008a26:	6103      	str	r3, [r0, #16]
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	bf00      	nop
 8008a2c:	0800bb7f 	.word	0x0800bb7f
 8008a30:	0800bb90 	.word	0x0800bb90

08008a34 <__multiply>:
 8008a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a38:	4614      	mov	r4, r2
 8008a3a:	690a      	ldr	r2, [r1, #16]
 8008a3c:	6923      	ldr	r3, [r4, #16]
 8008a3e:	460f      	mov	r7, r1
 8008a40:	429a      	cmp	r2, r3
 8008a42:	bfa2      	ittt	ge
 8008a44:	4623      	movge	r3, r4
 8008a46:	460c      	movge	r4, r1
 8008a48:	461f      	movge	r7, r3
 8008a4a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a4e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a52:	68a3      	ldr	r3, [r4, #8]
 8008a54:	6861      	ldr	r1, [r4, #4]
 8008a56:	eb0a 0609 	add.w	r6, sl, r9
 8008a5a:	42b3      	cmp	r3, r6
 8008a5c:	b085      	sub	sp, #20
 8008a5e:	bfb8      	it	lt
 8008a60:	3101      	addlt	r1, #1
 8008a62:	f7ff fe93 	bl	800878c <_Balloc>
 8008a66:	b930      	cbnz	r0, 8008a76 <__multiply+0x42>
 8008a68:	4602      	mov	r2, r0
 8008a6a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a6e:	4b43      	ldr	r3, [pc, #268]	@ (8008b7c <__multiply+0x148>)
 8008a70:	4843      	ldr	r0, [pc, #268]	@ (8008b80 <__multiply+0x14c>)
 8008a72:	f001 fbf1 	bl	800a258 <__assert_func>
 8008a76:	f100 0514 	add.w	r5, r0, #20
 8008a7a:	462b      	mov	r3, r5
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008a82:	4543      	cmp	r3, r8
 8008a84:	d321      	bcc.n	8008aca <__multiply+0x96>
 8008a86:	f107 0114 	add.w	r1, r7, #20
 8008a8a:	f104 0214 	add.w	r2, r4, #20
 8008a8e:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008a92:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008a96:	9302      	str	r3, [sp, #8]
 8008a98:	1b13      	subs	r3, r2, r4
 8008a9a:	3b15      	subs	r3, #21
 8008a9c:	f023 0303 	bic.w	r3, r3, #3
 8008aa0:	3304      	adds	r3, #4
 8008aa2:	f104 0715 	add.w	r7, r4, #21
 8008aa6:	42ba      	cmp	r2, r7
 8008aa8:	bf38      	it	cc
 8008aaa:	2304      	movcc	r3, #4
 8008aac:	9301      	str	r3, [sp, #4]
 8008aae:	9b02      	ldr	r3, [sp, #8]
 8008ab0:	9103      	str	r1, [sp, #12]
 8008ab2:	428b      	cmp	r3, r1
 8008ab4:	d80c      	bhi.n	8008ad0 <__multiply+0x9c>
 8008ab6:	2e00      	cmp	r6, #0
 8008ab8:	dd03      	ble.n	8008ac2 <__multiply+0x8e>
 8008aba:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d05a      	beq.n	8008b78 <__multiply+0x144>
 8008ac2:	6106      	str	r6, [r0, #16]
 8008ac4:	b005      	add	sp, #20
 8008ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aca:	f843 2b04 	str.w	r2, [r3], #4
 8008ace:	e7d8      	b.n	8008a82 <__multiply+0x4e>
 8008ad0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008ad4:	f1ba 0f00 	cmp.w	sl, #0
 8008ad8:	d023      	beq.n	8008b22 <__multiply+0xee>
 8008ada:	46a9      	mov	r9, r5
 8008adc:	f04f 0c00 	mov.w	ip, #0
 8008ae0:	f104 0e14 	add.w	lr, r4, #20
 8008ae4:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008ae8:	f8d9 3000 	ldr.w	r3, [r9]
 8008aec:	fa1f fb87 	uxth.w	fp, r7
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	fb0a 330b 	mla	r3, sl, fp, r3
 8008af6:	4463      	add	r3, ip
 8008af8:	f8d9 c000 	ldr.w	ip, [r9]
 8008afc:	0c3f      	lsrs	r7, r7, #16
 8008afe:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008b02:	fb0a c707 	mla	r7, sl, r7, ip
 8008b06:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b10:	4572      	cmp	r2, lr
 8008b12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b16:	f849 3b04 	str.w	r3, [r9], #4
 8008b1a:	d8e3      	bhi.n	8008ae4 <__multiply+0xb0>
 8008b1c:	9b01      	ldr	r3, [sp, #4]
 8008b1e:	f845 c003 	str.w	ip, [r5, r3]
 8008b22:	9b03      	ldr	r3, [sp, #12]
 8008b24:	3104      	adds	r1, #4
 8008b26:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b2a:	f1b9 0f00 	cmp.w	r9, #0
 8008b2e:	d021      	beq.n	8008b74 <__multiply+0x140>
 8008b30:	46ae      	mov	lr, r5
 8008b32:	f04f 0a00 	mov.w	sl, #0
 8008b36:	682b      	ldr	r3, [r5, #0]
 8008b38:	f104 0c14 	add.w	ip, r4, #20
 8008b3c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b40:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b44:	b29b      	uxth	r3, r3
 8008b46:	fb09 770b 	mla	r7, r9, fp, r7
 8008b4a:	4457      	add	r7, sl
 8008b4c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b50:	f84e 3b04 	str.w	r3, [lr], #4
 8008b54:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b58:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b5c:	f8be 3000 	ldrh.w	r3, [lr]
 8008b60:	4562      	cmp	r2, ip
 8008b62:	fb09 330a 	mla	r3, r9, sl, r3
 8008b66:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b6a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b6e:	d8e5      	bhi.n	8008b3c <__multiply+0x108>
 8008b70:	9f01      	ldr	r7, [sp, #4]
 8008b72:	51eb      	str	r3, [r5, r7]
 8008b74:	3504      	adds	r5, #4
 8008b76:	e79a      	b.n	8008aae <__multiply+0x7a>
 8008b78:	3e01      	subs	r6, #1
 8008b7a:	e79c      	b.n	8008ab6 <__multiply+0x82>
 8008b7c:	0800bb7f 	.word	0x0800bb7f
 8008b80:	0800bb90 	.word	0x0800bb90

08008b84 <__pow5mult>:
 8008b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b88:	4615      	mov	r5, r2
 8008b8a:	f012 0203 	ands.w	r2, r2, #3
 8008b8e:	4607      	mov	r7, r0
 8008b90:	460e      	mov	r6, r1
 8008b92:	d007      	beq.n	8008ba4 <__pow5mult+0x20>
 8008b94:	4c25      	ldr	r4, [pc, #148]	@ (8008c2c <__pow5mult+0xa8>)
 8008b96:	3a01      	subs	r2, #1
 8008b98:	2300      	movs	r3, #0
 8008b9a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008b9e:	f7ff fe57 	bl	8008850 <__multadd>
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	10ad      	asrs	r5, r5, #2
 8008ba6:	d03d      	beq.n	8008c24 <__pow5mult+0xa0>
 8008ba8:	69fc      	ldr	r4, [r7, #28]
 8008baa:	b97c      	cbnz	r4, 8008bcc <__pow5mult+0x48>
 8008bac:	2010      	movs	r0, #16
 8008bae:	f7ff fd37 	bl	8008620 <malloc>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	61f8      	str	r0, [r7, #28]
 8008bb6:	b928      	cbnz	r0, 8008bc4 <__pow5mult+0x40>
 8008bb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bbc:	4b1c      	ldr	r3, [pc, #112]	@ (8008c30 <__pow5mult+0xac>)
 8008bbe:	481d      	ldr	r0, [pc, #116]	@ (8008c34 <__pow5mult+0xb0>)
 8008bc0:	f001 fb4a 	bl	800a258 <__assert_func>
 8008bc4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008bc8:	6004      	str	r4, [r0, #0]
 8008bca:	60c4      	str	r4, [r0, #12]
 8008bcc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bd0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bd4:	b94c      	cbnz	r4, 8008bea <__pow5mult+0x66>
 8008bd6:	f240 2171 	movw	r1, #625	@ 0x271
 8008bda:	4638      	mov	r0, r7
 8008bdc:	f7ff ff14 	bl	8008a08 <__i2b>
 8008be0:	2300      	movs	r3, #0
 8008be2:	4604      	mov	r4, r0
 8008be4:	f8c8 0008 	str.w	r0, [r8, #8]
 8008be8:	6003      	str	r3, [r0, #0]
 8008bea:	f04f 0900 	mov.w	r9, #0
 8008bee:	07eb      	lsls	r3, r5, #31
 8008bf0:	d50a      	bpl.n	8008c08 <__pow5mult+0x84>
 8008bf2:	4631      	mov	r1, r6
 8008bf4:	4622      	mov	r2, r4
 8008bf6:	4638      	mov	r0, r7
 8008bf8:	f7ff ff1c 	bl	8008a34 <__multiply>
 8008bfc:	4680      	mov	r8, r0
 8008bfe:	4631      	mov	r1, r6
 8008c00:	4638      	mov	r0, r7
 8008c02:	f7ff fe03 	bl	800880c <_Bfree>
 8008c06:	4646      	mov	r6, r8
 8008c08:	106d      	asrs	r5, r5, #1
 8008c0a:	d00b      	beq.n	8008c24 <__pow5mult+0xa0>
 8008c0c:	6820      	ldr	r0, [r4, #0]
 8008c0e:	b938      	cbnz	r0, 8008c20 <__pow5mult+0x9c>
 8008c10:	4622      	mov	r2, r4
 8008c12:	4621      	mov	r1, r4
 8008c14:	4638      	mov	r0, r7
 8008c16:	f7ff ff0d 	bl	8008a34 <__multiply>
 8008c1a:	6020      	str	r0, [r4, #0]
 8008c1c:	f8c0 9000 	str.w	r9, [r0]
 8008c20:	4604      	mov	r4, r0
 8008c22:	e7e4      	b.n	8008bee <__pow5mult+0x6a>
 8008c24:	4630      	mov	r0, r6
 8008c26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c2a:	bf00      	nop
 8008c2c:	0800bbec 	.word	0x0800bbec
 8008c30:	0800bb10 	.word	0x0800bb10
 8008c34:	0800bb90 	.word	0x0800bb90

08008c38 <__lshift>:
 8008c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c3c:	460c      	mov	r4, r1
 8008c3e:	4607      	mov	r7, r0
 8008c40:	4691      	mov	r9, r2
 8008c42:	6923      	ldr	r3, [r4, #16]
 8008c44:	6849      	ldr	r1, [r1, #4]
 8008c46:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c4a:	68a3      	ldr	r3, [r4, #8]
 8008c4c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c50:	f108 0601 	add.w	r6, r8, #1
 8008c54:	42b3      	cmp	r3, r6
 8008c56:	db0b      	blt.n	8008c70 <__lshift+0x38>
 8008c58:	4638      	mov	r0, r7
 8008c5a:	f7ff fd97 	bl	800878c <_Balloc>
 8008c5e:	4605      	mov	r5, r0
 8008c60:	b948      	cbnz	r0, 8008c76 <__lshift+0x3e>
 8008c62:	4602      	mov	r2, r0
 8008c64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c68:	4b27      	ldr	r3, [pc, #156]	@ (8008d08 <__lshift+0xd0>)
 8008c6a:	4828      	ldr	r0, [pc, #160]	@ (8008d0c <__lshift+0xd4>)
 8008c6c:	f001 faf4 	bl	800a258 <__assert_func>
 8008c70:	3101      	adds	r1, #1
 8008c72:	005b      	lsls	r3, r3, #1
 8008c74:	e7ee      	b.n	8008c54 <__lshift+0x1c>
 8008c76:	2300      	movs	r3, #0
 8008c78:	f100 0114 	add.w	r1, r0, #20
 8008c7c:	f100 0210 	add.w	r2, r0, #16
 8008c80:	4618      	mov	r0, r3
 8008c82:	4553      	cmp	r3, sl
 8008c84:	db33      	blt.n	8008cee <__lshift+0xb6>
 8008c86:	6920      	ldr	r0, [r4, #16]
 8008c88:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008c8c:	f104 0314 	add.w	r3, r4, #20
 8008c90:	f019 091f 	ands.w	r9, r9, #31
 8008c94:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008c98:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008c9c:	d02b      	beq.n	8008cf6 <__lshift+0xbe>
 8008c9e:	468a      	mov	sl, r1
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	f1c9 0e20 	rsb	lr, r9, #32
 8008ca6:	6818      	ldr	r0, [r3, #0]
 8008ca8:	fa00 f009 	lsl.w	r0, r0, r9
 8008cac:	4310      	orrs	r0, r2
 8008cae:	f84a 0b04 	str.w	r0, [sl], #4
 8008cb2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cb6:	459c      	cmp	ip, r3
 8008cb8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cbc:	d8f3      	bhi.n	8008ca6 <__lshift+0x6e>
 8008cbe:	ebac 0304 	sub.w	r3, ip, r4
 8008cc2:	3b15      	subs	r3, #21
 8008cc4:	f023 0303 	bic.w	r3, r3, #3
 8008cc8:	3304      	adds	r3, #4
 8008cca:	f104 0015 	add.w	r0, r4, #21
 8008cce:	4584      	cmp	ip, r0
 8008cd0:	bf38      	it	cc
 8008cd2:	2304      	movcc	r3, #4
 8008cd4:	50ca      	str	r2, [r1, r3]
 8008cd6:	b10a      	cbz	r2, 8008cdc <__lshift+0xa4>
 8008cd8:	f108 0602 	add.w	r6, r8, #2
 8008cdc:	3e01      	subs	r6, #1
 8008cde:	4638      	mov	r0, r7
 8008ce0:	4621      	mov	r1, r4
 8008ce2:	612e      	str	r6, [r5, #16]
 8008ce4:	f7ff fd92 	bl	800880c <_Bfree>
 8008ce8:	4628      	mov	r0, r5
 8008cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cee:	f842 0f04 	str.w	r0, [r2, #4]!
 8008cf2:	3301      	adds	r3, #1
 8008cf4:	e7c5      	b.n	8008c82 <__lshift+0x4a>
 8008cf6:	3904      	subs	r1, #4
 8008cf8:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cfc:	459c      	cmp	ip, r3
 8008cfe:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d02:	d8f9      	bhi.n	8008cf8 <__lshift+0xc0>
 8008d04:	e7ea      	b.n	8008cdc <__lshift+0xa4>
 8008d06:	bf00      	nop
 8008d08:	0800bb7f 	.word	0x0800bb7f
 8008d0c:	0800bb90 	.word	0x0800bb90

08008d10 <__mcmp>:
 8008d10:	4603      	mov	r3, r0
 8008d12:	690a      	ldr	r2, [r1, #16]
 8008d14:	6900      	ldr	r0, [r0, #16]
 8008d16:	b530      	push	{r4, r5, lr}
 8008d18:	1a80      	subs	r0, r0, r2
 8008d1a:	d10e      	bne.n	8008d3a <__mcmp+0x2a>
 8008d1c:	3314      	adds	r3, #20
 8008d1e:	3114      	adds	r1, #20
 8008d20:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d24:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d28:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d2c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d30:	4295      	cmp	r5, r2
 8008d32:	d003      	beq.n	8008d3c <__mcmp+0x2c>
 8008d34:	d205      	bcs.n	8008d42 <__mcmp+0x32>
 8008d36:	f04f 30ff 	mov.w	r0, #4294967295
 8008d3a:	bd30      	pop	{r4, r5, pc}
 8008d3c:	42a3      	cmp	r3, r4
 8008d3e:	d3f3      	bcc.n	8008d28 <__mcmp+0x18>
 8008d40:	e7fb      	b.n	8008d3a <__mcmp+0x2a>
 8008d42:	2001      	movs	r0, #1
 8008d44:	e7f9      	b.n	8008d3a <__mcmp+0x2a>
	...

08008d48 <__mdiff>:
 8008d48:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d4c:	4689      	mov	r9, r1
 8008d4e:	4606      	mov	r6, r0
 8008d50:	4611      	mov	r1, r2
 8008d52:	4648      	mov	r0, r9
 8008d54:	4614      	mov	r4, r2
 8008d56:	f7ff ffdb 	bl	8008d10 <__mcmp>
 8008d5a:	1e05      	subs	r5, r0, #0
 8008d5c:	d112      	bne.n	8008d84 <__mdiff+0x3c>
 8008d5e:	4629      	mov	r1, r5
 8008d60:	4630      	mov	r0, r6
 8008d62:	f7ff fd13 	bl	800878c <_Balloc>
 8008d66:	4602      	mov	r2, r0
 8008d68:	b928      	cbnz	r0, 8008d76 <__mdiff+0x2e>
 8008d6a:	f240 2137 	movw	r1, #567	@ 0x237
 8008d6e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e68 <__mdiff+0x120>)
 8008d70:	483e      	ldr	r0, [pc, #248]	@ (8008e6c <__mdiff+0x124>)
 8008d72:	f001 fa71 	bl	800a258 <__assert_func>
 8008d76:	2301      	movs	r3, #1
 8008d78:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d7c:	4610      	mov	r0, r2
 8008d7e:	b003      	add	sp, #12
 8008d80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d84:	bfbc      	itt	lt
 8008d86:	464b      	movlt	r3, r9
 8008d88:	46a1      	movlt	r9, r4
 8008d8a:	4630      	mov	r0, r6
 8008d8c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008d90:	bfba      	itte	lt
 8008d92:	461c      	movlt	r4, r3
 8008d94:	2501      	movlt	r5, #1
 8008d96:	2500      	movge	r5, #0
 8008d98:	f7ff fcf8 	bl	800878c <_Balloc>
 8008d9c:	4602      	mov	r2, r0
 8008d9e:	b918      	cbnz	r0, 8008da8 <__mdiff+0x60>
 8008da0:	f240 2145 	movw	r1, #581	@ 0x245
 8008da4:	4b30      	ldr	r3, [pc, #192]	@ (8008e68 <__mdiff+0x120>)
 8008da6:	e7e3      	b.n	8008d70 <__mdiff+0x28>
 8008da8:	f100 0b14 	add.w	fp, r0, #20
 8008dac:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008db0:	f109 0310 	add.w	r3, r9, #16
 8008db4:	60c5      	str	r5, [r0, #12]
 8008db6:	f04f 0c00 	mov.w	ip, #0
 8008dba:	f109 0514 	add.w	r5, r9, #20
 8008dbe:	46d9      	mov	r9, fp
 8008dc0:	6926      	ldr	r6, [r4, #16]
 8008dc2:	f104 0e14 	add.w	lr, r4, #20
 8008dc6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dca:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	9b01      	ldr	r3, [sp, #4]
 8008dd2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008dd6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dda:	b281      	uxth	r1, r0
 8008ddc:	9301      	str	r3, [sp, #4]
 8008dde:	fa1f f38a 	uxth.w	r3, sl
 8008de2:	1a5b      	subs	r3, r3, r1
 8008de4:	0c00      	lsrs	r0, r0, #16
 8008de6:	4463      	add	r3, ip
 8008de8:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008dec:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008df0:	b29b      	uxth	r3, r3
 8008df2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008df6:	4576      	cmp	r6, lr
 8008df8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008dfc:	f849 3b04 	str.w	r3, [r9], #4
 8008e00:	d8e6      	bhi.n	8008dd0 <__mdiff+0x88>
 8008e02:	1b33      	subs	r3, r6, r4
 8008e04:	3b15      	subs	r3, #21
 8008e06:	f023 0303 	bic.w	r3, r3, #3
 8008e0a:	3415      	adds	r4, #21
 8008e0c:	3304      	adds	r3, #4
 8008e0e:	42a6      	cmp	r6, r4
 8008e10:	bf38      	it	cc
 8008e12:	2304      	movcc	r3, #4
 8008e14:	441d      	add	r5, r3
 8008e16:	445b      	add	r3, fp
 8008e18:	461e      	mov	r6, r3
 8008e1a:	462c      	mov	r4, r5
 8008e1c:	4544      	cmp	r4, r8
 8008e1e:	d30e      	bcc.n	8008e3e <__mdiff+0xf6>
 8008e20:	f108 0103 	add.w	r1, r8, #3
 8008e24:	1b49      	subs	r1, r1, r5
 8008e26:	f021 0103 	bic.w	r1, r1, #3
 8008e2a:	3d03      	subs	r5, #3
 8008e2c:	45a8      	cmp	r8, r5
 8008e2e:	bf38      	it	cc
 8008e30:	2100      	movcc	r1, #0
 8008e32:	440b      	add	r3, r1
 8008e34:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e38:	b199      	cbz	r1, 8008e62 <__mdiff+0x11a>
 8008e3a:	6117      	str	r7, [r2, #16]
 8008e3c:	e79e      	b.n	8008d7c <__mdiff+0x34>
 8008e3e:	46e6      	mov	lr, ip
 8008e40:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e44:	fa1f fc81 	uxth.w	ip, r1
 8008e48:	44f4      	add	ip, lr
 8008e4a:	0c08      	lsrs	r0, r1, #16
 8008e4c:	4471      	add	r1, lr
 8008e4e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e52:	b289      	uxth	r1, r1
 8008e54:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e5c:	f846 1b04 	str.w	r1, [r6], #4
 8008e60:	e7dc      	b.n	8008e1c <__mdiff+0xd4>
 8008e62:	3f01      	subs	r7, #1
 8008e64:	e7e6      	b.n	8008e34 <__mdiff+0xec>
 8008e66:	bf00      	nop
 8008e68:	0800bb7f 	.word	0x0800bb7f
 8008e6c:	0800bb90 	.word	0x0800bb90

08008e70 <__ulp>:
 8008e70:	4b0e      	ldr	r3, [pc, #56]	@ (8008eac <__ulp+0x3c>)
 8008e72:	400b      	ands	r3, r1
 8008e74:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	dc08      	bgt.n	8008e8e <__ulp+0x1e>
 8008e7c:	425b      	negs	r3, r3
 8008e7e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008e82:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008e86:	da04      	bge.n	8008e92 <__ulp+0x22>
 8008e88:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008e8c:	4113      	asrs	r3, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	e008      	b.n	8008ea4 <__ulp+0x34>
 8008e92:	f1a2 0314 	sub.w	r3, r2, #20
 8008e96:	2b1e      	cmp	r3, #30
 8008e98:	bfd6      	itet	le
 8008e9a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008e9e:	2201      	movgt	r2, #1
 8008ea0:	40da      	lsrle	r2, r3
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	4610      	mov	r0, r2
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	7ff00000 	.word	0x7ff00000

08008eb0 <__b2d>:
 8008eb0:	6902      	ldr	r2, [r0, #16]
 8008eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008eb4:	f100 0614 	add.w	r6, r0, #20
 8008eb8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008ebc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008ec0:	4f1e      	ldr	r7, [pc, #120]	@ (8008f3c <__b2d+0x8c>)
 8008ec2:	4620      	mov	r0, r4
 8008ec4:	f7ff fd54 	bl	8008970 <__hi0bits>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	f1c0 0020 	rsb	r0, r0, #32
 8008ece:	2b0a      	cmp	r3, #10
 8008ed0:	f1a2 0504 	sub.w	r5, r2, #4
 8008ed4:	6008      	str	r0, [r1, #0]
 8008ed6:	dc12      	bgt.n	8008efe <__b2d+0x4e>
 8008ed8:	42ae      	cmp	r6, r5
 8008eda:	bf2c      	ite	cs
 8008edc:	2200      	movcs	r2, #0
 8008ede:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008ee2:	f1c3 0c0b 	rsb	ip, r3, #11
 8008ee6:	3315      	adds	r3, #21
 8008ee8:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008eec:	fa04 f303 	lsl.w	r3, r4, r3
 8008ef0:	fa22 f20c 	lsr.w	r2, r2, ip
 8008ef4:	ea4e 0107 	orr.w	r1, lr, r7
 8008ef8:	431a      	orrs	r2, r3
 8008efa:	4610      	mov	r0, r2
 8008efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008efe:	42ae      	cmp	r6, r5
 8008f00:	bf36      	itet	cc
 8008f02:	f1a2 0508 	subcc.w	r5, r2, #8
 8008f06:	2200      	movcs	r2, #0
 8008f08:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f0c:	3b0b      	subs	r3, #11
 8008f0e:	d012      	beq.n	8008f36 <__b2d+0x86>
 8008f10:	f1c3 0720 	rsb	r7, r3, #32
 8008f14:	fa22 f107 	lsr.w	r1, r2, r7
 8008f18:	409c      	lsls	r4, r3
 8008f1a:	430c      	orrs	r4, r1
 8008f1c:	42b5      	cmp	r5, r6
 8008f1e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008f22:	bf94      	ite	ls
 8008f24:	2400      	movls	r4, #0
 8008f26:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008f2a:	409a      	lsls	r2, r3
 8008f2c:	40fc      	lsrs	r4, r7
 8008f2e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008f32:	4322      	orrs	r2, r4
 8008f34:	e7e1      	b.n	8008efa <__b2d+0x4a>
 8008f36:	ea44 0107 	orr.w	r1, r4, r7
 8008f3a:	e7de      	b.n	8008efa <__b2d+0x4a>
 8008f3c:	3ff00000 	.word	0x3ff00000

08008f40 <__d2b>:
 8008f40:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008f44:	2101      	movs	r1, #1
 8008f46:	4690      	mov	r8, r2
 8008f48:	4699      	mov	r9, r3
 8008f4a:	9e08      	ldr	r6, [sp, #32]
 8008f4c:	f7ff fc1e 	bl	800878c <_Balloc>
 8008f50:	4604      	mov	r4, r0
 8008f52:	b930      	cbnz	r0, 8008f62 <__d2b+0x22>
 8008f54:	4602      	mov	r2, r0
 8008f56:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f5a:	4b23      	ldr	r3, [pc, #140]	@ (8008fe8 <__d2b+0xa8>)
 8008f5c:	4823      	ldr	r0, [pc, #140]	@ (8008fec <__d2b+0xac>)
 8008f5e:	f001 f97b 	bl	800a258 <__assert_func>
 8008f62:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f66:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f6a:	b10d      	cbz	r5, 8008f70 <__d2b+0x30>
 8008f6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f70:	9301      	str	r3, [sp, #4]
 8008f72:	f1b8 0300 	subs.w	r3, r8, #0
 8008f76:	d024      	beq.n	8008fc2 <__d2b+0x82>
 8008f78:	4668      	mov	r0, sp
 8008f7a:	9300      	str	r3, [sp, #0]
 8008f7c:	f7ff fd17 	bl	80089ae <__lo0bits>
 8008f80:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008f84:	b1d8      	cbz	r0, 8008fbe <__d2b+0x7e>
 8008f86:	f1c0 0320 	rsb	r3, r0, #32
 8008f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8008f8e:	430b      	orrs	r3, r1
 8008f90:	40c2      	lsrs	r2, r0
 8008f92:	6163      	str	r3, [r4, #20]
 8008f94:	9201      	str	r2, [sp, #4]
 8008f96:	9b01      	ldr	r3, [sp, #4]
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	bf0c      	ite	eq
 8008f9c:	2201      	moveq	r2, #1
 8008f9e:	2202      	movne	r2, #2
 8008fa0:	61a3      	str	r3, [r4, #24]
 8008fa2:	6122      	str	r2, [r4, #16]
 8008fa4:	b1ad      	cbz	r5, 8008fd2 <__d2b+0x92>
 8008fa6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008faa:	4405      	add	r5, r0
 8008fac:	6035      	str	r5, [r6, #0]
 8008fae:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fb4:	6018      	str	r0, [r3, #0]
 8008fb6:	4620      	mov	r0, r4
 8008fb8:	b002      	add	sp, #8
 8008fba:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008fbe:	6161      	str	r1, [r4, #20]
 8008fc0:	e7e9      	b.n	8008f96 <__d2b+0x56>
 8008fc2:	a801      	add	r0, sp, #4
 8008fc4:	f7ff fcf3 	bl	80089ae <__lo0bits>
 8008fc8:	9b01      	ldr	r3, [sp, #4]
 8008fca:	2201      	movs	r2, #1
 8008fcc:	6163      	str	r3, [r4, #20]
 8008fce:	3020      	adds	r0, #32
 8008fd0:	e7e7      	b.n	8008fa2 <__d2b+0x62>
 8008fd2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008fd6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008fda:	6030      	str	r0, [r6, #0]
 8008fdc:	6918      	ldr	r0, [r3, #16]
 8008fde:	f7ff fcc7 	bl	8008970 <__hi0bits>
 8008fe2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008fe6:	e7e4      	b.n	8008fb2 <__d2b+0x72>
 8008fe8:	0800bb7f 	.word	0x0800bb7f
 8008fec:	0800bb90 	.word	0x0800bb90

08008ff0 <__ratio>:
 8008ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	e9cd 1000 	strd	r1, r0, [sp]
 8008ffa:	a902      	add	r1, sp, #8
 8008ffc:	f7ff ff58 	bl	8008eb0 <__b2d>
 8009000:	468b      	mov	fp, r1
 8009002:	4606      	mov	r6, r0
 8009004:	460f      	mov	r7, r1
 8009006:	9800      	ldr	r0, [sp, #0]
 8009008:	a903      	add	r1, sp, #12
 800900a:	f7ff ff51 	bl	8008eb0 <__b2d>
 800900e:	460d      	mov	r5, r1
 8009010:	9b01      	ldr	r3, [sp, #4]
 8009012:	4689      	mov	r9, r1
 8009014:	6919      	ldr	r1, [r3, #16]
 8009016:	9b00      	ldr	r3, [sp, #0]
 8009018:	4604      	mov	r4, r0
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	4630      	mov	r0, r6
 800901e:	1ac9      	subs	r1, r1, r3
 8009020:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800902a:	2b00      	cmp	r3, #0
 800902c:	bfcd      	iteet	gt
 800902e:	463a      	movgt	r2, r7
 8009030:	462a      	movle	r2, r5
 8009032:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009036:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800903a:	bfd8      	it	le
 800903c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009040:	464b      	mov	r3, r9
 8009042:	4622      	mov	r2, r4
 8009044:	4659      	mov	r1, fp
 8009046:	f7f7 fbe1 	bl	800080c <__aeabi_ddiv>
 800904a:	b005      	add	sp, #20
 800904c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009050 <__copybits>:
 8009050:	3901      	subs	r1, #1
 8009052:	b570      	push	{r4, r5, r6, lr}
 8009054:	1149      	asrs	r1, r1, #5
 8009056:	6914      	ldr	r4, [r2, #16]
 8009058:	3101      	adds	r1, #1
 800905a:	f102 0314 	add.w	r3, r2, #20
 800905e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009062:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009066:	1f05      	subs	r5, r0, #4
 8009068:	42a3      	cmp	r3, r4
 800906a:	d30c      	bcc.n	8009086 <__copybits+0x36>
 800906c:	1aa3      	subs	r3, r4, r2
 800906e:	3b11      	subs	r3, #17
 8009070:	f023 0303 	bic.w	r3, r3, #3
 8009074:	3211      	adds	r2, #17
 8009076:	42a2      	cmp	r2, r4
 8009078:	bf88      	it	hi
 800907a:	2300      	movhi	r3, #0
 800907c:	4418      	add	r0, r3
 800907e:	2300      	movs	r3, #0
 8009080:	4288      	cmp	r0, r1
 8009082:	d305      	bcc.n	8009090 <__copybits+0x40>
 8009084:	bd70      	pop	{r4, r5, r6, pc}
 8009086:	f853 6b04 	ldr.w	r6, [r3], #4
 800908a:	f845 6f04 	str.w	r6, [r5, #4]!
 800908e:	e7eb      	b.n	8009068 <__copybits+0x18>
 8009090:	f840 3b04 	str.w	r3, [r0], #4
 8009094:	e7f4      	b.n	8009080 <__copybits+0x30>

08009096 <__any_on>:
 8009096:	f100 0214 	add.w	r2, r0, #20
 800909a:	6900      	ldr	r0, [r0, #16]
 800909c:	114b      	asrs	r3, r1, #5
 800909e:	4298      	cmp	r0, r3
 80090a0:	b510      	push	{r4, lr}
 80090a2:	db11      	blt.n	80090c8 <__any_on+0x32>
 80090a4:	dd0a      	ble.n	80090bc <__any_on+0x26>
 80090a6:	f011 011f 	ands.w	r1, r1, #31
 80090aa:	d007      	beq.n	80090bc <__any_on+0x26>
 80090ac:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090b0:	fa24 f001 	lsr.w	r0, r4, r1
 80090b4:	fa00 f101 	lsl.w	r1, r0, r1
 80090b8:	428c      	cmp	r4, r1
 80090ba:	d10b      	bne.n	80090d4 <__any_on+0x3e>
 80090bc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d803      	bhi.n	80090cc <__any_on+0x36>
 80090c4:	2000      	movs	r0, #0
 80090c6:	bd10      	pop	{r4, pc}
 80090c8:	4603      	mov	r3, r0
 80090ca:	e7f7      	b.n	80090bc <__any_on+0x26>
 80090cc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090d0:	2900      	cmp	r1, #0
 80090d2:	d0f5      	beq.n	80090c0 <__any_on+0x2a>
 80090d4:	2001      	movs	r0, #1
 80090d6:	e7f6      	b.n	80090c6 <__any_on+0x30>

080090d8 <sulp>:
 80090d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090dc:	460f      	mov	r7, r1
 80090de:	4690      	mov	r8, r2
 80090e0:	f7ff fec6 	bl	8008e70 <__ulp>
 80090e4:	4604      	mov	r4, r0
 80090e6:	460d      	mov	r5, r1
 80090e8:	f1b8 0f00 	cmp.w	r8, #0
 80090ec:	d011      	beq.n	8009112 <sulp+0x3a>
 80090ee:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80090f2:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	dd0b      	ble.n	8009112 <sulp+0x3a>
 80090fa:	2400      	movs	r4, #0
 80090fc:	051b      	lsls	r3, r3, #20
 80090fe:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009102:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009106:	4622      	mov	r2, r4
 8009108:	462b      	mov	r3, r5
 800910a:	f7f7 fa55 	bl	80005b8 <__aeabi_dmul>
 800910e:	4604      	mov	r4, r0
 8009110:	460d      	mov	r5, r1
 8009112:	4620      	mov	r0, r4
 8009114:	4629      	mov	r1, r5
 8009116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800911a:	0000      	movs	r0, r0
 800911c:	0000      	movs	r0, r0
	...

08009120 <_strtod_l>:
 8009120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009124:	b09f      	sub	sp, #124	@ 0x7c
 8009126:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009128:	2200      	movs	r2, #0
 800912a:	460c      	mov	r4, r1
 800912c:	921a      	str	r2, [sp, #104]	@ 0x68
 800912e:	f04f 0a00 	mov.w	sl, #0
 8009132:	f04f 0b00 	mov.w	fp, #0
 8009136:	460a      	mov	r2, r1
 8009138:	9005      	str	r0, [sp, #20]
 800913a:	9219      	str	r2, [sp, #100]	@ 0x64
 800913c:	7811      	ldrb	r1, [r2, #0]
 800913e:	292b      	cmp	r1, #43	@ 0x2b
 8009140:	d048      	beq.n	80091d4 <_strtod_l+0xb4>
 8009142:	d836      	bhi.n	80091b2 <_strtod_l+0x92>
 8009144:	290d      	cmp	r1, #13
 8009146:	d830      	bhi.n	80091aa <_strtod_l+0x8a>
 8009148:	2908      	cmp	r1, #8
 800914a:	d830      	bhi.n	80091ae <_strtod_l+0x8e>
 800914c:	2900      	cmp	r1, #0
 800914e:	d039      	beq.n	80091c4 <_strtod_l+0xa4>
 8009150:	2200      	movs	r2, #0
 8009152:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009154:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009156:	782a      	ldrb	r2, [r5, #0]
 8009158:	2a30      	cmp	r2, #48	@ 0x30
 800915a:	f040 80b1 	bne.w	80092c0 <_strtod_l+0x1a0>
 800915e:	786a      	ldrb	r2, [r5, #1]
 8009160:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009164:	2a58      	cmp	r2, #88	@ 0x58
 8009166:	d16c      	bne.n	8009242 <_strtod_l+0x122>
 8009168:	9302      	str	r3, [sp, #8]
 800916a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800916c:	4a8e      	ldr	r2, [pc, #568]	@ (80093a8 <_strtod_l+0x288>)
 800916e:	9301      	str	r3, [sp, #4]
 8009170:	ab1a      	add	r3, sp, #104	@ 0x68
 8009172:	9300      	str	r3, [sp, #0]
 8009174:	9805      	ldr	r0, [sp, #20]
 8009176:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009178:	a919      	add	r1, sp, #100	@ 0x64
 800917a:	f001 f907 	bl	800a38c <__gethex>
 800917e:	f010 060f 	ands.w	r6, r0, #15
 8009182:	4604      	mov	r4, r0
 8009184:	d005      	beq.n	8009192 <_strtod_l+0x72>
 8009186:	2e06      	cmp	r6, #6
 8009188:	d126      	bne.n	80091d8 <_strtod_l+0xb8>
 800918a:	2300      	movs	r3, #0
 800918c:	3501      	adds	r5, #1
 800918e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009190:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009192:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009194:	2b00      	cmp	r3, #0
 8009196:	f040 8584 	bne.w	8009ca2 <_strtod_l+0xb82>
 800919a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800919c:	b1bb      	cbz	r3, 80091ce <_strtod_l+0xae>
 800919e:	4650      	mov	r0, sl
 80091a0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80091a4:	b01f      	add	sp, #124	@ 0x7c
 80091a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091aa:	2920      	cmp	r1, #32
 80091ac:	d1d0      	bne.n	8009150 <_strtod_l+0x30>
 80091ae:	3201      	adds	r2, #1
 80091b0:	e7c3      	b.n	800913a <_strtod_l+0x1a>
 80091b2:	292d      	cmp	r1, #45	@ 0x2d
 80091b4:	d1cc      	bne.n	8009150 <_strtod_l+0x30>
 80091b6:	2101      	movs	r1, #1
 80091b8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091ba:	1c51      	adds	r1, r2, #1
 80091bc:	9119      	str	r1, [sp, #100]	@ 0x64
 80091be:	7852      	ldrb	r2, [r2, #1]
 80091c0:	2a00      	cmp	r2, #0
 80091c2:	d1c7      	bne.n	8009154 <_strtod_l+0x34>
 80091c4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091c6:	9419      	str	r4, [sp, #100]	@ 0x64
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	f040 8568 	bne.w	8009c9e <_strtod_l+0xb7e>
 80091ce:	4650      	mov	r0, sl
 80091d0:	4659      	mov	r1, fp
 80091d2:	e7e7      	b.n	80091a4 <_strtod_l+0x84>
 80091d4:	2100      	movs	r1, #0
 80091d6:	e7ef      	b.n	80091b8 <_strtod_l+0x98>
 80091d8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091da:	b13a      	cbz	r2, 80091ec <_strtod_l+0xcc>
 80091dc:	2135      	movs	r1, #53	@ 0x35
 80091de:	a81c      	add	r0, sp, #112	@ 0x70
 80091e0:	f7ff ff36 	bl	8009050 <__copybits>
 80091e4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091e6:	9805      	ldr	r0, [sp, #20]
 80091e8:	f7ff fb10 	bl	800880c <_Bfree>
 80091ec:	3e01      	subs	r6, #1
 80091ee:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80091f0:	2e04      	cmp	r6, #4
 80091f2:	d806      	bhi.n	8009202 <_strtod_l+0xe2>
 80091f4:	e8df f006 	tbb	[pc, r6]
 80091f8:	201d0314 	.word	0x201d0314
 80091fc:	14          	.byte	0x14
 80091fd:	00          	.byte	0x00
 80091fe:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009202:	05e1      	lsls	r1, r4, #23
 8009204:	bf48      	it	mi
 8009206:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800920a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800920e:	0d1b      	lsrs	r3, r3, #20
 8009210:	051b      	lsls	r3, r3, #20
 8009212:	2b00      	cmp	r3, #0
 8009214:	d1bd      	bne.n	8009192 <_strtod_l+0x72>
 8009216:	f7fe fb1d 	bl	8007854 <__errno>
 800921a:	2322      	movs	r3, #34	@ 0x22
 800921c:	6003      	str	r3, [r0, #0]
 800921e:	e7b8      	b.n	8009192 <_strtod_l+0x72>
 8009220:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009224:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009228:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800922c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009230:	e7e7      	b.n	8009202 <_strtod_l+0xe2>
 8009232:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80093ac <_strtod_l+0x28c>
 8009236:	e7e4      	b.n	8009202 <_strtod_l+0xe2>
 8009238:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800923c:	f04f 3aff 	mov.w	sl, #4294967295
 8009240:	e7df      	b.n	8009202 <_strtod_l+0xe2>
 8009242:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	9219      	str	r2, [sp, #100]	@ 0x64
 8009248:	785b      	ldrb	r3, [r3, #1]
 800924a:	2b30      	cmp	r3, #48	@ 0x30
 800924c:	d0f9      	beq.n	8009242 <_strtod_l+0x122>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d09f      	beq.n	8009192 <_strtod_l+0x72>
 8009252:	2301      	movs	r3, #1
 8009254:	9309      	str	r3, [sp, #36]	@ 0x24
 8009256:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009258:	220a      	movs	r2, #10
 800925a:	930c      	str	r3, [sp, #48]	@ 0x30
 800925c:	2300      	movs	r3, #0
 800925e:	461f      	mov	r7, r3
 8009260:	9308      	str	r3, [sp, #32]
 8009262:	930a      	str	r3, [sp, #40]	@ 0x28
 8009264:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009266:	7805      	ldrb	r5, [r0, #0]
 8009268:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800926c:	b2d9      	uxtb	r1, r3
 800926e:	2909      	cmp	r1, #9
 8009270:	d928      	bls.n	80092c4 <_strtod_l+0x1a4>
 8009272:	2201      	movs	r2, #1
 8009274:	494e      	ldr	r1, [pc, #312]	@ (80093b0 <_strtod_l+0x290>)
 8009276:	f000 ffc7 	bl	800a208 <strncmp>
 800927a:	2800      	cmp	r0, #0
 800927c:	d032      	beq.n	80092e4 <_strtod_l+0x1c4>
 800927e:	2000      	movs	r0, #0
 8009280:	462a      	mov	r2, r5
 8009282:	4681      	mov	r9, r0
 8009284:	463d      	mov	r5, r7
 8009286:	4603      	mov	r3, r0
 8009288:	2a65      	cmp	r2, #101	@ 0x65
 800928a:	d001      	beq.n	8009290 <_strtod_l+0x170>
 800928c:	2a45      	cmp	r2, #69	@ 0x45
 800928e:	d114      	bne.n	80092ba <_strtod_l+0x19a>
 8009290:	b91d      	cbnz	r5, 800929a <_strtod_l+0x17a>
 8009292:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009294:	4302      	orrs	r2, r0
 8009296:	d095      	beq.n	80091c4 <_strtod_l+0xa4>
 8009298:	2500      	movs	r5, #0
 800929a:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800929c:	1c62      	adds	r2, r4, #1
 800929e:	9219      	str	r2, [sp, #100]	@ 0x64
 80092a0:	7862      	ldrb	r2, [r4, #1]
 80092a2:	2a2b      	cmp	r2, #43	@ 0x2b
 80092a4:	d077      	beq.n	8009396 <_strtod_l+0x276>
 80092a6:	2a2d      	cmp	r2, #45	@ 0x2d
 80092a8:	d07b      	beq.n	80093a2 <_strtod_l+0x282>
 80092aa:	f04f 0c00 	mov.w	ip, #0
 80092ae:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092b2:	2909      	cmp	r1, #9
 80092b4:	f240 8082 	bls.w	80093bc <_strtod_l+0x29c>
 80092b8:	9419      	str	r4, [sp, #100]	@ 0x64
 80092ba:	f04f 0800 	mov.w	r8, #0
 80092be:	e0a2      	b.n	8009406 <_strtod_l+0x2e6>
 80092c0:	2300      	movs	r3, #0
 80092c2:	e7c7      	b.n	8009254 <_strtod_l+0x134>
 80092c4:	2f08      	cmp	r7, #8
 80092c6:	bfd5      	itete	le
 80092c8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092ca:	9908      	ldrgt	r1, [sp, #32]
 80092cc:	fb02 3301 	mlale	r3, r2, r1, r3
 80092d0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092d4:	f100 0001 	add.w	r0, r0, #1
 80092d8:	bfd4      	ite	le
 80092da:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092dc:	9308      	strgt	r3, [sp, #32]
 80092de:	3701      	adds	r7, #1
 80092e0:	9019      	str	r0, [sp, #100]	@ 0x64
 80092e2:	e7bf      	b.n	8009264 <_strtod_l+0x144>
 80092e4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092e6:	1c5a      	adds	r2, r3, #1
 80092e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80092ea:	785a      	ldrb	r2, [r3, #1]
 80092ec:	b37f      	cbz	r7, 800934e <_strtod_l+0x22e>
 80092ee:	4681      	mov	r9, r0
 80092f0:	463d      	mov	r5, r7
 80092f2:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80092f6:	2b09      	cmp	r3, #9
 80092f8:	d912      	bls.n	8009320 <_strtod_l+0x200>
 80092fa:	2301      	movs	r3, #1
 80092fc:	e7c4      	b.n	8009288 <_strtod_l+0x168>
 80092fe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009300:	3001      	adds	r0, #1
 8009302:	1c5a      	adds	r2, r3, #1
 8009304:	9219      	str	r2, [sp, #100]	@ 0x64
 8009306:	785a      	ldrb	r2, [r3, #1]
 8009308:	2a30      	cmp	r2, #48	@ 0x30
 800930a:	d0f8      	beq.n	80092fe <_strtod_l+0x1de>
 800930c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009310:	2b08      	cmp	r3, #8
 8009312:	f200 84cb 	bhi.w	8009cac <_strtod_l+0xb8c>
 8009316:	4681      	mov	r9, r0
 8009318:	2000      	movs	r0, #0
 800931a:	4605      	mov	r5, r0
 800931c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800931e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009320:	3a30      	subs	r2, #48	@ 0x30
 8009322:	f100 0301 	add.w	r3, r0, #1
 8009326:	d02a      	beq.n	800937e <_strtod_l+0x25e>
 8009328:	4499      	add	r9, r3
 800932a:	210a      	movs	r1, #10
 800932c:	462b      	mov	r3, r5
 800932e:	eb00 0c05 	add.w	ip, r0, r5
 8009332:	4563      	cmp	r3, ip
 8009334:	d10d      	bne.n	8009352 <_strtod_l+0x232>
 8009336:	1c69      	adds	r1, r5, #1
 8009338:	4401      	add	r1, r0
 800933a:	4428      	add	r0, r5
 800933c:	2808      	cmp	r0, #8
 800933e:	dc16      	bgt.n	800936e <_strtod_l+0x24e>
 8009340:	230a      	movs	r3, #10
 8009342:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009344:	fb03 2300 	mla	r3, r3, r0, r2
 8009348:	930a      	str	r3, [sp, #40]	@ 0x28
 800934a:	2300      	movs	r3, #0
 800934c:	e018      	b.n	8009380 <_strtod_l+0x260>
 800934e:	4638      	mov	r0, r7
 8009350:	e7da      	b.n	8009308 <_strtod_l+0x1e8>
 8009352:	2b08      	cmp	r3, #8
 8009354:	f103 0301 	add.w	r3, r3, #1
 8009358:	dc03      	bgt.n	8009362 <_strtod_l+0x242>
 800935a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800935c:	434e      	muls	r6, r1
 800935e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009360:	e7e7      	b.n	8009332 <_strtod_l+0x212>
 8009362:	2b10      	cmp	r3, #16
 8009364:	bfde      	ittt	le
 8009366:	9e08      	ldrle	r6, [sp, #32]
 8009368:	434e      	mulle	r6, r1
 800936a:	9608      	strle	r6, [sp, #32]
 800936c:	e7e1      	b.n	8009332 <_strtod_l+0x212>
 800936e:	280f      	cmp	r0, #15
 8009370:	dceb      	bgt.n	800934a <_strtod_l+0x22a>
 8009372:	230a      	movs	r3, #10
 8009374:	9808      	ldr	r0, [sp, #32]
 8009376:	fb03 2300 	mla	r3, r3, r0, r2
 800937a:	9308      	str	r3, [sp, #32]
 800937c:	e7e5      	b.n	800934a <_strtod_l+0x22a>
 800937e:	4629      	mov	r1, r5
 8009380:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009382:	460d      	mov	r5, r1
 8009384:	1c50      	adds	r0, r2, #1
 8009386:	9019      	str	r0, [sp, #100]	@ 0x64
 8009388:	7852      	ldrb	r2, [r2, #1]
 800938a:	4618      	mov	r0, r3
 800938c:	e7b1      	b.n	80092f2 <_strtod_l+0x1d2>
 800938e:	f04f 0900 	mov.w	r9, #0
 8009392:	2301      	movs	r3, #1
 8009394:	e77d      	b.n	8009292 <_strtod_l+0x172>
 8009396:	f04f 0c00 	mov.w	ip, #0
 800939a:	1ca2      	adds	r2, r4, #2
 800939c:	9219      	str	r2, [sp, #100]	@ 0x64
 800939e:	78a2      	ldrb	r2, [r4, #2]
 80093a0:	e785      	b.n	80092ae <_strtod_l+0x18e>
 80093a2:	f04f 0c01 	mov.w	ip, #1
 80093a6:	e7f8      	b.n	800939a <_strtod_l+0x27a>
 80093a8:	0800bd00 	.word	0x0800bd00
 80093ac:	7ff00000 	.word	0x7ff00000
 80093b0:	0800bce8 	.word	0x0800bce8
 80093b4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093b6:	1c51      	adds	r1, r2, #1
 80093b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093ba:	7852      	ldrb	r2, [r2, #1]
 80093bc:	2a30      	cmp	r2, #48	@ 0x30
 80093be:	d0f9      	beq.n	80093b4 <_strtod_l+0x294>
 80093c0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093c4:	2908      	cmp	r1, #8
 80093c6:	f63f af78 	bhi.w	80092ba <_strtod_l+0x19a>
 80093ca:	f04f 080a 	mov.w	r8, #10
 80093ce:	3a30      	subs	r2, #48	@ 0x30
 80093d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093d2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093d4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093d8:	1c56      	adds	r6, r2, #1
 80093da:	9619      	str	r6, [sp, #100]	@ 0x64
 80093dc:	7852      	ldrb	r2, [r2, #1]
 80093de:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80093e2:	f1be 0f09 	cmp.w	lr, #9
 80093e6:	d939      	bls.n	800945c <_strtod_l+0x33c>
 80093e8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80093ea:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80093ee:	1a76      	subs	r6, r6, r1
 80093f0:	2e08      	cmp	r6, #8
 80093f2:	dc03      	bgt.n	80093fc <_strtod_l+0x2dc>
 80093f4:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80093f6:	4588      	cmp	r8, r1
 80093f8:	bfa8      	it	ge
 80093fa:	4688      	movge	r8, r1
 80093fc:	f1bc 0f00 	cmp.w	ip, #0
 8009400:	d001      	beq.n	8009406 <_strtod_l+0x2e6>
 8009402:	f1c8 0800 	rsb	r8, r8, #0
 8009406:	2d00      	cmp	r5, #0
 8009408:	d14e      	bne.n	80094a8 <_strtod_l+0x388>
 800940a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800940c:	4308      	orrs	r0, r1
 800940e:	f47f aec0 	bne.w	8009192 <_strtod_l+0x72>
 8009412:	2b00      	cmp	r3, #0
 8009414:	f47f aed6 	bne.w	80091c4 <_strtod_l+0xa4>
 8009418:	2a69      	cmp	r2, #105	@ 0x69
 800941a:	d028      	beq.n	800946e <_strtod_l+0x34e>
 800941c:	dc25      	bgt.n	800946a <_strtod_l+0x34a>
 800941e:	2a49      	cmp	r2, #73	@ 0x49
 8009420:	d025      	beq.n	800946e <_strtod_l+0x34e>
 8009422:	2a4e      	cmp	r2, #78	@ 0x4e
 8009424:	f47f aece 	bne.w	80091c4 <_strtod_l+0xa4>
 8009428:	499a      	ldr	r1, [pc, #616]	@ (8009694 <_strtod_l+0x574>)
 800942a:	a819      	add	r0, sp, #100	@ 0x64
 800942c:	f001 f9d0 	bl	800a7d0 <__match>
 8009430:	2800      	cmp	r0, #0
 8009432:	f43f aec7 	beq.w	80091c4 <_strtod_l+0xa4>
 8009436:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009438:	781b      	ldrb	r3, [r3, #0]
 800943a:	2b28      	cmp	r3, #40	@ 0x28
 800943c:	d12e      	bne.n	800949c <_strtod_l+0x37c>
 800943e:	4996      	ldr	r1, [pc, #600]	@ (8009698 <_strtod_l+0x578>)
 8009440:	aa1c      	add	r2, sp, #112	@ 0x70
 8009442:	a819      	add	r0, sp, #100	@ 0x64
 8009444:	f001 f9d8 	bl	800a7f8 <__hexnan>
 8009448:	2805      	cmp	r0, #5
 800944a:	d127      	bne.n	800949c <_strtod_l+0x37c>
 800944c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800944e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009452:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009456:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800945a:	e69a      	b.n	8009192 <_strtod_l+0x72>
 800945c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800945e:	fb08 2101 	mla	r1, r8, r1, r2
 8009462:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009466:	920e      	str	r2, [sp, #56]	@ 0x38
 8009468:	e7b5      	b.n	80093d6 <_strtod_l+0x2b6>
 800946a:	2a6e      	cmp	r2, #110	@ 0x6e
 800946c:	e7da      	b.n	8009424 <_strtod_l+0x304>
 800946e:	498b      	ldr	r1, [pc, #556]	@ (800969c <_strtod_l+0x57c>)
 8009470:	a819      	add	r0, sp, #100	@ 0x64
 8009472:	f001 f9ad 	bl	800a7d0 <__match>
 8009476:	2800      	cmp	r0, #0
 8009478:	f43f aea4 	beq.w	80091c4 <_strtod_l+0xa4>
 800947c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800947e:	4988      	ldr	r1, [pc, #544]	@ (80096a0 <_strtod_l+0x580>)
 8009480:	3b01      	subs	r3, #1
 8009482:	a819      	add	r0, sp, #100	@ 0x64
 8009484:	9319      	str	r3, [sp, #100]	@ 0x64
 8009486:	f001 f9a3 	bl	800a7d0 <__match>
 800948a:	b910      	cbnz	r0, 8009492 <_strtod_l+0x372>
 800948c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800948e:	3301      	adds	r3, #1
 8009490:	9319      	str	r3, [sp, #100]	@ 0x64
 8009492:	f04f 0a00 	mov.w	sl, #0
 8009496:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80096a4 <_strtod_l+0x584>
 800949a:	e67a      	b.n	8009192 <_strtod_l+0x72>
 800949c:	4882      	ldr	r0, [pc, #520]	@ (80096a8 <_strtod_l+0x588>)
 800949e:	f000 fed5 	bl	800a24c <nan>
 80094a2:	4682      	mov	sl, r0
 80094a4:	468b      	mov	fp, r1
 80094a6:	e674      	b.n	8009192 <_strtod_l+0x72>
 80094a8:	eba8 0309 	sub.w	r3, r8, r9
 80094ac:	2f00      	cmp	r7, #0
 80094ae:	bf08      	it	eq
 80094b0:	462f      	moveq	r7, r5
 80094b2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094b4:	2d10      	cmp	r5, #16
 80094b6:	462c      	mov	r4, r5
 80094b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094ba:	bfa8      	it	ge
 80094bc:	2410      	movge	r4, #16
 80094be:	f7f7 f801 	bl	80004c4 <__aeabi_ui2d>
 80094c2:	2d09      	cmp	r5, #9
 80094c4:	4682      	mov	sl, r0
 80094c6:	468b      	mov	fp, r1
 80094c8:	dc11      	bgt.n	80094ee <_strtod_l+0x3ce>
 80094ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	f43f ae60 	beq.w	8009192 <_strtod_l+0x72>
 80094d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094d4:	dd76      	ble.n	80095c4 <_strtod_l+0x4a4>
 80094d6:	2b16      	cmp	r3, #22
 80094d8:	dc5d      	bgt.n	8009596 <_strtod_l+0x476>
 80094da:	4974      	ldr	r1, [pc, #464]	@ (80096ac <_strtod_l+0x58c>)
 80094dc:	4652      	mov	r2, sl
 80094de:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80094e2:	465b      	mov	r3, fp
 80094e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094e8:	f7f7 f866 	bl	80005b8 <__aeabi_dmul>
 80094ec:	e7d9      	b.n	80094a2 <_strtod_l+0x382>
 80094ee:	4b6f      	ldr	r3, [pc, #444]	@ (80096ac <_strtod_l+0x58c>)
 80094f0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094f4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80094f8:	f7f7 f85e 	bl	80005b8 <__aeabi_dmul>
 80094fc:	4682      	mov	sl, r0
 80094fe:	9808      	ldr	r0, [sp, #32]
 8009500:	468b      	mov	fp, r1
 8009502:	f7f6 ffdf 	bl	80004c4 <__aeabi_ui2d>
 8009506:	4602      	mov	r2, r0
 8009508:	460b      	mov	r3, r1
 800950a:	4650      	mov	r0, sl
 800950c:	4659      	mov	r1, fp
 800950e:	f7f6 fe9d 	bl	800024c <__adddf3>
 8009512:	2d0f      	cmp	r5, #15
 8009514:	4682      	mov	sl, r0
 8009516:	468b      	mov	fp, r1
 8009518:	ddd7      	ble.n	80094ca <_strtod_l+0x3aa>
 800951a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800951c:	1b2c      	subs	r4, r5, r4
 800951e:	441c      	add	r4, r3
 8009520:	2c00      	cmp	r4, #0
 8009522:	f340 8096 	ble.w	8009652 <_strtod_l+0x532>
 8009526:	f014 030f 	ands.w	r3, r4, #15
 800952a:	d00a      	beq.n	8009542 <_strtod_l+0x422>
 800952c:	495f      	ldr	r1, [pc, #380]	@ (80096ac <_strtod_l+0x58c>)
 800952e:	4652      	mov	r2, sl
 8009530:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009534:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009538:	465b      	mov	r3, fp
 800953a:	f7f7 f83d 	bl	80005b8 <__aeabi_dmul>
 800953e:	4682      	mov	sl, r0
 8009540:	468b      	mov	fp, r1
 8009542:	f034 040f 	bics.w	r4, r4, #15
 8009546:	d073      	beq.n	8009630 <_strtod_l+0x510>
 8009548:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800954c:	dd48      	ble.n	80095e0 <_strtod_l+0x4c0>
 800954e:	2400      	movs	r4, #0
 8009550:	46a0      	mov	r8, r4
 8009552:	46a1      	mov	r9, r4
 8009554:	940a      	str	r4, [sp, #40]	@ 0x28
 8009556:	2322      	movs	r3, #34	@ 0x22
 8009558:	f04f 0a00 	mov.w	sl, #0
 800955c:	9a05      	ldr	r2, [sp, #20]
 800955e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80096a4 <_strtod_l+0x584>
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009566:	2b00      	cmp	r3, #0
 8009568:	f43f ae13 	beq.w	8009192 <_strtod_l+0x72>
 800956c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800956e:	9805      	ldr	r0, [sp, #20]
 8009570:	f7ff f94c 	bl	800880c <_Bfree>
 8009574:	4649      	mov	r1, r9
 8009576:	9805      	ldr	r0, [sp, #20]
 8009578:	f7ff f948 	bl	800880c <_Bfree>
 800957c:	4641      	mov	r1, r8
 800957e:	9805      	ldr	r0, [sp, #20]
 8009580:	f7ff f944 	bl	800880c <_Bfree>
 8009584:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009586:	9805      	ldr	r0, [sp, #20]
 8009588:	f7ff f940 	bl	800880c <_Bfree>
 800958c:	4621      	mov	r1, r4
 800958e:	9805      	ldr	r0, [sp, #20]
 8009590:	f7ff f93c 	bl	800880c <_Bfree>
 8009594:	e5fd      	b.n	8009192 <_strtod_l+0x72>
 8009596:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009598:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800959c:	4293      	cmp	r3, r2
 800959e:	dbbc      	blt.n	800951a <_strtod_l+0x3fa>
 80095a0:	4c42      	ldr	r4, [pc, #264]	@ (80096ac <_strtod_l+0x58c>)
 80095a2:	f1c5 050f 	rsb	r5, r5, #15
 80095a6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095aa:	4652      	mov	r2, sl
 80095ac:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095b0:	465b      	mov	r3, fp
 80095b2:	f7f7 f801 	bl	80005b8 <__aeabi_dmul>
 80095b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095b8:	1b5d      	subs	r5, r3, r5
 80095ba:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095be:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095c2:	e791      	b.n	80094e8 <_strtod_l+0x3c8>
 80095c4:	3316      	adds	r3, #22
 80095c6:	dba8      	blt.n	800951a <_strtod_l+0x3fa>
 80095c8:	4b38      	ldr	r3, [pc, #224]	@ (80096ac <_strtod_l+0x58c>)
 80095ca:	eba9 0808 	sub.w	r8, r9, r8
 80095ce:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095d2:	4650      	mov	r0, sl
 80095d4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095d8:	4659      	mov	r1, fp
 80095da:	f7f7 f917 	bl	800080c <__aeabi_ddiv>
 80095de:	e760      	b.n	80094a2 <_strtod_l+0x382>
 80095e0:	4b33      	ldr	r3, [pc, #204]	@ (80096b0 <_strtod_l+0x590>)
 80095e2:	4650      	mov	r0, sl
 80095e4:	9308      	str	r3, [sp, #32]
 80095e6:	2300      	movs	r3, #0
 80095e8:	4659      	mov	r1, fp
 80095ea:	461e      	mov	r6, r3
 80095ec:	1124      	asrs	r4, r4, #4
 80095ee:	2c01      	cmp	r4, #1
 80095f0:	dc21      	bgt.n	8009636 <_strtod_l+0x516>
 80095f2:	b10b      	cbz	r3, 80095f8 <_strtod_l+0x4d8>
 80095f4:	4682      	mov	sl, r0
 80095f6:	468b      	mov	fp, r1
 80095f8:	492d      	ldr	r1, [pc, #180]	@ (80096b0 <_strtod_l+0x590>)
 80095fa:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80095fe:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009602:	4652      	mov	r2, sl
 8009604:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009608:	465b      	mov	r3, fp
 800960a:	f7f6 ffd5 	bl	80005b8 <__aeabi_dmul>
 800960e:	4b25      	ldr	r3, [pc, #148]	@ (80096a4 <_strtod_l+0x584>)
 8009610:	460a      	mov	r2, r1
 8009612:	400b      	ands	r3, r1
 8009614:	4927      	ldr	r1, [pc, #156]	@ (80096b4 <_strtod_l+0x594>)
 8009616:	4682      	mov	sl, r0
 8009618:	428b      	cmp	r3, r1
 800961a:	d898      	bhi.n	800954e <_strtod_l+0x42e>
 800961c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009620:	428b      	cmp	r3, r1
 8009622:	bf86      	itte	hi
 8009624:	f04f 3aff 	movhi.w	sl, #4294967295
 8009628:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80096b8 <_strtod_l+0x598>
 800962c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009630:	2300      	movs	r3, #0
 8009632:	9308      	str	r3, [sp, #32]
 8009634:	e07a      	b.n	800972c <_strtod_l+0x60c>
 8009636:	07e2      	lsls	r2, r4, #31
 8009638:	d505      	bpl.n	8009646 <_strtod_l+0x526>
 800963a:	9b08      	ldr	r3, [sp, #32]
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7f6 ffba 	bl	80005b8 <__aeabi_dmul>
 8009644:	2301      	movs	r3, #1
 8009646:	9a08      	ldr	r2, [sp, #32]
 8009648:	3601      	adds	r6, #1
 800964a:	3208      	adds	r2, #8
 800964c:	1064      	asrs	r4, r4, #1
 800964e:	9208      	str	r2, [sp, #32]
 8009650:	e7cd      	b.n	80095ee <_strtod_l+0x4ce>
 8009652:	d0ed      	beq.n	8009630 <_strtod_l+0x510>
 8009654:	4264      	negs	r4, r4
 8009656:	f014 020f 	ands.w	r2, r4, #15
 800965a:	d00a      	beq.n	8009672 <_strtod_l+0x552>
 800965c:	4b13      	ldr	r3, [pc, #76]	@ (80096ac <_strtod_l+0x58c>)
 800965e:	4650      	mov	r0, sl
 8009660:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009664:	4659      	mov	r1, fp
 8009666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800966a:	f7f7 f8cf 	bl	800080c <__aeabi_ddiv>
 800966e:	4682      	mov	sl, r0
 8009670:	468b      	mov	fp, r1
 8009672:	1124      	asrs	r4, r4, #4
 8009674:	d0dc      	beq.n	8009630 <_strtod_l+0x510>
 8009676:	2c1f      	cmp	r4, #31
 8009678:	dd20      	ble.n	80096bc <_strtod_l+0x59c>
 800967a:	2400      	movs	r4, #0
 800967c:	46a0      	mov	r8, r4
 800967e:	46a1      	mov	r9, r4
 8009680:	940a      	str	r4, [sp, #40]	@ 0x28
 8009682:	2322      	movs	r3, #34	@ 0x22
 8009684:	9a05      	ldr	r2, [sp, #20]
 8009686:	f04f 0a00 	mov.w	sl, #0
 800968a:	f04f 0b00 	mov.w	fp, #0
 800968e:	6013      	str	r3, [r2, #0]
 8009690:	e768      	b.n	8009564 <_strtod_l+0x444>
 8009692:	bf00      	nop
 8009694:	0800bad7 	.word	0x0800bad7
 8009698:	0800bcec 	.word	0x0800bcec
 800969c:	0800bacf 	.word	0x0800bacf
 80096a0:	0800bb06 	.word	0x0800bb06
 80096a4:	7ff00000 	.word	0x7ff00000
 80096a8:	0800be95 	.word	0x0800be95
 80096ac:	0800bc20 	.word	0x0800bc20
 80096b0:	0800bbf8 	.word	0x0800bbf8
 80096b4:	7ca00000 	.word	0x7ca00000
 80096b8:	7fefffff 	.word	0x7fefffff
 80096bc:	f014 0310 	ands.w	r3, r4, #16
 80096c0:	bf18      	it	ne
 80096c2:	236a      	movne	r3, #106	@ 0x6a
 80096c4:	4650      	mov	r0, sl
 80096c6:	9308      	str	r3, [sp, #32]
 80096c8:	4659      	mov	r1, fp
 80096ca:	2300      	movs	r3, #0
 80096cc:	4ea9      	ldr	r6, [pc, #676]	@ (8009974 <_strtod_l+0x854>)
 80096ce:	07e2      	lsls	r2, r4, #31
 80096d0:	d504      	bpl.n	80096dc <_strtod_l+0x5bc>
 80096d2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096d6:	f7f6 ff6f 	bl	80005b8 <__aeabi_dmul>
 80096da:	2301      	movs	r3, #1
 80096dc:	1064      	asrs	r4, r4, #1
 80096de:	f106 0608 	add.w	r6, r6, #8
 80096e2:	d1f4      	bne.n	80096ce <_strtod_l+0x5ae>
 80096e4:	b10b      	cbz	r3, 80096ea <_strtod_l+0x5ca>
 80096e6:	4682      	mov	sl, r0
 80096e8:	468b      	mov	fp, r1
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	b1b3      	cbz	r3, 800971c <_strtod_l+0x5fc>
 80096ee:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80096f2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	4659      	mov	r1, fp
 80096fa:	dd0f      	ble.n	800971c <_strtod_l+0x5fc>
 80096fc:	2b1f      	cmp	r3, #31
 80096fe:	dd57      	ble.n	80097b0 <_strtod_l+0x690>
 8009700:	2b34      	cmp	r3, #52	@ 0x34
 8009702:	bfd8      	it	le
 8009704:	f04f 33ff 	movle.w	r3, #4294967295
 8009708:	f04f 0a00 	mov.w	sl, #0
 800970c:	bfcf      	iteee	gt
 800970e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009712:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009716:	4093      	lslle	r3, r2
 8009718:	ea03 0b01 	andle.w	fp, r3, r1
 800971c:	2200      	movs	r2, #0
 800971e:	2300      	movs	r3, #0
 8009720:	4650      	mov	r0, sl
 8009722:	4659      	mov	r1, fp
 8009724:	f7f7 f9b0 	bl	8000a88 <__aeabi_dcmpeq>
 8009728:	2800      	cmp	r0, #0
 800972a:	d1a6      	bne.n	800967a <_strtod_l+0x55a>
 800972c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800972e:	463a      	mov	r2, r7
 8009730:	9300      	str	r3, [sp, #0]
 8009732:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009734:	462b      	mov	r3, r5
 8009736:	9805      	ldr	r0, [sp, #20]
 8009738:	f7ff f8d0 	bl	80088dc <__s2b>
 800973c:	900a      	str	r0, [sp, #40]	@ 0x28
 800973e:	2800      	cmp	r0, #0
 8009740:	f43f af05 	beq.w	800954e <_strtod_l+0x42e>
 8009744:	2400      	movs	r4, #0
 8009746:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009748:	eba9 0308 	sub.w	r3, r9, r8
 800974c:	2a00      	cmp	r2, #0
 800974e:	bfa8      	it	ge
 8009750:	2300      	movge	r3, #0
 8009752:	46a0      	mov	r8, r4
 8009754:	9312      	str	r3, [sp, #72]	@ 0x48
 8009756:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800975a:	9316      	str	r3, [sp, #88]	@ 0x58
 800975c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800975e:	9805      	ldr	r0, [sp, #20]
 8009760:	6859      	ldr	r1, [r3, #4]
 8009762:	f7ff f813 	bl	800878c <_Balloc>
 8009766:	4681      	mov	r9, r0
 8009768:	2800      	cmp	r0, #0
 800976a:	f43f aef4 	beq.w	8009556 <_strtod_l+0x436>
 800976e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009770:	300c      	adds	r0, #12
 8009772:	691a      	ldr	r2, [r3, #16]
 8009774:	f103 010c 	add.w	r1, r3, #12
 8009778:	3202      	adds	r2, #2
 800977a:	0092      	lsls	r2, r2, #2
 800977c:	f7fe f8a5 	bl	80078ca <memcpy>
 8009780:	ab1c      	add	r3, sp, #112	@ 0x70
 8009782:	9301      	str	r3, [sp, #4]
 8009784:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009786:	9300      	str	r3, [sp, #0]
 8009788:	4652      	mov	r2, sl
 800978a:	465b      	mov	r3, fp
 800978c:	9805      	ldr	r0, [sp, #20]
 800978e:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009792:	f7ff fbd5 	bl	8008f40 <__d2b>
 8009796:	901a      	str	r0, [sp, #104]	@ 0x68
 8009798:	2800      	cmp	r0, #0
 800979a:	f43f aedc 	beq.w	8009556 <_strtod_l+0x436>
 800979e:	2101      	movs	r1, #1
 80097a0:	9805      	ldr	r0, [sp, #20]
 80097a2:	f7ff f931 	bl	8008a08 <__i2b>
 80097a6:	4680      	mov	r8, r0
 80097a8:	b948      	cbnz	r0, 80097be <_strtod_l+0x69e>
 80097aa:	f04f 0800 	mov.w	r8, #0
 80097ae:	e6d2      	b.n	8009556 <_strtod_l+0x436>
 80097b0:	f04f 32ff 	mov.w	r2, #4294967295
 80097b4:	fa02 f303 	lsl.w	r3, r2, r3
 80097b8:	ea03 0a0a 	and.w	sl, r3, sl
 80097bc:	e7ae      	b.n	800971c <_strtod_l+0x5fc>
 80097be:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097c0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	bfab      	itete	ge
 80097c6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097c8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097ca:	18ef      	addge	r7, r5, r3
 80097cc:	1b5e      	sublt	r6, r3, r5
 80097ce:	9b08      	ldr	r3, [sp, #32]
 80097d0:	bfa8      	it	ge
 80097d2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097d4:	eba5 0503 	sub.w	r5, r5, r3
 80097d8:	4415      	add	r5, r2
 80097da:	4b67      	ldr	r3, [pc, #412]	@ (8009978 <_strtod_l+0x858>)
 80097dc:	f105 35ff 	add.w	r5, r5, #4294967295
 80097e0:	bfb8      	it	lt
 80097e2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80097e4:	429d      	cmp	r5, r3
 80097e6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80097ea:	da50      	bge.n	800988e <_strtod_l+0x76e>
 80097ec:	1b5b      	subs	r3, r3, r5
 80097ee:	2b1f      	cmp	r3, #31
 80097f0:	f04f 0101 	mov.w	r1, #1
 80097f4:	eba2 0203 	sub.w	r2, r2, r3
 80097f8:	dc3d      	bgt.n	8009876 <_strtod_l+0x756>
 80097fa:	fa01 f303 	lsl.w	r3, r1, r3
 80097fe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009800:	2300      	movs	r3, #0
 8009802:	9310      	str	r3, [sp, #64]	@ 0x40
 8009804:	18bd      	adds	r5, r7, r2
 8009806:	9b08      	ldr	r3, [sp, #32]
 8009808:	42af      	cmp	r7, r5
 800980a:	4416      	add	r6, r2
 800980c:	441e      	add	r6, r3
 800980e:	463b      	mov	r3, r7
 8009810:	bfa8      	it	ge
 8009812:	462b      	movge	r3, r5
 8009814:	42b3      	cmp	r3, r6
 8009816:	bfa8      	it	ge
 8009818:	4633      	movge	r3, r6
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfc2      	ittt	gt
 800981e:	1aed      	subgt	r5, r5, r3
 8009820:	1af6      	subgt	r6, r6, r3
 8009822:	1aff      	subgt	r7, r7, r3
 8009824:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009826:	2b00      	cmp	r3, #0
 8009828:	dd16      	ble.n	8009858 <_strtod_l+0x738>
 800982a:	4641      	mov	r1, r8
 800982c:	461a      	mov	r2, r3
 800982e:	9805      	ldr	r0, [sp, #20]
 8009830:	f7ff f9a8 	bl	8008b84 <__pow5mult>
 8009834:	4680      	mov	r8, r0
 8009836:	2800      	cmp	r0, #0
 8009838:	d0b7      	beq.n	80097aa <_strtod_l+0x68a>
 800983a:	4601      	mov	r1, r0
 800983c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800983e:	9805      	ldr	r0, [sp, #20]
 8009840:	f7ff f8f8 	bl	8008a34 <__multiply>
 8009844:	900e      	str	r0, [sp, #56]	@ 0x38
 8009846:	2800      	cmp	r0, #0
 8009848:	f43f ae85 	beq.w	8009556 <_strtod_l+0x436>
 800984c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	f7fe ffdc 	bl	800880c <_Bfree>
 8009854:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009856:	931a      	str	r3, [sp, #104]	@ 0x68
 8009858:	2d00      	cmp	r5, #0
 800985a:	dc1d      	bgt.n	8009898 <_strtod_l+0x778>
 800985c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800985e:	2b00      	cmp	r3, #0
 8009860:	dd23      	ble.n	80098aa <_strtod_l+0x78a>
 8009862:	4649      	mov	r1, r9
 8009864:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009866:	9805      	ldr	r0, [sp, #20]
 8009868:	f7ff f98c 	bl	8008b84 <__pow5mult>
 800986c:	4681      	mov	r9, r0
 800986e:	b9e0      	cbnz	r0, 80098aa <_strtod_l+0x78a>
 8009870:	f04f 0900 	mov.w	r9, #0
 8009874:	e66f      	b.n	8009556 <_strtod_l+0x436>
 8009876:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800987a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800987e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009882:	35e2      	adds	r5, #226	@ 0xe2
 8009884:	fa01 f305 	lsl.w	r3, r1, r5
 8009888:	9310      	str	r3, [sp, #64]	@ 0x40
 800988a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800988c:	e7ba      	b.n	8009804 <_strtod_l+0x6e4>
 800988e:	2300      	movs	r3, #0
 8009890:	9310      	str	r3, [sp, #64]	@ 0x40
 8009892:	2301      	movs	r3, #1
 8009894:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009896:	e7b5      	b.n	8009804 <_strtod_l+0x6e4>
 8009898:	462a      	mov	r2, r5
 800989a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800989c:	9805      	ldr	r0, [sp, #20]
 800989e:	f7ff f9cb 	bl	8008c38 <__lshift>
 80098a2:	901a      	str	r0, [sp, #104]	@ 0x68
 80098a4:	2800      	cmp	r0, #0
 80098a6:	d1d9      	bne.n	800985c <_strtod_l+0x73c>
 80098a8:	e655      	b.n	8009556 <_strtod_l+0x436>
 80098aa:	2e00      	cmp	r6, #0
 80098ac:	dd07      	ble.n	80098be <_strtod_l+0x79e>
 80098ae:	4649      	mov	r1, r9
 80098b0:	4632      	mov	r2, r6
 80098b2:	9805      	ldr	r0, [sp, #20]
 80098b4:	f7ff f9c0 	bl	8008c38 <__lshift>
 80098b8:	4681      	mov	r9, r0
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d0d8      	beq.n	8009870 <_strtod_l+0x750>
 80098be:	2f00      	cmp	r7, #0
 80098c0:	dd08      	ble.n	80098d4 <_strtod_l+0x7b4>
 80098c2:	4641      	mov	r1, r8
 80098c4:	463a      	mov	r2, r7
 80098c6:	9805      	ldr	r0, [sp, #20]
 80098c8:	f7ff f9b6 	bl	8008c38 <__lshift>
 80098cc:	4680      	mov	r8, r0
 80098ce:	2800      	cmp	r0, #0
 80098d0:	f43f ae41 	beq.w	8009556 <_strtod_l+0x436>
 80098d4:	464a      	mov	r2, r9
 80098d6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098d8:	9805      	ldr	r0, [sp, #20]
 80098da:	f7ff fa35 	bl	8008d48 <__mdiff>
 80098de:	4604      	mov	r4, r0
 80098e0:	2800      	cmp	r0, #0
 80098e2:	f43f ae38 	beq.w	8009556 <_strtod_l+0x436>
 80098e6:	68c3      	ldr	r3, [r0, #12]
 80098e8:	4641      	mov	r1, r8
 80098ea:	930f      	str	r3, [sp, #60]	@ 0x3c
 80098ec:	2300      	movs	r3, #0
 80098ee:	60c3      	str	r3, [r0, #12]
 80098f0:	f7ff fa0e 	bl	8008d10 <__mcmp>
 80098f4:	2800      	cmp	r0, #0
 80098f6:	da45      	bge.n	8009984 <_strtod_l+0x864>
 80098f8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098fa:	ea53 030a 	orrs.w	r3, r3, sl
 80098fe:	d16b      	bne.n	80099d8 <_strtod_l+0x8b8>
 8009900:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009904:	2b00      	cmp	r3, #0
 8009906:	d167      	bne.n	80099d8 <_strtod_l+0x8b8>
 8009908:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800990c:	0d1b      	lsrs	r3, r3, #20
 800990e:	051b      	lsls	r3, r3, #20
 8009910:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009914:	d960      	bls.n	80099d8 <_strtod_l+0x8b8>
 8009916:	6963      	ldr	r3, [r4, #20]
 8009918:	b913      	cbnz	r3, 8009920 <_strtod_l+0x800>
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	2b01      	cmp	r3, #1
 800991e:	dd5b      	ble.n	80099d8 <_strtod_l+0x8b8>
 8009920:	4621      	mov	r1, r4
 8009922:	2201      	movs	r2, #1
 8009924:	9805      	ldr	r0, [sp, #20]
 8009926:	f7ff f987 	bl	8008c38 <__lshift>
 800992a:	4641      	mov	r1, r8
 800992c:	4604      	mov	r4, r0
 800992e:	f7ff f9ef 	bl	8008d10 <__mcmp>
 8009932:	2800      	cmp	r0, #0
 8009934:	dd50      	ble.n	80099d8 <_strtod_l+0x8b8>
 8009936:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800993a:	9a08      	ldr	r2, [sp, #32]
 800993c:	0d1b      	lsrs	r3, r3, #20
 800993e:	051b      	lsls	r3, r3, #20
 8009940:	2a00      	cmp	r2, #0
 8009942:	d06a      	beq.n	8009a1a <_strtod_l+0x8fa>
 8009944:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009948:	d867      	bhi.n	8009a1a <_strtod_l+0x8fa>
 800994a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800994e:	f67f ae98 	bls.w	8009682 <_strtod_l+0x562>
 8009952:	4650      	mov	r0, sl
 8009954:	4659      	mov	r1, fp
 8009956:	4b09      	ldr	r3, [pc, #36]	@ (800997c <_strtod_l+0x85c>)
 8009958:	2200      	movs	r2, #0
 800995a:	f7f6 fe2d 	bl	80005b8 <__aeabi_dmul>
 800995e:	4b08      	ldr	r3, [pc, #32]	@ (8009980 <_strtod_l+0x860>)
 8009960:	4682      	mov	sl, r0
 8009962:	400b      	ands	r3, r1
 8009964:	468b      	mov	fp, r1
 8009966:	2b00      	cmp	r3, #0
 8009968:	f47f ae00 	bne.w	800956c <_strtod_l+0x44c>
 800996c:	2322      	movs	r3, #34	@ 0x22
 800996e:	9a05      	ldr	r2, [sp, #20]
 8009970:	6013      	str	r3, [r2, #0]
 8009972:	e5fb      	b.n	800956c <_strtod_l+0x44c>
 8009974:	0800bd18 	.word	0x0800bd18
 8009978:	fffffc02 	.word	0xfffffc02
 800997c:	39500000 	.word	0x39500000
 8009980:	7ff00000 	.word	0x7ff00000
 8009984:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009988:	d165      	bne.n	8009a56 <_strtod_l+0x936>
 800998a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800998c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009990:	b35a      	cbz	r2, 80099ea <_strtod_l+0x8ca>
 8009992:	4a99      	ldr	r2, [pc, #612]	@ (8009bf8 <_strtod_l+0xad8>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d12b      	bne.n	80099f0 <_strtod_l+0x8d0>
 8009998:	9b08      	ldr	r3, [sp, #32]
 800999a:	4651      	mov	r1, sl
 800999c:	b303      	cbz	r3, 80099e0 <_strtod_l+0x8c0>
 800999e:	465a      	mov	r2, fp
 80099a0:	4b96      	ldr	r3, [pc, #600]	@ (8009bfc <_strtod_l+0xadc>)
 80099a2:	4013      	ands	r3, r2
 80099a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099a8:	f04f 32ff 	mov.w	r2, #4294967295
 80099ac:	d81b      	bhi.n	80099e6 <_strtod_l+0x8c6>
 80099ae:	0d1b      	lsrs	r3, r3, #20
 80099b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099b4:	fa02 f303 	lsl.w	r3, r2, r3
 80099b8:	4299      	cmp	r1, r3
 80099ba:	d119      	bne.n	80099f0 <_strtod_l+0x8d0>
 80099bc:	4b90      	ldr	r3, [pc, #576]	@ (8009c00 <_strtod_l+0xae0>)
 80099be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099c0:	429a      	cmp	r2, r3
 80099c2:	d102      	bne.n	80099ca <_strtod_l+0x8aa>
 80099c4:	3101      	adds	r1, #1
 80099c6:	f43f adc6 	beq.w	8009556 <_strtod_l+0x436>
 80099ca:	f04f 0a00 	mov.w	sl, #0
 80099ce:	4b8b      	ldr	r3, [pc, #556]	@ (8009bfc <_strtod_l+0xadc>)
 80099d0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099d2:	401a      	ands	r2, r3
 80099d4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d1b9      	bne.n	8009952 <_strtod_l+0x832>
 80099de:	e5c5      	b.n	800956c <_strtod_l+0x44c>
 80099e0:	f04f 33ff 	mov.w	r3, #4294967295
 80099e4:	e7e8      	b.n	80099b8 <_strtod_l+0x898>
 80099e6:	4613      	mov	r3, r2
 80099e8:	e7e6      	b.n	80099b8 <_strtod_l+0x898>
 80099ea:	ea53 030a 	orrs.w	r3, r3, sl
 80099ee:	d0a2      	beq.n	8009936 <_strtod_l+0x816>
 80099f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80099f2:	b1db      	cbz	r3, 8009a2c <_strtod_l+0x90c>
 80099f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099f6:	4213      	tst	r3, r2
 80099f8:	d0ee      	beq.n	80099d8 <_strtod_l+0x8b8>
 80099fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80099fc:	4650      	mov	r0, sl
 80099fe:	4659      	mov	r1, fp
 8009a00:	9a08      	ldr	r2, [sp, #32]
 8009a02:	b1bb      	cbz	r3, 8009a34 <_strtod_l+0x914>
 8009a04:	f7ff fb68 	bl	80090d8 <sulp>
 8009a08:	4602      	mov	r2, r0
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a10:	f7f6 fc1c 	bl	800024c <__adddf3>
 8009a14:	4682      	mov	sl, r0
 8009a16:	468b      	mov	fp, r1
 8009a18:	e7de      	b.n	80099d8 <_strtod_l+0x8b8>
 8009a1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a22:	f04f 3aff 	mov.w	sl, #4294967295
 8009a26:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a2a:	e7d5      	b.n	80099d8 <_strtod_l+0x8b8>
 8009a2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a2e:	ea13 0f0a 	tst.w	r3, sl
 8009a32:	e7e1      	b.n	80099f8 <_strtod_l+0x8d8>
 8009a34:	f7ff fb50 	bl	80090d8 <sulp>
 8009a38:	4602      	mov	r2, r0
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a40:	f7f6 fc02 	bl	8000248 <__aeabi_dsub>
 8009a44:	2200      	movs	r2, #0
 8009a46:	2300      	movs	r3, #0
 8009a48:	4682      	mov	sl, r0
 8009a4a:	468b      	mov	fp, r1
 8009a4c:	f7f7 f81c 	bl	8000a88 <__aeabi_dcmpeq>
 8009a50:	2800      	cmp	r0, #0
 8009a52:	d0c1      	beq.n	80099d8 <_strtod_l+0x8b8>
 8009a54:	e615      	b.n	8009682 <_strtod_l+0x562>
 8009a56:	4641      	mov	r1, r8
 8009a58:	4620      	mov	r0, r4
 8009a5a:	f7ff fac9 	bl	8008ff0 <__ratio>
 8009a5e:	2200      	movs	r2, #0
 8009a60:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a64:	4606      	mov	r6, r0
 8009a66:	460f      	mov	r7, r1
 8009a68:	f7f7 f822 	bl	8000ab0 <__aeabi_dcmple>
 8009a6c:	2800      	cmp	r0, #0
 8009a6e:	d06d      	beq.n	8009b4c <_strtod_l+0xa2c>
 8009a70:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d178      	bne.n	8009b68 <_strtod_l+0xa48>
 8009a76:	f1ba 0f00 	cmp.w	sl, #0
 8009a7a:	d156      	bne.n	8009b2a <_strtod_l+0xa0a>
 8009a7c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d158      	bne.n	8009b38 <_strtod_l+0xa18>
 8009a86:	2200      	movs	r2, #0
 8009a88:	4630      	mov	r0, r6
 8009a8a:	4639      	mov	r1, r7
 8009a8c:	4b5d      	ldr	r3, [pc, #372]	@ (8009c04 <_strtod_l+0xae4>)
 8009a8e:	f7f7 f805 	bl	8000a9c <__aeabi_dcmplt>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	d157      	bne.n	8009b46 <_strtod_l+0xa26>
 8009a96:	4630      	mov	r0, r6
 8009a98:	4639      	mov	r1, r7
 8009a9a:	2200      	movs	r2, #0
 8009a9c:	4b5a      	ldr	r3, [pc, #360]	@ (8009c08 <_strtod_l+0xae8>)
 8009a9e:	f7f6 fd8b 	bl	80005b8 <__aeabi_dmul>
 8009aa2:	4606      	mov	r6, r0
 8009aa4:	460f      	mov	r7, r1
 8009aa6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009aaa:	9606      	str	r6, [sp, #24]
 8009aac:	9307      	str	r3, [sp, #28]
 8009aae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ab2:	4d52      	ldr	r5, [pc, #328]	@ (8009bfc <_strtod_l+0xadc>)
 8009ab4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aba:	401d      	ands	r5, r3
 8009abc:	4b53      	ldr	r3, [pc, #332]	@ (8009c0c <_strtod_l+0xaec>)
 8009abe:	429d      	cmp	r5, r3
 8009ac0:	f040 80aa 	bne.w	8009c18 <_strtod_l+0xaf8>
 8009ac4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ac6:	4650      	mov	r0, sl
 8009ac8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009acc:	4659      	mov	r1, fp
 8009ace:	f7ff f9cf 	bl	8008e70 <__ulp>
 8009ad2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ad6:	f7f6 fd6f 	bl	80005b8 <__aeabi_dmul>
 8009ada:	4652      	mov	r2, sl
 8009adc:	465b      	mov	r3, fp
 8009ade:	f7f6 fbb5 	bl	800024c <__adddf3>
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4945      	ldr	r1, [pc, #276]	@ (8009bfc <_strtod_l+0xadc>)
 8009ae6:	4a4a      	ldr	r2, [pc, #296]	@ (8009c10 <_strtod_l+0xaf0>)
 8009ae8:	4019      	ands	r1, r3
 8009aea:	4291      	cmp	r1, r2
 8009aec:	4682      	mov	sl, r0
 8009aee:	d942      	bls.n	8009b76 <_strtod_l+0xa56>
 8009af0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009af2:	4b43      	ldr	r3, [pc, #268]	@ (8009c00 <_strtod_l+0xae0>)
 8009af4:	429a      	cmp	r2, r3
 8009af6:	d103      	bne.n	8009b00 <_strtod_l+0x9e0>
 8009af8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009afa:	3301      	adds	r3, #1
 8009afc:	f43f ad2b 	beq.w	8009556 <_strtod_l+0x436>
 8009b00:	f04f 3aff 	mov.w	sl, #4294967295
 8009b04:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009c00 <_strtod_l+0xae0>
 8009b08:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b0a:	9805      	ldr	r0, [sp, #20]
 8009b0c:	f7fe fe7e 	bl	800880c <_Bfree>
 8009b10:	4649      	mov	r1, r9
 8009b12:	9805      	ldr	r0, [sp, #20]
 8009b14:	f7fe fe7a 	bl	800880c <_Bfree>
 8009b18:	4641      	mov	r1, r8
 8009b1a:	9805      	ldr	r0, [sp, #20]
 8009b1c:	f7fe fe76 	bl	800880c <_Bfree>
 8009b20:	4621      	mov	r1, r4
 8009b22:	9805      	ldr	r0, [sp, #20]
 8009b24:	f7fe fe72 	bl	800880c <_Bfree>
 8009b28:	e618      	b.n	800975c <_strtod_l+0x63c>
 8009b2a:	f1ba 0f01 	cmp.w	sl, #1
 8009b2e:	d103      	bne.n	8009b38 <_strtod_l+0xa18>
 8009b30:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	f43f ada5 	beq.w	8009682 <_strtod_l+0x562>
 8009b38:	2200      	movs	r2, #0
 8009b3a:	4b36      	ldr	r3, [pc, #216]	@ (8009c14 <_strtod_l+0xaf4>)
 8009b3c:	2600      	movs	r6, #0
 8009b3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b42:	4f30      	ldr	r7, [pc, #192]	@ (8009c04 <_strtod_l+0xae4>)
 8009b44:	e7b3      	b.n	8009aae <_strtod_l+0x98e>
 8009b46:	2600      	movs	r6, #0
 8009b48:	4f2f      	ldr	r7, [pc, #188]	@ (8009c08 <_strtod_l+0xae8>)
 8009b4a:	e7ac      	b.n	8009aa6 <_strtod_l+0x986>
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	4639      	mov	r1, r7
 8009b50:	4b2d      	ldr	r3, [pc, #180]	@ (8009c08 <_strtod_l+0xae8>)
 8009b52:	2200      	movs	r2, #0
 8009b54:	f7f6 fd30 	bl	80005b8 <__aeabi_dmul>
 8009b58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b5a:	4606      	mov	r6, r0
 8009b5c:	460f      	mov	r7, r1
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d0a1      	beq.n	8009aa6 <_strtod_l+0x986>
 8009b62:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b66:	e7a2      	b.n	8009aae <_strtod_l+0x98e>
 8009b68:	2200      	movs	r2, #0
 8009b6a:	4b26      	ldr	r3, [pc, #152]	@ (8009c04 <_strtod_l+0xae4>)
 8009b6c:	4616      	mov	r6, r2
 8009b6e:	461f      	mov	r7, r3
 8009b70:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b74:	e79b      	b.n	8009aae <_strtod_l+0x98e>
 8009b76:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b7a:	9b08      	ldr	r3, [sp, #32]
 8009b7c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d1c1      	bne.n	8009b08 <_strtod_l+0x9e8>
 8009b84:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009b88:	0d1b      	lsrs	r3, r3, #20
 8009b8a:	051b      	lsls	r3, r3, #20
 8009b8c:	429d      	cmp	r5, r3
 8009b8e:	d1bb      	bne.n	8009b08 <_strtod_l+0x9e8>
 8009b90:	4630      	mov	r0, r6
 8009b92:	4639      	mov	r1, r7
 8009b94:	f7f7 f858 	bl	8000c48 <__aeabi_d2lz>
 8009b98:	f7f6 fce0 	bl	800055c <__aeabi_l2d>
 8009b9c:	4602      	mov	r2, r0
 8009b9e:	460b      	mov	r3, r1
 8009ba0:	4630      	mov	r0, r6
 8009ba2:	4639      	mov	r1, r7
 8009ba4:	f7f6 fb50 	bl	8000248 <__aeabi_dsub>
 8009ba8:	460b      	mov	r3, r1
 8009baa:	4602      	mov	r2, r0
 8009bac:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bb0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bb6:	ea46 060a 	orr.w	r6, r6, sl
 8009bba:	431e      	orrs	r6, r3
 8009bbc:	d069      	beq.n	8009c92 <_strtod_l+0xb72>
 8009bbe:	a30a      	add	r3, pc, #40	@ (adr r3, 8009be8 <_strtod_l+0xac8>)
 8009bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc4:	f7f6 ff6a 	bl	8000a9c <__aeabi_dcmplt>
 8009bc8:	2800      	cmp	r0, #0
 8009bca:	f47f accf 	bne.w	800956c <_strtod_l+0x44c>
 8009bce:	a308      	add	r3, pc, #32	@ (adr r3, 8009bf0 <_strtod_l+0xad0>)
 8009bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bd8:	f7f6 ff7e 	bl	8000ad8 <__aeabi_dcmpgt>
 8009bdc:	2800      	cmp	r0, #0
 8009bde:	d093      	beq.n	8009b08 <_strtod_l+0x9e8>
 8009be0:	e4c4      	b.n	800956c <_strtod_l+0x44c>
 8009be2:	bf00      	nop
 8009be4:	f3af 8000 	nop.w
 8009be8:	94a03595 	.word	0x94a03595
 8009bec:	3fdfffff 	.word	0x3fdfffff
 8009bf0:	35afe535 	.word	0x35afe535
 8009bf4:	3fe00000 	.word	0x3fe00000
 8009bf8:	000fffff 	.word	0x000fffff
 8009bfc:	7ff00000 	.word	0x7ff00000
 8009c00:	7fefffff 	.word	0x7fefffff
 8009c04:	3ff00000 	.word	0x3ff00000
 8009c08:	3fe00000 	.word	0x3fe00000
 8009c0c:	7fe00000 	.word	0x7fe00000
 8009c10:	7c9fffff 	.word	0x7c9fffff
 8009c14:	bff00000 	.word	0xbff00000
 8009c18:	9b08      	ldr	r3, [sp, #32]
 8009c1a:	b323      	cbz	r3, 8009c66 <_strtod_l+0xb46>
 8009c1c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c20:	d821      	bhi.n	8009c66 <_strtod_l+0xb46>
 8009c22:	a327      	add	r3, pc, #156	@ (adr r3, 8009cc0 <_strtod_l+0xba0>)
 8009c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c28:	4630      	mov	r0, r6
 8009c2a:	4639      	mov	r1, r7
 8009c2c:	f7f6 ff40 	bl	8000ab0 <__aeabi_dcmple>
 8009c30:	b1a0      	cbz	r0, 8009c5c <_strtod_l+0xb3c>
 8009c32:	4639      	mov	r1, r7
 8009c34:	4630      	mov	r0, r6
 8009c36:	f7f6 ff97 	bl	8000b68 <__aeabi_d2uiz>
 8009c3a:	2801      	cmp	r0, #1
 8009c3c:	bf38      	it	cc
 8009c3e:	2001      	movcc	r0, #1
 8009c40:	f7f6 fc40 	bl	80004c4 <__aeabi_ui2d>
 8009c44:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c46:	4606      	mov	r6, r0
 8009c48:	460f      	mov	r7, r1
 8009c4a:	b9fb      	cbnz	r3, 8009c8c <_strtod_l+0xb6c>
 8009c4c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c50:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c52:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c54:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c58:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c5c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c5e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c62:	1b5b      	subs	r3, r3, r5
 8009c64:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c6a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c6e:	f7ff f8ff 	bl	8008e70 <__ulp>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	4650      	mov	r0, sl
 8009c78:	4659      	mov	r1, fp
 8009c7a:	f7f6 fc9d 	bl	80005b8 <__aeabi_dmul>
 8009c7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009c82:	f7f6 fae3 	bl	800024c <__adddf3>
 8009c86:	4682      	mov	sl, r0
 8009c88:	468b      	mov	fp, r1
 8009c8a:	e776      	b.n	8009b7a <_strtod_l+0xa5a>
 8009c8c:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009c90:	e7e0      	b.n	8009c54 <_strtod_l+0xb34>
 8009c92:	a30d      	add	r3, pc, #52	@ (adr r3, 8009cc8 <_strtod_l+0xba8>)
 8009c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c98:	f7f6 ff00 	bl	8000a9c <__aeabi_dcmplt>
 8009c9c:	e79e      	b.n	8009bdc <_strtod_l+0xabc>
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ca2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009ca4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009ca6:	6013      	str	r3, [r2, #0]
 8009ca8:	f7ff ba77 	b.w	800919a <_strtod_l+0x7a>
 8009cac:	2a65      	cmp	r2, #101	@ 0x65
 8009cae:	f43f ab6e 	beq.w	800938e <_strtod_l+0x26e>
 8009cb2:	2a45      	cmp	r2, #69	@ 0x45
 8009cb4:	f43f ab6b 	beq.w	800938e <_strtod_l+0x26e>
 8009cb8:	2301      	movs	r3, #1
 8009cba:	f7ff bba6 	b.w	800940a <_strtod_l+0x2ea>
 8009cbe:	bf00      	nop
 8009cc0:	ffc00000 	.word	0xffc00000
 8009cc4:	41dfffff 	.word	0x41dfffff
 8009cc8:	94a03595 	.word	0x94a03595
 8009ccc:	3fcfffff 	.word	0x3fcfffff

08009cd0 <_strtod_r>:
 8009cd0:	4b01      	ldr	r3, [pc, #4]	@ (8009cd8 <_strtod_r+0x8>)
 8009cd2:	f7ff ba25 	b.w	8009120 <_strtod_l>
 8009cd6:	bf00      	nop
 8009cd8:	2000006c 	.word	0x2000006c

08009cdc <_strtol_l.constprop.0>:
 8009cdc:	2b24      	cmp	r3, #36	@ 0x24
 8009cde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ce2:	4686      	mov	lr, r0
 8009ce4:	4690      	mov	r8, r2
 8009ce6:	d801      	bhi.n	8009cec <_strtol_l.constprop.0+0x10>
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d106      	bne.n	8009cfa <_strtol_l.constprop.0+0x1e>
 8009cec:	f7fd fdb2 	bl	8007854 <__errno>
 8009cf0:	2316      	movs	r3, #22
 8009cf2:	6003      	str	r3, [r0, #0]
 8009cf4:	2000      	movs	r0, #0
 8009cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009cfa:	460d      	mov	r5, r1
 8009cfc:	4833      	ldr	r0, [pc, #204]	@ (8009dcc <_strtol_l.constprop.0+0xf0>)
 8009cfe:	462a      	mov	r2, r5
 8009d00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d04:	5d06      	ldrb	r6, [r0, r4]
 8009d06:	f016 0608 	ands.w	r6, r6, #8
 8009d0a:	d1f8      	bne.n	8009cfe <_strtol_l.constprop.0+0x22>
 8009d0c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d0e:	d12d      	bne.n	8009d6c <_strtol_l.constprop.0+0x90>
 8009d10:	2601      	movs	r6, #1
 8009d12:	782c      	ldrb	r4, [r5, #0]
 8009d14:	1c95      	adds	r5, r2, #2
 8009d16:	f033 0210 	bics.w	r2, r3, #16
 8009d1a:	d109      	bne.n	8009d30 <_strtol_l.constprop.0+0x54>
 8009d1c:	2c30      	cmp	r4, #48	@ 0x30
 8009d1e:	d12a      	bne.n	8009d76 <_strtol_l.constprop.0+0x9a>
 8009d20:	782a      	ldrb	r2, [r5, #0]
 8009d22:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d26:	2a58      	cmp	r2, #88	@ 0x58
 8009d28:	d125      	bne.n	8009d76 <_strtol_l.constprop.0+0x9a>
 8009d2a:	2310      	movs	r3, #16
 8009d2c:	786c      	ldrb	r4, [r5, #1]
 8009d2e:	3502      	adds	r5, #2
 8009d30:	2200      	movs	r2, #0
 8009d32:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d36:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d3a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d3e:	4610      	mov	r0, r2
 8009d40:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d44:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d48:	2f09      	cmp	r7, #9
 8009d4a:	d81b      	bhi.n	8009d84 <_strtol_l.constprop.0+0xa8>
 8009d4c:	463c      	mov	r4, r7
 8009d4e:	42a3      	cmp	r3, r4
 8009d50:	dd27      	ble.n	8009da2 <_strtol_l.constprop.0+0xc6>
 8009d52:	1c57      	adds	r7, r2, #1
 8009d54:	d007      	beq.n	8009d66 <_strtol_l.constprop.0+0x8a>
 8009d56:	4581      	cmp	r9, r0
 8009d58:	d320      	bcc.n	8009d9c <_strtol_l.constprop.0+0xc0>
 8009d5a:	d101      	bne.n	8009d60 <_strtol_l.constprop.0+0x84>
 8009d5c:	45a2      	cmp	sl, r4
 8009d5e:	db1d      	blt.n	8009d9c <_strtol_l.constprop.0+0xc0>
 8009d60:	2201      	movs	r2, #1
 8009d62:	fb00 4003 	mla	r0, r0, r3, r4
 8009d66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d6a:	e7eb      	b.n	8009d44 <_strtol_l.constprop.0+0x68>
 8009d6c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d6e:	bf04      	itt	eq
 8009d70:	782c      	ldrbeq	r4, [r5, #0]
 8009d72:	1c95      	addeq	r5, r2, #2
 8009d74:	e7cf      	b.n	8009d16 <_strtol_l.constprop.0+0x3a>
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d1da      	bne.n	8009d30 <_strtol_l.constprop.0+0x54>
 8009d7a:	2c30      	cmp	r4, #48	@ 0x30
 8009d7c:	bf0c      	ite	eq
 8009d7e:	2308      	moveq	r3, #8
 8009d80:	230a      	movne	r3, #10
 8009d82:	e7d5      	b.n	8009d30 <_strtol_l.constprop.0+0x54>
 8009d84:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009d88:	2f19      	cmp	r7, #25
 8009d8a:	d801      	bhi.n	8009d90 <_strtol_l.constprop.0+0xb4>
 8009d8c:	3c37      	subs	r4, #55	@ 0x37
 8009d8e:	e7de      	b.n	8009d4e <_strtol_l.constprop.0+0x72>
 8009d90:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009d94:	2f19      	cmp	r7, #25
 8009d96:	d804      	bhi.n	8009da2 <_strtol_l.constprop.0+0xc6>
 8009d98:	3c57      	subs	r4, #87	@ 0x57
 8009d9a:	e7d8      	b.n	8009d4e <_strtol_l.constprop.0+0x72>
 8009d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8009da0:	e7e1      	b.n	8009d66 <_strtol_l.constprop.0+0x8a>
 8009da2:	1c53      	adds	r3, r2, #1
 8009da4:	d108      	bne.n	8009db8 <_strtol_l.constprop.0+0xdc>
 8009da6:	2322      	movs	r3, #34	@ 0x22
 8009da8:	4660      	mov	r0, ip
 8009daa:	f8ce 3000 	str.w	r3, [lr]
 8009dae:	f1b8 0f00 	cmp.w	r8, #0
 8009db2:	d0a0      	beq.n	8009cf6 <_strtol_l.constprop.0+0x1a>
 8009db4:	1e69      	subs	r1, r5, #1
 8009db6:	e006      	b.n	8009dc6 <_strtol_l.constprop.0+0xea>
 8009db8:	b106      	cbz	r6, 8009dbc <_strtol_l.constprop.0+0xe0>
 8009dba:	4240      	negs	r0, r0
 8009dbc:	f1b8 0f00 	cmp.w	r8, #0
 8009dc0:	d099      	beq.n	8009cf6 <_strtol_l.constprop.0+0x1a>
 8009dc2:	2a00      	cmp	r2, #0
 8009dc4:	d1f6      	bne.n	8009db4 <_strtol_l.constprop.0+0xd8>
 8009dc6:	f8c8 1000 	str.w	r1, [r8]
 8009dca:	e794      	b.n	8009cf6 <_strtol_l.constprop.0+0x1a>
 8009dcc:	0800bd41 	.word	0x0800bd41

08009dd0 <_strtol_r>:
 8009dd0:	f7ff bf84 	b.w	8009cdc <_strtol_l.constprop.0>

08009dd4 <__ssputs_r>:
 8009dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dd8:	461f      	mov	r7, r3
 8009dda:	688e      	ldr	r6, [r1, #8]
 8009ddc:	4682      	mov	sl, r0
 8009dde:	42be      	cmp	r6, r7
 8009de0:	460c      	mov	r4, r1
 8009de2:	4690      	mov	r8, r2
 8009de4:	680b      	ldr	r3, [r1, #0]
 8009de6:	d82d      	bhi.n	8009e44 <__ssputs_r+0x70>
 8009de8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009dec:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009df0:	d026      	beq.n	8009e40 <__ssputs_r+0x6c>
 8009df2:	6965      	ldr	r5, [r4, #20]
 8009df4:	6909      	ldr	r1, [r1, #16]
 8009df6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009dfa:	eba3 0901 	sub.w	r9, r3, r1
 8009dfe:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e02:	1c7b      	adds	r3, r7, #1
 8009e04:	444b      	add	r3, r9
 8009e06:	106d      	asrs	r5, r5, #1
 8009e08:	429d      	cmp	r5, r3
 8009e0a:	bf38      	it	cc
 8009e0c:	461d      	movcc	r5, r3
 8009e0e:	0553      	lsls	r3, r2, #21
 8009e10:	d527      	bpl.n	8009e62 <__ssputs_r+0x8e>
 8009e12:	4629      	mov	r1, r5
 8009e14:	f7fe fc2e 	bl	8008674 <_malloc_r>
 8009e18:	4606      	mov	r6, r0
 8009e1a:	b360      	cbz	r0, 8009e76 <__ssputs_r+0xa2>
 8009e1c:	464a      	mov	r2, r9
 8009e1e:	6921      	ldr	r1, [r4, #16]
 8009e20:	f7fd fd53 	bl	80078ca <memcpy>
 8009e24:	89a3      	ldrh	r3, [r4, #12]
 8009e26:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e2e:	81a3      	strh	r3, [r4, #12]
 8009e30:	6126      	str	r6, [r4, #16]
 8009e32:	444e      	add	r6, r9
 8009e34:	6026      	str	r6, [r4, #0]
 8009e36:	463e      	mov	r6, r7
 8009e38:	6165      	str	r5, [r4, #20]
 8009e3a:	eba5 0509 	sub.w	r5, r5, r9
 8009e3e:	60a5      	str	r5, [r4, #8]
 8009e40:	42be      	cmp	r6, r7
 8009e42:	d900      	bls.n	8009e46 <__ssputs_r+0x72>
 8009e44:	463e      	mov	r6, r7
 8009e46:	4632      	mov	r2, r6
 8009e48:	4641      	mov	r1, r8
 8009e4a:	6820      	ldr	r0, [r4, #0]
 8009e4c:	f000 f9c2 	bl	800a1d4 <memmove>
 8009e50:	2000      	movs	r0, #0
 8009e52:	68a3      	ldr	r3, [r4, #8]
 8009e54:	1b9b      	subs	r3, r3, r6
 8009e56:	60a3      	str	r3, [r4, #8]
 8009e58:	6823      	ldr	r3, [r4, #0]
 8009e5a:	4433      	add	r3, r6
 8009e5c:	6023      	str	r3, [r4, #0]
 8009e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e62:	462a      	mov	r2, r5
 8009e64:	f000 fd75 	bl	800a952 <_realloc_r>
 8009e68:	4606      	mov	r6, r0
 8009e6a:	2800      	cmp	r0, #0
 8009e6c:	d1e0      	bne.n	8009e30 <__ssputs_r+0x5c>
 8009e6e:	4650      	mov	r0, sl
 8009e70:	6921      	ldr	r1, [r4, #16]
 8009e72:	f7fe fb8d 	bl	8008590 <_free_r>
 8009e76:	230c      	movs	r3, #12
 8009e78:	f8ca 3000 	str.w	r3, [sl]
 8009e7c:	89a3      	ldrh	r3, [r4, #12]
 8009e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8009e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009e86:	81a3      	strh	r3, [r4, #12]
 8009e88:	e7e9      	b.n	8009e5e <__ssputs_r+0x8a>
	...

08009e8c <_svfiprintf_r>:
 8009e8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e90:	4698      	mov	r8, r3
 8009e92:	898b      	ldrh	r3, [r1, #12]
 8009e94:	4607      	mov	r7, r0
 8009e96:	061b      	lsls	r3, r3, #24
 8009e98:	460d      	mov	r5, r1
 8009e9a:	4614      	mov	r4, r2
 8009e9c:	b09d      	sub	sp, #116	@ 0x74
 8009e9e:	d510      	bpl.n	8009ec2 <_svfiprintf_r+0x36>
 8009ea0:	690b      	ldr	r3, [r1, #16]
 8009ea2:	b973      	cbnz	r3, 8009ec2 <_svfiprintf_r+0x36>
 8009ea4:	2140      	movs	r1, #64	@ 0x40
 8009ea6:	f7fe fbe5 	bl	8008674 <_malloc_r>
 8009eaa:	6028      	str	r0, [r5, #0]
 8009eac:	6128      	str	r0, [r5, #16]
 8009eae:	b930      	cbnz	r0, 8009ebe <_svfiprintf_r+0x32>
 8009eb0:	230c      	movs	r3, #12
 8009eb2:	603b      	str	r3, [r7, #0]
 8009eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8009eb8:	b01d      	add	sp, #116	@ 0x74
 8009eba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ebe:	2340      	movs	r3, #64	@ 0x40
 8009ec0:	616b      	str	r3, [r5, #20]
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ec6:	2320      	movs	r3, #32
 8009ec8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ecc:	2330      	movs	r3, #48	@ 0x30
 8009ece:	f04f 0901 	mov.w	r9, #1
 8009ed2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ed6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a070 <_svfiprintf_r+0x1e4>
 8009eda:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ede:	4623      	mov	r3, r4
 8009ee0:	469a      	mov	sl, r3
 8009ee2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ee6:	b10a      	cbz	r2, 8009eec <_svfiprintf_r+0x60>
 8009ee8:	2a25      	cmp	r2, #37	@ 0x25
 8009eea:	d1f9      	bne.n	8009ee0 <_svfiprintf_r+0x54>
 8009eec:	ebba 0b04 	subs.w	fp, sl, r4
 8009ef0:	d00b      	beq.n	8009f0a <_svfiprintf_r+0x7e>
 8009ef2:	465b      	mov	r3, fp
 8009ef4:	4622      	mov	r2, r4
 8009ef6:	4629      	mov	r1, r5
 8009ef8:	4638      	mov	r0, r7
 8009efa:	f7ff ff6b 	bl	8009dd4 <__ssputs_r>
 8009efe:	3001      	adds	r0, #1
 8009f00:	f000 80a7 	beq.w	800a052 <_svfiprintf_r+0x1c6>
 8009f04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f06:	445a      	add	r2, fp
 8009f08:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f0a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	f000 809f 	beq.w	800a052 <_svfiprintf_r+0x1c6>
 8009f14:	2300      	movs	r3, #0
 8009f16:	f04f 32ff 	mov.w	r2, #4294967295
 8009f1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f1e:	f10a 0a01 	add.w	sl, sl, #1
 8009f22:	9304      	str	r3, [sp, #16]
 8009f24:	9307      	str	r3, [sp, #28]
 8009f26:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f2a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f2c:	4654      	mov	r4, sl
 8009f2e:	2205      	movs	r2, #5
 8009f30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f34:	484e      	ldr	r0, [pc, #312]	@ (800a070 <_svfiprintf_r+0x1e4>)
 8009f36:	f7fd fcba 	bl	80078ae <memchr>
 8009f3a:	9a04      	ldr	r2, [sp, #16]
 8009f3c:	b9d8      	cbnz	r0, 8009f76 <_svfiprintf_r+0xea>
 8009f3e:	06d0      	lsls	r0, r2, #27
 8009f40:	bf44      	itt	mi
 8009f42:	2320      	movmi	r3, #32
 8009f44:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f48:	0711      	lsls	r1, r2, #28
 8009f4a:	bf44      	itt	mi
 8009f4c:	232b      	movmi	r3, #43	@ 0x2b
 8009f4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f52:	f89a 3000 	ldrb.w	r3, [sl]
 8009f56:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f58:	d015      	beq.n	8009f86 <_svfiprintf_r+0xfa>
 8009f5a:	4654      	mov	r4, sl
 8009f5c:	2000      	movs	r0, #0
 8009f5e:	f04f 0c0a 	mov.w	ip, #10
 8009f62:	9a07      	ldr	r2, [sp, #28]
 8009f64:	4621      	mov	r1, r4
 8009f66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f6a:	3b30      	subs	r3, #48	@ 0x30
 8009f6c:	2b09      	cmp	r3, #9
 8009f6e:	d94b      	bls.n	800a008 <_svfiprintf_r+0x17c>
 8009f70:	b1b0      	cbz	r0, 8009fa0 <_svfiprintf_r+0x114>
 8009f72:	9207      	str	r2, [sp, #28]
 8009f74:	e014      	b.n	8009fa0 <_svfiprintf_r+0x114>
 8009f76:	eba0 0308 	sub.w	r3, r0, r8
 8009f7a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f7e:	4313      	orrs	r3, r2
 8009f80:	46a2      	mov	sl, r4
 8009f82:	9304      	str	r3, [sp, #16]
 8009f84:	e7d2      	b.n	8009f2c <_svfiprintf_r+0xa0>
 8009f86:	9b03      	ldr	r3, [sp, #12]
 8009f88:	1d19      	adds	r1, r3, #4
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	9103      	str	r1, [sp, #12]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	bfbb      	ittet	lt
 8009f92:	425b      	neglt	r3, r3
 8009f94:	f042 0202 	orrlt.w	r2, r2, #2
 8009f98:	9307      	strge	r3, [sp, #28]
 8009f9a:	9307      	strlt	r3, [sp, #28]
 8009f9c:	bfb8      	it	lt
 8009f9e:	9204      	strlt	r2, [sp, #16]
 8009fa0:	7823      	ldrb	r3, [r4, #0]
 8009fa2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fa4:	d10a      	bne.n	8009fbc <_svfiprintf_r+0x130>
 8009fa6:	7863      	ldrb	r3, [r4, #1]
 8009fa8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009faa:	d132      	bne.n	800a012 <_svfiprintf_r+0x186>
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	3402      	adds	r4, #2
 8009fb0:	1d1a      	adds	r2, r3, #4
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	9203      	str	r2, [sp, #12]
 8009fb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fba:	9305      	str	r3, [sp, #20]
 8009fbc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a074 <_svfiprintf_r+0x1e8>
 8009fc0:	2203      	movs	r2, #3
 8009fc2:	4650      	mov	r0, sl
 8009fc4:	7821      	ldrb	r1, [r4, #0]
 8009fc6:	f7fd fc72 	bl	80078ae <memchr>
 8009fca:	b138      	cbz	r0, 8009fdc <_svfiprintf_r+0x150>
 8009fcc:	2240      	movs	r2, #64	@ 0x40
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	eba0 000a 	sub.w	r0, r0, sl
 8009fd4:	4082      	lsls	r2, r0
 8009fd6:	4313      	orrs	r3, r2
 8009fd8:	3401      	adds	r4, #1
 8009fda:	9304      	str	r3, [sp, #16]
 8009fdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fe0:	2206      	movs	r2, #6
 8009fe2:	4825      	ldr	r0, [pc, #148]	@ (800a078 <_svfiprintf_r+0x1ec>)
 8009fe4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009fe8:	f7fd fc61 	bl	80078ae <memchr>
 8009fec:	2800      	cmp	r0, #0
 8009fee:	d036      	beq.n	800a05e <_svfiprintf_r+0x1d2>
 8009ff0:	4b22      	ldr	r3, [pc, #136]	@ (800a07c <_svfiprintf_r+0x1f0>)
 8009ff2:	bb1b      	cbnz	r3, 800a03c <_svfiprintf_r+0x1b0>
 8009ff4:	9b03      	ldr	r3, [sp, #12]
 8009ff6:	3307      	adds	r3, #7
 8009ff8:	f023 0307 	bic.w	r3, r3, #7
 8009ffc:	3308      	adds	r3, #8
 8009ffe:	9303      	str	r3, [sp, #12]
 800a000:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a002:	4433      	add	r3, r6
 800a004:	9309      	str	r3, [sp, #36]	@ 0x24
 800a006:	e76a      	b.n	8009ede <_svfiprintf_r+0x52>
 800a008:	460c      	mov	r4, r1
 800a00a:	2001      	movs	r0, #1
 800a00c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a010:	e7a8      	b.n	8009f64 <_svfiprintf_r+0xd8>
 800a012:	2300      	movs	r3, #0
 800a014:	f04f 0c0a 	mov.w	ip, #10
 800a018:	4619      	mov	r1, r3
 800a01a:	3401      	adds	r4, #1
 800a01c:	9305      	str	r3, [sp, #20]
 800a01e:	4620      	mov	r0, r4
 800a020:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a024:	3a30      	subs	r2, #48	@ 0x30
 800a026:	2a09      	cmp	r2, #9
 800a028:	d903      	bls.n	800a032 <_svfiprintf_r+0x1a6>
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d0c6      	beq.n	8009fbc <_svfiprintf_r+0x130>
 800a02e:	9105      	str	r1, [sp, #20]
 800a030:	e7c4      	b.n	8009fbc <_svfiprintf_r+0x130>
 800a032:	4604      	mov	r4, r0
 800a034:	2301      	movs	r3, #1
 800a036:	fb0c 2101 	mla	r1, ip, r1, r2
 800a03a:	e7f0      	b.n	800a01e <_svfiprintf_r+0x192>
 800a03c:	ab03      	add	r3, sp, #12
 800a03e:	9300      	str	r3, [sp, #0]
 800a040:	462a      	mov	r2, r5
 800a042:	4638      	mov	r0, r7
 800a044:	4b0e      	ldr	r3, [pc, #56]	@ (800a080 <_svfiprintf_r+0x1f4>)
 800a046:	a904      	add	r1, sp, #16
 800a048:	f7fc fcbe 	bl	80069c8 <_printf_float>
 800a04c:	1c42      	adds	r2, r0, #1
 800a04e:	4606      	mov	r6, r0
 800a050:	d1d6      	bne.n	800a000 <_svfiprintf_r+0x174>
 800a052:	89ab      	ldrh	r3, [r5, #12]
 800a054:	065b      	lsls	r3, r3, #25
 800a056:	f53f af2d 	bmi.w	8009eb4 <_svfiprintf_r+0x28>
 800a05a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a05c:	e72c      	b.n	8009eb8 <_svfiprintf_r+0x2c>
 800a05e:	ab03      	add	r3, sp, #12
 800a060:	9300      	str	r3, [sp, #0]
 800a062:	462a      	mov	r2, r5
 800a064:	4638      	mov	r0, r7
 800a066:	4b06      	ldr	r3, [pc, #24]	@ (800a080 <_svfiprintf_r+0x1f4>)
 800a068:	a904      	add	r1, sp, #16
 800a06a:	f7fc ff4b 	bl	8006f04 <_printf_i>
 800a06e:	e7ed      	b.n	800a04c <_svfiprintf_r+0x1c0>
 800a070:	0800be41 	.word	0x0800be41
 800a074:	0800be47 	.word	0x0800be47
 800a078:	0800be4b 	.word	0x0800be4b
 800a07c:	080069c9 	.word	0x080069c9
 800a080:	08009dd5 	.word	0x08009dd5

0800a084 <__sflush_r>:
 800a084:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a08a:	0716      	lsls	r6, r2, #28
 800a08c:	4605      	mov	r5, r0
 800a08e:	460c      	mov	r4, r1
 800a090:	d454      	bmi.n	800a13c <__sflush_r+0xb8>
 800a092:	684b      	ldr	r3, [r1, #4]
 800a094:	2b00      	cmp	r3, #0
 800a096:	dc02      	bgt.n	800a09e <__sflush_r+0x1a>
 800a098:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	dd48      	ble.n	800a130 <__sflush_r+0xac>
 800a09e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a0:	2e00      	cmp	r6, #0
 800a0a2:	d045      	beq.n	800a130 <__sflush_r+0xac>
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0aa:	682f      	ldr	r7, [r5, #0]
 800a0ac:	6a21      	ldr	r1, [r4, #32]
 800a0ae:	602b      	str	r3, [r5, #0]
 800a0b0:	d030      	beq.n	800a114 <__sflush_r+0x90>
 800a0b2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0b4:	89a3      	ldrh	r3, [r4, #12]
 800a0b6:	0759      	lsls	r1, r3, #29
 800a0b8:	d505      	bpl.n	800a0c6 <__sflush_r+0x42>
 800a0ba:	6863      	ldr	r3, [r4, #4]
 800a0bc:	1ad2      	subs	r2, r2, r3
 800a0be:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0c0:	b10b      	cbz	r3, 800a0c6 <__sflush_r+0x42>
 800a0c2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0c4:	1ad2      	subs	r2, r2, r3
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	4628      	mov	r0, r5
 800a0ca:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0cc:	6a21      	ldr	r1, [r4, #32]
 800a0ce:	47b0      	blx	r6
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	89a3      	ldrh	r3, [r4, #12]
 800a0d4:	d106      	bne.n	800a0e4 <__sflush_r+0x60>
 800a0d6:	6829      	ldr	r1, [r5, #0]
 800a0d8:	291d      	cmp	r1, #29
 800a0da:	d82b      	bhi.n	800a134 <__sflush_r+0xb0>
 800a0dc:	4a28      	ldr	r2, [pc, #160]	@ (800a180 <__sflush_r+0xfc>)
 800a0de:	410a      	asrs	r2, r1
 800a0e0:	07d6      	lsls	r6, r2, #31
 800a0e2:	d427      	bmi.n	800a134 <__sflush_r+0xb0>
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	6062      	str	r2, [r4, #4]
 800a0e8:	6922      	ldr	r2, [r4, #16]
 800a0ea:	04d9      	lsls	r1, r3, #19
 800a0ec:	6022      	str	r2, [r4, #0]
 800a0ee:	d504      	bpl.n	800a0fa <__sflush_r+0x76>
 800a0f0:	1c42      	adds	r2, r0, #1
 800a0f2:	d101      	bne.n	800a0f8 <__sflush_r+0x74>
 800a0f4:	682b      	ldr	r3, [r5, #0]
 800a0f6:	b903      	cbnz	r3, 800a0fa <__sflush_r+0x76>
 800a0f8:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0fa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0fc:	602f      	str	r7, [r5, #0]
 800a0fe:	b1b9      	cbz	r1, 800a130 <__sflush_r+0xac>
 800a100:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a104:	4299      	cmp	r1, r3
 800a106:	d002      	beq.n	800a10e <__sflush_r+0x8a>
 800a108:	4628      	mov	r0, r5
 800a10a:	f7fe fa41 	bl	8008590 <_free_r>
 800a10e:	2300      	movs	r3, #0
 800a110:	6363      	str	r3, [r4, #52]	@ 0x34
 800a112:	e00d      	b.n	800a130 <__sflush_r+0xac>
 800a114:	2301      	movs	r3, #1
 800a116:	4628      	mov	r0, r5
 800a118:	47b0      	blx	r6
 800a11a:	4602      	mov	r2, r0
 800a11c:	1c50      	adds	r0, r2, #1
 800a11e:	d1c9      	bne.n	800a0b4 <__sflush_r+0x30>
 800a120:	682b      	ldr	r3, [r5, #0]
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0c6      	beq.n	800a0b4 <__sflush_r+0x30>
 800a126:	2b1d      	cmp	r3, #29
 800a128:	d001      	beq.n	800a12e <__sflush_r+0xaa>
 800a12a:	2b16      	cmp	r3, #22
 800a12c:	d11d      	bne.n	800a16a <__sflush_r+0xe6>
 800a12e:	602f      	str	r7, [r5, #0]
 800a130:	2000      	movs	r0, #0
 800a132:	e021      	b.n	800a178 <__sflush_r+0xf4>
 800a134:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a138:	b21b      	sxth	r3, r3
 800a13a:	e01a      	b.n	800a172 <__sflush_r+0xee>
 800a13c:	690f      	ldr	r7, [r1, #16]
 800a13e:	2f00      	cmp	r7, #0
 800a140:	d0f6      	beq.n	800a130 <__sflush_r+0xac>
 800a142:	0793      	lsls	r3, r2, #30
 800a144:	bf18      	it	ne
 800a146:	2300      	movne	r3, #0
 800a148:	680e      	ldr	r6, [r1, #0]
 800a14a:	bf08      	it	eq
 800a14c:	694b      	ldreq	r3, [r1, #20]
 800a14e:	1bf6      	subs	r6, r6, r7
 800a150:	600f      	str	r7, [r1, #0]
 800a152:	608b      	str	r3, [r1, #8]
 800a154:	2e00      	cmp	r6, #0
 800a156:	ddeb      	ble.n	800a130 <__sflush_r+0xac>
 800a158:	4633      	mov	r3, r6
 800a15a:	463a      	mov	r2, r7
 800a15c:	4628      	mov	r0, r5
 800a15e:	6a21      	ldr	r1, [r4, #32]
 800a160:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a164:	47e0      	blx	ip
 800a166:	2800      	cmp	r0, #0
 800a168:	dc07      	bgt.n	800a17a <__sflush_r+0xf6>
 800a16a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a16e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a172:	f04f 30ff 	mov.w	r0, #4294967295
 800a176:	81a3      	strh	r3, [r4, #12]
 800a178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a17a:	4407      	add	r7, r0
 800a17c:	1a36      	subs	r6, r6, r0
 800a17e:	e7e9      	b.n	800a154 <__sflush_r+0xd0>
 800a180:	dfbffffe 	.word	0xdfbffffe

0800a184 <_fflush_r>:
 800a184:	b538      	push	{r3, r4, r5, lr}
 800a186:	690b      	ldr	r3, [r1, #16]
 800a188:	4605      	mov	r5, r0
 800a18a:	460c      	mov	r4, r1
 800a18c:	b913      	cbnz	r3, 800a194 <_fflush_r+0x10>
 800a18e:	2500      	movs	r5, #0
 800a190:	4628      	mov	r0, r5
 800a192:	bd38      	pop	{r3, r4, r5, pc}
 800a194:	b118      	cbz	r0, 800a19e <_fflush_r+0x1a>
 800a196:	6a03      	ldr	r3, [r0, #32]
 800a198:	b90b      	cbnz	r3, 800a19e <_fflush_r+0x1a>
 800a19a:	f7fd fa6f 	bl	800767c <__sinit>
 800a19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d0f3      	beq.n	800a18e <_fflush_r+0xa>
 800a1a6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1a8:	07d0      	lsls	r0, r2, #31
 800a1aa:	d404      	bmi.n	800a1b6 <_fflush_r+0x32>
 800a1ac:	0599      	lsls	r1, r3, #22
 800a1ae:	d402      	bmi.n	800a1b6 <_fflush_r+0x32>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1b2:	f7fd fb7a 	bl	80078aa <__retarget_lock_acquire_recursive>
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	4621      	mov	r1, r4
 800a1ba:	f7ff ff63 	bl	800a084 <__sflush_r>
 800a1be:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1c0:	4605      	mov	r5, r0
 800a1c2:	07da      	lsls	r2, r3, #31
 800a1c4:	d4e4      	bmi.n	800a190 <_fflush_r+0xc>
 800a1c6:	89a3      	ldrh	r3, [r4, #12]
 800a1c8:	059b      	lsls	r3, r3, #22
 800a1ca:	d4e1      	bmi.n	800a190 <_fflush_r+0xc>
 800a1cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ce:	f7fd fb6d 	bl	80078ac <__retarget_lock_release_recursive>
 800a1d2:	e7dd      	b.n	800a190 <_fflush_r+0xc>

0800a1d4 <memmove>:
 800a1d4:	4288      	cmp	r0, r1
 800a1d6:	b510      	push	{r4, lr}
 800a1d8:	eb01 0402 	add.w	r4, r1, r2
 800a1dc:	d902      	bls.n	800a1e4 <memmove+0x10>
 800a1de:	4284      	cmp	r4, r0
 800a1e0:	4623      	mov	r3, r4
 800a1e2:	d807      	bhi.n	800a1f4 <memmove+0x20>
 800a1e4:	1e43      	subs	r3, r0, #1
 800a1e6:	42a1      	cmp	r1, r4
 800a1e8:	d008      	beq.n	800a1fc <memmove+0x28>
 800a1ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a1ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a1f2:	e7f8      	b.n	800a1e6 <memmove+0x12>
 800a1f4:	4601      	mov	r1, r0
 800a1f6:	4402      	add	r2, r0
 800a1f8:	428a      	cmp	r2, r1
 800a1fa:	d100      	bne.n	800a1fe <memmove+0x2a>
 800a1fc:	bd10      	pop	{r4, pc}
 800a1fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a202:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a206:	e7f7      	b.n	800a1f8 <memmove+0x24>

0800a208 <strncmp>:
 800a208:	b510      	push	{r4, lr}
 800a20a:	b16a      	cbz	r2, 800a228 <strncmp+0x20>
 800a20c:	3901      	subs	r1, #1
 800a20e:	1884      	adds	r4, r0, r2
 800a210:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a214:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a218:	429a      	cmp	r2, r3
 800a21a:	d103      	bne.n	800a224 <strncmp+0x1c>
 800a21c:	42a0      	cmp	r0, r4
 800a21e:	d001      	beq.n	800a224 <strncmp+0x1c>
 800a220:	2a00      	cmp	r2, #0
 800a222:	d1f5      	bne.n	800a210 <strncmp+0x8>
 800a224:	1ad0      	subs	r0, r2, r3
 800a226:	bd10      	pop	{r4, pc}
 800a228:	4610      	mov	r0, r2
 800a22a:	e7fc      	b.n	800a226 <strncmp+0x1e>

0800a22c <_sbrk_r>:
 800a22c:	b538      	push	{r3, r4, r5, lr}
 800a22e:	2300      	movs	r3, #0
 800a230:	4d05      	ldr	r5, [pc, #20]	@ (800a248 <_sbrk_r+0x1c>)
 800a232:	4604      	mov	r4, r0
 800a234:	4608      	mov	r0, r1
 800a236:	602b      	str	r3, [r5, #0]
 800a238:	f7f7 fba8 	bl	800198c <_sbrk>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d102      	bne.n	800a246 <_sbrk_r+0x1a>
 800a240:	682b      	ldr	r3, [r5, #0]
 800a242:	b103      	cbz	r3, 800a246 <_sbrk_r+0x1a>
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	bd38      	pop	{r3, r4, r5, pc}
 800a248:	20002130 	.word	0x20002130

0800a24c <nan>:
 800a24c:	2000      	movs	r0, #0
 800a24e:	4901      	ldr	r1, [pc, #4]	@ (800a254 <nan+0x8>)
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	7ff80000 	.word	0x7ff80000

0800a258 <__assert_func>:
 800a258:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a25a:	4614      	mov	r4, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	4b09      	ldr	r3, [pc, #36]	@ (800a284 <__assert_func+0x2c>)
 800a260:	4605      	mov	r5, r0
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	68d8      	ldr	r0, [r3, #12]
 800a266:	b954      	cbnz	r4, 800a27e <__assert_func+0x26>
 800a268:	4b07      	ldr	r3, [pc, #28]	@ (800a288 <__assert_func+0x30>)
 800a26a:	461c      	mov	r4, r3
 800a26c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a270:	9100      	str	r1, [sp, #0]
 800a272:	462b      	mov	r3, r5
 800a274:	4905      	ldr	r1, [pc, #20]	@ (800a28c <__assert_func+0x34>)
 800a276:	f000 fba7 	bl	800a9c8 <fiprintf>
 800a27a:	f000 fbb7 	bl	800a9ec <abort>
 800a27e:	4b04      	ldr	r3, [pc, #16]	@ (800a290 <__assert_func+0x38>)
 800a280:	e7f4      	b.n	800a26c <__assert_func+0x14>
 800a282:	bf00      	nop
 800a284:	2000001c 	.word	0x2000001c
 800a288:	0800be95 	.word	0x0800be95
 800a28c:	0800be67 	.word	0x0800be67
 800a290:	0800be5a 	.word	0x0800be5a

0800a294 <_calloc_r>:
 800a294:	b570      	push	{r4, r5, r6, lr}
 800a296:	fba1 5402 	umull	r5, r4, r1, r2
 800a29a:	b93c      	cbnz	r4, 800a2ac <_calloc_r+0x18>
 800a29c:	4629      	mov	r1, r5
 800a29e:	f7fe f9e9 	bl	8008674 <_malloc_r>
 800a2a2:	4606      	mov	r6, r0
 800a2a4:	b928      	cbnz	r0, 800a2b2 <_calloc_r+0x1e>
 800a2a6:	2600      	movs	r6, #0
 800a2a8:	4630      	mov	r0, r6
 800a2aa:	bd70      	pop	{r4, r5, r6, pc}
 800a2ac:	220c      	movs	r2, #12
 800a2ae:	6002      	str	r2, [r0, #0]
 800a2b0:	e7f9      	b.n	800a2a6 <_calloc_r+0x12>
 800a2b2:	462a      	mov	r2, r5
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	f7fd fa7a 	bl	80077ae <memset>
 800a2ba:	e7f5      	b.n	800a2a8 <_calloc_r+0x14>

0800a2bc <rshift>:
 800a2bc:	6903      	ldr	r3, [r0, #16]
 800a2be:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2c2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2c6:	f100 0414 	add.w	r4, r0, #20
 800a2ca:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2ce:	dd46      	ble.n	800a35e <rshift+0xa2>
 800a2d0:	f011 011f 	ands.w	r1, r1, #31
 800a2d4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2d8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2dc:	d10c      	bne.n	800a2f8 <rshift+0x3c>
 800a2de:	4629      	mov	r1, r5
 800a2e0:	f100 0710 	add.w	r7, r0, #16
 800a2e4:	42b1      	cmp	r1, r6
 800a2e6:	d335      	bcc.n	800a354 <rshift+0x98>
 800a2e8:	1a9b      	subs	r3, r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	1eea      	subs	r2, r5, #3
 800a2ee:	4296      	cmp	r6, r2
 800a2f0:	bf38      	it	cc
 800a2f2:	2300      	movcc	r3, #0
 800a2f4:	4423      	add	r3, r4
 800a2f6:	e015      	b.n	800a324 <rshift+0x68>
 800a2f8:	46a1      	mov	r9, r4
 800a2fa:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2fe:	f1c1 0820 	rsb	r8, r1, #32
 800a302:	40cf      	lsrs	r7, r1
 800a304:	f105 0e04 	add.w	lr, r5, #4
 800a308:	4576      	cmp	r6, lr
 800a30a:	46f4      	mov	ip, lr
 800a30c:	d816      	bhi.n	800a33c <rshift+0x80>
 800a30e:	1a9a      	subs	r2, r3, r2
 800a310:	0092      	lsls	r2, r2, #2
 800a312:	3a04      	subs	r2, #4
 800a314:	3501      	adds	r5, #1
 800a316:	42ae      	cmp	r6, r5
 800a318:	bf38      	it	cc
 800a31a:	2200      	movcc	r2, #0
 800a31c:	18a3      	adds	r3, r4, r2
 800a31e:	50a7      	str	r7, [r4, r2]
 800a320:	b107      	cbz	r7, 800a324 <rshift+0x68>
 800a322:	3304      	adds	r3, #4
 800a324:	42a3      	cmp	r3, r4
 800a326:	eba3 0204 	sub.w	r2, r3, r4
 800a32a:	bf08      	it	eq
 800a32c:	2300      	moveq	r3, #0
 800a32e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a332:	6102      	str	r2, [r0, #16]
 800a334:	bf08      	it	eq
 800a336:	6143      	streq	r3, [r0, #20]
 800a338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a33c:	f8dc c000 	ldr.w	ip, [ip]
 800a340:	fa0c fc08 	lsl.w	ip, ip, r8
 800a344:	ea4c 0707 	orr.w	r7, ip, r7
 800a348:	f849 7b04 	str.w	r7, [r9], #4
 800a34c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a350:	40cf      	lsrs	r7, r1
 800a352:	e7d9      	b.n	800a308 <rshift+0x4c>
 800a354:	f851 cb04 	ldr.w	ip, [r1], #4
 800a358:	f847 cf04 	str.w	ip, [r7, #4]!
 800a35c:	e7c2      	b.n	800a2e4 <rshift+0x28>
 800a35e:	4623      	mov	r3, r4
 800a360:	e7e0      	b.n	800a324 <rshift+0x68>

0800a362 <__hexdig_fun>:
 800a362:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a366:	2b09      	cmp	r3, #9
 800a368:	d802      	bhi.n	800a370 <__hexdig_fun+0xe>
 800a36a:	3820      	subs	r0, #32
 800a36c:	b2c0      	uxtb	r0, r0
 800a36e:	4770      	bx	lr
 800a370:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a374:	2b05      	cmp	r3, #5
 800a376:	d801      	bhi.n	800a37c <__hexdig_fun+0x1a>
 800a378:	3847      	subs	r0, #71	@ 0x47
 800a37a:	e7f7      	b.n	800a36c <__hexdig_fun+0xa>
 800a37c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a380:	2b05      	cmp	r3, #5
 800a382:	d801      	bhi.n	800a388 <__hexdig_fun+0x26>
 800a384:	3827      	subs	r0, #39	@ 0x27
 800a386:	e7f1      	b.n	800a36c <__hexdig_fun+0xa>
 800a388:	2000      	movs	r0, #0
 800a38a:	4770      	bx	lr

0800a38c <__gethex>:
 800a38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a390:	468a      	mov	sl, r1
 800a392:	4690      	mov	r8, r2
 800a394:	b085      	sub	sp, #20
 800a396:	9302      	str	r3, [sp, #8]
 800a398:	680b      	ldr	r3, [r1, #0]
 800a39a:	9001      	str	r0, [sp, #4]
 800a39c:	1c9c      	adds	r4, r3, #2
 800a39e:	46a1      	mov	r9, r4
 800a3a0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a3a4:	2830      	cmp	r0, #48	@ 0x30
 800a3a6:	d0fa      	beq.n	800a39e <__gethex+0x12>
 800a3a8:	eba9 0303 	sub.w	r3, r9, r3
 800a3ac:	f1a3 0b02 	sub.w	fp, r3, #2
 800a3b0:	f7ff ffd7 	bl	800a362 <__hexdig_fun>
 800a3b4:	4605      	mov	r5, r0
 800a3b6:	2800      	cmp	r0, #0
 800a3b8:	d168      	bne.n	800a48c <__gethex+0x100>
 800a3ba:	2201      	movs	r2, #1
 800a3bc:	4648      	mov	r0, r9
 800a3be:	499f      	ldr	r1, [pc, #636]	@ (800a63c <__gethex+0x2b0>)
 800a3c0:	f7ff ff22 	bl	800a208 <strncmp>
 800a3c4:	4607      	mov	r7, r0
 800a3c6:	2800      	cmp	r0, #0
 800a3c8:	d167      	bne.n	800a49a <__gethex+0x10e>
 800a3ca:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3ce:	4626      	mov	r6, r4
 800a3d0:	f7ff ffc7 	bl	800a362 <__hexdig_fun>
 800a3d4:	2800      	cmp	r0, #0
 800a3d6:	d062      	beq.n	800a49e <__gethex+0x112>
 800a3d8:	4623      	mov	r3, r4
 800a3da:	7818      	ldrb	r0, [r3, #0]
 800a3dc:	4699      	mov	r9, r3
 800a3de:	2830      	cmp	r0, #48	@ 0x30
 800a3e0:	f103 0301 	add.w	r3, r3, #1
 800a3e4:	d0f9      	beq.n	800a3da <__gethex+0x4e>
 800a3e6:	f7ff ffbc 	bl	800a362 <__hexdig_fun>
 800a3ea:	fab0 f580 	clz	r5, r0
 800a3ee:	f04f 0b01 	mov.w	fp, #1
 800a3f2:	096d      	lsrs	r5, r5, #5
 800a3f4:	464a      	mov	r2, r9
 800a3f6:	4616      	mov	r6, r2
 800a3f8:	7830      	ldrb	r0, [r6, #0]
 800a3fa:	3201      	adds	r2, #1
 800a3fc:	f7ff ffb1 	bl	800a362 <__hexdig_fun>
 800a400:	2800      	cmp	r0, #0
 800a402:	d1f8      	bne.n	800a3f6 <__gethex+0x6a>
 800a404:	2201      	movs	r2, #1
 800a406:	4630      	mov	r0, r6
 800a408:	498c      	ldr	r1, [pc, #560]	@ (800a63c <__gethex+0x2b0>)
 800a40a:	f7ff fefd 	bl	800a208 <strncmp>
 800a40e:	2800      	cmp	r0, #0
 800a410:	d13f      	bne.n	800a492 <__gethex+0x106>
 800a412:	b944      	cbnz	r4, 800a426 <__gethex+0x9a>
 800a414:	1c74      	adds	r4, r6, #1
 800a416:	4622      	mov	r2, r4
 800a418:	4616      	mov	r6, r2
 800a41a:	7830      	ldrb	r0, [r6, #0]
 800a41c:	3201      	adds	r2, #1
 800a41e:	f7ff ffa0 	bl	800a362 <__hexdig_fun>
 800a422:	2800      	cmp	r0, #0
 800a424:	d1f8      	bne.n	800a418 <__gethex+0x8c>
 800a426:	1ba4      	subs	r4, r4, r6
 800a428:	00a7      	lsls	r7, r4, #2
 800a42a:	7833      	ldrb	r3, [r6, #0]
 800a42c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a430:	2b50      	cmp	r3, #80	@ 0x50
 800a432:	d13e      	bne.n	800a4b2 <__gethex+0x126>
 800a434:	7873      	ldrb	r3, [r6, #1]
 800a436:	2b2b      	cmp	r3, #43	@ 0x2b
 800a438:	d033      	beq.n	800a4a2 <__gethex+0x116>
 800a43a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a43c:	d034      	beq.n	800a4a8 <__gethex+0x11c>
 800a43e:	2400      	movs	r4, #0
 800a440:	1c71      	adds	r1, r6, #1
 800a442:	7808      	ldrb	r0, [r1, #0]
 800a444:	f7ff ff8d 	bl	800a362 <__hexdig_fun>
 800a448:	1e43      	subs	r3, r0, #1
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b18      	cmp	r3, #24
 800a44e:	d830      	bhi.n	800a4b2 <__gethex+0x126>
 800a450:	f1a0 0210 	sub.w	r2, r0, #16
 800a454:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a458:	f7ff ff83 	bl	800a362 <__hexdig_fun>
 800a45c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a460:	fa5f fc8c 	uxtb.w	ip, ip
 800a464:	f1bc 0f18 	cmp.w	ip, #24
 800a468:	f04f 030a 	mov.w	r3, #10
 800a46c:	d91e      	bls.n	800a4ac <__gethex+0x120>
 800a46e:	b104      	cbz	r4, 800a472 <__gethex+0xe6>
 800a470:	4252      	negs	r2, r2
 800a472:	4417      	add	r7, r2
 800a474:	f8ca 1000 	str.w	r1, [sl]
 800a478:	b1ed      	cbz	r5, 800a4b6 <__gethex+0x12a>
 800a47a:	f1bb 0f00 	cmp.w	fp, #0
 800a47e:	bf0c      	ite	eq
 800a480:	2506      	moveq	r5, #6
 800a482:	2500      	movne	r5, #0
 800a484:	4628      	mov	r0, r5
 800a486:	b005      	add	sp, #20
 800a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a48c:	2500      	movs	r5, #0
 800a48e:	462c      	mov	r4, r5
 800a490:	e7b0      	b.n	800a3f4 <__gethex+0x68>
 800a492:	2c00      	cmp	r4, #0
 800a494:	d1c7      	bne.n	800a426 <__gethex+0x9a>
 800a496:	4627      	mov	r7, r4
 800a498:	e7c7      	b.n	800a42a <__gethex+0x9e>
 800a49a:	464e      	mov	r6, r9
 800a49c:	462f      	mov	r7, r5
 800a49e:	2501      	movs	r5, #1
 800a4a0:	e7c3      	b.n	800a42a <__gethex+0x9e>
 800a4a2:	2400      	movs	r4, #0
 800a4a4:	1cb1      	adds	r1, r6, #2
 800a4a6:	e7cc      	b.n	800a442 <__gethex+0xb6>
 800a4a8:	2401      	movs	r4, #1
 800a4aa:	e7fb      	b.n	800a4a4 <__gethex+0x118>
 800a4ac:	fb03 0002 	mla	r0, r3, r2, r0
 800a4b0:	e7ce      	b.n	800a450 <__gethex+0xc4>
 800a4b2:	4631      	mov	r1, r6
 800a4b4:	e7de      	b.n	800a474 <__gethex+0xe8>
 800a4b6:	4629      	mov	r1, r5
 800a4b8:	eba6 0309 	sub.w	r3, r6, r9
 800a4bc:	3b01      	subs	r3, #1
 800a4be:	2b07      	cmp	r3, #7
 800a4c0:	dc0a      	bgt.n	800a4d8 <__gethex+0x14c>
 800a4c2:	9801      	ldr	r0, [sp, #4]
 800a4c4:	f7fe f962 	bl	800878c <_Balloc>
 800a4c8:	4604      	mov	r4, r0
 800a4ca:	b940      	cbnz	r0, 800a4de <__gethex+0x152>
 800a4cc:	4602      	mov	r2, r0
 800a4ce:	21e4      	movs	r1, #228	@ 0xe4
 800a4d0:	4b5b      	ldr	r3, [pc, #364]	@ (800a640 <__gethex+0x2b4>)
 800a4d2:	485c      	ldr	r0, [pc, #368]	@ (800a644 <__gethex+0x2b8>)
 800a4d4:	f7ff fec0 	bl	800a258 <__assert_func>
 800a4d8:	3101      	adds	r1, #1
 800a4da:	105b      	asrs	r3, r3, #1
 800a4dc:	e7ef      	b.n	800a4be <__gethex+0x132>
 800a4de:	2300      	movs	r3, #0
 800a4e0:	f100 0a14 	add.w	sl, r0, #20
 800a4e4:	4655      	mov	r5, sl
 800a4e6:	469b      	mov	fp, r3
 800a4e8:	45b1      	cmp	r9, r6
 800a4ea:	d337      	bcc.n	800a55c <__gethex+0x1d0>
 800a4ec:	f845 bb04 	str.w	fp, [r5], #4
 800a4f0:	eba5 050a 	sub.w	r5, r5, sl
 800a4f4:	10ad      	asrs	r5, r5, #2
 800a4f6:	6125      	str	r5, [r4, #16]
 800a4f8:	4658      	mov	r0, fp
 800a4fa:	f7fe fa39 	bl	8008970 <__hi0bits>
 800a4fe:	016d      	lsls	r5, r5, #5
 800a500:	f8d8 6000 	ldr.w	r6, [r8]
 800a504:	1a2d      	subs	r5, r5, r0
 800a506:	42b5      	cmp	r5, r6
 800a508:	dd54      	ble.n	800a5b4 <__gethex+0x228>
 800a50a:	1bad      	subs	r5, r5, r6
 800a50c:	4629      	mov	r1, r5
 800a50e:	4620      	mov	r0, r4
 800a510:	f7fe fdc1 	bl	8009096 <__any_on>
 800a514:	4681      	mov	r9, r0
 800a516:	b178      	cbz	r0, 800a538 <__gethex+0x1ac>
 800a518:	f04f 0901 	mov.w	r9, #1
 800a51c:	1e6b      	subs	r3, r5, #1
 800a51e:	1159      	asrs	r1, r3, #5
 800a520:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a524:	f003 021f 	and.w	r2, r3, #31
 800a528:	fa09 f202 	lsl.w	r2, r9, r2
 800a52c:	420a      	tst	r2, r1
 800a52e:	d003      	beq.n	800a538 <__gethex+0x1ac>
 800a530:	454b      	cmp	r3, r9
 800a532:	dc36      	bgt.n	800a5a2 <__gethex+0x216>
 800a534:	f04f 0902 	mov.w	r9, #2
 800a538:	4629      	mov	r1, r5
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff febe 	bl	800a2bc <rshift>
 800a540:	442f      	add	r7, r5
 800a542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a546:	42bb      	cmp	r3, r7
 800a548:	da42      	bge.n	800a5d0 <__gethex+0x244>
 800a54a:	4621      	mov	r1, r4
 800a54c:	9801      	ldr	r0, [sp, #4]
 800a54e:	f7fe f95d 	bl	800880c <_Bfree>
 800a552:	2300      	movs	r3, #0
 800a554:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a556:	25a3      	movs	r5, #163	@ 0xa3
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	e793      	b.n	800a484 <__gethex+0xf8>
 800a55c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a560:	2a2e      	cmp	r2, #46	@ 0x2e
 800a562:	d012      	beq.n	800a58a <__gethex+0x1fe>
 800a564:	2b20      	cmp	r3, #32
 800a566:	d104      	bne.n	800a572 <__gethex+0x1e6>
 800a568:	f845 bb04 	str.w	fp, [r5], #4
 800a56c:	f04f 0b00 	mov.w	fp, #0
 800a570:	465b      	mov	r3, fp
 800a572:	7830      	ldrb	r0, [r6, #0]
 800a574:	9303      	str	r3, [sp, #12]
 800a576:	f7ff fef4 	bl	800a362 <__hexdig_fun>
 800a57a:	9b03      	ldr	r3, [sp, #12]
 800a57c:	f000 000f 	and.w	r0, r0, #15
 800a580:	4098      	lsls	r0, r3
 800a582:	ea4b 0b00 	orr.w	fp, fp, r0
 800a586:	3304      	adds	r3, #4
 800a588:	e7ae      	b.n	800a4e8 <__gethex+0x15c>
 800a58a:	45b1      	cmp	r9, r6
 800a58c:	d8ea      	bhi.n	800a564 <__gethex+0x1d8>
 800a58e:	2201      	movs	r2, #1
 800a590:	4630      	mov	r0, r6
 800a592:	492a      	ldr	r1, [pc, #168]	@ (800a63c <__gethex+0x2b0>)
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	f7ff fe37 	bl	800a208 <strncmp>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	2800      	cmp	r0, #0
 800a59e:	d1e1      	bne.n	800a564 <__gethex+0x1d8>
 800a5a0:	e7a2      	b.n	800a4e8 <__gethex+0x15c>
 800a5a2:	4620      	mov	r0, r4
 800a5a4:	1ea9      	subs	r1, r5, #2
 800a5a6:	f7fe fd76 	bl	8009096 <__any_on>
 800a5aa:	2800      	cmp	r0, #0
 800a5ac:	d0c2      	beq.n	800a534 <__gethex+0x1a8>
 800a5ae:	f04f 0903 	mov.w	r9, #3
 800a5b2:	e7c1      	b.n	800a538 <__gethex+0x1ac>
 800a5b4:	da09      	bge.n	800a5ca <__gethex+0x23e>
 800a5b6:	1b75      	subs	r5, r6, r5
 800a5b8:	4621      	mov	r1, r4
 800a5ba:	462a      	mov	r2, r5
 800a5bc:	9801      	ldr	r0, [sp, #4]
 800a5be:	f7fe fb3b 	bl	8008c38 <__lshift>
 800a5c2:	4604      	mov	r4, r0
 800a5c4:	1b7f      	subs	r7, r7, r5
 800a5c6:	f100 0a14 	add.w	sl, r0, #20
 800a5ca:	f04f 0900 	mov.w	r9, #0
 800a5ce:	e7b8      	b.n	800a542 <__gethex+0x1b6>
 800a5d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5d4:	42bd      	cmp	r5, r7
 800a5d6:	dd6f      	ble.n	800a6b8 <__gethex+0x32c>
 800a5d8:	1bed      	subs	r5, r5, r7
 800a5da:	42ae      	cmp	r6, r5
 800a5dc:	dc34      	bgt.n	800a648 <__gethex+0x2bc>
 800a5de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5e2:	2b02      	cmp	r3, #2
 800a5e4:	d022      	beq.n	800a62c <__gethex+0x2a0>
 800a5e6:	2b03      	cmp	r3, #3
 800a5e8:	d024      	beq.n	800a634 <__gethex+0x2a8>
 800a5ea:	2b01      	cmp	r3, #1
 800a5ec:	d115      	bne.n	800a61a <__gethex+0x28e>
 800a5ee:	42ae      	cmp	r6, r5
 800a5f0:	d113      	bne.n	800a61a <__gethex+0x28e>
 800a5f2:	2e01      	cmp	r6, #1
 800a5f4:	d10b      	bne.n	800a60e <__gethex+0x282>
 800a5f6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a5fa:	9a02      	ldr	r2, [sp, #8]
 800a5fc:	2562      	movs	r5, #98	@ 0x62
 800a5fe:	6013      	str	r3, [r2, #0]
 800a600:	2301      	movs	r3, #1
 800a602:	6123      	str	r3, [r4, #16]
 800a604:	f8ca 3000 	str.w	r3, [sl]
 800a608:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a60a:	601c      	str	r4, [r3, #0]
 800a60c:	e73a      	b.n	800a484 <__gethex+0xf8>
 800a60e:	4620      	mov	r0, r4
 800a610:	1e71      	subs	r1, r6, #1
 800a612:	f7fe fd40 	bl	8009096 <__any_on>
 800a616:	2800      	cmp	r0, #0
 800a618:	d1ed      	bne.n	800a5f6 <__gethex+0x26a>
 800a61a:	4621      	mov	r1, r4
 800a61c:	9801      	ldr	r0, [sp, #4]
 800a61e:	f7fe f8f5 	bl	800880c <_Bfree>
 800a622:	2300      	movs	r3, #0
 800a624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a626:	2550      	movs	r5, #80	@ 0x50
 800a628:	6013      	str	r3, [r2, #0]
 800a62a:	e72b      	b.n	800a484 <__gethex+0xf8>
 800a62c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a62e:	2b00      	cmp	r3, #0
 800a630:	d1f3      	bne.n	800a61a <__gethex+0x28e>
 800a632:	e7e0      	b.n	800a5f6 <__gethex+0x26a>
 800a634:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a636:	2b00      	cmp	r3, #0
 800a638:	d1dd      	bne.n	800a5f6 <__gethex+0x26a>
 800a63a:	e7ee      	b.n	800a61a <__gethex+0x28e>
 800a63c:	0800bce8 	.word	0x0800bce8
 800a640:	0800bb7f 	.word	0x0800bb7f
 800a644:	0800be96 	.word	0x0800be96
 800a648:	1e6f      	subs	r7, r5, #1
 800a64a:	f1b9 0f00 	cmp.w	r9, #0
 800a64e:	d130      	bne.n	800a6b2 <__gethex+0x326>
 800a650:	b127      	cbz	r7, 800a65c <__gethex+0x2d0>
 800a652:	4639      	mov	r1, r7
 800a654:	4620      	mov	r0, r4
 800a656:	f7fe fd1e 	bl	8009096 <__any_on>
 800a65a:	4681      	mov	r9, r0
 800a65c:	2301      	movs	r3, #1
 800a65e:	4629      	mov	r1, r5
 800a660:	1b76      	subs	r6, r6, r5
 800a662:	2502      	movs	r5, #2
 800a664:	117a      	asrs	r2, r7, #5
 800a666:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a66a:	f007 071f 	and.w	r7, r7, #31
 800a66e:	40bb      	lsls	r3, r7
 800a670:	4213      	tst	r3, r2
 800a672:	4620      	mov	r0, r4
 800a674:	bf18      	it	ne
 800a676:	f049 0902 	orrne.w	r9, r9, #2
 800a67a:	f7ff fe1f 	bl	800a2bc <rshift>
 800a67e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a682:	f1b9 0f00 	cmp.w	r9, #0
 800a686:	d047      	beq.n	800a718 <__gethex+0x38c>
 800a688:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a68c:	2b02      	cmp	r3, #2
 800a68e:	d015      	beq.n	800a6bc <__gethex+0x330>
 800a690:	2b03      	cmp	r3, #3
 800a692:	d017      	beq.n	800a6c4 <__gethex+0x338>
 800a694:	2b01      	cmp	r3, #1
 800a696:	d109      	bne.n	800a6ac <__gethex+0x320>
 800a698:	f019 0f02 	tst.w	r9, #2
 800a69c:	d006      	beq.n	800a6ac <__gethex+0x320>
 800a69e:	f8da 3000 	ldr.w	r3, [sl]
 800a6a2:	ea49 0903 	orr.w	r9, r9, r3
 800a6a6:	f019 0f01 	tst.w	r9, #1
 800a6aa:	d10e      	bne.n	800a6ca <__gethex+0x33e>
 800a6ac:	f045 0510 	orr.w	r5, r5, #16
 800a6b0:	e032      	b.n	800a718 <__gethex+0x38c>
 800a6b2:	f04f 0901 	mov.w	r9, #1
 800a6b6:	e7d1      	b.n	800a65c <__gethex+0x2d0>
 800a6b8:	2501      	movs	r5, #1
 800a6ba:	e7e2      	b.n	800a682 <__gethex+0x2f6>
 800a6bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6be:	f1c3 0301 	rsb	r3, r3, #1
 800a6c2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d0f0      	beq.n	800a6ac <__gethex+0x320>
 800a6ca:	f04f 0c00 	mov.w	ip, #0
 800a6ce:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6d2:	f104 0314 	add.w	r3, r4, #20
 800a6d6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6da:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6de:	4618      	mov	r0, r3
 800a6e0:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6e4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a6e8:	d01b      	beq.n	800a722 <__gethex+0x396>
 800a6ea:	3201      	adds	r2, #1
 800a6ec:	6002      	str	r2, [r0, #0]
 800a6ee:	2d02      	cmp	r5, #2
 800a6f0:	f104 0314 	add.w	r3, r4, #20
 800a6f4:	d13c      	bne.n	800a770 <__gethex+0x3e4>
 800a6f6:	f8d8 2000 	ldr.w	r2, [r8]
 800a6fa:	3a01      	subs	r2, #1
 800a6fc:	42b2      	cmp	r2, r6
 800a6fe:	d109      	bne.n	800a714 <__gethex+0x388>
 800a700:	2201      	movs	r2, #1
 800a702:	1171      	asrs	r1, r6, #5
 800a704:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a708:	f006 061f 	and.w	r6, r6, #31
 800a70c:	fa02 f606 	lsl.w	r6, r2, r6
 800a710:	421e      	tst	r6, r3
 800a712:	d13a      	bne.n	800a78a <__gethex+0x3fe>
 800a714:	f045 0520 	orr.w	r5, r5, #32
 800a718:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a71a:	601c      	str	r4, [r3, #0]
 800a71c:	9b02      	ldr	r3, [sp, #8]
 800a71e:	601f      	str	r7, [r3, #0]
 800a720:	e6b0      	b.n	800a484 <__gethex+0xf8>
 800a722:	4299      	cmp	r1, r3
 800a724:	f843 cc04 	str.w	ip, [r3, #-4]
 800a728:	d8d9      	bhi.n	800a6de <__gethex+0x352>
 800a72a:	68a3      	ldr	r3, [r4, #8]
 800a72c:	459b      	cmp	fp, r3
 800a72e:	db17      	blt.n	800a760 <__gethex+0x3d4>
 800a730:	6861      	ldr	r1, [r4, #4]
 800a732:	9801      	ldr	r0, [sp, #4]
 800a734:	3101      	adds	r1, #1
 800a736:	f7fe f829 	bl	800878c <_Balloc>
 800a73a:	4681      	mov	r9, r0
 800a73c:	b918      	cbnz	r0, 800a746 <__gethex+0x3ba>
 800a73e:	4602      	mov	r2, r0
 800a740:	2184      	movs	r1, #132	@ 0x84
 800a742:	4b19      	ldr	r3, [pc, #100]	@ (800a7a8 <__gethex+0x41c>)
 800a744:	e6c5      	b.n	800a4d2 <__gethex+0x146>
 800a746:	6922      	ldr	r2, [r4, #16]
 800a748:	f104 010c 	add.w	r1, r4, #12
 800a74c:	3202      	adds	r2, #2
 800a74e:	0092      	lsls	r2, r2, #2
 800a750:	300c      	adds	r0, #12
 800a752:	f7fd f8ba 	bl	80078ca <memcpy>
 800a756:	4621      	mov	r1, r4
 800a758:	9801      	ldr	r0, [sp, #4]
 800a75a:	f7fe f857 	bl	800880c <_Bfree>
 800a75e:	464c      	mov	r4, r9
 800a760:	6923      	ldr	r3, [r4, #16]
 800a762:	1c5a      	adds	r2, r3, #1
 800a764:	6122      	str	r2, [r4, #16]
 800a766:	2201      	movs	r2, #1
 800a768:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a76c:	615a      	str	r2, [r3, #20]
 800a76e:	e7be      	b.n	800a6ee <__gethex+0x362>
 800a770:	6922      	ldr	r2, [r4, #16]
 800a772:	455a      	cmp	r2, fp
 800a774:	dd0b      	ble.n	800a78e <__gethex+0x402>
 800a776:	2101      	movs	r1, #1
 800a778:	4620      	mov	r0, r4
 800a77a:	f7ff fd9f 	bl	800a2bc <rshift>
 800a77e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a782:	3701      	adds	r7, #1
 800a784:	42bb      	cmp	r3, r7
 800a786:	f6ff aee0 	blt.w	800a54a <__gethex+0x1be>
 800a78a:	2501      	movs	r5, #1
 800a78c:	e7c2      	b.n	800a714 <__gethex+0x388>
 800a78e:	f016 061f 	ands.w	r6, r6, #31
 800a792:	d0fa      	beq.n	800a78a <__gethex+0x3fe>
 800a794:	4453      	add	r3, sl
 800a796:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a79a:	f7fe f8e9 	bl	8008970 <__hi0bits>
 800a79e:	f1c6 0620 	rsb	r6, r6, #32
 800a7a2:	42b0      	cmp	r0, r6
 800a7a4:	dbe7      	blt.n	800a776 <__gethex+0x3ea>
 800a7a6:	e7f0      	b.n	800a78a <__gethex+0x3fe>
 800a7a8:	0800bb7f 	.word	0x0800bb7f

0800a7ac <L_shift>:
 800a7ac:	f1c2 0208 	rsb	r2, r2, #8
 800a7b0:	0092      	lsls	r2, r2, #2
 800a7b2:	b570      	push	{r4, r5, r6, lr}
 800a7b4:	f1c2 0620 	rsb	r6, r2, #32
 800a7b8:	6843      	ldr	r3, [r0, #4]
 800a7ba:	6804      	ldr	r4, [r0, #0]
 800a7bc:	fa03 f506 	lsl.w	r5, r3, r6
 800a7c0:	432c      	orrs	r4, r5
 800a7c2:	40d3      	lsrs	r3, r2
 800a7c4:	6004      	str	r4, [r0, #0]
 800a7c6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7ca:	4288      	cmp	r0, r1
 800a7cc:	d3f4      	bcc.n	800a7b8 <L_shift+0xc>
 800a7ce:	bd70      	pop	{r4, r5, r6, pc}

0800a7d0 <__match>:
 800a7d0:	b530      	push	{r4, r5, lr}
 800a7d2:	6803      	ldr	r3, [r0, #0]
 800a7d4:	3301      	adds	r3, #1
 800a7d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7da:	b914      	cbnz	r4, 800a7e2 <__match+0x12>
 800a7dc:	6003      	str	r3, [r0, #0]
 800a7de:	2001      	movs	r0, #1
 800a7e0:	bd30      	pop	{r4, r5, pc}
 800a7e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7e6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a7ea:	2d19      	cmp	r5, #25
 800a7ec:	bf98      	it	ls
 800a7ee:	3220      	addls	r2, #32
 800a7f0:	42a2      	cmp	r2, r4
 800a7f2:	d0f0      	beq.n	800a7d6 <__match+0x6>
 800a7f4:	2000      	movs	r0, #0
 800a7f6:	e7f3      	b.n	800a7e0 <__match+0x10>

0800a7f8 <__hexnan>:
 800a7f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7fc:	2500      	movs	r5, #0
 800a7fe:	680b      	ldr	r3, [r1, #0]
 800a800:	4682      	mov	sl, r0
 800a802:	115e      	asrs	r6, r3, #5
 800a804:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a808:	f013 031f 	ands.w	r3, r3, #31
 800a80c:	bf18      	it	ne
 800a80e:	3604      	addne	r6, #4
 800a810:	1f37      	subs	r7, r6, #4
 800a812:	4690      	mov	r8, r2
 800a814:	46b9      	mov	r9, r7
 800a816:	463c      	mov	r4, r7
 800a818:	46ab      	mov	fp, r5
 800a81a:	b087      	sub	sp, #28
 800a81c:	6801      	ldr	r1, [r0, #0]
 800a81e:	9301      	str	r3, [sp, #4]
 800a820:	f846 5c04 	str.w	r5, [r6, #-4]
 800a824:	9502      	str	r5, [sp, #8]
 800a826:	784a      	ldrb	r2, [r1, #1]
 800a828:	1c4b      	adds	r3, r1, #1
 800a82a:	9303      	str	r3, [sp, #12]
 800a82c:	b342      	cbz	r2, 800a880 <__hexnan+0x88>
 800a82e:	4610      	mov	r0, r2
 800a830:	9105      	str	r1, [sp, #20]
 800a832:	9204      	str	r2, [sp, #16]
 800a834:	f7ff fd95 	bl	800a362 <__hexdig_fun>
 800a838:	2800      	cmp	r0, #0
 800a83a:	d151      	bne.n	800a8e0 <__hexnan+0xe8>
 800a83c:	9a04      	ldr	r2, [sp, #16]
 800a83e:	9905      	ldr	r1, [sp, #20]
 800a840:	2a20      	cmp	r2, #32
 800a842:	d818      	bhi.n	800a876 <__hexnan+0x7e>
 800a844:	9b02      	ldr	r3, [sp, #8]
 800a846:	459b      	cmp	fp, r3
 800a848:	dd13      	ble.n	800a872 <__hexnan+0x7a>
 800a84a:	454c      	cmp	r4, r9
 800a84c:	d206      	bcs.n	800a85c <__hexnan+0x64>
 800a84e:	2d07      	cmp	r5, #7
 800a850:	dc04      	bgt.n	800a85c <__hexnan+0x64>
 800a852:	462a      	mov	r2, r5
 800a854:	4649      	mov	r1, r9
 800a856:	4620      	mov	r0, r4
 800a858:	f7ff ffa8 	bl	800a7ac <L_shift>
 800a85c:	4544      	cmp	r4, r8
 800a85e:	d952      	bls.n	800a906 <__hexnan+0x10e>
 800a860:	2300      	movs	r3, #0
 800a862:	f1a4 0904 	sub.w	r9, r4, #4
 800a866:	f844 3c04 	str.w	r3, [r4, #-4]
 800a86a:	461d      	mov	r5, r3
 800a86c:	464c      	mov	r4, r9
 800a86e:	f8cd b008 	str.w	fp, [sp, #8]
 800a872:	9903      	ldr	r1, [sp, #12]
 800a874:	e7d7      	b.n	800a826 <__hexnan+0x2e>
 800a876:	2a29      	cmp	r2, #41	@ 0x29
 800a878:	d157      	bne.n	800a92a <__hexnan+0x132>
 800a87a:	3102      	adds	r1, #2
 800a87c:	f8ca 1000 	str.w	r1, [sl]
 800a880:	f1bb 0f00 	cmp.w	fp, #0
 800a884:	d051      	beq.n	800a92a <__hexnan+0x132>
 800a886:	454c      	cmp	r4, r9
 800a888:	d206      	bcs.n	800a898 <__hexnan+0xa0>
 800a88a:	2d07      	cmp	r5, #7
 800a88c:	dc04      	bgt.n	800a898 <__hexnan+0xa0>
 800a88e:	462a      	mov	r2, r5
 800a890:	4649      	mov	r1, r9
 800a892:	4620      	mov	r0, r4
 800a894:	f7ff ff8a 	bl	800a7ac <L_shift>
 800a898:	4544      	cmp	r4, r8
 800a89a:	d936      	bls.n	800a90a <__hexnan+0x112>
 800a89c:	4623      	mov	r3, r4
 800a89e:	f1a8 0204 	sub.w	r2, r8, #4
 800a8a2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8a6:	429f      	cmp	r7, r3
 800a8a8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8ac:	d2f9      	bcs.n	800a8a2 <__hexnan+0xaa>
 800a8ae:	1b3b      	subs	r3, r7, r4
 800a8b0:	f023 0303 	bic.w	r3, r3, #3
 800a8b4:	3304      	adds	r3, #4
 800a8b6:	3401      	adds	r4, #1
 800a8b8:	3e03      	subs	r6, #3
 800a8ba:	42b4      	cmp	r4, r6
 800a8bc:	bf88      	it	hi
 800a8be:	2304      	movhi	r3, #4
 800a8c0:	2200      	movs	r2, #0
 800a8c2:	4443      	add	r3, r8
 800a8c4:	f843 2b04 	str.w	r2, [r3], #4
 800a8c8:	429f      	cmp	r7, r3
 800a8ca:	d2fb      	bcs.n	800a8c4 <__hexnan+0xcc>
 800a8cc:	683b      	ldr	r3, [r7, #0]
 800a8ce:	b91b      	cbnz	r3, 800a8d8 <__hexnan+0xe0>
 800a8d0:	4547      	cmp	r7, r8
 800a8d2:	d128      	bne.n	800a926 <__hexnan+0x12e>
 800a8d4:	2301      	movs	r3, #1
 800a8d6:	603b      	str	r3, [r7, #0]
 800a8d8:	2005      	movs	r0, #5
 800a8da:	b007      	add	sp, #28
 800a8dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e0:	3501      	adds	r5, #1
 800a8e2:	2d08      	cmp	r5, #8
 800a8e4:	f10b 0b01 	add.w	fp, fp, #1
 800a8e8:	dd06      	ble.n	800a8f8 <__hexnan+0x100>
 800a8ea:	4544      	cmp	r4, r8
 800a8ec:	d9c1      	bls.n	800a872 <__hexnan+0x7a>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2501      	movs	r5, #1
 800a8f2:	f844 3c04 	str.w	r3, [r4, #-4]
 800a8f6:	3c04      	subs	r4, #4
 800a8f8:	6822      	ldr	r2, [r4, #0]
 800a8fa:	f000 000f 	and.w	r0, r0, #15
 800a8fe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a902:	6020      	str	r0, [r4, #0]
 800a904:	e7b5      	b.n	800a872 <__hexnan+0x7a>
 800a906:	2508      	movs	r5, #8
 800a908:	e7b3      	b.n	800a872 <__hexnan+0x7a>
 800a90a:	9b01      	ldr	r3, [sp, #4]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d0dd      	beq.n	800a8cc <__hexnan+0xd4>
 800a910:	f04f 32ff 	mov.w	r2, #4294967295
 800a914:	f1c3 0320 	rsb	r3, r3, #32
 800a918:	40da      	lsrs	r2, r3
 800a91a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a91e:	4013      	ands	r3, r2
 800a920:	f846 3c04 	str.w	r3, [r6, #-4]
 800a924:	e7d2      	b.n	800a8cc <__hexnan+0xd4>
 800a926:	3f04      	subs	r7, #4
 800a928:	e7d0      	b.n	800a8cc <__hexnan+0xd4>
 800a92a:	2004      	movs	r0, #4
 800a92c:	e7d5      	b.n	800a8da <__hexnan+0xe2>

0800a92e <__ascii_mbtowc>:
 800a92e:	b082      	sub	sp, #8
 800a930:	b901      	cbnz	r1, 800a934 <__ascii_mbtowc+0x6>
 800a932:	a901      	add	r1, sp, #4
 800a934:	b142      	cbz	r2, 800a948 <__ascii_mbtowc+0x1a>
 800a936:	b14b      	cbz	r3, 800a94c <__ascii_mbtowc+0x1e>
 800a938:	7813      	ldrb	r3, [r2, #0]
 800a93a:	600b      	str	r3, [r1, #0]
 800a93c:	7812      	ldrb	r2, [r2, #0]
 800a93e:	1e10      	subs	r0, r2, #0
 800a940:	bf18      	it	ne
 800a942:	2001      	movne	r0, #1
 800a944:	b002      	add	sp, #8
 800a946:	4770      	bx	lr
 800a948:	4610      	mov	r0, r2
 800a94a:	e7fb      	b.n	800a944 <__ascii_mbtowc+0x16>
 800a94c:	f06f 0001 	mvn.w	r0, #1
 800a950:	e7f8      	b.n	800a944 <__ascii_mbtowc+0x16>

0800a952 <_realloc_r>:
 800a952:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a956:	4680      	mov	r8, r0
 800a958:	4615      	mov	r5, r2
 800a95a:	460c      	mov	r4, r1
 800a95c:	b921      	cbnz	r1, 800a968 <_realloc_r+0x16>
 800a95e:	4611      	mov	r1, r2
 800a960:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a964:	f7fd be86 	b.w	8008674 <_malloc_r>
 800a968:	b92a      	cbnz	r2, 800a976 <_realloc_r+0x24>
 800a96a:	f7fd fe11 	bl	8008590 <_free_r>
 800a96e:	2400      	movs	r4, #0
 800a970:	4620      	mov	r0, r4
 800a972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a976:	f000 f840 	bl	800a9fa <_malloc_usable_size_r>
 800a97a:	4285      	cmp	r5, r0
 800a97c:	4606      	mov	r6, r0
 800a97e:	d802      	bhi.n	800a986 <_realloc_r+0x34>
 800a980:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a984:	d8f4      	bhi.n	800a970 <_realloc_r+0x1e>
 800a986:	4629      	mov	r1, r5
 800a988:	4640      	mov	r0, r8
 800a98a:	f7fd fe73 	bl	8008674 <_malloc_r>
 800a98e:	4607      	mov	r7, r0
 800a990:	2800      	cmp	r0, #0
 800a992:	d0ec      	beq.n	800a96e <_realloc_r+0x1c>
 800a994:	42b5      	cmp	r5, r6
 800a996:	462a      	mov	r2, r5
 800a998:	4621      	mov	r1, r4
 800a99a:	bf28      	it	cs
 800a99c:	4632      	movcs	r2, r6
 800a99e:	f7fc ff94 	bl	80078ca <memcpy>
 800a9a2:	4621      	mov	r1, r4
 800a9a4:	4640      	mov	r0, r8
 800a9a6:	f7fd fdf3 	bl	8008590 <_free_r>
 800a9aa:	463c      	mov	r4, r7
 800a9ac:	e7e0      	b.n	800a970 <_realloc_r+0x1e>

0800a9ae <__ascii_wctomb>:
 800a9ae:	4603      	mov	r3, r0
 800a9b0:	4608      	mov	r0, r1
 800a9b2:	b141      	cbz	r1, 800a9c6 <__ascii_wctomb+0x18>
 800a9b4:	2aff      	cmp	r2, #255	@ 0xff
 800a9b6:	d904      	bls.n	800a9c2 <__ascii_wctomb+0x14>
 800a9b8:	228a      	movs	r2, #138	@ 0x8a
 800a9ba:	f04f 30ff 	mov.w	r0, #4294967295
 800a9be:	601a      	str	r2, [r3, #0]
 800a9c0:	4770      	bx	lr
 800a9c2:	2001      	movs	r0, #1
 800a9c4:	700a      	strb	r2, [r1, #0]
 800a9c6:	4770      	bx	lr

0800a9c8 <fiprintf>:
 800a9c8:	b40e      	push	{r1, r2, r3}
 800a9ca:	b503      	push	{r0, r1, lr}
 800a9cc:	4601      	mov	r1, r0
 800a9ce:	ab03      	add	r3, sp, #12
 800a9d0:	4805      	ldr	r0, [pc, #20]	@ (800a9e8 <fiprintf+0x20>)
 800a9d2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9d6:	6800      	ldr	r0, [r0, #0]
 800a9d8:	9301      	str	r3, [sp, #4]
 800a9da:	f000 f83d 	bl	800aa58 <_vfiprintf_r>
 800a9de:	b002      	add	sp, #8
 800a9e0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a9e4:	b003      	add	sp, #12
 800a9e6:	4770      	bx	lr
 800a9e8:	2000001c 	.word	0x2000001c

0800a9ec <abort>:
 800a9ec:	2006      	movs	r0, #6
 800a9ee:	b508      	push	{r3, lr}
 800a9f0:	f000 fa06 	bl	800ae00 <raise>
 800a9f4:	2001      	movs	r0, #1
 800a9f6:	f7f6 ff54 	bl	80018a2 <_exit>

0800a9fa <_malloc_usable_size_r>:
 800a9fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a9fe:	1f18      	subs	r0, r3, #4
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	bfbc      	itt	lt
 800aa04:	580b      	ldrlt	r3, [r1, r0]
 800aa06:	18c0      	addlt	r0, r0, r3
 800aa08:	4770      	bx	lr

0800aa0a <__sfputc_r>:
 800aa0a:	6893      	ldr	r3, [r2, #8]
 800aa0c:	b410      	push	{r4}
 800aa0e:	3b01      	subs	r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	6093      	str	r3, [r2, #8]
 800aa14:	da07      	bge.n	800aa26 <__sfputc_r+0x1c>
 800aa16:	6994      	ldr	r4, [r2, #24]
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	db01      	blt.n	800aa20 <__sfputc_r+0x16>
 800aa1c:	290a      	cmp	r1, #10
 800aa1e:	d102      	bne.n	800aa26 <__sfputc_r+0x1c>
 800aa20:	bc10      	pop	{r4}
 800aa22:	f000 b931 	b.w	800ac88 <__swbuf_r>
 800aa26:	6813      	ldr	r3, [r2, #0]
 800aa28:	1c58      	adds	r0, r3, #1
 800aa2a:	6010      	str	r0, [r2, #0]
 800aa2c:	7019      	strb	r1, [r3, #0]
 800aa2e:	4608      	mov	r0, r1
 800aa30:	bc10      	pop	{r4}
 800aa32:	4770      	bx	lr

0800aa34 <__sfputs_r>:
 800aa34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa36:	4606      	mov	r6, r0
 800aa38:	460f      	mov	r7, r1
 800aa3a:	4614      	mov	r4, r2
 800aa3c:	18d5      	adds	r5, r2, r3
 800aa3e:	42ac      	cmp	r4, r5
 800aa40:	d101      	bne.n	800aa46 <__sfputs_r+0x12>
 800aa42:	2000      	movs	r0, #0
 800aa44:	e007      	b.n	800aa56 <__sfputs_r+0x22>
 800aa46:	463a      	mov	r2, r7
 800aa48:	4630      	mov	r0, r6
 800aa4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa4e:	f7ff ffdc 	bl	800aa0a <__sfputc_r>
 800aa52:	1c43      	adds	r3, r0, #1
 800aa54:	d1f3      	bne.n	800aa3e <__sfputs_r+0xa>
 800aa56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa58 <_vfiprintf_r>:
 800aa58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa5c:	460d      	mov	r5, r1
 800aa5e:	4614      	mov	r4, r2
 800aa60:	4698      	mov	r8, r3
 800aa62:	4606      	mov	r6, r0
 800aa64:	b09d      	sub	sp, #116	@ 0x74
 800aa66:	b118      	cbz	r0, 800aa70 <_vfiprintf_r+0x18>
 800aa68:	6a03      	ldr	r3, [r0, #32]
 800aa6a:	b90b      	cbnz	r3, 800aa70 <_vfiprintf_r+0x18>
 800aa6c:	f7fc fe06 	bl	800767c <__sinit>
 800aa70:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa72:	07d9      	lsls	r1, r3, #31
 800aa74:	d405      	bmi.n	800aa82 <_vfiprintf_r+0x2a>
 800aa76:	89ab      	ldrh	r3, [r5, #12]
 800aa78:	059a      	lsls	r2, r3, #22
 800aa7a:	d402      	bmi.n	800aa82 <_vfiprintf_r+0x2a>
 800aa7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa7e:	f7fc ff14 	bl	80078aa <__retarget_lock_acquire_recursive>
 800aa82:	89ab      	ldrh	r3, [r5, #12]
 800aa84:	071b      	lsls	r3, r3, #28
 800aa86:	d501      	bpl.n	800aa8c <_vfiprintf_r+0x34>
 800aa88:	692b      	ldr	r3, [r5, #16]
 800aa8a:	b99b      	cbnz	r3, 800aab4 <_vfiprintf_r+0x5c>
 800aa8c:	4629      	mov	r1, r5
 800aa8e:	4630      	mov	r0, r6
 800aa90:	f000 f938 	bl	800ad04 <__swsetup_r>
 800aa94:	b170      	cbz	r0, 800aab4 <_vfiprintf_r+0x5c>
 800aa96:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa98:	07dc      	lsls	r4, r3, #31
 800aa9a:	d504      	bpl.n	800aaa6 <_vfiprintf_r+0x4e>
 800aa9c:	f04f 30ff 	mov.w	r0, #4294967295
 800aaa0:	b01d      	add	sp, #116	@ 0x74
 800aaa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aaa6:	89ab      	ldrh	r3, [r5, #12]
 800aaa8:	0598      	lsls	r0, r3, #22
 800aaaa:	d4f7      	bmi.n	800aa9c <_vfiprintf_r+0x44>
 800aaac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aaae:	f7fc fefd 	bl	80078ac <__retarget_lock_release_recursive>
 800aab2:	e7f3      	b.n	800aa9c <_vfiprintf_r+0x44>
 800aab4:	2300      	movs	r3, #0
 800aab6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aab8:	2320      	movs	r3, #32
 800aaba:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aabe:	2330      	movs	r3, #48	@ 0x30
 800aac0:	f04f 0901 	mov.w	r9, #1
 800aac4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aac8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ac74 <_vfiprintf_r+0x21c>
 800aacc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aad0:	4623      	mov	r3, r4
 800aad2:	469a      	mov	sl, r3
 800aad4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aad8:	b10a      	cbz	r2, 800aade <_vfiprintf_r+0x86>
 800aada:	2a25      	cmp	r2, #37	@ 0x25
 800aadc:	d1f9      	bne.n	800aad2 <_vfiprintf_r+0x7a>
 800aade:	ebba 0b04 	subs.w	fp, sl, r4
 800aae2:	d00b      	beq.n	800aafc <_vfiprintf_r+0xa4>
 800aae4:	465b      	mov	r3, fp
 800aae6:	4622      	mov	r2, r4
 800aae8:	4629      	mov	r1, r5
 800aaea:	4630      	mov	r0, r6
 800aaec:	f7ff ffa2 	bl	800aa34 <__sfputs_r>
 800aaf0:	3001      	adds	r0, #1
 800aaf2:	f000 80a7 	beq.w	800ac44 <_vfiprintf_r+0x1ec>
 800aaf6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aaf8:	445a      	add	r2, fp
 800aafa:	9209      	str	r2, [sp, #36]	@ 0x24
 800aafc:	f89a 3000 	ldrb.w	r3, [sl]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	f000 809f 	beq.w	800ac44 <_vfiprintf_r+0x1ec>
 800ab06:	2300      	movs	r3, #0
 800ab08:	f04f 32ff 	mov.w	r2, #4294967295
 800ab0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab10:	f10a 0a01 	add.w	sl, sl, #1
 800ab14:	9304      	str	r3, [sp, #16]
 800ab16:	9307      	str	r3, [sp, #28]
 800ab18:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab1c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab1e:	4654      	mov	r4, sl
 800ab20:	2205      	movs	r2, #5
 800ab22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab26:	4853      	ldr	r0, [pc, #332]	@ (800ac74 <_vfiprintf_r+0x21c>)
 800ab28:	f7fc fec1 	bl	80078ae <memchr>
 800ab2c:	9a04      	ldr	r2, [sp, #16]
 800ab2e:	b9d8      	cbnz	r0, 800ab68 <_vfiprintf_r+0x110>
 800ab30:	06d1      	lsls	r1, r2, #27
 800ab32:	bf44      	itt	mi
 800ab34:	2320      	movmi	r3, #32
 800ab36:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab3a:	0713      	lsls	r3, r2, #28
 800ab3c:	bf44      	itt	mi
 800ab3e:	232b      	movmi	r3, #43	@ 0x2b
 800ab40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab44:	f89a 3000 	ldrb.w	r3, [sl]
 800ab48:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab4a:	d015      	beq.n	800ab78 <_vfiprintf_r+0x120>
 800ab4c:	4654      	mov	r4, sl
 800ab4e:	2000      	movs	r0, #0
 800ab50:	f04f 0c0a 	mov.w	ip, #10
 800ab54:	9a07      	ldr	r2, [sp, #28]
 800ab56:	4621      	mov	r1, r4
 800ab58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab5c:	3b30      	subs	r3, #48	@ 0x30
 800ab5e:	2b09      	cmp	r3, #9
 800ab60:	d94b      	bls.n	800abfa <_vfiprintf_r+0x1a2>
 800ab62:	b1b0      	cbz	r0, 800ab92 <_vfiprintf_r+0x13a>
 800ab64:	9207      	str	r2, [sp, #28]
 800ab66:	e014      	b.n	800ab92 <_vfiprintf_r+0x13a>
 800ab68:	eba0 0308 	sub.w	r3, r0, r8
 800ab6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab70:	4313      	orrs	r3, r2
 800ab72:	46a2      	mov	sl, r4
 800ab74:	9304      	str	r3, [sp, #16]
 800ab76:	e7d2      	b.n	800ab1e <_vfiprintf_r+0xc6>
 800ab78:	9b03      	ldr	r3, [sp, #12]
 800ab7a:	1d19      	adds	r1, r3, #4
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	9103      	str	r1, [sp, #12]
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	bfbb      	ittet	lt
 800ab84:	425b      	neglt	r3, r3
 800ab86:	f042 0202 	orrlt.w	r2, r2, #2
 800ab8a:	9307      	strge	r3, [sp, #28]
 800ab8c:	9307      	strlt	r3, [sp, #28]
 800ab8e:	bfb8      	it	lt
 800ab90:	9204      	strlt	r2, [sp, #16]
 800ab92:	7823      	ldrb	r3, [r4, #0]
 800ab94:	2b2e      	cmp	r3, #46	@ 0x2e
 800ab96:	d10a      	bne.n	800abae <_vfiprintf_r+0x156>
 800ab98:	7863      	ldrb	r3, [r4, #1]
 800ab9a:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab9c:	d132      	bne.n	800ac04 <_vfiprintf_r+0x1ac>
 800ab9e:	9b03      	ldr	r3, [sp, #12]
 800aba0:	3402      	adds	r4, #2
 800aba2:	1d1a      	adds	r2, r3, #4
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	9203      	str	r2, [sp, #12]
 800aba8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abac:	9305      	str	r3, [sp, #20]
 800abae:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ac78 <_vfiprintf_r+0x220>
 800abb2:	2203      	movs	r2, #3
 800abb4:	4650      	mov	r0, sl
 800abb6:	7821      	ldrb	r1, [r4, #0]
 800abb8:	f7fc fe79 	bl	80078ae <memchr>
 800abbc:	b138      	cbz	r0, 800abce <_vfiprintf_r+0x176>
 800abbe:	2240      	movs	r2, #64	@ 0x40
 800abc0:	9b04      	ldr	r3, [sp, #16]
 800abc2:	eba0 000a 	sub.w	r0, r0, sl
 800abc6:	4082      	lsls	r2, r0
 800abc8:	4313      	orrs	r3, r2
 800abca:	3401      	adds	r4, #1
 800abcc:	9304      	str	r3, [sp, #16]
 800abce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abd2:	2206      	movs	r2, #6
 800abd4:	4829      	ldr	r0, [pc, #164]	@ (800ac7c <_vfiprintf_r+0x224>)
 800abd6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abda:	f7fc fe68 	bl	80078ae <memchr>
 800abde:	2800      	cmp	r0, #0
 800abe0:	d03f      	beq.n	800ac62 <_vfiprintf_r+0x20a>
 800abe2:	4b27      	ldr	r3, [pc, #156]	@ (800ac80 <_vfiprintf_r+0x228>)
 800abe4:	bb1b      	cbnz	r3, 800ac2e <_vfiprintf_r+0x1d6>
 800abe6:	9b03      	ldr	r3, [sp, #12]
 800abe8:	3307      	adds	r3, #7
 800abea:	f023 0307 	bic.w	r3, r3, #7
 800abee:	3308      	adds	r3, #8
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800abf4:	443b      	add	r3, r7
 800abf6:	9309      	str	r3, [sp, #36]	@ 0x24
 800abf8:	e76a      	b.n	800aad0 <_vfiprintf_r+0x78>
 800abfa:	460c      	mov	r4, r1
 800abfc:	2001      	movs	r0, #1
 800abfe:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac02:	e7a8      	b.n	800ab56 <_vfiprintf_r+0xfe>
 800ac04:	2300      	movs	r3, #0
 800ac06:	f04f 0c0a 	mov.w	ip, #10
 800ac0a:	4619      	mov	r1, r3
 800ac0c:	3401      	adds	r4, #1
 800ac0e:	9305      	str	r3, [sp, #20]
 800ac10:	4620      	mov	r0, r4
 800ac12:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac16:	3a30      	subs	r2, #48	@ 0x30
 800ac18:	2a09      	cmp	r2, #9
 800ac1a:	d903      	bls.n	800ac24 <_vfiprintf_r+0x1cc>
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d0c6      	beq.n	800abae <_vfiprintf_r+0x156>
 800ac20:	9105      	str	r1, [sp, #20]
 800ac22:	e7c4      	b.n	800abae <_vfiprintf_r+0x156>
 800ac24:	4604      	mov	r4, r0
 800ac26:	2301      	movs	r3, #1
 800ac28:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac2c:	e7f0      	b.n	800ac10 <_vfiprintf_r+0x1b8>
 800ac2e:	ab03      	add	r3, sp, #12
 800ac30:	9300      	str	r3, [sp, #0]
 800ac32:	462a      	mov	r2, r5
 800ac34:	4630      	mov	r0, r6
 800ac36:	4b13      	ldr	r3, [pc, #76]	@ (800ac84 <_vfiprintf_r+0x22c>)
 800ac38:	a904      	add	r1, sp, #16
 800ac3a:	f7fb fec5 	bl	80069c8 <_printf_float>
 800ac3e:	4607      	mov	r7, r0
 800ac40:	1c78      	adds	r0, r7, #1
 800ac42:	d1d6      	bne.n	800abf2 <_vfiprintf_r+0x19a>
 800ac44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac46:	07d9      	lsls	r1, r3, #31
 800ac48:	d405      	bmi.n	800ac56 <_vfiprintf_r+0x1fe>
 800ac4a:	89ab      	ldrh	r3, [r5, #12]
 800ac4c:	059a      	lsls	r2, r3, #22
 800ac4e:	d402      	bmi.n	800ac56 <_vfiprintf_r+0x1fe>
 800ac50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac52:	f7fc fe2b 	bl	80078ac <__retarget_lock_release_recursive>
 800ac56:	89ab      	ldrh	r3, [r5, #12]
 800ac58:	065b      	lsls	r3, r3, #25
 800ac5a:	f53f af1f 	bmi.w	800aa9c <_vfiprintf_r+0x44>
 800ac5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac60:	e71e      	b.n	800aaa0 <_vfiprintf_r+0x48>
 800ac62:	ab03      	add	r3, sp, #12
 800ac64:	9300      	str	r3, [sp, #0]
 800ac66:	462a      	mov	r2, r5
 800ac68:	4630      	mov	r0, r6
 800ac6a:	4b06      	ldr	r3, [pc, #24]	@ (800ac84 <_vfiprintf_r+0x22c>)
 800ac6c:	a904      	add	r1, sp, #16
 800ac6e:	f7fc f949 	bl	8006f04 <_printf_i>
 800ac72:	e7e4      	b.n	800ac3e <_vfiprintf_r+0x1e6>
 800ac74:	0800be41 	.word	0x0800be41
 800ac78:	0800be47 	.word	0x0800be47
 800ac7c:	0800be4b 	.word	0x0800be4b
 800ac80:	080069c9 	.word	0x080069c9
 800ac84:	0800aa35 	.word	0x0800aa35

0800ac88 <__swbuf_r>:
 800ac88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac8a:	460e      	mov	r6, r1
 800ac8c:	4614      	mov	r4, r2
 800ac8e:	4605      	mov	r5, r0
 800ac90:	b118      	cbz	r0, 800ac9a <__swbuf_r+0x12>
 800ac92:	6a03      	ldr	r3, [r0, #32]
 800ac94:	b90b      	cbnz	r3, 800ac9a <__swbuf_r+0x12>
 800ac96:	f7fc fcf1 	bl	800767c <__sinit>
 800ac9a:	69a3      	ldr	r3, [r4, #24]
 800ac9c:	60a3      	str	r3, [r4, #8]
 800ac9e:	89a3      	ldrh	r3, [r4, #12]
 800aca0:	071a      	lsls	r2, r3, #28
 800aca2:	d501      	bpl.n	800aca8 <__swbuf_r+0x20>
 800aca4:	6923      	ldr	r3, [r4, #16]
 800aca6:	b943      	cbnz	r3, 800acba <__swbuf_r+0x32>
 800aca8:	4621      	mov	r1, r4
 800acaa:	4628      	mov	r0, r5
 800acac:	f000 f82a 	bl	800ad04 <__swsetup_r>
 800acb0:	b118      	cbz	r0, 800acba <__swbuf_r+0x32>
 800acb2:	f04f 37ff 	mov.w	r7, #4294967295
 800acb6:	4638      	mov	r0, r7
 800acb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acba:	6823      	ldr	r3, [r4, #0]
 800acbc:	6922      	ldr	r2, [r4, #16]
 800acbe:	b2f6      	uxtb	r6, r6
 800acc0:	1a98      	subs	r0, r3, r2
 800acc2:	6963      	ldr	r3, [r4, #20]
 800acc4:	4637      	mov	r7, r6
 800acc6:	4283      	cmp	r3, r0
 800acc8:	dc05      	bgt.n	800acd6 <__swbuf_r+0x4e>
 800acca:	4621      	mov	r1, r4
 800accc:	4628      	mov	r0, r5
 800acce:	f7ff fa59 	bl	800a184 <_fflush_r>
 800acd2:	2800      	cmp	r0, #0
 800acd4:	d1ed      	bne.n	800acb2 <__swbuf_r+0x2a>
 800acd6:	68a3      	ldr	r3, [r4, #8]
 800acd8:	3b01      	subs	r3, #1
 800acda:	60a3      	str	r3, [r4, #8]
 800acdc:	6823      	ldr	r3, [r4, #0]
 800acde:	1c5a      	adds	r2, r3, #1
 800ace0:	6022      	str	r2, [r4, #0]
 800ace2:	701e      	strb	r6, [r3, #0]
 800ace4:	6962      	ldr	r2, [r4, #20]
 800ace6:	1c43      	adds	r3, r0, #1
 800ace8:	429a      	cmp	r2, r3
 800acea:	d004      	beq.n	800acf6 <__swbuf_r+0x6e>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	07db      	lsls	r3, r3, #31
 800acf0:	d5e1      	bpl.n	800acb6 <__swbuf_r+0x2e>
 800acf2:	2e0a      	cmp	r6, #10
 800acf4:	d1df      	bne.n	800acb6 <__swbuf_r+0x2e>
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f7ff fa43 	bl	800a184 <_fflush_r>
 800acfe:	2800      	cmp	r0, #0
 800ad00:	d0d9      	beq.n	800acb6 <__swbuf_r+0x2e>
 800ad02:	e7d6      	b.n	800acb2 <__swbuf_r+0x2a>

0800ad04 <__swsetup_r>:
 800ad04:	b538      	push	{r3, r4, r5, lr}
 800ad06:	4b29      	ldr	r3, [pc, #164]	@ (800adac <__swsetup_r+0xa8>)
 800ad08:	4605      	mov	r5, r0
 800ad0a:	6818      	ldr	r0, [r3, #0]
 800ad0c:	460c      	mov	r4, r1
 800ad0e:	b118      	cbz	r0, 800ad18 <__swsetup_r+0x14>
 800ad10:	6a03      	ldr	r3, [r0, #32]
 800ad12:	b90b      	cbnz	r3, 800ad18 <__swsetup_r+0x14>
 800ad14:	f7fc fcb2 	bl	800767c <__sinit>
 800ad18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad1c:	0719      	lsls	r1, r3, #28
 800ad1e:	d422      	bmi.n	800ad66 <__swsetup_r+0x62>
 800ad20:	06da      	lsls	r2, r3, #27
 800ad22:	d407      	bmi.n	800ad34 <__swsetup_r+0x30>
 800ad24:	2209      	movs	r2, #9
 800ad26:	602a      	str	r2, [r5, #0]
 800ad28:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad30:	81a3      	strh	r3, [r4, #12]
 800ad32:	e033      	b.n	800ad9c <__swsetup_r+0x98>
 800ad34:	0758      	lsls	r0, r3, #29
 800ad36:	d512      	bpl.n	800ad5e <__swsetup_r+0x5a>
 800ad38:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad3a:	b141      	cbz	r1, 800ad4e <__swsetup_r+0x4a>
 800ad3c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad40:	4299      	cmp	r1, r3
 800ad42:	d002      	beq.n	800ad4a <__swsetup_r+0x46>
 800ad44:	4628      	mov	r0, r5
 800ad46:	f7fd fc23 	bl	8008590 <_free_r>
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad4e:	89a3      	ldrh	r3, [r4, #12]
 800ad50:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad54:	81a3      	strh	r3, [r4, #12]
 800ad56:	2300      	movs	r3, #0
 800ad58:	6063      	str	r3, [r4, #4]
 800ad5a:	6923      	ldr	r3, [r4, #16]
 800ad5c:	6023      	str	r3, [r4, #0]
 800ad5e:	89a3      	ldrh	r3, [r4, #12]
 800ad60:	f043 0308 	orr.w	r3, r3, #8
 800ad64:	81a3      	strh	r3, [r4, #12]
 800ad66:	6923      	ldr	r3, [r4, #16]
 800ad68:	b94b      	cbnz	r3, 800ad7e <__swsetup_r+0x7a>
 800ad6a:	89a3      	ldrh	r3, [r4, #12]
 800ad6c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad70:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad74:	d003      	beq.n	800ad7e <__swsetup_r+0x7a>
 800ad76:	4621      	mov	r1, r4
 800ad78:	4628      	mov	r0, r5
 800ad7a:	f000 f882 	bl	800ae82 <__smakebuf_r>
 800ad7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad82:	f013 0201 	ands.w	r2, r3, #1
 800ad86:	d00a      	beq.n	800ad9e <__swsetup_r+0x9a>
 800ad88:	2200      	movs	r2, #0
 800ad8a:	60a2      	str	r2, [r4, #8]
 800ad8c:	6962      	ldr	r2, [r4, #20]
 800ad8e:	4252      	negs	r2, r2
 800ad90:	61a2      	str	r2, [r4, #24]
 800ad92:	6922      	ldr	r2, [r4, #16]
 800ad94:	b942      	cbnz	r2, 800ada8 <__swsetup_r+0xa4>
 800ad96:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ad9a:	d1c5      	bne.n	800ad28 <__swsetup_r+0x24>
 800ad9c:	bd38      	pop	{r3, r4, r5, pc}
 800ad9e:	0799      	lsls	r1, r3, #30
 800ada0:	bf58      	it	pl
 800ada2:	6962      	ldrpl	r2, [r4, #20]
 800ada4:	60a2      	str	r2, [r4, #8]
 800ada6:	e7f4      	b.n	800ad92 <__swsetup_r+0x8e>
 800ada8:	2000      	movs	r0, #0
 800adaa:	e7f7      	b.n	800ad9c <__swsetup_r+0x98>
 800adac:	2000001c 	.word	0x2000001c

0800adb0 <_raise_r>:
 800adb0:	291f      	cmp	r1, #31
 800adb2:	b538      	push	{r3, r4, r5, lr}
 800adb4:	4605      	mov	r5, r0
 800adb6:	460c      	mov	r4, r1
 800adb8:	d904      	bls.n	800adc4 <_raise_r+0x14>
 800adba:	2316      	movs	r3, #22
 800adbc:	6003      	str	r3, [r0, #0]
 800adbe:	f04f 30ff 	mov.w	r0, #4294967295
 800adc2:	bd38      	pop	{r3, r4, r5, pc}
 800adc4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800adc6:	b112      	cbz	r2, 800adce <_raise_r+0x1e>
 800adc8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adcc:	b94b      	cbnz	r3, 800ade2 <_raise_r+0x32>
 800adce:	4628      	mov	r0, r5
 800add0:	f000 f830 	bl	800ae34 <_getpid_r>
 800add4:	4622      	mov	r2, r4
 800add6:	4601      	mov	r1, r0
 800add8:	4628      	mov	r0, r5
 800adda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adde:	f000 b817 	b.w	800ae10 <_kill_r>
 800ade2:	2b01      	cmp	r3, #1
 800ade4:	d00a      	beq.n	800adfc <_raise_r+0x4c>
 800ade6:	1c59      	adds	r1, r3, #1
 800ade8:	d103      	bne.n	800adf2 <_raise_r+0x42>
 800adea:	2316      	movs	r3, #22
 800adec:	6003      	str	r3, [r0, #0]
 800adee:	2001      	movs	r0, #1
 800adf0:	e7e7      	b.n	800adc2 <_raise_r+0x12>
 800adf2:	2100      	movs	r1, #0
 800adf4:	4620      	mov	r0, r4
 800adf6:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800adfa:	4798      	blx	r3
 800adfc:	2000      	movs	r0, #0
 800adfe:	e7e0      	b.n	800adc2 <_raise_r+0x12>

0800ae00 <raise>:
 800ae00:	4b02      	ldr	r3, [pc, #8]	@ (800ae0c <raise+0xc>)
 800ae02:	4601      	mov	r1, r0
 800ae04:	6818      	ldr	r0, [r3, #0]
 800ae06:	f7ff bfd3 	b.w	800adb0 <_raise_r>
 800ae0a:	bf00      	nop
 800ae0c:	2000001c 	.word	0x2000001c

0800ae10 <_kill_r>:
 800ae10:	b538      	push	{r3, r4, r5, lr}
 800ae12:	2300      	movs	r3, #0
 800ae14:	4d06      	ldr	r5, [pc, #24]	@ (800ae30 <_kill_r+0x20>)
 800ae16:	4604      	mov	r4, r0
 800ae18:	4608      	mov	r0, r1
 800ae1a:	4611      	mov	r1, r2
 800ae1c:	602b      	str	r3, [r5, #0]
 800ae1e:	f7f6 fd30 	bl	8001882 <_kill>
 800ae22:	1c43      	adds	r3, r0, #1
 800ae24:	d102      	bne.n	800ae2c <_kill_r+0x1c>
 800ae26:	682b      	ldr	r3, [r5, #0]
 800ae28:	b103      	cbz	r3, 800ae2c <_kill_r+0x1c>
 800ae2a:	6023      	str	r3, [r4, #0]
 800ae2c:	bd38      	pop	{r3, r4, r5, pc}
 800ae2e:	bf00      	nop
 800ae30:	20002130 	.word	0x20002130

0800ae34 <_getpid_r>:
 800ae34:	f7f6 bd1e 	b.w	8001874 <_getpid>

0800ae38 <__swhatbuf_r>:
 800ae38:	b570      	push	{r4, r5, r6, lr}
 800ae3a:	460c      	mov	r4, r1
 800ae3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae40:	4615      	mov	r5, r2
 800ae42:	2900      	cmp	r1, #0
 800ae44:	461e      	mov	r6, r3
 800ae46:	b096      	sub	sp, #88	@ 0x58
 800ae48:	da0c      	bge.n	800ae64 <__swhatbuf_r+0x2c>
 800ae4a:	89a3      	ldrh	r3, [r4, #12]
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae52:	bf14      	ite	ne
 800ae54:	2340      	movne	r3, #64	@ 0x40
 800ae56:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae5a:	2000      	movs	r0, #0
 800ae5c:	6031      	str	r1, [r6, #0]
 800ae5e:	602b      	str	r3, [r5, #0]
 800ae60:	b016      	add	sp, #88	@ 0x58
 800ae62:	bd70      	pop	{r4, r5, r6, pc}
 800ae64:	466a      	mov	r2, sp
 800ae66:	f000 f849 	bl	800aefc <_fstat_r>
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	dbed      	blt.n	800ae4a <__swhatbuf_r+0x12>
 800ae6e:	9901      	ldr	r1, [sp, #4]
 800ae70:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae74:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae78:	4259      	negs	r1, r3
 800ae7a:	4159      	adcs	r1, r3
 800ae7c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ae80:	e7eb      	b.n	800ae5a <__swhatbuf_r+0x22>

0800ae82 <__smakebuf_r>:
 800ae82:	898b      	ldrh	r3, [r1, #12]
 800ae84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae86:	079d      	lsls	r5, r3, #30
 800ae88:	4606      	mov	r6, r0
 800ae8a:	460c      	mov	r4, r1
 800ae8c:	d507      	bpl.n	800ae9e <__smakebuf_r+0x1c>
 800ae8e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ae92:	6023      	str	r3, [r4, #0]
 800ae94:	6123      	str	r3, [r4, #16]
 800ae96:	2301      	movs	r3, #1
 800ae98:	6163      	str	r3, [r4, #20]
 800ae9a:	b003      	add	sp, #12
 800ae9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae9e:	466a      	mov	r2, sp
 800aea0:	ab01      	add	r3, sp, #4
 800aea2:	f7ff ffc9 	bl	800ae38 <__swhatbuf_r>
 800aea6:	9f00      	ldr	r7, [sp, #0]
 800aea8:	4605      	mov	r5, r0
 800aeaa:	4639      	mov	r1, r7
 800aeac:	4630      	mov	r0, r6
 800aeae:	f7fd fbe1 	bl	8008674 <_malloc_r>
 800aeb2:	b948      	cbnz	r0, 800aec8 <__smakebuf_r+0x46>
 800aeb4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeb8:	059a      	lsls	r2, r3, #22
 800aeba:	d4ee      	bmi.n	800ae9a <__smakebuf_r+0x18>
 800aebc:	f023 0303 	bic.w	r3, r3, #3
 800aec0:	f043 0302 	orr.w	r3, r3, #2
 800aec4:	81a3      	strh	r3, [r4, #12]
 800aec6:	e7e2      	b.n	800ae8e <__smakebuf_r+0xc>
 800aec8:	89a3      	ldrh	r3, [r4, #12]
 800aeca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aece:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aed2:	81a3      	strh	r3, [r4, #12]
 800aed4:	9b01      	ldr	r3, [sp, #4]
 800aed6:	6020      	str	r0, [r4, #0]
 800aed8:	b15b      	cbz	r3, 800aef2 <__smakebuf_r+0x70>
 800aeda:	4630      	mov	r0, r6
 800aedc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aee0:	f000 f81e 	bl	800af20 <_isatty_r>
 800aee4:	b128      	cbz	r0, 800aef2 <__smakebuf_r+0x70>
 800aee6:	89a3      	ldrh	r3, [r4, #12]
 800aee8:	f023 0303 	bic.w	r3, r3, #3
 800aeec:	f043 0301 	orr.w	r3, r3, #1
 800aef0:	81a3      	strh	r3, [r4, #12]
 800aef2:	89a3      	ldrh	r3, [r4, #12]
 800aef4:	431d      	orrs	r5, r3
 800aef6:	81a5      	strh	r5, [r4, #12]
 800aef8:	e7cf      	b.n	800ae9a <__smakebuf_r+0x18>
	...

0800aefc <_fstat_r>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	2300      	movs	r3, #0
 800af00:	4d06      	ldr	r5, [pc, #24]	@ (800af1c <_fstat_r+0x20>)
 800af02:	4604      	mov	r4, r0
 800af04:	4608      	mov	r0, r1
 800af06:	4611      	mov	r1, r2
 800af08:	602b      	str	r3, [r5, #0]
 800af0a:	f7f6 fd19 	bl	8001940 <_fstat>
 800af0e:	1c43      	adds	r3, r0, #1
 800af10:	d102      	bne.n	800af18 <_fstat_r+0x1c>
 800af12:	682b      	ldr	r3, [r5, #0]
 800af14:	b103      	cbz	r3, 800af18 <_fstat_r+0x1c>
 800af16:	6023      	str	r3, [r4, #0]
 800af18:	bd38      	pop	{r3, r4, r5, pc}
 800af1a:	bf00      	nop
 800af1c:	20002130 	.word	0x20002130

0800af20 <_isatty_r>:
 800af20:	b538      	push	{r3, r4, r5, lr}
 800af22:	2300      	movs	r3, #0
 800af24:	4d05      	ldr	r5, [pc, #20]	@ (800af3c <_isatty_r+0x1c>)
 800af26:	4604      	mov	r4, r0
 800af28:	4608      	mov	r0, r1
 800af2a:	602b      	str	r3, [r5, #0]
 800af2c:	f7f6 fd17 	bl	800195e <_isatty>
 800af30:	1c43      	adds	r3, r0, #1
 800af32:	d102      	bne.n	800af3a <_isatty_r+0x1a>
 800af34:	682b      	ldr	r3, [r5, #0]
 800af36:	b103      	cbz	r3, 800af3a <_isatty_r+0x1a>
 800af38:	6023      	str	r3, [r4, #0]
 800af3a:	bd38      	pop	{r3, r4, r5, pc}
 800af3c:	20002130 	.word	0x20002130

0800af40 <_init>:
 800af40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af42:	bf00      	nop
 800af44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af46:	bc08      	pop	{r3}
 800af48:	469e      	mov	lr, r3
 800af4a:	4770      	bx	lr

0800af4c <_fini>:
 800af4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af4e:	bf00      	nop
 800af50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af52:	bc08      	pop	{r3}
 800af54:	469e      	mov	lr, r3
 800af56:	4770      	bx	lr
