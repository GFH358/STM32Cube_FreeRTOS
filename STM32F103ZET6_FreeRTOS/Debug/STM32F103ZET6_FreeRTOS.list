
STM32F103ZET6_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ad88  080001f0  080001f0  000011f0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fd8  0800af78  0800af78  0000bf78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bf50  0800bf50  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800bf50  0800bf50  0000cf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bf58  0800bf58  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bf58  0800bf58  0000cf58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bf5c  0800bf5c  0000cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800bf60  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f6c  200001d8  0800c138  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002144  0800c138  0000e144  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001697c  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003611  00000000  00000000  00023b7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014a8  00000000  00000000  00027190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001010  00000000  00000000  00028638  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000045a8  00000000  00000000  00029648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018544  00000000  00000000  0002dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a44d3  00000000  00000000  00046134  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ea607  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006b04  00000000  00000000  000ea64c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000f1150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f0 <__do_global_dtors_aux>:
 80001f0:	b510      	push	{r4, lr}
 80001f2:	4c05      	ldr	r4, [pc, #20]	@ (8000208 <__do_global_dtors_aux+0x18>)
 80001f4:	7823      	ldrb	r3, [r4, #0]
 80001f6:	b933      	cbnz	r3, 8000206 <__do_global_dtors_aux+0x16>
 80001f8:	4b04      	ldr	r3, [pc, #16]	@ (800020c <__do_global_dtors_aux+0x1c>)
 80001fa:	b113      	cbz	r3, 8000202 <__do_global_dtors_aux+0x12>
 80001fc:	4804      	ldr	r0, [pc, #16]	@ (8000210 <__do_global_dtors_aux+0x20>)
 80001fe:	f3af 8000 	nop.w
 8000202:	2301      	movs	r3, #1
 8000204:	7023      	strb	r3, [r4, #0]
 8000206:	bd10      	pop	{r4, pc}
 8000208:	200001d8 	.word	0x200001d8
 800020c:	00000000 	.word	0x00000000
 8000210:	0800af60 	.word	0x0800af60

08000214 <frame_dummy>:
 8000214:	b508      	push	{r3, lr}
 8000216:	4b03      	ldr	r3, [pc, #12]	@ (8000224 <frame_dummy+0x10>)
 8000218:	b11b      	cbz	r3, 8000222 <frame_dummy+0xe>
 800021a:	4903      	ldr	r1, [pc, #12]	@ (8000228 <frame_dummy+0x14>)
 800021c:	4803      	ldr	r0, [pc, #12]	@ (800022c <frame_dummy+0x18>)
 800021e:	f3af 8000 	nop.w
 8000222:	bd08      	pop	{r3, pc}
 8000224:	00000000 	.word	0x00000000
 8000228:	200001dc 	.word	0x200001dc
 800022c:	0800af60 	.word	0x0800af60

08000230 <strlen>:
 8000230:	4603      	mov	r3, r0
 8000232:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000236:	2a00      	cmp	r2, #0
 8000238:	d1fb      	bne.n	8000232 <strlen+0x2>
 800023a:	1a18      	subs	r0, r3, r0
 800023c:	3801      	subs	r0, #1
 800023e:	4770      	bx	lr

08000240 <__aeabi_drsub>:
 8000240:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000244:	e002      	b.n	800024c <__adddf3>
 8000246:	bf00      	nop

08000248 <__aeabi_dsub>:
 8000248:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800024c <__adddf3>:
 800024c:	b530      	push	{r4, r5, lr}
 800024e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000252:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000256:	ea94 0f05 	teq	r4, r5
 800025a:	bf08      	it	eq
 800025c:	ea90 0f02 	teqeq	r0, r2
 8000260:	bf1f      	itttt	ne
 8000262:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000266:	ea55 0c02 	orrsne.w	ip, r5, r2
 800026a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800026e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000272:	f000 80e2 	beq.w	800043a <__adddf3+0x1ee>
 8000276:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800027a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800027e:	bfb8      	it	lt
 8000280:	426d      	neglt	r5, r5
 8000282:	dd0c      	ble.n	800029e <__adddf3+0x52>
 8000284:	442c      	add	r4, r5
 8000286:	ea80 0202 	eor.w	r2, r0, r2
 800028a:	ea81 0303 	eor.w	r3, r1, r3
 800028e:	ea82 0000 	eor.w	r0, r2, r0
 8000292:	ea83 0101 	eor.w	r1, r3, r1
 8000296:	ea80 0202 	eor.w	r2, r0, r2
 800029a:	ea81 0303 	eor.w	r3, r1, r3
 800029e:	2d36      	cmp	r5, #54	@ 0x36
 80002a0:	bf88      	it	hi
 80002a2:	bd30      	pophi	{r4, r5, pc}
 80002a4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ac:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002b0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002b4:	d002      	beq.n	80002bc <__adddf3+0x70>
 80002b6:	4240      	negs	r0, r0
 80002b8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002bc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80002c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002c4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002c8:	d002      	beq.n	80002d0 <__adddf3+0x84>
 80002ca:	4252      	negs	r2, r2
 80002cc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d0:	ea94 0f05 	teq	r4, r5
 80002d4:	f000 80a7 	beq.w	8000426 <__adddf3+0x1da>
 80002d8:	f1a4 0401 	sub.w	r4, r4, #1
 80002dc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002e0:	db0d      	blt.n	80002fe <__adddf3+0xb2>
 80002e2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002e6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ea:	1880      	adds	r0, r0, r2
 80002ec:	f141 0100 	adc.w	r1, r1, #0
 80002f0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002f4:	1880      	adds	r0, r0, r2
 80002f6:	fa43 f305 	asr.w	r3, r3, r5
 80002fa:	4159      	adcs	r1, r3
 80002fc:	e00e      	b.n	800031c <__adddf3+0xd0>
 80002fe:	f1a5 0520 	sub.w	r5, r5, #32
 8000302:	f10e 0e20 	add.w	lr, lr, #32
 8000306:	2a01      	cmp	r2, #1
 8000308:	fa03 fc0e 	lsl.w	ip, r3, lr
 800030c:	bf28      	it	cs
 800030e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000312:	fa43 f305 	asr.w	r3, r3, r5
 8000316:	18c0      	adds	r0, r0, r3
 8000318:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800031c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000320:	d507      	bpl.n	8000332 <__adddf3+0xe6>
 8000322:	f04f 0e00 	mov.w	lr, #0
 8000326:	f1dc 0c00 	rsbs	ip, ip, #0
 800032a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800032e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000332:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000336:	d31b      	bcc.n	8000370 <__adddf3+0x124>
 8000338:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800033c:	d30c      	bcc.n	8000358 <__adddf3+0x10c>
 800033e:	0849      	lsrs	r1, r1, #1
 8000340:	ea5f 0030 	movs.w	r0, r0, rrx
 8000344:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000348:	f104 0401 	add.w	r4, r4, #1
 800034c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000350:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000354:	f080 809a 	bcs.w	800048c <__adddf3+0x240>
 8000358:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800035c:	bf08      	it	eq
 800035e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000362:	f150 0000 	adcs.w	r0, r0, #0
 8000366:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800036a:	ea41 0105 	orr.w	r1, r1, r5
 800036e:	bd30      	pop	{r4, r5, pc}
 8000370:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000374:	4140      	adcs	r0, r0
 8000376:	eb41 0101 	adc.w	r1, r1, r1
 800037a:	3c01      	subs	r4, #1
 800037c:	bf28      	it	cs
 800037e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000382:	d2e9      	bcs.n	8000358 <__adddf3+0x10c>
 8000384:	f091 0f00 	teq	r1, #0
 8000388:	bf04      	itt	eq
 800038a:	4601      	moveq	r1, r0
 800038c:	2000      	moveq	r0, #0
 800038e:	fab1 f381 	clz	r3, r1
 8000392:	bf08      	it	eq
 8000394:	3320      	addeq	r3, #32
 8000396:	f1a3 030b 	sub.w	r3, r3, #11
 800039a:	f1b3 0220 	subs.w	r2, r3, #32
 800039e:	da0c      	bge.n	80003ba <__adddf3+0x16e>
 80003a0:	320c      	adds	r2, #12
 80003a2:	dd08      	ble.n	80003b6 <__adddf3+0x16a>
 80003a4:	f102 0c14 	add.w	ip, r2, #20
 80003a8:	f1c2 020c 	rsb	r2, r2, #12
 80003ac:	fa01 f00c 	lsl.w	r0, r1, ip
 80003b0:	fa21 f102 	lsr.w	r1, r1, r2
 80003b4:	e00c      	b.n	80003d0 <__adddf3+0x184>
 80003b6:	f102 0214 	add.w	r2, r2, #20
 80003ba:	bfd8      	it	le
 80003bc:	f1c2 0c20 	rsble	ip, r2, #32
 80003c0:	fa01 f102 	lsl.w	r1, r1, r2
 80003c4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003c8:	bfdc      	itt	le
 80003ca:	ea41 010c 	orrle.w	r1, r1, ip
 80003ce:	4090      	lslle	r0, r2
 80003d0:	1ae4      	subs	r4, r4, r3
 80003d2:	bfa2      	ittt	ge
 80003d4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003d8:	4329      	orrge	r1, r5
 80003da:	bd30      	popge	{r4, r5, pc}
 80003dc:	ea6f 0404 	mvn.w	r4, r4
 80003e0:	3c1f      	subs	r4, #31
 80003e2:	da1c      	bge.n	800041e <__adddf3+0x1d2>
 80003e4:	340c      	adds	r4, #12
 80003e6:	dc0e      	bgt.n	8000406 <__adddf3+0x1ba>
 80003e8:	f104 0414 	add.w	r4, r4, #20
 80003ec:	f1c4 0220 	rsb	r2, r4, #32
 80003f0:	fa20 f004 	lsr.w	r0, r0, r4
 80003f4:	fa01 f302 	lsl.w	r3, r1, r2
 80003f8:	ea40 0003 	orr.w	r0, r0, r3
 80003fc:	fa21 f304 	lsr.w	r3, r1, r4
 8000400:	ea45 0103 	orr.w	r1, r5, r3
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f1c4 040c 	rsb	r4, r4, #12
 800040a:	f1c4 0220 	rsb	r2, r4, #32
 800040e:	fa20 f002 	lsr.w	r0, r0, r2
 8000412:	fa01 f304 	lsl.w	r3, r1, r4
 8000416:	ea40 0003 	orr.w	r0, r0, r3
 800041a:	4629      	mov	r1, r5
 800041c:	bd30      	pop	{r4, r5, pc}
 800041e:	fa21 f004 	lsr.w	r0, r1, r4
 8000422:	4629      	mov	r1, r5
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	f094 0f00 	teq	r4, #0
 800042a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800042e:	bf06      	itte	eq
 8000430:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000434:	3401      	addeq	r4, #1
 8000436:	3d01      	subne	r5, #1
 8000438:	e74e      	b.n	80002d8 <__adddf3+0x8c>
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf18      	it	ne
 8000440:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000444:	d029      	beq.n	800049a <__adddf3+0x24e>
 8000446:	ea94 0f05 	teq	r4, r5
 800044a:	bf08      	it	eq
 800044c:	ea90 0f02 	teqeq	r0, r2
 8000450:	d005      	beq.n	800045e <__adddf3+0x212>
 8000452:	ea54 0c00 	orrs.w	ip, r4, r0
 8000456:	bf04      	itt	eq
 8000458:	4619      	moveq	r1, r3
 800045a:	4610      	moveq	r0, r2
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea91 0f03 	teq	r1, r3
 8000462:	bf1e      	ittt	ne
 8000464:	2100      	movne	r1, #0
 8000466:	2000      	movne	r0, #0
 8000468:	bd30      	popne	{r4, r5, pc}
 800046a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800046e:	d105      	bne.n	800047c <__adddf3+0x230>
 8000470:	0040      	lsls	r0, r0, #1
 8000472:	4149      	adcs	r1, r1
 8000474:	bf28      	it	cs
 8000476:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800047a:	bd30      	pop	{r4, r5, pc}
 800047c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000480:	bf3c      	itt	cc
 8000482:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000486:	bd30      	popcc	{r4, r5, pc}
 8000488:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800048c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000490:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000494:	f04f 0000 	mov.w	r0, #0
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf1a      	itte	ne
 80004a0:	4619      	movne	r1, r3
 80004a2:	4610      	movne	r0, r2
 80004a4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004a8:	bf1c      	itt	ne
 80004aa:	460b      	movne	r3, r1
 80004ac:	4602      	movne	r2, r0
 80004ae:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004b2:	bf06      	itte	eq
 80004b4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004b8:	ea91 0f03 	teqeq	r1, r3
 80004bc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80004c0:	bd30      	pop	{r4, r5, pc}
 80004c2:	bf00      	nop

080004c4 <__aeabi_ui2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d8:	f04f 0500 	mov.w	r5, #0
 80004dc:	f04f 0100 	mov.w	r1, #0
 80004e0:	e750      	b.n	8000384 <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_i2d>:
 80004e4:	f090 0f00 	teq	r0, #0
 80004e8:	bf04      	itt	eq
 80004ea:	2100      	moveq	r1, #0
 80004ec:	4770      	bxeq	lr
 80004ee:	b530      	push	{r4, r5, lr}
 80004f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004f8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004fc:	bf48      	it	mi
 80004fe:	4240      	negmi	r0, r0
 8000500:	f04f 0100 	mov.w	r1, #0
 8000504:	e73e      	b.n	8000384 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_f2d>:
 8000508:	0042      	lsls	r2, r0, #1
 800050a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800050e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000512:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000516:	bf1f      	itttt	ne
 8000518:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800051c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000520:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000524:	4770      	bxne	lr
 8000526:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800052a:	bf08      	it	eq
 800052c:	4770      	bxeq	lr
 800052e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000532:	bf04      	itt	eq
 8000534:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000538:	4770      	bxeq	lr
 800053a:	b530      	push	{r4, r5, lr}
 800053c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000540:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000544:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000548:	e71c      	b.n	8000384 <__adddf3+0x138>
 800054a:	bf00      	nop

0800054c <__aeabi_ul2d>:
 800054c:	ea50 0201 	orrs.w	r2, r0, r1
 8000550:	bf08      	it	eq
 8000552:	4770      	bxeq	lr
 8000554:	b530      	push	{r4, r5, lr}
 8000556:	f04f 0500 	mov.w	r5, #0
 800055a:	e00a      	b.n	8000572 <__aeabi_l2d+0x16>

0800055c <__aeabi_l2d>:
 800055c:	ea50 0201 	orrs.w	r2, r0, r1
 8000560:	bf08      	it	eq
 8000562:	4770      	bxeq	lr
 8000564:	b530      	push	{r4, r5, lr}
 8000566:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800056a:	d502      	bpl.n	8000572 <__aeabi_l2d+0x16>
 800056c:	4240      	negs	r0, r0
 800056e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000572:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000576:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800057a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800057e:	f43f aed8 	beq.w	8000332 <__adddf3+0xe6>
 8000582:	f04f 0203 	mov.w	r2, #3
 8000586:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800058a:	bf18      	it	ne
 800058c:	3203      	addne	r2, #3
 800058e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000592:	bf18      	it	ne
 8000594:	3203      	addne	r2, #3
 8000596:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800059a:	f1c2 0320 	rsb	r3, r2, #32
 800059e:	fa00 fc03 	lsl.w	ip, r0, r3
 80005a2:	fa20 f002 	lsr.w	r0, r0, r2
 80005a6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005aa:	ea40 000e 	orr.w	r0, r0, lr
 80005ae:	fa21 f102 	lsr.w	r1, r1, r2
 80005b2:	4414      	add	r4, r2
 80005b4:	e6bd      	b.n	8000332 <__adddf3+0xe6>
 80005b6:	bf00      	nop

080005b8 <__aeabi_dmul>:
 80005b8:	b570      	push	{r4, r5, r6, lr}
 80005ba:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005be:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80005c2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005c6:	bf1d      	ittte	ne
 80005c8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005cc:	ea94 0f0c 	teqne	r4, ip
 80005d0:	ea95 0f0c 	teqne	r5, ip
 80005d4:	f000 f8de 	bleq	8000794 <__aeabi_dmul+0x1dc>
 80005d8:	442c      	add	r4, r5
 80005da:	ea81 0603 	eor.w	r6, r1, r3
 80005de:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005e2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005e6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ea:	bf18      	it	ne
 80005ec:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005f0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005f4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005f8:	d038      	beq.n	800066c <__aeabi_dmul+0xb4>
 80005fa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005fe:	f04f 0500 	mov.w	r5, #0
 8000602:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000606:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800060a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800060e:	f04f 0600 	mov.w	r6, #0
 8000612:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000616:	f09c 0f00 	teq	ip, #0
 800061a:	bf18      	it	ne
 800061c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000620:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000624:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000628:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800062c:	d204      	bcs.n	8000638 <__aeabi_dmul+0x80>
 800062e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000632:	416d      	adcs	r5, r5
 8000634:	eb46 0606 	adc.w	r6, r6, r6
 8000638:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800063c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000640:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000644:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000648:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800064c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000650:	bf88      	it	hi
 8000652:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000656:	d81e      	bhi.n	8000696 <__aeabi_dmul+0xde>
 8000658:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800065c:	bf08      	it	eq
 800065e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000662:	f150 0000 	adcs.w	r0, r0, #0
 8000666:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000670:	ea46 0101 	orr.w	r1, r6, r1
 8000674:	ea40 0002 	orr.w	r0, r0, r2
 8000678:	ea81 0103 	eor.w	r1, r1, r3
 800067c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000680:	bfc2      	ittt	gt
 8000682:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000686:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800068a:	bd70      	popgt	{r4, r5, r6, pc}
 800068c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000690:	f04f 0e00 	mov.w	lr, #0
 8000694:	3c01      	subs	r4, #1
 8000696:	f300 80ab 	bgt.w	80007f0 <__aeabi_dmul+0x238>
 800069a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800069e:	bfde      	ittt	le
 80006a0:	2000      	movle	r0, #0
 80006a2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006a6:	bd70      	pople	{r4, r5, r6, pc}
 80006a8:	f1c4 0400 	rsb	r4, r4, #0
 80006ac:	3c20      	subs	r4, #32
 80006ae:	da35      	bge.n	800071c <__aeabi_dmul+0x164>
 80006b0:	340c      	adds	r4, #12
 80006b2:	dc1b      	bgt.n	80006ec <__aeabi_dmul+0x134>
 80006b4:	f104 0414 	add.w	r4, r4, #20
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f305 	lsl.w	r3, r0, r5
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006d0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d8:	fa21 f604 	lsr.w	r6, r1, r4
 80006dc:	eb42 0106 	adc.w	r1, r2, r6
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f1c4 040c 	rsb	r4, r4, #12
 80006f0:	f1c4 0520 	rsb	r5, r4, #32
 80006f4:	fa00 f304 	lsl.w	r3, r0, r4
 80006f8:	fa20 f005 	lsr.w	r0, r0, r5
 80006fc:	fa01 f204 	lsl.w	r2, r1, r4
 8000700:	ea40 0002 	orr.w	r0, r0, r2
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000708:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800070c:	f141 0100 	adc.w	r1, r1, #0
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 0520 	rsb	r5, r4, #32
 8000720:	fa00 f205 	lsl.w	r2, r0, r5
 8000724:	ea4e 0e02 	orr.w	lr, lr, r2
 8000728:	fa20 f304 	lsr.w	r3, r0, r4
 800072c:	fa01 f205 	lsl.w	r2, r1, r5
 8000730:	ea43 0302 	orr.w	r3, r3, r2
 8000734:	fa21 f004 	lsr.w	r0, r1, r4
 8000738:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800073c:	fa21 f204 	lsr.w	r2, r1, r4
 8000740:	ea20 0002 	bic.w	r0, r0, r2
 8000744:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000748:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800074c:	bf08      	it	eq
 800074e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000752:	bd70      	pop	{r4, r5, r6, pc}
 8000754:	f094 0f00 	teq	r4, #0
 8000758:	d10f      	bne.n	800077a <__aeabi_dmul+0x1c2>
 800075a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800075e:	0040      	lsls	r0, r0, #1
 8000760:	eb41 0101 	adc.w	r1, r1, r1
 8000764:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000768:	bf08      	it	eq
 800076a:	3c01      	subeq	r4, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1a6>
 800076e:	ea41 0106 	orr.w	r1, r1, r6
 8000772:	f095 0f00 	teq	r5, #0
 8000776:	bf18      	it	ne
 8000778:	4770      	bxne	lr
 800077a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800077e:	0052      	lsls	r2, r2, #1
 8000780:	eb43 0303 	adc.w	r3, r3, r3
 8000784:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000788:	bf08      	it	eq
 800078a:	3d01      	subeq	r5, #1
 800078c:	d0f7      	beq.n	800077e <__aeabi_dmul+0x1c6>
 800078e:	ea43 0306 	orr.w	r3, r3, r6
 8000792:	4770      	bx	lr
 8000794:	ea94 0f0c 	teq	r4, ip
 8000798:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800079c:	bf18      	it	ne
 800079e:	ea95 0f0c 	teqne	r5, ip
 80007a2:	d00c      	beq.n	80007be <__aeabi_dmul+0x206>
 80007a4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a8:	bf18      	it	ne
 80007aa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ae:	d1d1      	bne.n	8000754 <__aeabi_dmul+0x19c>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	f04f 0000 	mov.w	r0, #0
 80007bc:	bd70      	pop	{r4, r5, r6, pc}
 80007be:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007c2:	bf06      	itte	eq
 80007c4:	4610      	moveq	r0, r2
 80007c6:	4619      	moveq	r1, r3
 80007c8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007cc:	d019      	beq.n	8000802 <__aeabi_dmul+0x24a>
 80007ce:	ea94 0f0c 	teq	r4, ip
 80007d2:	d102      	bne.n	80007da <__aeabi_dmul+0x222>
 80007d4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007d8:	d113      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007da:	ea95 0f0c 	teq	r5, ip
 80007de:	d105      	bne.n	80007ec <__aeabi_dmul+0x234>
 80007e0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007e4:	bf1c      	itt	ne
 80007e6:	4610      	movne	r0, r2
 80007e8:	4619      	movne	r1, r3
 80007ea:	d10a      	bne.n	8000802 <__aeabi_dmul+0x24a>
 80007ec:	ea81 0103 	eor.w	r1, r1, r3
 80007f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007f8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007fc:	f04f 0000 	mov.w	r0, #0
 8000800:	bd70      	pop	{r4, r5, r6, pc}
 8000802:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000806:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__aeabi_ddiv>:
 800080c:	b570      	push	{r4, r5, r6, lr}
 800080e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000812:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000816:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800081a:	bf1d      	ittte	ne
 800081c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000820:	ea94 0f0c 	teqne	r4, ip
 8000824:	ea95 0f0c 	teqne	r5, ip
 8000828:	f000 f8a7 	bleq	800097a <__aeabi_ddiv+0x16e>
 800082c:	eba4 0405 	sub.w	r4, r4, r5
 8000830:	ea81 0e03 	eor.w	lr, r1, r3
 8000834:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000838:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800083c:	f000 8088 	beq.w	8000950 <__aeabi_ddiv+0x144>
 8000840:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000844:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000848:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800084c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000850:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000854:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000858:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800085c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000860:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000864:	429d      	cmp	r5, r3
 8000866:	bf08      	it	eq
 8000868:	4296      	cmpeq	r6, r2
 800086a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800086e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000872:	d202      	bcs.n	800087a <__aeabi_ddiv+0x6e>
 8000874:	085b      	lsrs	r3, r3, #1
 8000876:	ea4f 0232 	mov.w	r2, r2, rrx
 800087a:	1ab6      	subs	r6, r6, r2
 800087c:	eb65 0503 	sbc.w	r5, r5, r3
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800088a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800088e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000892:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000896:	bf22      	ittt	cs
 8000898:	1ab6      	subcs	r6, r6, r2
 800089a:	4675      	movcs	r5, lr
 800089c:	ea40 000c 	orrcs.w	r0, r0, ip
 80008a0:	085b      	lsrs	r3, r3, #1
 80008a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008aa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ae:	bf22      	ittt	cs
 80008b0:	1ab6      	subcs	r6, r6, r2
 80008b2:	4675      	movcs	r5, lr
 80008b4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008b8:	085b      	lsrs	r3, r3, #1
 80008ba:	ea4f 0232 	mov.w	r2, r2, rrx
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008e8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008ec:	d018      	beq.n	8000920 <__aeabi_ddiv+0x114>
 80008ee:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008f2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008f6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008fa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008fe:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000902:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000906:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800090a:	d1c0      	bne.n	800088e <__aeabi_ddiv+0x82>
 800090c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000910:	d10b      	bne.n	800092a <__aeabi_ddiv+0x11e>
 8000912:	ea41 0100 	orr.w	r1, r1, r0
 8000916:	f04f 0000 	mov.w	r0, #0
 800091a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800091e:	e7b6      	b.n	800088e <__aeabi_ddiv+0x82>
 8000920:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000924:	bf04      	itt	eq
 8000926:	4301      	orreq	r1, r0
 8000928:	2000      	moveq	r0, #0
 800092a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800092e:	bf88      	it	hi
 8000930:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000934:	f63f aeaf 	bhi.w	8000696 <__aeabi_dmul+0xde>
 8000938:	ebb5 0c03 	subs.w	ip, r5, r3
 800093c:	bf04      	itt	eq
 800093e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000942:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000946:	f150 0000 	adcs.w	r0, r0, #0
 800094a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800094e:	bd70      	pop	{r4, r5, r6, pc}
 8000950:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000954:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000958:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800095c:	bfc2      	ittt	gt
 800095e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000962:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000966:	bd70      	popgt	{r4, r5, r6, pc}
 8000968:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800096c:	f04f 0e00 	mov.w	lr, #0
 8000970:	3c01      	subs	r4, #1
 8000972:	e690      	b.n	8000696 <__aeabi_dmul+0xde>
 8000974:	ea45 0e06 	orr.w	lr, r5, r6
 8000978:	e68d      	b.n	8000696 <__aeabi_dmul+0xde>
 800097a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800097e:	ea94 0f0c 	teq	r4, ip
 8000982:	bf08      	it	eq
 8000984:	ea95 0f0c 	teqeq	r5, ip
 8000988:	f43f af3b 	beq.w	8000802 <__aeabi_dmul+0x24a>
 800098c:	ea94 0f0c 	teq	r4, ip
 8000990:	d10a      	bne.n	80009a8 <__aeabi_ddiv+0x19c>
 8000992:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000996:	f47f af34 	bne.w	8000802 <__aeabi_dmul+0x24a>
 800099a:	ea95 0f0c 	teq	r5, ip
 800099e:	f47f af25 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009a2:	4610      	mov	r0, r2
 80009a4:	4619      	mov	r1, r3
 80009a6:	e72c      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009a8:	ea95 0f0c 	teq	r5, ip
 80009ac:	d106      	bne.n	80009bc <__aeabi_ddiv+0x1b0>
 80009ae:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009b2:	f43f aefd 	beq.w	80007b0 <__aeabi_dmul+0x1f8>
 80009b6:	4610      	mov	r0, r2
 80009b8:	4619      	mov	r1, r3
 80009ba:	e722      	b.n	8000802 <__aeabi_dmul+0x24a>
 80009bc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009c0:	bf18      	it	ne
 80009c2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009c6:	f47f aec5 	bne.w	8000754 <__aeabi_dmul+0x19c>
 80009ca:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ce:	f47f af0d 	bne.w	80007ec <__aeabi_dmul+0x234>
 80009d2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009d6:	f47f aeeb 	bne.w	80007b0 <__aeabi_dmul+0x1f8>
 80009da:	e712      	b.n	8000802 <__aeabi_dmul+0x24a>

080009dc <__gedf2>:
 80009dc:	f04f 3cff 	mov.w	ip, #4294967295
 80009e0:	e006      	b.n	80009f0 <__cmpdf2+0x4>
 80009e2:	bf00      	nop

080009e4 <__ledf2>:
 80009e4:	f04f 0c01 	mov.w	ip, #1
 80009e8:	e002      	b.n	80009f0 <__cmpdf2+0x4>
 80009ea:	bf00      	nop

080009ec <__cmpdf2>:
 80009ec:	f04f 0c01 	mov.w	ip, #1
 80009f0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009f4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009fc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a06:	d01b      	beq.n	8000a40 <__cmpdf2+0x54>
 8000a08:	b001      	add	sp, #4
 8000a0a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a0e:	bf0c      	ite	eq
 8000a10:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a14:	ea91 0f03 	teqne	r1, r3
 8000a18:	bf02      	ittt	eq
 8000a1a:	ea90 0f02 	teqeq	r0, r2
 8000a1e:	2000      	moveq	r0, #0
 8000a20:	4770      	bxeq	lr
 8000a22:	f110 0f00 	cmn.w	r0, #0
 8000a26:	ea91 0f03 	teq	r1, r3
 8000a2a:	bf58      	it	pl
 8000a2c:	4299      	cmppl	r1, r3
 8000a2e:	bf08      	it	eq
 8000a30:	4290      	cmpeq	r0, r2
 8000a32:	bf2c      	ite	cs
 8000a34:	17d8      	asrcs	r0, r3, #31
 8000a36:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a3a:	f040 0001 	orr.w	r0, r0, #1
 8000a3e:	4770      	bx	lr
 8000a40:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a48:	d102      	bne.n	8000a50 <__cmpdf2+0x64>
 8000a4a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4e:	d107      	bne.n	8000a60 <__cmpdf2+0x74>
 8000a50:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a54:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a58:	d1d6      	bne.n	8000a08 <__cmpdf2+0x1c>
 8000a5a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5e:	d0d3      	beq.n	8000a08 <__cmpdf2+0x1c>
 8000a60:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <__aeabi_cdrcmple>:
 8000a68:	4684      	mov	ip, r0
 8000a6a:	4610      	mov	r0, r2
 8000a6c:	4662      	mov	r2, ip
 8000a6e:	468c      	mov	ip, r1
 8000a70:	4619      	mov	r1, r3
 8000a72:	4663      	mov	r3, ip
 8000a74:	e000      	b.n	8000a78 <__aeabi_cdcmpeq>
 8000a76:	bf00      	nop

08000a78 <__aeabi_cdcmpeq>:
 8000a78:	b501      	push	{r0, lr}
 8000a7a:	f7ff ffb7 	bl	80009ec <__cmpdf2>
 8000a7e:	2800      	cmp	r0, #0
 8000a80:	bf48      	it	mi
 8000a82:	f110 0f00 	cmnmi.w	r0, #0
 8000a86:	bd01      	pop	{r0, pc}

08000a88 <__aeabi_dcmpeq>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff fff4 	bl	8000a78 <__aeabi_cdcmpeq>
 8000a90:	bf0c      	ite	eq
 8000a92:	2001      	moveq	r0, #1
 8000a94:	2000      	movne	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_dcmplt>:
 8000a9c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa0:	f7ff ffea 	bl	8000a78 <__aeabi_cdcmpeq>
 8000aa4:	bf34      	ite	cc
 8000aa6:	2001      	movcc	r0, #1
 8000aa8:	2000      	movcs	r0, #0
 8000aaa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aae:	bf00      	nop

08000ab0 <__aeabi_dcmple>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff ffe0 	bl	8000a78 <__aeabi_cdcmpeq>
 8000ab8:	bf94      	ite	ls
 8000aba:	2001      	movls	r0, #1
 8000abc:	2000      	movhi	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmpge>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffce 	bl	8000a68 <__aeabi_cdrcmple>
 8000acc:	bf94      	ite	ls
 8000ace:	2001      	movls	r0, #1
 8000ad0:	2000      	movhi	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmpgt>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffc4 	bl	8000a68 <__aeabi_cdrcmple>
 8000ae0:	bf34      	ite	cc
 8000ae2:	2001      	movcc	r0, #1
 8000ae4:	2000      	movcs	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpun>:
 8000aec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af4:	d102      	bne.n	8000afc <__aeabi_dcmpun+0x10>
 8000af6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afa:	d10a      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000afc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b04:	d102      	bne.n	8000b0c <__aeabi_dcmpun+0x20>
 8000b06:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0a:	d102      	bne.n	8000b12 <__aeabi_dcmpun+0x26>
 8000b0c:	f04f 0000 	mov.w	r0, #0
 8000b10:	4770      	bx	lr
 8000b12:	f04f 0001 	mov.w	r0, #1
 8000b16:	4770      	bx	lr

08000b18 <__aeabi_d2iz>:
 8000b18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b1c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b20:	d215      	bcs.n	8000b4e <__aeabi_d2iz+0x36>
 8000b22:	d511      	bpl.n	8000b48 <__aeabi_d2iz+0x30>
 8000b24:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b28:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b2c:	d912      	bls.n	8000b54 <__aeabi_d2iz+0x3c>
 8000b2e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b36:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	bf18      	it	ne
 8000b44:	4240      	negne	r0, r0
 8000b46:	4770      	bx	lr
 8000b48:	f04f 0000 	mov.w	r0, #0
 8000b4c:	4770      	bx	lr
 8000b4e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b52:	d105      	bne.n	8000b60 <__aeabi_d2iz+0x48>
 8000b54:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b58:	bf08      	it	eq
 8000b5a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b5e:	4770      	bx	lr
 8000b60:	f04f 0000 	mov.w	r0, #0
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2uiz>:
 8000b68:	004a      	lsls	r2, r1, #1
 8000b6a:	d211      	bcs.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d211      	bcs.n	8000b96 <__aeabi_d2uiz+0x2e>
 8000b72:	d50d      	bpl.n	8000b90 <__aeabi_d2uiz+0x28>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d40e      	bmi.n	8000b9c <__aeabi_d2uiz+0x34>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_d2uiz+0x3a>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0000 	mov.w	r0, #0
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2lz>:
 8000c48:	b538      	push	{r3, r4, r5, lr}
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	4604      	mov	r4, r0
 8000c50:	460d      	mov	r5, r1
 8000c52:	f7ff ff23 	bl	8000a9c <__aeabi_dcmplt>
 8000c56:	b928      	cbnz	r0, 8000c64 <__aeabi_d2lz+0x1c>
 8000c58:	4620      	mov	r0, r4
 8000c5a:	4629      	mov	r1, r5
 8000c5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c60:	f000 b80a 	b.w	8000c78 <__aeabi_d2ulz>
 8000c64:	4620      	mov	r0, r4
 8000c66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000c6a:	f000 f805 	bl	8000c78 <__aeabi_d2ulz>
 8000c6e:	4240      	negs	r0, r0
 8000c70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c74:	bd38      	pop	{r3, r4, r5, pc}
 8000c76:	bf00      	nop

08000c78 <__aeabi_d2ulz>:
 8000c78:	b5d0      	push	{r4, r6, r7, lr}
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8000cac <__aeabi_d2ulz+0x34>)
 8000c7e:	4606      	mov	r6, r0
 8000c80:	460f      	mov	r7, r1
 8000c82:	f7ff fc99 	bl	80005b8 <__aeabi_dmul>
 8000c86:	f7ff ff6f 	bl	8000b68 <__aeabi_d2uiz>
 8000c8a:	4604      	mov	r4, r0
 8000c8c:	f7ff fc1a 	bl	80004c4 <__aeabi_ui2d>
 8000c90:	2200      	movs	r2, #0
 8000c92:	4b07      	ldr	r3, [pc, #28]	@ (8000cb0 <__aeabi_d2ulz+0x38>)
 8000c94:	f7ff fc90 	bl	80005b8 <__aeabi_dmul>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	460b      	mov	r3, r1
 8000c9c:	4630      	mov	r0, r6
 8000c9e:	4639      	mov	r1, r7
 8000ca0:	f7ff fad2 	bl	8000248 <__aeabi_dsub>
 8000ca4:	f7ff ff60 	bl	8000b68 <__aeabi_d2uiz>
 8000ca8:	4621      	mov	r1, r4
 8000caa:	bdd0      	pop	{r4, r6, r7, pc}
 8000cac:	3df00000 	.word	0x3df00000
 8000cb0:	41f00000 	.word	0x41f00000

08000cb4 <user_test_led>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
//PB5红灯交替闪烁
void user_test_led(void){
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
	//HAL_Delay(1000);
//	if(HAL_GPIO_ReadPin(GPIOE,GPIO_PIN_3)==GPIO_PIN_RESET){
		if(cnt1 == 1){
 8000cb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <user_test_led+0x38>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d108      	bne.n	8000cd2 <user_test_led+0x1e>
			cnt1 = 0;
 8000cc0:	4b0a      	ldr	r3, [pc, #40]	@ (8000cec <user_test_led+0x38>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 0);
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4809      	ldr	r0, [pc, #36]	@ (8000cf0 <user_test_led+0x3c>)
 8000ccc:	f001 fae2 	bl	8002294 <HAL_GPIO_WritePin>
			cnt1++;
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
//			HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5, GPIO_PIN_RESET);
		}
//	}
}
 8000cd0:	e009      	b.n	8000ce6 <user_test_led+0x32>
			cnt1++;
 8000cd2:	4b06      	ldr	r3, [pc, #24]	@ (8000cec <user_test_led+0x38>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	3301      	adds	r3, #1
 8000cd8:	4a04      	ldr	r2, [pc, #16]	@ (8000cec <user_test_led+0x38>)
 8000cda:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	2120      	movs	r1, #32
 8000ce0:	4803      	ldr	r0, [pc, #12]	@ (8000cf0 <user_test_led+0x3c>)
 8000ce2:	f001 fad7 	bl	8002294 <HAL_GPIO_WritePin>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	20000250 	.word	0x20000250
 8000cf0:	40010c00 	.word	0x40010c00

08000cf4 <HAL_UARTEx_RxEventCallback>:
//	HAL_UART_Transmit_IT(&huart4, user_cam, 2);
//	HAL_UART_Receive_IT(&huart4, user_cam, 2);
//}

//*串口中断
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size){
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	460b      	mov	r3, r1
 8000cfe:	807b      	strh	r3, [r7, #2]
	if(huart == &huart4){
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	4a13      	ldr	r2, [pc, #76]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d04:	4293      	cmp	r3, r2
 8000d06:	d11e      	bne.n	8000d46 <HAL_UARTEx_RxEventCallback+0x52>
		HAL_UART_Transmit_IT(&huart4, user_cam, Size);//*把数据返回给上位�?
 8000d08:	887b      	ldrh	r3, [r7, #2]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	4911      	ldr	r1, [pc, #68]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d0e:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d10:	f002 f9d8 	bl	80030c4 <HAL_UART_Transmit_IT>

		//*向消息队列发送一个消�?
		uint8_t flag = 1;
 8000d14:	2301      	movs	r3, #1
 8000d16:	72fb      	strb	r3, [r7, #11]
		BaseType_t err = xQueueSendToBackFromISR(Uart_QueueHandle,&flag,pdMS_TO_TICKS(50));
 8000d18:	4b0f      	ldr	r3, [pc, #60]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x64>)
 8000d1a:	6818      	ldr	r0, [r3, #0]
 8000d1c:	f107 010b 	add.w	r1, r7, #11
 8000d20:	2300      	movs	r3, #0
 8000d22:	2232      	movs	r2, #50	@ 0x32
 8000d24:	f003 fc60 	bl	80045e8 <xQueueGenericSendFromISR>
 8000d28:	60f8      	str	r0, [r7, #12]
		if(err ==errQUEUE_FULL){
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d105      	bne.n	8000d3c <HAL_UARTEx_RxEventCallback+0x48>
			xQueueReset(Uart_QueueHandle);
 8000d30:	4b09      	ldr	r3, [pc, #36]	@ (8000d58 <HAL_UARTEx_RxEventCallback+0x64>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f003 fa0c 	bl	8004154 <xQueueGenericReset>
		}

		HAL_UARTEx_ReceiveToIdle_IT(&huart4, user_cam, 10);//*重新打开串口接收
 8000d3c:	220a      	movs	r2, #10
 8000d3e:	4905      	ldr	r1, [pc, #20]	@ (8000d54 <HAL_UARTEx_RxEventCallback+0x60>)
 8000d40:	4803      	ldr	r0, [pc, #12]	@ (8000d50 <HAL_UARTEx_RxEventCallback+0x5c>)
 8000d42:	f002 f9f4 	bl	800312e <HAL_UARTEx_ReceiveToIdle_IT>

	}

}
 8000d46:	bf00      	nop
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200001f4 	.word	0x200001f4
 8000d54:	20000254 	.word	0x20000254
 8000d58:	2000024c 	.word	0x2000024c

08000d5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d60:	f000 fe8c 	bl	8001a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d64:	f000 f84e 	bl	8000e04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d68:	f000 f8bc 	bl	8000ee4 <MX_GPIO_Init>
  MX_UART4_Init();
 8000d6c:	f000 f890 	bl	8000e90 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d70:	f002 ff4a 	bl	8003c08 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of Uart_Queue */
  Uart_QueueHandle = osMessageQueueNew (10, sizeof(uint8_t), &Uart_Queue_attributes);
 8000d74:	4a15      	ldr	r2, [pc, #84]	@ (8000dcc <main+0x70>)
 8000d76:	2101      	movs	r1, #1
 8000d78:	200a      	movs	r0, #10
 8000d7a:	f003 f883 	bl	8003e84 <osMessageQueueNew>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	4a13      	ldr	r2, [pc, #76]	@ (8000dd0 <main+0x74>)
 8000d82:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d84:	4a13      	ldr	r2, [pc, #76]	@ (8000dd4 <main+0x78>)
 8000d86:	2100      	movs	r1, #0
 8000d88:	4813      	ldr	r0, [pc, #76]	@ (8000dd8 <main+0x7c>)
 8000d8a:	f002 ffa3 	bl	8003cd4 <osThreadNew>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	4a12      	ldr	r2, [pc, #72]	@ (8000ddc <main+0x80>)
 8000d92:	6013      	str	r3, [r2, #0]

  /* creation of LedTask */
  LedTaskHandle = osThreadNew(LedTaskDeal, NULL, &LedTask_attributes);
 8000d94:	4a12      	ldr	r2, [pc, #72]	@ (8000de0 <main+0x84>)
 8000d96:	2100      	movs	r1, #0
 8000d98:	4812      	ldr	r0, [pc, #72]	@ (8000de4 <main+0x88>)
 8000d9a:	f002 ff9b 	bl	8003cd4 <osThreadNew>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	4a11      	ldr	r2, [pc, #68]	@ (8000de8 <main+0x8c>)
 8000da2:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(UartTaskDeal, NULL, &UartTask_attributes);
 8000da4:	4a11      	ldr	r2, [pc, #68]	@ (8000dec <main+0x90>)
 8000da6:	2100      	movs	r1, #0
 8000da8:	4811      	ldr	r0, [pc, #68]	@ (8000df0 <main+0x94>)
 8000daa:	f002 ff93 	bl	8003cd4 <osThreadNew>
 8000dae:	4603      	mov	r3, r0
 8000db0:	4a10      	ldr	r2, [pc, #64]	@ (8000df4 <main+0x98>)
 8000db2:	6013      	str	r3, [r2, #0]

  /* creation of OLEDTask */
  OLEDTaskHandle = osThreadNew(OLEDTaskDeal, NULL, &OLEDTask_attributes);
 8000db4:	4a10      	ldr	r2, [pc, #64]	@ (8000df8 <main+0x9c>)
 8000db6:	2100      	movs	r1, #0
 8000db8:	4810      	ldr	r0, [pc, #64]	@ (8000dfc <main+0xa0>)
 8000dba:	f002 ff8b 	bl	8003cd4 <osThreadNew>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	4a0f      	ldr	r2, [pc, #60]	@ (8000e00 <main+0xa4>)
 8000dc2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000dc4:	f002 ff52 	bl	8003c6c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <main+0x6c>
 8000dcc:	0800b07c 	.word	0x0800b07c
 8000dd0:	2000024c 	.word	0x2000024c
 8000dd4:	0800afec 	.word	0x0800afec
 8000dd8:	08000fa1 	.word	0x08000fa1
 8000ddc:	2000023c 	.word	0x2000023c
 8000de0:	0800b010 	.word	0x0800b010
 8000de4:	08000fb1 	.word	0x08000fb1
 8000de8:	20000240 	.word	0x20000240
 8000dec:	0800b034 	.word	0x0800b034
 8000df0:	08000fd9 	.word	0x08000fd9
 8000df4:	20000244 	.word	0x20000244
 8000df8:	0800b058 	.word	0x0800b058
 8000dfc:	0800101d 	.word	0x0800101d
 8000e00:	20000248 	.word	0x20000248

08000e04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b090      	sub	sp, #64	@ 0x40
 8000e08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0a:	f107 0318 	add.w	r3, r7, #24
 8000e0e:	2228      	movs	r2, #40	@ 0x28
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f006 fcdb 	bl	80077ce <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e18:	1d3b      	adds	r3, r7, #4
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
 8000e22:	60da      	str	r2, [r3, #12]
 8000e24:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e26:	2301      	movs	r3, #1
 8000e28:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e2a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e2e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e34:	2301      	movs	r3, #1
 8000e36:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e38:	2302      	movs	r3, #2
 8000e3a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e3c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e40:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e42:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e46:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 0318 	add.w	r3, r7, #24
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f001 fa39 	bl	80022c4 <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000e58:	f000 f930 	bl	80010bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2302      	movs	r3, #2
 8000e62:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e6c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e72:	1d3b      	adds	r3, r7, #4
 8000e74:	2102      	movs	r1, #2
 8000e76:	4618      	mov	r0, r3
 8000e78:	f001 fca6 	bl	80027c8 <HAL_RCC_ClockConfig>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000e82:	f000 f91b 	bl	80010bc <Error_Handler>
  }
}
 8000e86:	bf00      	nop
 8000e88:	3740      	adds	r7, #64	@ 0x40
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
	...

08000e90 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <MX_UART4_Init+0x50>)
 8000e98:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000e9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ea0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000eb6:	220c      	movs	r2, #12
 8000eb8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_UART4_Init+0x4c>)
 8000ec8:	f002 f8ac 	bl	8003024 <HAL_UART_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8000ed2:	f000 f8f3 	bl	80010bc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200001f4 	.word	0x200001f4
 8000ee0:	40004c00 	.word	0x40004c00

08000ee4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b088      	sub	sp, #32
 8000ee8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eea:	f107 0310 	add.w	r3, r7, #16
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]
 8000ef2:	605a      	str	r2, [r3, #4]
 8000ef4:	609a      	str	r2, [r3, #8]
 8000ef6:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	4b26      	ldr	r3, [pc, #152]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	4a25      	ldr	r2, [pc, #148]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000efe:	f043 0310 	orr.w	r3, r3, #16
 8000f02:	6193      	str	r3, [r2, #24]
 8000f04:	4b23      	ldr	r3, [pc, #140]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f06:	699b      	ldr	r3, [r3, #24]
 8000f08:	f003 0310 	and.w	r3, r3, #16
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f10:	4b20      	ldr	r3, [pc, #128]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f12:	699b      	ldr	r3, [r3, #24]
 8000f14:	4a1f      	ldr	r2, [pc, #124]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f16:	f043 0304 	orr.w	r3, r3, #4
 8000f1a:	6193      	str	r3, [r2, #24]
 8000f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f1e:	699b      	ldr	r3, [r3, #24]
 8000f20:	f003 0304 	and.w	r3, r3, #4
 8000f24:	60bb      	str	r3, [r7, #8]
 8000f26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f28:	4b1a      	ldr	r3, [pc, #104]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f2a:	699b      	ldr	r3, [r3, #24]
 8000f2c:	4a19      	ldr	r2, [pc, #100]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f2e:	f043 0308 	orr.w	r3, r3, #8
 8000f32:	6193      	str	r3, [r2, #24]
 8000f34:	4b17      	ldr	r3, [pc, #92]	@ (8000f94 <MX_GPIO_Init+0xb0>)
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	f003 0308 	and.w	r3, r3, #8
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OLED_RS_Pin|OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RST_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	210f      	movs	r1, #15
 8000f44:	4814      	ldr	r0, [pc, #80]	@ (8000f98 <MX_GPIO_Init+0xb4>)
 8000f46:	f001 f9a5 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2130      	movs	r1, #48	@ 0x30
 8000f4e:	4813      	ldr	r0, [pc, #76]	@ (8000f9c <MX_GPIO_Init+0xb8>)
 8000f50:	f001 f9a0 	bl	8002294 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_RS_Pin OLED_SCLK_Pin OLED_SDIN_Pin OLED_RST_Pin */
  GPIO_InitStruct.Pin = OLED_RS_Pin|OLED_SCLK_Pin|OLED_SDIN_Pin|OLED_RST_Pin;
 8000f54:	230f      	movs	r3, #15
 8000f56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	480b      	ldr	r0, [pc, #44]	@ (8000f98 <MX_GPIO_Init+0xb4>)
 8000f6c:	f000 fffe 	bl	8001f6c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000f70:	2330      	movs	r3, #48	@ 0x30
 8000f72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f74:	2301      	movs	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 0310 	add.w	r3, r7, #16
 8000f84:	4619      	mov	r1, r3
 8000f86:	4805      	ldr	r0, [pc, #20]	@ (8000f9c <MX_GPIO_Init+0xb8>)
 8000f88:	f000 fff0 	bl	8001f6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f8c:	bf00      	nop
 8000f8e:	3720      	adds	r7, #32
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bd80      	pop	{r7, pc}
 8000f94:	40021000 	.word	0x40021000
 8000f98:	40011000 	.word	0x40011000
 8000f9c:	40010c00 	.word	0x40010c00

08000fa0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
__weak void StartDefaultTask(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Infinite loop */

  for(;;)
  {

    osDelay(100);
 8000fa8:	2064      	movs	r0, #100	@ 0x64
 8000faa:	f002 ff3d 	bl	8003e28 <osDelay>
 8000fae:	e7fb      	b.n	8000fa8 <StartDefaultTask+0x8>

08000fb0 <LedTaskDeal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_LedTaskDeal */
void LedTaskDeal(void *argument)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b084      	sub	sp, #16
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN LedTaskDeal */
  /* Infinite loop */
	TickType_t pxPreviousWakeTime = xTaskGetTickCount();
 8000fb8:	f004 f966 	bl	8005288 <xTaskGetTickCount>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
//        osDelay(1000);
       user_test_led();
 8000fc0:	f7ff fe78 	bl	8000cb4 <user_test_led>
        vTaskDelayUntil(&pxPreviousWakeTime,pdMS_TO_TICKS(1000));//FreeRTOS周期性绝对延时
 8000fc4:	f107 030c 	add.w	r3, r7, #12
 8000fc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f003 ff91 	bl	8004ef4 <vTaskDelayUntil>
  {
 8000fd2:	bf00      	nop
 8000fd4:	e7f4      	b.n	8000fc0 <LedTaskDeal+0x10>
	...

08000fd8 <UartTaskDeal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UartTaskDeal */
void UartTaskDeal(void *argument)
{
 8000fd8:	b5b0      	push	{r4, r5, r7, lr}
 8000fda:	b088      	sub	sp, #32
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UartTaskDeal */
  /* Infinite loop */
  char user_data[] = "Uart task init ok";
 8000fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8001010 <UartTaskDeal+0x38>)
 8000fe2:	f107 040c 	add.w	r4, r7, #12
 8000fe6:	461d      	mov	r5, r3
 8000fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000fea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000fec:	682b      	ldr	r3, [r5, #0]
 8000fee:	8023      	strh	r3, [r4, #0]
  //HAL_UART_Receive_IT(&huart4, user_cam, 2);
  HAL_UARTEx_ReceiveToIdle_IT(&huart4, user_cam, 10);//启动串口接收
 8000ff0:	220a      	movs	r2, #10
 8000ff2:	4908      	ldr	r1, [pc, #32]	@ (8001014 <UartTaskDeal+0x3c>)
 8000ff4:	4808      	ldr	r0, [pc, #32]	@ (8001018 <UartTaskDeal+0x40>)
 8000ff6:	f002 f89a 	bl	800312e <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UART_Transmit_IT(&huart4, user_data, 18);
 8000ffa:	f107 030c 	add.w	r3, r7, #12
 8000ffe:	2212      	movs	r2, #18
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <UartTaskDeal+0x40>)
 8001004:	f002 f85e 	bl	80030c4 <HAL_UART_Transmit_IT>

  for(;;)
  {

    osDelay(1);
 8001008:	2001      	movs	r0, #1
 800100a:	f002 ff0d 	bl	8003e28 <osDelay>
 800100e:	e7fb      	b.n	8001008 <UartTaskDeal+0x30>
 8001010:	0800afb0 	.word	0x0800afb0
 8001014:	20000254 	.word	0x20000254
 8001018:	200001f4 	.word	0x200001f4

0800101c <OLEDTaskDeal>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OLEDTaskDeal */
void OLEDTaskDeal(void *argument)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af02      	add	r7, sp, #8
 8001022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OLEDTaskDeal */
  /* Infinite loop */
	int cnt = 0;
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
		OLED_Init();
 8001028:	f000 fa88 	bl	800153c <OLED_Init>
		OLED_Clear();
 800102c:	f000 f8da 	bl	80011e4 <OLED_Clear>
		OLED_Display_On();
 8001030:	f000 f8c8 	bl	80011c4 <OLED_Display_On>
		OLED_ShowString(0,5,"OLED init ok");//显示字符
 8001034:	4a15      	ldr	r2, [pc, #84]	@ (800108c <OLEDTaskDeal+0x70>)
 8001036:	2105      	movs	r1, #5
 8001038:	2000      	movs	r0, #0
 800103a:	f000 fa4d 	bl	80014d8 <OLED_ShowString>
	  for(;;)
	  {
	//    osDelay(1000);
	//    user_test_led();
		uint8_t flag;
		if(xQueueReceive(Uart_QueueHandle,&flag,pdMS_TO_TICKS(50)) ==pdTRUE){
 800103e:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <OLEDTaskDeal+0x74>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f107 010b 	add.w	r1, r7, #11
 8001046:	2232      	movs	r2, #50	@ 0x32
 8001048:	4618      	mov	r0, r3
 800104a:	f003 fb69 	bl	8004720 <xQueueReceive>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d105      	bne.n	8001060 <OLEDTaskDeal+0x44>
			OLED_ShowString(0,15,user_cam);//显示串口接收到的字符
 8001054:	4a0f      	ldr	r2, [pc, #60]	@ (8001094 <OLEDTaskDeal+0x78>)
 8001056:	210f      	movs	r1, #15
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fa3d 	bl	80014d8 <OLED_ShowString>
 800105e:	e7ee      	b.n	800103e <OLEDTaskDeal+0x22>
			//OLED_ShowString(0,5,"TEST-AA");//显示字符
			continue;
		}
	    cnt = cnt + 2;
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	3302      	adds	r3, #2
 8001064:	60fb      	str	r3, [r7, #12]
	    if(cnt > 99){
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	2b63      	cmp	r3, #99	@ 0x63
 800106a:	dd01      	ble.n	8001070 <OLEDTaskDeal+0x54>
	    	cnt=0;
 800106c:	2300      	movs	r3, #0
 800106e:	60fb      	str	r3, [r7, #12]
	    }
	    OLED_ShowNumber(30,30,cnt,2,16);//显示数字
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	2310      	movs	r3, #16
 8001074:	9300      	str	r3, [sp, #0]
 8001076:	2302      	movs	r3, #2
 8001078:	211e      	movs	r1, #30
 800107a:	201e      	movs	r0, #30
 800107c:	f000 f9be 	bl	80013fc <OLED_ShowNumber>

	    osDelay(100);
 8001080:	2064      	movs	r0, #100	@ 0x64
 8001082:	f002 fed1 	bl	8003e28 <osDelay>

	    OLED_Refresh_Gram();
 8001086:	f000 f81f 	bl	80010c8 <OLED_Refresh_Gram>
	  {
 800108a:	e7d8      	b.n	800103e <OLEDTaskDeal+0x22>
 800108c:	0800afc4 	.word	0x0800afc4
 8001090:	2000024c 	.word	0x2000024c
 8001094:	20000254 	.word	0x20000254

08001098 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a04      	ldr	r2, [pc, #16]	@ (80010b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d101      	bne.n	80010ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010aa:	f000 fcfd 	bl	8001aa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ae:	bf00      	nop
 80010b0:	3708      	adds	r7, #8
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40001000 	.word	0x40001000

080010bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c0:	b672      	cpsid	i
}
 80010c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010c4:	bf00      	nop
 80010c6:	e7fd      	b.n	80010c4 <Error_Handler+0x8>

080010c8 <OLED_Refresh_Gram>:
#include "oledfont.h"

u8 OLED_GRAM[128][8];

void OLED_Refresh_Gram(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b082      	sub	sp, #8
 80010cc:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)
 80010ce:	2300      	movs	r3, #0
 80010d0:	71fb      	strb	r3, [r7, #7]
 80010d2:	e026      	b.n	8001122 <OLED_Refresh_Gram+0x5a>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	3b50      	subs	r3, #80	@ 0x50
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	4618      	mov	r0, r3
 80010de:	f000 f82b 	bl	8001138 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 80010e2:	2100      	movs	r1, #0
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f827 	bl	8001138 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 80010ea:	2100      	movs	r1, #0
 80010ec:	2010      	movs	r0, #16
 80010ee:	f000 f823 	bl	8001138 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
 80010f2:	2300      	movs	r3, #0
 80010f4:	71bb      	strb	r3, [r7, #6]
 80010f6:	e00d      	b.n	8001114 <OLED_Refresh_Gram+0x4c>
 80010f8:	79ba      	ldrb	r2, [r7, #6]
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	490d      	ldr	r1, [pc, #52]	@ (8001134 <OLED_Refresh_Gram+0x6c>)
 80010fe:	00d2      	lsls	r2, r2, #3
 8001100:	440a      	add	r2, r1
 8001102:	4413      	add	r3, r2
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2101      	movs	r1, #1
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f815 	bl	8001138 <OLED_WR_Byte>
 800110e:	79bb      	ldrb	r3, [r7, #6]
 8001110:	3301      	adds	r3, #1
 8001112:	71bb      	strb	r3, [r7, #6]
 8001114:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001118:	2b00      	cmp	r3, #0
 800111a:	daed      	bge.n	80010f8 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)
 800111c:	79fb      	ldrb	r3, [r7, #7]
 800111e:	3301      	adds	r3, #1
 8001120:	71fb      	strb	r3, [r7, #7]
 8001122:	79fb      	ldrb	r3, [r7, #7]
 8001124:	2b07      	cmp	r3, #7
 8001126:	d9d5      	bls.n	80010d4 <OLED_Refresh_Gram+0xc>
	}
}
 8001128:	bf00      	nop
 800112a:	bf00      	nop
 800112c:	3708      	adds	r7, #8
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	20000260 	.word	0x20000260

08001138 <OLED_WR_Byte>:

//向OLED写入一个字节。
//dat:要写入的数据/命令
//cmd:数据/命令标志 0,表示命令;1,表示数据;
void OLED_WR_Byte(u8 dat,u8 cmd)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	71fb      	strb	r3, [r7, #7]
 8001144:	4613      	mov	r3, r2
 8001146:	71bb      	strb	r3, [r7, #6]
	u8 i;
	if(cmd)
 8001148:	79bb      	ldrb	r3, [r7, #6]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d005      	beq.n	800115a <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 800114e:	2201      	movs	r2, #1
 8001150:	2101      	movs	r1, #1
 8001152:	481b      	ldr	r0, [pc, #108]	@ (80011c0 <OLED_WR_Byte+0x88>)
 8001154:	f001 f89e 	bl	8002294 <HAL_GPIO_WritePin>
 8001158:	e004      	b.n	8001164 <OLED_WR_Byte+0x2c>
	else
	  OLED_RS_Clr();
 800115a:	2200      	movs	r2, #0
 800115c:	2101      	movs	r1, #1
 800115e:	4818      	ldr	r0, [pc, #96]	@ (80011c0 <OLED_WR_Byte+0x88>)
 8001160:	f001 f898 	bl	8002294 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
 8001168:	e01e      	b.n	80011a8 <OLED_WR_Byte+0x70>
	{
		OLED_SCLK_Clr();
 800116a:	2200      	movs	r2, #0
 800116c:	2102      	movs	r1, #2
 800116e:	4814      	ldr	r0, [pc, #80]	@ (80011c0 <OLED_WR_Byte+0x88>)
 8001170:	f001 f890 	bl	8002294 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001174:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001178:	2b00      	cmp	r3, #0
 800117a:	da05      	bge.n	8001188 <OLED_WR_Byte+0x50>
		   OLED_SDIN_Set();
 800117c:	2201      	movs	r2, #1
 800117e:	2104      	movs	r1, #4
 8001180:	480f      	ldr	r0, [pc, #60]	@ (80011c0 <OLED_WR_Byte+0x88>)
 8001182:	f001 f887 	bl	8002294 <HAL_GPIO_WritePin>
 8001186:	e004      	b.n	8001192 <OLED_WR_Byte+0x5a>
		else
		   OLED_SDIN_Clr();
 8001188:	2200      	movs	r2, #0
 800118a:	2104      	movs	r1, #4
 800118c:	480c      	ldr	r0, [pc, #48]	@ (80011c0 <OLED_WR_Byte+0x88>)
 800118e:	f001 f881 	bl	8002294 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001192:	2201      	movs	r2, #1
 8001194:	2102      	movs	r1, #2
 8001196:	480a      	ldr	r0, [pc, #40]	@ (80011c0 <OLED_WR_Byte+0x88>)
 8001198:	f001 f87c 	bl	8002294 <HAL_GPIO_WritePin>
		dat<<=1;
 800119c:	79fb      	ldrb	r3, [r7, #7]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
 80011a4:	3301      	adds	r3, #1
 80011a6:	73fb      	strb	r3, [r7, #15]
 80011a8:	7bfb      	ldrb	r3, [r7, #15]
 80011aa:	2b07      	cmp	r3, #7
 80011ac:	d9dd      	bls.n	800116a <OLED_WR_Byte+0x32>
	}
	OLED_RS_Set();
 80011ae:	2201      	movs	r2, #1
 80011b0:	2101      	movs	r1, #1
 80011b2:	4803      	ldr	r0, [pc, #12]	@ (80011c0 <OLED_WR_Byte+0x88>)
 80011b4:	f001 f86e 	bl	8002294 <HAL_GPIO_WritePin>
}
 80011b8:	bf00      	nop
 80011ba:	3710      	adds	r7, #16
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}
 80011c0:	40011000 	.word	0x40011000

080011c4 <OLED_Display_On>:


//开启OLED显示
void OLED_Display_On(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	af00      	add	r7, sp, #0
	OLED_WR_Byte(0X8D,OLED_CMD);  //SET DCDC命令
 80011c8:	2100      	movs	r1, #0
 80011ca:	208d      	movs	r0, #141	@ 0x8d
 80011cc:	f7ff ffb4 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0X14,OLED_CMD);  //DCDC ON
 80011d0:	2100      	movs	r1, #0
 80011d2:	2014      	movs	r0, #20
 80011d4:	f7ff ffb0 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0XAF,OLED_CMD);  //DISPLAY ON
 80011d8:	2100      	movs	r1, #0
 80011da:	20af      	movs	r0, #175	@ 0xaf
 80011dc:	f7ff ffac 	bl	8001138 <OLED_WR_Byte>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <OLED_Clear>:
	OLED_WR_Byte(0X10,OLED_CMD);  //DCDC OFF
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!
void OLED_Clear(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
	u8 i,n;
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;
 80011ea:	2300      	movs	r3, #0
 80011ec:	71fb      	strb	r3, [r7, #7]
 80011ee:	e014      	b.n	800121a <OLED_Clear+0x36>
 80011f0:	2300      	movs	r3, #0
 80011f2:	71bb      	strb	r3, [r7, #6]
 80011f4:	e00a      	b.n	800120c <OLED_Clear+0x28>
 80011f6:	79ba      	ldrb	r2, [r7, #6]
 80011f8:	79fb      	ldrb	r3, [r7, #7]
 80011fa:	490c      	ldr	r1, [pc, #48]	@ (800122c <OLED_Clear+0x48>)
 80011fc:	00d2      	lsls	r2, r2, #3
 80011fe:	440a      	add	r2, r1
 8001200:	4413      	add	r3, r2
 8001202:	2200      	movs	r2, #0
 8001204:	701a      	strb	r2, [r3, #0]
 8001206:	79bb      	ldrb	r3, [r7, #6]
 8001208:	3301      	adds	r3, #1
 800120a:	71bb      	strb	r3, [r7, #6]
 800120c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001210:	2b00      	cmp	r3, #0
 8001212:	daf0      	bge.n	80011f6 <OLED_Clear+0x12>
 8001214:	79fb      	ldrb	r3, [r7, #7]
 8001216:	3301      	adds	r3, #1
 8001218:	71fb      	strb	r3, [r7, #7]
 800121a:	79fb      	ldrb	r3, [r7, #7]
 800121c:	2b07      	cmp	r3, #7
 800121e:	d9e7      	bls.n	80011f0 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//更新显示
 8001220:	f7ff ff52 	bl	80010c8 <OLED_Refresh_Gram>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	20000260 	.word	0x20000260

08001230 <OLED_DrawPoint>:
//画点
//x:0~127
//y:0~63
//t:1 填充 0,清空
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	71fb      	strb	r3, [r7, #7]
 800123a:	460b      	mov	r3, r1
 800123c:	71bb      	strb	r3, [r7, #6]
 800123e:	4613      	mov	r3, r2
 8001240:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 8001246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800124a:	2b00      	cmp	r3, #0
 800124c:	db41      	blt.n	80012d2 <OLED_DrawPoint+0xa2>
 800124e:	79bb      	ldrb	r3, [r7, #6]
 8001250:	2b3f      	cmp	r3, #63	@ 0x3f
 8001252:	d83e      	bhi.n	80012d2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	f1c3 0307 	rsb	r3, r3, #7
 800125e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001268:	7b7b      	ldrb	r3, [r7, #13]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2201      	movs	r2, #1
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 8001276:	797b      	ldrb	r3, [r7, #5]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d012      	beq.n	80012a2 <OLED_DrawPoint+0x72>
 800127c:	79fa      	ldrb	r2, [r7, #7]
 800127e:	7bbb      	ldrb	r3, [r7, #14]
 8001280:	4916      	ldr	r1, [pc, #88]	@ (80012dc <OLED_DrawPoint+0xac>)
 8001282:	00d2      	lsls	r2, r2, #3
 8001284:	440a      	add	r2, r1
 8001286:	4413      	add	r3, r2
 8001288:	7818      	ldrb	r0, [r3, #0]
 800128a:	79fa      	ldrb	r2, [r7, #7]
 800128c:	7bbb      	ldrb	r3, [r7, #14]
 800128e:	7bf9      	ldrb	r1, [r7, #15]
 8001290:	4301      	orrs	r1, r0
 8001292:	b2c8      	uxtb	r0, r1
 8001294:	4911      	ldr	r1, [pc, #68]	@ (80012dc <OLED_DrawPoint+0xac>)
 8001296:	00d2      	lsls	r2, r2, #3
 8001298:	440a      	add	r2, r1
 800129a:	4413      	add	r3, r2
 800129c:	4602      	mov	r2, r0
 800129e:	701a      	strb	r2, [r3, #0]
 80012a0:	e018      	b.n	80012d4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;
 80012a2:	79fa      	ldrb	r2, [r7, #7]
 80012a4:	7bbb      	ldrb	r3, [r7, #14]
 80012a6:	490d      	ldr	r1, [pc, #52]	@ (80012dc <OLED_DrawPoint+0xac>)
 80012a8:	00d2      	lsls	r2, r2, #3
 80012aa:	440a      	add	r2, r1
 80012ac:	4413      	add	r3, r2
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	b25a      	sxtb	r2, r3
 80012b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	b25b      	sxtb	r3, r3
 80012ba:	4013      	ands	r3, r2
 80012bc:	b259      	sxtb	r1, r3
 80012be:	79fa      	ldrb	r2, [r7, #7]
 80012c0:	7bbb      	ldrb	r3, [r7, #14]
 80012c2:	b2c8      	uxtb	r0, r1
 80012c4:	4905      	ldr	r1, [pc, #20]	@ (80012dc <OLED_DrawPoint+0xac>)
 80012c6:	00d2      	lsls	r2, r2, #3
 80012c8:	440a      	add	r2, r1
 80012ca:	4413      	add	r3, r2
 80012cc:	4602      	mov	r2, r0
 80012ce:	701a      	strb	r2, [r3, #0]
 80012d0:	e000      	b.n	80012d4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80012d2:	bf00      	nop
}
 80012d4:	3714      	adds	r7, #20
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bc80      	pop	{r7}
 80012da:	4770      	bx	lr
 80012dc:	20000260 	.word	0x20000260

080012e0 <OLED_ShowChar>:
//x:0~127
//y:0~63
//mode:0,反白显示;1,正常显示
//size:选择字体 16/12
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4604      	mov	r4, r0
 80012e8:	4608      	mov	r0, r1
 80012ea:	4611      	mov	r1, r2
 80012ec:	461a      	mov	r2, r3
 80012ee:	4623      	mov	r3, r4
 80012f0:	71fb      	strb	r3, [r7, #7]
 80012f2:	4603      	mov	r3, r0
 80012f4:	71bb      	strb	r3, [r7, #6]
 80012f6:	460b      	mov	r3, r1
 80012f8:	717b      	strb	r3, [r7, #5]
 80012fa:	4613      	mov	r3, r2
 80012fc:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 80012fe:	79bb      	ldrb	r3, [r7, #6]
 8001300:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值
 8001302:	797b      	ldrb	r3, [r7, #5]
 8001304:	3b20      	subs	r3, #32
 8001306:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001308:	2300      	movs	r3, #0
 800130a:	73bb      	strb	r3, [r7, #14]
 800130c:	e04d      	b.n	80013aa <OLED_ShowChar+0xca>
    {
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 800130e:	793b      	ldrb	r3, [r7, #4]
 8001310:	2b0c      	cmp	r3, #12
 8001312:	d10b      	bne.n	800132c <OLED_ShowChar+0x4c>
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	7bb9      	ldrb	r1, [r7, #14]
 8001318:	4828      	ldr	r0, [pc, #160]	@ (80013bc <OLED_ShowChar+0xdc>)
 800131a:	4613      	mov	r3, r2
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	4413      	add	r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	4403      	add	r3, r0
 8001324:	440b      	add	r3, r1
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	73fb      	strb	r3, [r7, #15]
 800132a:	e007      	b.n	800133c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体
 800132c:	797a      	ldrb	r2, [r7, #5]
 800132e:	7bbb      	ldrb	r3, [r7, #14]
 8001330:	4923      	ldr	r1, [pc, #140]	@ (80013c0 <OLED_ShowChar+0xe0>)
 8001332:	0112      	lsls	r2, r2, #4
 8001334:	440a      	add	r2, r1
 8001336:	4413      	add	r3, r2
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800133c:	2300      	movs	r3, #0
 800133e:	737b      	strb	r3, [r7, #13]
 8001340:	e02d      	b.n	800139e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001346:	2b00      	cmp	r3, #0
 8001348:	da07      	bge.n	800135a <OLED_ShowChar+0x7a>
 800134a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800134e:	79b9      	ldrb	r1, [r7, #6]
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff ff6c 	bl	8001230 <OLED_DrawPoint>
 8001358:	e00c      	b.n	8001374 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800135a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800135e:	2b00      	cmp	r3, #0
 8001360:	bf0c      	ite	eq
 8001362:	2301      	moveq	r3, #1
 8001364:	2300      	movne	r3, #0
 8001366:	b2db      	uxtb	r3, r3
 8001368:	461a      	mov	r2, r3
 800136a:	79b9      	ldrb	r1, [r7, #6]
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff ff5e 	bl	8001230 <OLED_DrawPoint>
			temp<<=1;
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	73fb      	strb	r3, [r7, #15]
			y++;
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	3301      	adds	r3, #1
 800137e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001380:	79ba      	ldrb	r2, [r7, #6]
 8001382:	7b3b      	ldrb	r3, [r7, #12]
 8001384:	1ad2      	subs	r2, r2, r3
 8001386:	793b      	ldrb	r3, [r7, #4]
 8001388:	429a      	cmp	r2, r3
 800138a:	d105      	bne.n	8001398 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800138c:	7b3b      	ldrb	r3, [r7, #12]
 800138e:	71bb      	strb	r3, [r7, #6]
				x++;
 8001390:	79fb      	ldrb	r3, [r7, #7]
 8001392:	3301      	adds	r3, #1
 8001394:	71fb      	strb	r3, [r7, #7]
				break;
 8001396:	e005      	b.n	80013a4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001398:	7b7b      	ldrb	r3, [r7, #13]
 800139a:	3301      	adds	r3, #1
 800139c:	737b      	strb	r3, [r7, #13]
 800139e:	7b7b      	ldrb	r3, [r7, #13]
 80013a0:	2b07      	cmp	r3, #7
 80013a2:	d9ce      	bls.n	8001342 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80013a4:	7bbb      	ldrb	r3, [r7, #14]
 80013a6:	3301      	adds	r3, #1
 80013a8:	73bb      	strb	r3, [r7, #14]
 80013aa:	7bba      	ldrb	r2, [r7, #14]
 80013ac:	793b      	ldrb	r3, [r7, #4]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d3ad      	bcc.n	800130e <OLED_ShowChar+0x2e>
			}
		}
    }
}
 80013b2:	bf00      	nop
 80013b4:	bf00      	nop
 80013b6:	3714      	adds	r7, #20
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd90      	pop	{r4, r7, pc}
 80013bc:	0800b094 	.word	0x0800b094
 80013c0:	0800b508 	.word	0x0800b508

080013c4 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b085      	sub	sp, #20
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	460a      	mov	r2, r1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	4613      	mov	r3, r2
 80013d2:	71bb      	strb	r3, [r7, #6]
	u32 result=1;
 80013d4:	2301      	movs	r3, #1
 80013d6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;
 80013d8:	e004      	b.n	80013e4 <oled_pow+0x20>
 80013da:	79fa      	ldrb	r2, [r7, #7]
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	fb02 f303 	mul.w	r3, r2, r3
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	79bb      	ldrb	r3, [r7, #6]
 80013e6:	1e5a      	subs	r2, r3, #1
 80013e8:	71ba      	strb	r2, [r7, #6]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f5      	bne.n	80013da <oled_pow+0x16>
	return result;
 80013ee:	68fb      	ldr	r3, [r7, #12]
}
 80013f0:	4618      	mov	r0, r3
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	bc80      	pop	{r7}
 80013f8:	4770      	bx	lr
	...

080013fc <OLED_ShowNumber>:
//len :数字的位数
//size:字体大小
//mode:模式	0,填充模式;1,叠加模式
//num:数值(0~4294967295);
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{
 80013fc:	b590      	push	{r4, r7, lr}
 80013fe:	b087      	sub	sp, #28
 8001400:	af02      	add	r7, sp, #8
 8001402:	603a      	str	r2, [r7, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]
 800140a:	460b      	mov	r3, r1
 800140c:	71bb      	strb	r3, [r7, #6]
 800140e:	4613      	mov	r3, r2
 8001410:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;
 8001412:	2300      	movs	r3, #0
 8001414:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8001416:	2300      	movs	r3, #0
 8001418:	73fb      	strb	r3, [r7, #15]
 800141a:	e051      	b.n	80014c0 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 800141c:	797a      	ldrb	r2, [r7, #5]
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b2db      	uxtb	r3, r3
 8001424:	3b01      	subs	r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4619      	mov	r1, r3
 800142a:	200a      	movs	r0, #10
 800142c:	f7ff ffca 	bl	80013c4 <oled_pow>
 8001430:	4602      	mov	r2, r0
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	fbb3 f1f2 	udiv	r1, r3, r2
 8001438:	4b26      	ldr	r3, [pc, #152]	@ (80014d4 <OLED_ShowNumber+0xd8>)
 800143a:	fba3 2301 	umull	r2, r3, r3, r1
 800143e:	08da      	lsrs	r2, r3, #3
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	1aca      	subs	r2, r1, r3
 800144a:	4613      	mov	r3, r2
 800144c:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800144e:	7bbb      	ldrb	r3, [r7, #14]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d11d      	bne.n	8001490 <OLED_ShowNumber+0x94>
 8001454:	7bfa      	ldrb	r2, [r7, #15]
 8001456:	797b      	ldrb	r3, [r7, #5]
 8001458:	3b01      	subs	r3, #1
 800145a:	429a      	cmp	r2, r3
 800145c:	da18      	bge.n	8001490 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 800145e:	7b7b      	ldrb	r3, [r7, #13]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d113      	bne.n	800148c <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8001464:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001468:	085b      	lsrs	r3, r3, #1
 800146a:	b2db      	uxtb	r3, r3
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	fb02 f303 	mul.w	r3, r2, r3
 8001472:	b2da      	uxtb	r2, r3
 8001474:	79fb      	ldrb	r3, [r7, #7]
 8001476:	4413      	add	r3, r2
 8001478:	b2d8      	uxtb	r0, r3
 800147a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800147e:	79b9      	ldrb	r1, [r7, #6]
 8001480:	2201      	movs	r2, #1
 8001482:	9200      	str	r2, [sp, #0]
 8001484:	2220      	movs	r2, #32
 8001486:	f7ff ff2b 	bl	80012e0 <OLED_ShowChar>
				continue;
 800148a:	e016      	b.n	80014ba <OLED_ShowNumber+0xbe>
			}else enshow=1;
 800148c:	2301      	movs	r3, #1
 800148e:	73bb      	strb	r3, [r7, #14]

		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1);
 8001490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001494:	085b      	lsrs	r3, r3, #1
 8001496:	b2db      	uxtb	r3, r3
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	fb02 f303 	mul.w	r3, r2, r3
 800149e:	b2da      	uxtb	r2, r3
 80014a0:	79fb      	ldrb	r3, [r7, #7]
 80014a2:	4413      	add	r3, r2
 80014a4:	b2d8      	uxtb	r0, r3
 80014a6:	7b7b      	ldrb	r3, [r7, #13]
 80014a8:	3330      	adds	r3, #48	@ 0x30
 80014aa:	b2da      	uxtb	r2, r3
 80014ac:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014b0:	79b9      	ldrb	r1, [r7, #6]
 80014b2:	2401      	movs	r4, #1
 80014b4:	9400      	str	r4, [sp, #0]
 80014b6:	f7ff ff13 	bl	80012e0 <OLED_ShowChar>
	for(t=0;t<len;t++)
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	3301      	adds	r3, #1
 80014be:	73fb      	strb	r3, [r7, #15]
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	797b      	ldrb	r3, [r7, #5]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d3a9      	bcc.n	800141c <OLED_ShowNumber+0x20>
	}
}
 80014c8:	bf00      	nop
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd90      	pop	{r4, r7, pc}
 80014d2:	bf00      	nop
 80014d4:	cccccccd 	.word	0xcccccccd

080014d8 <OLED_ShowString>:
//显示字符串
//x,y:起点坐标
//*p:字符串起始地址
//用16字体
void OLED_ShowString(u8 x,u8 y,const u8 *p)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af02      	add	r7, sp, #8
 80014de:	4603      	mov	r3, r0
 80014e0:	603a      	str	r2, [r7, #0]
 80014e2:	71fb      	strb	r3, [r7, #7]
 80014e4:	460b      	mov	r3, r1
 80014e6:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58
    while(*p!='\0')
 80014e8:	e01f      	b.n	800152a <OLED_ShowString+0x52>
    {
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b7a      	cmp	r3, #122	@ 0x7a
 80014ee:	d904      	bls.n	80014fa <OLED_ShowString+0x22>
 80014f0:	2300      	movs	r3, #0
 80014f2:	71fb      	strb	r3, [r7, #7]
 80014f4:	79bb      	ldrb	r3, [r7, #6]
 80014f6:	3310      	adds	r3, #16
 80014f8:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80014fa:	79bb      	ldrb	r3, [r7, #6]
 80014fc:	2b3a      	cmp	r3, #58	@ 0x3a
 80014fe:	d905      	bls.n	800150c <OLED_ShowString+0x34>
 8001500:	2300      	movs	r3, #0
 8001502:	71fb      	strb	r3, [r7, #7]
 8001504:	79fb      	ldrb	r3, [r7, #7]
 8001506:	71bb      	strb	r3, [r7, #6]
 8001508:	f7ff fe6c 	bl	80011e4 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	781a      	ldrb	r2, [r3, #0]
 8001510:	79b9      	ldrb	r1, [r7, #6]
 8001512:	79f8      	ldrb	r0, [r7, #7]
 8001514:	2301      	movs	r3, #1
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	230c      	movs	r3, #12
 800151a:	f7ff fee1 	bl	80012e0 <OLED_ShowChar>
        x+=8;
 800151e:	79fb      	ldrb	r3, [r7, #7]
 8001520:	3308      	adds	r3, #8
 8001522:	71fb      	strb	r3, [r7, #7]
        p++;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	3301      	adds	r3, #1
 8001528:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d1db      	bne.n	80014ea <OLED_ShowString+0x12>
    }
}
 8001532:	bf00      	nop
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}

0800153c <OLED_Init>:
    }
}

//初始化OLED
void OLED_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8001540:	2200      	movs	r2, #0
 8001542:	2108      	movs	r1, #8
 8001544:	4839      	ldr	r0, [pc, #228]	@ (800162c <OLED_Init+0xf0>)
 8001546:	f000 fea5 	bl	8002294 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800154a:	2064      	movs	r0, #100	@ 0x64
 800154c:	f000 fac8 	bl	8001ae0 <HAL_Delay>
	OLED_RST_Set();
 8001550:	2201      	movs	r2, #1
 8001552:	2108      	movs	r1, #8
 8001554:	4835      	ldr	r0, [pc, #212]	@ (800162c <OLED_Init+0xf0>)
 8001556:	f000 fe9d 	bl	8002294 <HAL_GPIO_WritePin>

	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 800155a:	2100      	movs	r1, #0
 800155c:	20ae      	movs	r0, #174	@ 0xae
 800155e:	f7ff fdeb 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8001562:	2100      	movs	r1, #0
 8001564:	20d5      	movs	r0, #213	@ 0xd5
 8001566:	f7ff fde7 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 800156a:	2100      	movs	r1, #0
 800156c:	2050      	movs	r0, #80	@ 0x50
 800156e:	f7ff fde3 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8001572:	2100      	movs	r1, #0
 8001574:	20a8      	movs	r0, #168	@ 0xa8
 8001576:	f7ff fddf 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64)
 800157a:	2100      	movs	r1, #0
 800157c:	203f      	movs	r0, #63	@ 0x3f
 800157e:	f7ff fddb 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8001582:	2100      	movs	r1, #0
 8001584:	20d3      	movs	r0, #211	@ 0xd3
 8001586:	f7ff fdd7 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 800158a:	2100      	movs	r1, #0
 800158c:	2000      	movs	r0, #0
 800158e:	f7ff fdd3 	bl	8001138 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8001592:	2100      	movs	r1, #0
 8001594:	2040      	movs	r0, #64	@ 0x40
 8001596:	f7ff fdcf 	bl	8001138 <OLED_WR_Byte>

	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 800159a:	2100      	movs	r1, #0
 800159c:	208d      	movs	r0, #141	@ 0x8d
 800159e:	f7ff fdcb 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 80015a2:	2100      	movs	r1, #0
 80015a4:	2014      	movs	r0, #20
 80015a6:	f7ff fdc7 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 80015aa:	2100      	movs	r1, #0
 80015ac:	2020      	movs	r0, #32
 80015ae:	f7ff fdc3 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 80015b2:	2100      	movs	r1, #0
 80015b4:	2002      	movs	r0, #2
 80015b6:	f7ff fdbf 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 80015ba:	2100      	movs	r1, #0
 80015bc:	20a1      	movs	r0, #161	@ 0xa1
 80015be:	f7ff fdbb 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 80015c2:	2100      	movs	r1, #0
 80015c4:	20c0      	movs	r0, #192	@ 0xc0
 80015c6:	f7ff fdb7 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 80015ca:	2100      	movs	r1, #0
 80015cc:	20da      	movs	r0, #218	@ 0xda
 80015ce:	f7ff fdb3 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 80015d2:	2100      	movs	r1, #0
 80015d4:	2012      	movs	r0, #18
 80015d6:	f7ff fdaf 	bl	8001138 <OLED_WR_Byte>

	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 80015da:	2100      	movs	r1, #0
 80015dc:	2081      	movs	r0, #129	@ 0x81
 80015de:	f7ff fdab 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 80015e2:	2100      	movs	r1, #0
 80015e4:	20ef      	movs	r0, #239	@ 0xef
 80015e6:	f7ff fda7 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 80015ea:	2100      	movs	r1, #0
 80015ec:	20d9      	movs	r0, #217	@ 0xd9
 80015ee:	f7ff fda3 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80015f2:	2100      	movs	r1, #0
 80015f4:	20f1      	movs	r0, #241	@ 0xf1
 80015f6:	f7ff fd9f 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 80015fa:	2100      	movs	r1, #0
 80015fc:	20db      	movs	r0, #219	@ 0xdb
 80015fe:	f7ff fd9b 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001602:	2100      	movs	r1, #0
 8001604:	2030      	movs	r0, #48	@ 0x30
 8001606:	f7ff fd97 	bl	8001138 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 800160a:	2100      	movs	r1, #0
 800160c:	20a4      	movs	r0, #164	@ 0xa4
 800160e:	f7ff fd93 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示
 8001612:	2100      	movs	r1, #0
 8001614:	20a6      	movs	r0, #166	@ 0xa6
 8001616:	f7ff fd8f 	bl	8001138 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示
 800161a:	2100      	movs	r1, #0
 800161c:	20af      	movs	r0, #175	@ 0xaf
 800161e:	f7ff fd8b 	bl	8001138 <OLED_WR_Byte>
	OLED_Clear();
 8001622:	f7ff fddf 	bl	80011e4 <OLED_Clear>
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	40011000 	.word	0x40011000

08001630 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b084      	sub	sp, #16
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <HAL_MspInit+0x68>)
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	4a17      	ldr	r2, [pc, #92]	@ (8001698 <HAL_MspInit+0x68>)
 800163c:	f043 0301 	orr.w	r3, r3, #1
 8001640:	6193      	str	r3, [r2, #24]
 8001642:	4b15      	ldr	r3, [pc, #84]	@ (8001698 <HAL_MspInit+0x68>)
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	f003 0301 	and.w	r3, r3, #1
 800164a:	60bb      	str	r3, [r7, #8]
 800164c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800164e:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <HAL_MspInit+0x68>)
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	4a11      	ldr	r2, [pc, #68]	@ (8001698 <HAL_MspInit+0x68>)
 8001654:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001658:	61d3      	str	r3, [r2, #28]
 800165a:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <HAL_MspInit+0x68>)
 800165c:	69db      	ldr	r3, [r3, #28]
 800165e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001662:	607b      	str	r3, [r7, #4]
 8001664:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	210f      	movs	r1, #15
 800166a:	f06f 0001 	mvn.w	r0, #1
 800166e:	f000 fb10 	bl	8001c92 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <HAL_MspInit+0x6c>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	60fb      	str	r3, [r7, #12]
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800167e:	60fb      	str	r3, [r7, #12]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	4a04      	ldr	r2, [pc, #16]	@ (800169c <HAL_MspInit+0x6c>)
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	40010000 	.word	0x40010000

080016a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b088      	sub	sp, #32
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 0310 	add.w	r3, r7, #16
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==UART4)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a20      	ldr	r2, [pc, #128]	@ (800173c <HAL_UART_MspInit+0x9c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d139      	bne.n	8001734 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80016c0:	4b1f      	ldr	r3, [pc, #124]	@ (8001740 <HAL_UART_MspInit+0xa0>)
 80016c2:	69db      	ldr	r3, [r3, #28]
 80016c4:	4a1e      	ldr	r2, [pc, #120]	@ (8001740 <HAL_UART_MspInit+0xa0>)
 80016c6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80016ca:	61d3      	str	r3, [r2, #28]
 80016cc:	4b1c      	ldr	r3, [pc, #112]	@ (8001740 <HAL_UART_MspInit+0xa0>)
 80016ce:	69db      	ldr	r3, [r3, #28]
 80016d0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <HAL_UART_MspInit+0xa0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a18      	ldr	r2, [pc, #96]	@ (8001740 <HAL_UART_MspInit+0xa0>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b16      	ldr	r3, [pc, #88]	@ (8001740 <HAL_UART_MspInit+0xa0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60bb      	str	r3, [r7, #8]
 80016ee:	68bb      	ldr	r3, [r7, #8]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80016f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f6:	2302      	movs	r3, #2
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fa:	2303      	movs	r3, #3
 80016fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016fe:	f107 0310 	add.w	r3, r7, #16
 8001702:	4619      	mov	r1, r3
 8001704:	480f      	ldr	r0, [pc, #60]	@ (8001744 <HAL_UART_MspInit+0xa4>)
 8001706:	f000 fc31 	bl	8001f6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800170a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800170e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001710:	2300      	movs	r3, #0
 8001712:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001714:	2300      	movs	r3, #0
 8001716:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001718:	f107 0310 	add.w	r3, r7, #16
 800171c:	4619      	mov	r1, r3
 800171e:	4809      	ldr	r0, [pc, #36]	@ (8001744 <HAL_UART_MspInit+0xa4>)
 8001720:	f000 fc24 	bl	8001f6c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2105      	movs	r1, #5
 8001728:	2034      	movs	r0, #52	@ 0x34
 800172a:	f000 fab2 	bl	8001c92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800172e:	2034      	movs	r0, #52	@ 0x34
 8001730:	f000 facb 	bl	8001cca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8001734:	bf00      	nop
 8001736:	3720      	adds	r7, #32
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40004c00 	.word	0x40004c00
 8001740:	40021000 	.word	0x40021000
 8001744:	40011000 	.word	0x40011000

08001748 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08e      	sub	sp, #56	@ 0x38
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001754:	2300      	movs	r3, #0
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001758:	2300      	movs	r3, #0
 800175a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800175e:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_InitTick+0xe8>)
 8001760:	69db      	ldr	r3, [r3, #28]
 8001762:	4a33      	ldr	r2, [pc, #204]	@ (8001830 <HAL_InitTick+0xe8>)
 8001764:	f043 0310 	orr.w	r3, r3, #16
 8001768:	61d3      	str	r3, [r2, #28]
 800176a:	4b31      	ldr	r3, [pc, #196]	@ (8001830 <HAL_InitTick+0xe8>)
 800176c:	69db      	ldr	r3, [r3, #28]
 800176e:	f003 0310 	and.w	r3, r3, #16
 8001772:	60fb      	str	r3, [r7, #12]
 8001774:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001776:	f107 0210 	add.w	r2, r7, #16
 800177a:	f107 0314 	add.w	r3, r7, #20
 800177e:	4611      	mov	r1, r2
 8001780:	4618      	mov	r0, r3
 8001782:	f001 f991 	bl	8002aa8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001786:	6a3b      	ldr	r3, [r7, #32]
 8001788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800178a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800178c:	2b00      	cmp	r3, #0
 800178e:	d103      	bne.n	8001798 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001790:	f001 f962 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8001794:	6378      	str	r0, [r7, #52]	@ 0x34
 8001796:	e004      	b.n	80017a2 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001798:	f001 f95e 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 800179c:	4603      	mov	r3, r0
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017a4:	4a23      	ldr	r2, [pc, #140]	@ (8001834 <HAL_InitTick+0xec>)
 80017a6:	fba2 2303 	umull	r2, r3, r2, r3
 80017aa:	0c9b      	lsrs	r3, r3, #18
 80017ac:	3b01      	subs	r3, #1
 80017ae:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017b0:	4b21      	ldr	r3, [pc, #132]	@ (8001838 <HAL_InitTick+0xf0>)
 80017b2:	4a22      	ldr	r2, [pc, #136]	@ (800183c <HAL_InitTick+0xf4>)
 80017b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017b6:	4b20      	ldr	r3, [pc, #128]	@ (8001838 <HAL_InitTick+0xf0>)
 80017b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017bc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017be:	4a1e      	ldr	r2, [pc, #120]	@ (8001838 <HAL_InitTick+0xf0>)
 80017c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017c2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017c4:	4b1c      	ldr	r3, [pc, #112]	@ (8001838 <HAL_InitTick+0xf0>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ca:	4b1b      	ldr	r3, [pc, #108]	@ (8001838 <HAL_InitTick+0xf0>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017d0:	4b19      	ldr	r3, [pc, #100]	@ (8001838 <HAL_InitTick+0xf0>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017d6:	4818      	ldr	r0, [pc, #96]	@ (8001838 <HAL_InitTick+0xf0>)
 80017d8:	f001 f9b4 	bl	8002b44 <HAL_TIM_Base_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017e2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d11b      	bne.n	8001822 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017ea:	4813      	ldr	r0, [pc, #76]	@ (8001838 <HAL_InitTick+0xf0>)
 80017ec:	f001 fa02 	bl	8002bf4 <HAL_TIM_Base_Start_IT>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017f6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d111      	bne.n	8001822 <HAL_InitTick+0xda>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80017fe:	2036      	movs	r0, #54	@ 0x36
 8001800:	f000 fa63 	bl	8001cca <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2b0f      	cmp	r3, #15
 8001808:	d808      	bhi.n	800181c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 800180a:	2200      	movs	r2, #0
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	2036      	movs	r0, #54	@ 0x36
 8001810:	f000 fa3f 	bl	8001c92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001814:	4a0a      	ldr	r2, [pc, #40]	@ (8001840 <HAL_InitTick+0xf8>)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6013      	str	r3, [r2, #0]
 800181a:	e002      	b.n	8001822 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800181c:	2301      	movs	r3, #1
 800181e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001822:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001826:	4618      	mov	r0, r3
 8001828:	3738      	adds	r7, #56	@ 0x38
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40021000 	.word	0x40021000
 8001834:	431bde83 	.word	0x431bde83
 8001838:	20000660 	.word	0x20000660
 800183c:	40001000 	.word	0x40001000
 8001840:	20000004 	.word	0x20000004

08001844 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <NMI_Handler+0x4>

0800184c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <HardFault_Handler+0x4>

08001854 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <MemManage_Handler+0x4>

0800185c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001860:	bf00      	nop
 8001862:	e7fd      	b.n	8001860 <BusFault_Handler+0x4>

08001864 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <UsageFault_Handler+0x4>

0800186c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	bc80      	pop	{r7}
 8001876:	4770      	bx	lr

08001878 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800187c:	4802      	ldr	r0, [pc, #8]	@ (8001888 <UART4_IRQHandler+0x10>)
 800187e:	f001 fcb3 	bl	80031e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	200001f4 	.word	0x200001f4

0800188c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001890:	4802      	ldr	r0, [pc, #8]	@ (800189c <TIM6_IRQHandler+0x10>)
 8001892:	f001 fa0f 	bl	8002cb4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000660 	.word	0x20000660

080018a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
  return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bc80      	pop	{r7}
 80018ac:	4770      	bx	lr

080018ae <_kill>:

int _kill(int pid, int sig)
{
 80018ae:	b580      	push	{r7, lr}
 80018b0:	b082      	sub	sp, #8
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018b8:	f005 ffdc 	bl	8007874 <__errno>
 80018bc:	4603      	mov	r3, r0
 80018be:	2216      	movs	r2, #22
 80018c0:	601a      	str	r2, [r3, #0]
  return -1;
 80018c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	3708      	adds	r7, #8
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <_exit>:

void _exit (int status)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018d6:	f04f 31ff 	mov.w	r1, #4294967295
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ffe7 	bl	80018ae <_kill>
  while (1) {}    /* Make sure we hang here */
 80018e0:	bf00      	nop
 80018e2:	e7fd      	b.n	80018e0 <_exit+0x12>

080018e4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b086      	sub	sp, #24
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	60f8      	str	r0, [r7, #12]
 80018ec:	60b9      	str	r1, [r7, #8]
 80018ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
 80018f4:	e00a      	b.n	800190c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018f6:	f3af 8000 	nop.w
 80018fa:	4601      	mov	r1, r0
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	1c5a      	adds	r2, r3, #1
 8001900:	60ba      	str	r2, [r7, #8]
 8001902:	b2ca      	uxtb	r2, r1
 8001904:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697a      	ldr	r2, [r7, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	429a      	cmp	r2, r3
 8001912:	dbf0      	blt.n	80018f6 <_read+0x12>
  }

  return len;
 8001914:	687b      	ldr	r3, [r7, #4]
}
 8001916:	4618      	mov	r0, r3
 8001918:	3718      	adds	r7, #24
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}

0800191e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800191e:	b580      	push	{r7, lr}
 8001920:	b086      	sub	sp, #24
 8001922:	af00      	add	r7, sp, #0
 8001924:	60f8      	str	r0, [r7, #12]
 8001926:	60b9      	str	r1, [r7, #8]
 8001928:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	e009      	b.n	8001944 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	1c5a      	adds	r2, r3, #1
 8001934:	60ba      	str	r2, [r7, #8]
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	4618      	mov	r0, r3
 800193a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	3301      	adds	r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697a      	ldr	r2, [r7, #20]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	429a      	cmp	r2, r3
 800194a:	dbf1      	blt.n	8001930 <_write+0x12>
  }
  return len;
 800194c:	687b      	ldr	r3, [r7, #4]
}
 800194e:	4618      	mov	r0, r3
 8001950:	3718      	adds	r7, #24
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <_close>:

int _close(int file)
{
 8001956:	b480      	push	{r7}
 8001958:	b083      	sub	sp, #12
 800195a:	af00      	add	r7, sp, #0
 800195c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800195e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001962:	4618      	mov	r0, r3
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
 8001974:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800197c:	605a      	str	r2, [r3, #4]
  return 0;
 800197e:	2300      	movs	r3, #0
}
 8001980:	4618      	mov	r0, r3
 8001982:	370c      	adds	r7, #12
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <_isatty>:

int _isatty(int file)
{
 800198a:	b480      	push	{r7}
 800198c:	b083      	sub	sp, #12
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001992:	2301      	movs	r3, #1
}
 8001994:	4618      	mov	r0, r3
 8001996:	370c      	adds	r7, #12
 8001998:	46bd      	mov	sp, r7
 800199a:	bc80      	pop	{r7}
 800199c:	4770      	bx	lr

0800199e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800199e:	b480      	push	{r7}
 80019a0:	b085      	sub	sp, #20
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3714      	adds	r7, #20
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
	...

080019b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b086      	sub	sp, #24
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019c0:	4a14      	ldr	r2, [pc, #80]	@ (8001a14 <_sbrk+0x5c>)
 80019c2:	4b15      	ldr	r3, [pc, #84]	@ (8001a18 <_sbrk+0x60>)
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019cc:	4b13      	ldr	r3, [pc, #76]	@ (8001a1c <_sbrk+0x64>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d102      	bne.n	80019da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019d4:	4b11      	ldr	r3, [pc, #68]	@ (8001a1c <_sbrk+0x64>)
 80019d6:	4a12      	ldr	r2, [pc, #72]	@ (8001a20 <_sbrk+0x68>)
 80019d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019da:	4b10      	ldr	r3, [pc, #64]	@ (8001a1c <_sbrk+0x64>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d207      	bcs.n	80019f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019e8:	f005 ff44 	bl	8007874 <__errno>
 80019ec:	4603      	mov	r3, r0
 80019ee:	220c      	movs	r2, #12
 80019f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019f2:	f04f 33ff 	mov.w	r3, #4294967295
 80019f6:	e009      	b.n	8001a0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019f8:	4b08      	ldr	r3, [pc, #32]	@ (8001a1c <_sbrk+0x64>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <_sbrk+0x64>)
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4413      	add	r3, r2
 8001a06:	4a05      	ldr	r2, [pc, #20]	@ (8001a1c <_sbrk+0x64>)
 8001a08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3718      	adds	r7, #24
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}
 8001a14:	20010000 	.word	0x20010000
 8001a18:	00000400 	.word	0x00000400
 8001a1c:	200006a8 	.word	0x200006a8
 8001a20:	20002148 	.word	0x20002148

08001a24 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a30:	f7ff fff8 	bl	8001a24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a34:	480b      	ldr	r0, [pc, #44]	@ (8001a64 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001a36:	490c      	ldr	r1, [pc, #48]	@ (8001a68 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001a38:	4a0c      	ldr	r2, [pc, #48]	@ (8001a6c <LoopFillZerobss+0x16>)
  movs r3, #0
 8001a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a3c:	e002      	b.n	8001a44 <LoopCopyDataInit>

08001a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a42:	3304      	adds	r3, #4

08001a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a48:	d3f9      	bcc.n	8001a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a4a:	4a09      	ldr	r2, [pc, #36]	@ (8001a70 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a4c:	4c09      	ldr	r4, [pc, #36]	@ (8001a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a50:	e001      	b.n	8001a56 <LoopFillZerobss>

08001a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a54:	3204      	adds	r2, #4

08001a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a58:	d3fb      	bcc.n	8001a52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a5a:	f005 ff11 	bl	8007880 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a5e:	f7ff f97d 	bl	8000d5c <main>
  bx lr
 8001a62:	4770      	bx	lr
  ldr r0, =_sdata
 8001a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a68:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001a6c:	0800bf60 	.word	0x0800bf60
  ldr r2, =_sbss
 8001a70:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001a74:	20002144 	.word	0x20002144

08001a78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a78:	e7fe      	b.n	8001a78 <ADC1_2_IRQHandler>
	...

08001a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a80:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <HAL_Init+0x28>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a07      	ldr	r2, [pc, #28]	@ (8001aa4 <HAL_Init+0x28>)
 8001a86:	f043 0310 	orr.w	r3, r3, #16
 8001a8a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a8c:	2003      	movs	r0, #3
 8001a8e:	f000 f8f5 	bl	8001c7c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fe58 	bl	8001748 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a98:	f7ff fdca 	bl	8001630 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	40022000 	.word	0x40022000

08001aa8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aac:	4b05      	ldr	r3, [pc, #20]	@ (8001ac4 <HAL_IncTick+0x1c>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4b05      	ldr	r3, [pc, #20]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	4a03      	ldr	r2, [pc, #12]	@ (8001ac8 <HAL_IncTick+0x20>)
 8001aba:	6013      	str	r3, [r2, #0]
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bc80      	pop	{r7}
 8001ac2:	4770      	bx	lr
 8001ac4:	20000008 	.word	0x20000008
 8001ac8:	200006ac 	.word	0x200006ac

08001acc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  return uwTick;
 8001ad0:	4b02      	ldr	r3, [pc, #8]	@ (8001adc <HAL_GetTick+0x10>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	200006ac 	.word	0x200006ac

08001ae0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae8:	f7ff fff0 	bl	8001acc <HAL_GetTick>
 8001aec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af8:	d005      	beq.n	8001b06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001afa:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <HAL_Delay+0x44>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	461a      	mov	r2, r3
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	4413      	add	r3, r2
 8001b04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b06:	bf00      	nop
 8001b08:	f7ff ffe0 	bl	8001acc <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	68fa      	ldr	r2, [r7, #12]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d8f7      	bhi.n	8001b08 <HAL_Delay+0x28>
  {
  }
}
 8001b18:	bf00      	nop
 8001b1a:	bf00      	nop
 8001b1c:	3710      	adds	r7, #16
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000008 	.word	0x20000008

08001b28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	b085      	sub	sp, #20
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b5a:	4a04      	ldr	r2, [pc, #16]	@ (8001b6c <__NVIC_SetPriorityGrouping+0x44>)
 8001b5c:	68bb      	ldr	r3, [r7, #8]
 8001b5e:	60d3      	str	r3, [r2, #12]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	e000ed00 	.word	0xe000ed00

08001b70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b74:	4b04      	ldr	r3, [pc, #16]	@ (8001b88 <__NVIC_GetPriorityGrouping+0x18>)
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	0a1b      	lsrs	r3, r3, #8
 8001b7a:	f003 0307 	and.w	r3, r3, #7
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bc80      	pop	{r7}
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b083      	sub	sp, #12
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	db0b      	blt.n	8001bb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b9e:	79fb      	ldrb	r3, [r7, #7]
 8001ba0:	f003 021f 	and.w	r2, r3, #31
 8001ba4:	4906      	ldr	r1, [pc, #24]	@ (8001bc0 <__NVIC_EnableIRQ+0x34>)
 8001ba6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	2001      	movs	r0, #1
 8001bae:	fa00 f202 	lsl.w	r2, r0, r2
 8001bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bc80      	pop	{r7}
 8001bbe:	4770      	bx	lr
 8001bc0:	e000e100 	.word	0xe000e100

08001bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	4603      	mov	r3, r0
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db0a      	blt.n	8001bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	b2da      	uxtb	r2, r3
 8001bdc:	490c      	ldr	r1, [pc, #48]	@ (8001c10 <__NVIC_SetPriority+0x4c>)
 8001bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be2:	0112      	lsls	r2, r2, #4
 8001be4:	b2d2      	uxtb	r2, r2
 8001be6:	440b      	add	r3, r1
 8001be8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bec:	e00a      	b.n	8001c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	b2da      	uxtb	r2, r3
 8001bf2:	4908      	ldr	r1, [pc, #32]	@ (8001c14 <__NVIC_SetPriority+0x50>)
 8001bf4:	79fb      	ldrb	r3, [r7, #7]
 8001bf6:	f003 030f 	and.w	r3, r3, #15
 8001bfa:	3b04      	subs	r3, #4
 8001bfc:	0112      	lsls	r2, r2, #4
 8001bfe:	b2d2      	uxtb	r2, r2
 8001c00:	440b      	add	r3, r1
 8001c02:	761a      	strb	r2, [r3, #24]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bc80      	pop	{r7}
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000e100 	.word	0xe000e100
 8001c14:	e000ed00 	.word	0xe000ed00

08001c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c18:	b480      	push	{r7}
 8001c1a:	b089      	sub	sp, #36	@ 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f003 0307 	and.w	r3, r3, #7
 8001c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	f1c3 0307 	rsb	r3, r3, #7
 8001c32:	2b04      	cmp	r3, #4
 8001c34:	bf28      	it	cs
 8001c36:	2304      	movcs	r3, #4
 8001c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	3304      	adds	r3, #4
 8001c3e:	2b06      	cmp	r3, #6
 8001c40:	d902      	bls.n	8001c48 <NVIC_EncodePriority+0x30>
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	3b03      	subs	r3, #3
 8001c46:	e000      	b.n	8001c4a <NVIC_EncodePriority+0x32>
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	43da      	mvns	r2, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c60:	f04f 31ff 	mov.w	r1, #4294967295
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	fa01 f303 	lsl.w	r3, r1, r3
 8001c6a:	43d9      	mvns	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c70:	4313      	orrs	r3, r2
         );
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3724      	adds	r7, #36	@ 0x24
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c84:	6878      	ldr	r0, [r7, #4]
 8001c86:	f7ff ff4f 	bl	8001b28 <__NVIC_SetPriorityGrouping>
}
 8001c8a:	bf00      	nop
 8001c8c:	3708      	adds	r7, #8
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c92:	b580      	push	{r7, lr}
 8001c94:	b086      	sub	sp, #24
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	4603      	mov	r3, r0
 8001c9a:	60b9      	str	r1, [r7, #8]
 8001c9c:	607a      	str	r2, [r7, #4]
 8001c9e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca4:	f7ff ff64 	bl	8001b70 <__NVIC_GetPriorityGrouping>
 8001ca8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	68b9      	ldr	r1, [r7, #8]
 8001cae:	6978      	ldr	r0, [r7, #20]
 8001cb0:	f7ff ffb2 	bl	8001c18 <NVIC_EncodePriority>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cba:	4611      	mov	r1, r2
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	f7ff ff81 	bl	8001bc4 <__NVIC_SetPriority>
}
 8001cc2:	bf00      	nop
 8001cc4:	3718      	adds	r7, #24
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}

08001cca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b082      	sub	sp, #8
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff57 	bl	8001b8c <__NVIC_EnableIRQ>
}
 8001cde:	bf00      	nop
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}

08001ce6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ce6:	b480      	push	{r7}
 8001ce8:	b085      	sub	sp, #20
 8001cea:	af00      	add	r7, sp, #0
 8001cec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001cf8:	b2db      	uxtb	r3, r3
 8001cfa:	2b02      	cmp	r3, #2
 8001cfc:	d008      	beq.n	8001d10 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2204      	movs	r2, #4
 8001d02:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e020      	b.n	8001d52 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f022 020e 	bic.w	r2, r2, #14
 8001d1e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f022 0201 	bic.w	r2, r2, #1
 8001d2e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d38:	2101      	movs	r1, #1
 8001d3a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d3e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3714      	adds	r7, #20
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bc80      	pop	{r7}
 8001d5a:	4770      	bx	lr

08001d5c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001d6e:	b2db      	uxtb	r3, r3
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d005      	beq.n	8001d80 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2204      	movs	r2, #4
 8001d78:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	73fb      	strb	r3, [r7, #15]
 8001d7e:	e0d6      	b.n	8001f2e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	681a      	ldr	r2, [r3, #0]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 020e 	bic.w	r2, r2, #14
 8001d8e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0201 	bic.w	r2, r2, #1
 8001d9e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b64      	ldr	r3, [pc, #400]	@ (8001f38 <HAL_DMA_Abort_IT+0x1dc>)
 8001da8:	429a      	cmp	r2, r3
 8001daa:	d958      	bls.n	8001e5e <HAL_DMA_Abort_IT+0x102>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a62      	ldr	r2, [pc, #392]	@ (8001f3c <HAL_DMA_Abort_IT+0x1e0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d04f      	beq.n	8001e56 <HAL_DMA_Abort_IT+0xfa>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a61      	ldr	r2, [pc, #388]	@ (8001f40 <HAL_DMA_Abort_IT+0x1e4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d048      	beq.n	8001e52 <HAL_DMA_Abort_IT+0xf6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a5f      	ldr	r2, [pc, #380]	@ (8001f44 <HAL_DMA_Abort_IT+0x1e8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d040      	beq.n	8001e4c <HAL_DMA_Abort_IT+0xf0>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a5e      	ldr	r2, [pc, #376]	@ (8001f48 <HAL_DMA_Abort_IT+0x1ec>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d038      	beq.n	8001e46 <HAL_DMA_Abort_IT+0xea>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	4a5c      	ldr	r2, [pc, #368]	@ (8001f4c <HAL_DMA_Abort_IT+0x1f0>)
 8001dda:	4293      	cmp	r3, r2
 8001ddc:	d030      	beq.n	8001e40 <HAL_DMA_Abort_IT+0xe4>
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a5b      	ldr	r2, [pc, #364]	@ (8001f50 <HAL_DMA_Abort_IT+0x1f4>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d028      	beq.n	8001e3a <HAL_DMA_Abort_IT+0xde>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a52      	ldr	r2, [pc, #328]	@ (8001f38 <HAL_DMA_Abort_IT+0x1dc>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d020      	beq.n	8001e34 <HAL_DMA_Abort_IT+0xd8>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a57      	ldr	r2, [pc, #348]	@ (8001f54 <HAL_DMA_Abort_IT+0x1f8>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d019      	beq.n	8001e30 <HAL_DMA_Abort_IT+0xd4>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a55      	ldr	r2, [pc, #340]	@ (8001f58 <HAL_DMA_Abort_IT+0x1fc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d012      	beq.n	8001e2c <HAL_DMA_Abort_IT+0xd0>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a54      	ldr	r2, [pc, #336]	@ (8001f5c <HAL_DMA_Abort_IT+0x200>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d00a      	beq.n	8001e26 <HAL_DMA_Abort_IT+0xca>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a52      	ldr	r2, [pc, #328]	@ (8001f60 <HAL_DMA_Abort_IT+0x204>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d102      	bne.n	8001e20 <HAL_DMA_Abort_IT+0xc4>
 8001e1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e1e:	e01b      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e24:	e018      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e2a:	e015      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e2c:	2310      	movs	r3, #16
 8001e2e:	e013      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e30:	2301      	movs	r3, #1
 8001e32:	e011      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e34:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001e38:	e00e      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e3a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001e3e:	e00b      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e40:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e44:	e008      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e4a:	e005      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e4c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e50:	e002      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e52:	2310      	movs	r3, #16
 8001e54:	e000      	b.n	8001e58 <HAL_DMA_Abort_IT+0xfc>
 8001e56:	2301      	movs	r3, #1
 8001e58:	4a42      	ldr	r2, [pc, #264]	@ (8001f64 <HAL_DMA_Abort_IT+0x208>)
 8001e5a:	6053      	str	r3, [r2, #4]
 8001e5c:	e057      	b.n	8001f0e <HAL_DMA_Abort_IT+0x1b2>
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a36      	ldr	r2, [pc, #216]	@ (8001f3c <HAL_DMA_Abort_IT+0x1e0>)
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d04f      	beq.n	8001f08 <HAL_DMA_Abort_IT+0x1ac>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a34      	ldr	r2, [pc, #208]	@ (8001f40 <HAL_DMA_Abort_IT+0x1e4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d048      	beq.n	8001f04 <HAL_DMA_Abort_IT+0x1a8>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a33      	ldr	r2, [pc, #204]	@ (8001f44 <HAL_DMA_Abort_IT+0x1e8>)
 8001e78:	4293      	cmp	r3, r2
 8001e7a:	d040      	beq.n	8001efe <HAL_DMA_Abort_IT+0x1a2>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a31      	ldr	r2, [pc, #196]	@ (8001f48 <HAL_DMA_Abort_IT+0x1ec>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d038      	beq.n	8001ef8 <HAL_DMA_Abort_IT+0x19c>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a30      	ldr	r2, [pc, #192]	@ (8001f4c <HAL_DMA_Abort_IT+0x1f0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d030      	beq.n	8001ef2 <HAL_DMA_Abort_IT+0x196>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a2e      	ldr	r2, [pc, #184]	@ (8001f50 <HAL_DMA_Abort_IT+0x1f4>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d028      	beq.n	8001eec <HAL_DMA_Abort_IT+0x190>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a26      	ldr	r2, [pc, #152]	@ (8001f38 <HAL_DMA_Abort_IT+0x1dc>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d020      	beq.n	8001ee6 <HAL_DMA_Abort_IT+0x18a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a2a      	ldr	r2, [pc, #168]	@ (8001f54 <HAL_DMA_Abort_IT+0x1f8>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d019      	beq.n	8001ee2 <HAL_DMA_Abort_IT+0x186>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a29      	ldr	r2, [pc, #164]	@ (8001f58 <HAL_DMA_Abort_IT+0x1fc>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d012      	beq.n	8001ede <HAL_DMA_Abort_IT+0x182>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4a27      	ldr	r2, [pc, #156]	@ (8001f5c <HAL_DMA_Abort_IT+0x200>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d00a      	beq.n	8001ed8 <HAL_DMA_Abort_IT+0x17c>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a26      	ldr	r2, [pc, #152]	@ (8001f60 <HAL_DMA_Abort_IT+0x204>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d102      	bne.n	8001ed2 <HAL_DMA_Abort_IT+0x176>
 8001ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ed0:	e01b      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ed2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ed6:	e018      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ed8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001edc:	e015      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ede:	2310      	movs	r3, #16
 8001ee0:	e013      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e011      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ee6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001eea:	e00e      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001eec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001ef0:	e00b      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ef2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ef6:	e008      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001ef8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001efc:	e005      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001efe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f02:	e002      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001f04:	2310      	movs	r3, #16
 8001f06:	e000      	b.n	8001f0a <HAL_DMA_Abort_IT+0x1ae>
 8001f08:	2301      	movs	r3, #1
 8001f0a:	4a17      	ldr	r2, [pc, #92]	@ (8001f68 <HAL_DMA_Abort_IT+0x20c>)
 8001f0c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2200      	movs	r2, #0
 8001f1a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	4798      	blx	r3
    } 
  }
  return status;
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3710      	adds	r7, #16
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	40020080 	.word	0x40020080
 8001f3c:	40020008 	.word	0x40020008
 8001f40:	4002001c 	.word	0x4002001c
 8001f44:	40020030 	.word	0x40020030
 8001f48:	40020044 	.word	0x40020044
 8001f4c:	40020058 	.word	0x40020058
 8001f50:	4002006c 	.word	0x4002006c
 8001f54:	40020408 	.word	0x40020408
 8001f58:	4002041c 	.word	0x4002041c
 8001f5c:	40020430 	.word	0x40020430
 8001f60:	40020444 	.word	0x40020444
 8001f64:	40020400 	.word	0x40020400
 8001f68:	40020000 	.word	0x40020000

08001f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b08b      	sub	sp, #44	@ 0x2c
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
 8001f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f7e:	e179      	b.n	8002274 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001f80:	2201      	movs	r2, #1
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	69fa      	ldr	r2, [r7, #28]
 8001f90:	4013      	ands	r3, r2
 8001f92:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	429a      	cmp	r2, r3
 8001f9a:	f040 8168 	bne.w	800226e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	4a96      	ldr	r2, [pc, #600]	@ (80021fc <HAL_GPIO_Init+0x290>)
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d05e      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fa8:	4a94      	ldr	r2, [pc, #592]	@ (80021fc <HAL_GPIO_Init+0x290>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d875      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fae:	4a94      	ldr	r2, [pc, #592]	@ (8002200 <HAL_GPIO_Init+0x294>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d058      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fb4:	4a92      	ldr	r2, [pc, #584]	@ (8002200 <HAL_GPIO_Init+0x294>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d86f      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fba:	4a92      	ldr	r2, [pc, #584]	@ (8002204 <HAL_GPIO_Init+0x298>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d052      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fc0:	4a90      	ldr	r2, [pc, #576]	@ (8002204 <HAL_GPIO_Init+0x298>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d869      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fc6:	4a90      	ldr	r2, [pc, #576]	@ (8002208 <HAL_GPIO_Init+0x29c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d04c      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fcc:	4a8e      	ldr	r2, [pc, #568]	@ (8002208 <HAL_GPIO_Init+0x29c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d863      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fd2:	4a8e      	ldr	r2, [pc, #568]	@ (800220c <HAL_GPIO_Init+0x2a0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d046      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
 8001fd8:	4a8c      	ldr	r2, [pc, #560]	@ (800220c <HAL_GPIO_Init+0x2a0>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d85d      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fde:	2b12      	cmp	r3, #18
 8001fe0:	d82a      	bhi.n	8002038 <HAL_GPIO_Init+0xcc>
 8001fe2:	2b12      	cmp	r3, #18
 8001fe4:	d859      	bhi.n	800209a <HAL_GPIO_Init+0x12e>
 8001fe6:	a201      	add	r2, pc, #4	@ (adr r2, 8001fec <HAL_GPIO_Init+0x80>)
 8001fe8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fec:	08002067 	.word	0x08002067
 8001ff0:	08002041 	.word	0x08002041
 8001ff4:	08002053 	.word	0x08002053
 8001ff8:	08002095 	.word	0x08002095
 8001ffc:	0800209b 	.word	0x0800209b
 8002000:	0800209b 	.word	0x0800209b
 8002004:	0800209b 	.word	0x0800209b
 8002008:	0800209b 	.word	0x0800209b
 800200c:	0800209b 	.word	0x0800209b
 8002010:	0800209b 	.word	0x0800209b
 8002014:	0800209b 	.word	0x0800209b
 8002018:	0800209b 	.word	0x0800209b
 800201c:	0800209b 	.word	0x0800209b
 8002020:	0800209b 	.word	0x0800209b
 8002024:	0800209b 	.word	0x0800209b
 8002028:	0800209b 	.word	0x0800209b
 800202c:	0800209b 	.word	0x0800209b
 8002030:	08002049 	.word	0x08002049
 8002034:	0800205d 	.word	0x0800205d
 8002038:	4a75      	ldr	r2, [pc, #468]	@ (8002210 <HAL_GPIO_Init+0x2a4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d013      	beq.n	8002066 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800203e:	e02c      	b.n	800209a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	623b      	str	r3, [r7, #32]
          break;
 8002046:	e029      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	68db      	ldr	r3, [r3, #12]
 800204c:	3304      	adds	r3, #4
 800204e:	623b      	str	r3, [r7, #32]
          break;
 8002050:	e024      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	3308      	adds	r3, #8
 8002058:	623b      	str	r3, [r7, #32]
          break;
 800205a:	e01f      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	330c      	adds	r3, #12
 8002062:	623b      	str	r3, [r7, #32]
          break;
 8002064:	e01a      	b.n	800209c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d102      	bne.n	8002074 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800206e:	2304      	movs	r3, #4
 8002070:	623b      	str	r3, [r7, #32]
          break;
 8002072:	e013      	b.n	800209c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	2b01      	cmp	r3, #1
 800207a:	d105      	bne.n	8002088 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800207c:	2308      	movs	r3, #8
 800207e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	611a      	str	r2, [r3, #16]
          break;
 8002086:	e009      	b.n	800209c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002088:	2308      	movs	r3, #8
 800208a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	69fa      	ldr	r2, [r7, #28]
 8002090:	615a      	str	r2, [r3, #20]
          break;
 8002092:	e003      	b.n	800209c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002094:	2300      	movs	r3, #0
 8002096:	623b      	str	r3, [r7, #32]
          break;
 8002098:	e000      	b.n	800209c <HAL_GPIO_Init+0x130>
          break;
 800209a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	2bff      	cmp	r3, #255	@ 0xff
 80020a0:	d801      	bhi.n	80020a6 <HAL_GPIO_Init+0x13a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	e001      	b.n	80020aa <HAL_GPIO_Init+0x13e>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	3304      	adds	r3, #4
 80020aa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	2bff      	cmp	r3, #255	@ 0xff
 80020b0:	d802      	bhi.n	80020b8 <HAL_GPIO_Init+0x14c>
 80020b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	e002      	b.n	80020be <HAL_GPIO_Init+0x152>
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	3b08      	subs	r3, #8
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	210f      	movs	r1, #15
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	fa01 f303 	lsl.w	r3, r1, r3
 80020cc:	43db      	mvns	r3, r3
 80020ce:	401a      	ands	r2, r3
 80020d0:	6a39      	ldr	r1, [r7, #32]
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	fa01 f303 	lsl.w	r3, r1, r3
 80020d8:	431a      	orrs	r2, r3
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80c1 	beq.w	800226e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80020ec:	4b49      	ldr	r3, [pc, #292]	@ (8002214 <HAL_GPIO_Init+0x2a8>)
 80020ee:	699b      	ldr	r3, [r3, #24]
 80020f0:	4a48      	ldr	r2, [pc, #288]	@ (8002214 <HAL_GPIO_Init+0x2a8>)
 80020f2:	f043 0301 	orr.w	r3, r3, #1
 80020f6:	6193      	str	r3, [r2, #24]
 80020f8:	4b46      	ldr	r3, [pc, #280]	@ (8002214 <HAL_GPIO_Init+0x2a8>)
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	f003 0301 	and.w	r3, r3, #1
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002104:	4a44      	ldr	r2, [pc, #272]	@ (8002218 <HAL_GPIO_Init+0x2ac>)
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	089b      	lsrs	r3, r3, #2
 800210a:	3302      	adds	r3, #2
 800210c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002110:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002114:	f003 0303 	and.w	r3, r3, #3
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	220f      	movs	r2, #15
 800211c:	fa02 f303 	lsl.w	r3, r2, r3
 8002120:	43db      	mvns	r3, r3
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4013      	ands	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <HAL_GPIO_Init+0x2b0>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d01f      	beq.n	8002170 <HAL_GPIO_Init+0x204>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	4a3b      	ldr	r2, [pc, #236]	@ (8002220 <HAL_GPIO_Init+0x2b4>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d019      	beq.n	800216c <HAL_GPIO_Init+0x200>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	4a3a      	ldr	r2, [pc, #232]	@ (8002224 <HAL_GPIO_Init+0x2b8>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d013      	beq.n	8002168 <HAL_GPIO_Init+0x1fc>
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	4a39      	ldr	r2, [pc, #228]	@ (8002228 <HAL_GPIO_Init+0x2bc>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d00d      	beq.n	8002164 <HAL_GPIO_Init+0x1f8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a38      	ldr	r2, [pc, #224]	@ (800222c <HAL_GPIO_Init+0x2c0>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d007      	beq.n	8002160 <HAL_GPIO_Init+0x1f4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a37      	ldr	r2, [pc, #220]	@ (8002230 <HAL_GPIO_Init+0x2c4>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d101      	bne.n	800215c <HAL_GPIO_Init+0x1f0>
 8002158:	2305      	movs	r3, #5
 800215a:	e00a      	b.n	8002172 <HAL_GPIO_Init+0x206>
 800215c:	2306      	movs	r3, #6
 800215e:	e008      	b.n	8002172 <HAL_GPIO_Init+0x206>
 8002160:	2304      	movs	r3, #4
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x206>
 8002164:	2303      	movs	r3, #3
 8002166:	e004      	b.n	8002172 <HAL_GPIO_Init+0x206>
 8002168:	2302      	movs	r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0x206>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_GPIO_Init+0x206>
 8002170:	2300      	movs	r3, #0
 8002172:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	4313      	orrs	r3, r2
 8002180:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002182:	4925      	ldr	r1, [pc, #148]	@ (8002218 <HAL_GPIO_Init+0x2ac>)
 8002184:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002198:	2b00      	cmp	r3, #0
 800219a:	d006      	beq.n	80021aa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800219c:	4b25      	ldr	r3, [pc, #148]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 800219e:	689a      	ldr	r2, [r3, #8]
 80021a0:	4924      	ldr	r1, [pc, #144]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	4313      	orrs	r3, r2
 80021a6:	608b      	str	r3, [r1, #8]
 80021a8:	e006      	b.n	80021b8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80021aa:	4b22      	ldr	r3, [pc, #136]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021ac:	689a      	ldr	r2, [r3, #8]
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	43db      	mvns	r3, r3
 80021b2:	4920      	ldr	r1, [pc, #128]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021b4:	4013      	ands	r3, r2
 80021b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	685b      	ldr	r3, [r3, #4]
 80021bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d006      	beq.n	80021d2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80021c4:	4b1b      	ldr	r3, [pc, #108]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021c6:	68da      	ldr	r2, [r3, #12]
 80021c8:	491a      	ldr	r1, [pc, #104]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021ca:	69bb      	ldr	r3, [r7, #24]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	60cb      	str	r3, [r1, #12]
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80021d2:	4b18      	ldr	r3, [pc, #96]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021d4:	68da      	ldr	r2, [r3, #12]
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	43db      	mvns	r3, r3
 80021da:	4916      	ldr	r1, [pc, #88]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021dc:	4013      	ands	r3, r2
 80021de:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d025      	beq.n	8002238 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021ee:	685a      	ldr	r2, [r3, #4]
 80021f0:	4910      	ldr	r1, [pc, #64]	@ (8002234 <HAL_GPIO_Init+0x2c8>)
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	604b      	str	r3, [r1, #4]
 80021f8:	e025      	b.n	8002246 <HAL_GPIO_Init+0x2da>
 80021fa:	bf00      	nop
 80021fc:	10320000 	.word	0x10320000
 8002200:	10310000 	.word	0x10310000
 8002204:	10220000 	.word	0x10220000
 8002208:	10210000 	.word	0x10210000
 800220c:	10120000 	.word	0x10120000
 8002210:	10110000 	.word	0x10110000
 8002214:	40021000 	.word	0x40021000
 8002218:	40010000 	.word	0x40010000
 800221c:	40010800 	.word	0x40010800
 8002220:	40010c00 	.word	0x40010c00
 8002224:	40011000 	.word	0x40011000
 8002228:	40011400 	.word	0x40011400
 800222c:	40011800 	.word	0x40011800
 8002230:	40011c00 	.word	0x40011c00
 8002234:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_GPIO_Init+0x324>)
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	43db      	mvns	r3, r3
 8002240:	4913      	ldr	r1, [pc, #76]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002242:	4013      	ands	r3, r2
 8002244:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d006      	beq.n	8002260 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002252:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	490e      	ldr	r1, [pc, #56]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	600b      	str	r3, [r1, #0]
 800225e:	e006      	b.n	800226e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002260:	4b0b      	ldr	r3, [pc, #44]	@ (8002290 <HAL_GPIO_Init+0x324>)
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	69bb      	ldr	r3, [r7, #24]
 8002266:	43db      	mvns	r3, r3
 8002268:	4909      	ldr	r1, [pc, #36]	@ (8002290 <HAL_GPIO_Init+0x324>)
 800226a:	4013      	ands	r3, r2
 800226c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800226e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002270:	3301      	adds	r3, #1
 8002272:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227a:	fa22 f303 	lsr.w	r3, r2, r3
 800227e:	2b00      	cmp	r3, #0
 8002280:	f47f ae7e 	bne.w	8001f80 <HAL_GPIO_Init+0x14>
  }
}
 8002284:	bf00      	nop
 8002286:	bf00      	nop
 8002288:	372c      	adds	r7, #44	@ 0x2c
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	460b      	mov	r3, r1
 800229e:	807b      	strh	r3, [r7, #2]
 80022a0:	4613      	mov	r3, r2
 80022a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80022a4:	787b      	ldrb	r3, [r7, #1]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022aa:	887a      	ldrh	r2, [r7, #2]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80022b0:	e003      	b.n	80022ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80022b2:	887b      	ldrh	r3, [r7, #2]
 80022b4:	041a      	lsls	r2, r3, #16
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	611a      	str	r2, [r3, #16]
}
 80022ba:	bf00      	nop
 80022bc:	370c      	adds	r7, #12
 80022be:	46bd      	mov	sp, r7
 80022c0:	bc80      	pop	{r7}
 80022c2:	4770      	bx	lr

080022c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b086      	sub	sp, #24
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d101      	bne.n	80022d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022d2:	2301      	movs	r3, #1
 80022d4:	e272      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	f000 8087 	beq.w	80023f2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022e4:	4b92      	ldr	r3, [pc, #584]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f003 030c 	and.w	r3, r3, #12
 80022ec:	2b04      	cmp	r3, #4
 80022ee:	d00c      	beq.n	800230a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022f0:	4b8f      	ldr	r3, [pc, #572]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80022f2:	685b      	ldr	r3, [r3, #4]
 80022f4:	f003 030c 	and.w	r3, r3, #12
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d112      	bne.n	8002322 <HAL_RCC_OscConfig+0x5e>
 80022fc:	4b8c      	ldr	r3, [pc, #560]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002308:	d10b      	bne.n	8002322 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230a:	4b89      	ldr	r3, [pc, #548]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d06c      	beq.n	80023f0 <HAL_RCC_OscConfig+0x12c>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d168      	bne.n	80023f0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e24c      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800232a:	d106      	bne.n	800233a <HAL_RCC_OscConfig+0x76>
 800232c:	4b80      	ldr	r3, [pc, #512]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a7f      	ldr	r2, [pc, #508]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002332:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002336:	6013      	str	r3, [r2, #0]
 8002338:	e02e      	b.n	8002398 <HAL_RCC_OscConfig+0xd4>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x98>
 8002342:	4b7b      	ldr	r3, [pc, #492]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a7a      	ldr	r2, [pc, #488]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002348:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b78      	ldr	r3, [pc, #480]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a77      	ldr	r2, [pc, #476]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002354:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e01d      	b.n	8002398 <HAL_RCC_OscConfig+0xd4>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002364:	d10c      	bne.n	8002380 <HAL_RCC_OscConfig+0xbc>
 8002366:	4b72      	ldr	r3, [pc, #456]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a71      	ldr	r2, [pc, #452]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800236c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002370:	6013      	str	r3, [r2, #0]
 8002372:	4b6f      	ldr	r3, [pc, #444]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a6e      	ldr	r2, [pc, #440]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800237c:	6013      	str	r3, [r2, #0]
 800237e:	e00b      	b.n	8002398 <HAL_RCC_OscConfig+0xd4>
 8002380:	4b6b      	ldr	r3, [pc, #428]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a6a      	ldr	r2, [pc, #424]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238a:	6013      	str	r3, [r2, #0]
 800238c:	4b68      	ldr	r3, [pc, #416]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a67      	ldr	r2, [pc, #412]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002396:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d013      	beq.n	80023c8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a0:	f7ff fb94 	bl	8001acc <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7ff fb90 	bl	8001acc <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	@ 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e200      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023ba:	4b5d      	ldr	r3, [pc, #372]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0xe4>
 80023c6:	e014      	b.n	80023f2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023c8:	f7ff fb80 	bl	8001acc <HAL_GetTick>
 80023cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ce:	e008      	b.n	80023e2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023d0:	f7ff fb7c 	bl	8001acc <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	693b      	ldr	r3, [r7, #16]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b64      	cmp	r3, #100	@ 0x64
 80023dc:	d901      	bls.n	80023e2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	e1ec      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e2:	4b53      	ldr	r3, [pc, #332]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d1f0      	bne.n	80023d0 <HAL_RCC_OscConfig+0x10c>
 80023ee:	e000      	b.n	80023f2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d063      	beq.n	80024c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 030c 	and.w	r3, r3, #12
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800240a:	4b49      	ldr	r3, [pc, #292]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 030c 	and.w	r3, r3, #12
 8002412:	2b08      	cmp	r3, #8
 8002414:	d11c      	bne.n	8002450 <HAL_RCC_OscConfig+0x18c>
 8002416:	4b46      	ldr	r3, [pc, #280]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d116      	bne.n	8002450 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002422:	4b43      	ldr	r3, [pc, #268]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	691b      	ldr	r3, [r3, #16]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d001      	beq.n	800243a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e1c0      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243a:	4b3d      	ldr	r3, [pc, #244]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	4939      	ldr	r1, [pc, #228]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800244a:	4313      	orrs	r3, r2
 800244c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800244e:	e03a      	b.n	80024c6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	691b      	ldr	r3, [r3, #16]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d020      	beq.n	800249a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002458:	4b36      	ldr	r3, [pc, #216]	@ (8002534 <HAL_RCC_OscConfig+0x270>)
 800245a:	2201      	movs	r2, #1
 800245c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245e:	f7ff fb35 	bl	8001acc <HAL_GetTick>
 8002462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002464:	e008      	b.n	8002478 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002466:	f7ff fb31 	bl	8001acc <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	693b      	ldr	r3, [r7, #16]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d901      	bls.n	8002478 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	e1a1      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002478:	4b2d      	ldr	r3, [pc, #180]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d0f0      	beq.n	8002466 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002484:	4b2a      	ldr	r3, [pc, #168]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	695b      	ldr	r3, [r3, #20]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4927      	ldr	r1, [pc, #156]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 8002494:	4313      	orrs	r3, r2
 8002496:	600b      	str	r3, [r1, #0]
 8002498:	e015      	b.n	80024c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249a:	4b26      	ldr	r3, [pc, #152]	@ (8002534 <HAL_RCC_OscConfig+0x270>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024a0:	f7ff fb14 	bl	8001acc <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024a8:	f7ff fb10 	bl	8001acc <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e180      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f0      	bne.n	80024a8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d03a      	beq.n	8002548 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	699b      	ldr	r3, [r3, #24]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d019      	beq.n	800250e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024da:	4b17      	ldr	r3, [pc, #92]	@ (8002538 <HAL_RCC_OscConfig+0x274>)
 80024dc:	2201      	movs	r2, #1
 80024de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024e0:	f7ff faf4 	bl	8001acc <HAL_GetTick>
 80024e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e6:	e008      	b.n	80024fa <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024e8:	f7ff faf0 	bl	8001acc <HAL_GetTick>
 80024ec:	4602      	mov	r2, r0
 80024ee:	693b      	ldr	r3, [r7, #16]
 80024f0:	1ad3      	subs	r3, r2, r3
 80024f2:	2b02      	cmp	r3, #2
 80024f4:	d901      	bls.n	80024fa <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80024f6:	2303      	movs	r3, #3
 80024f8:	e160      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fa:	4b0d      	ldr	r3, [pc, #52]	@ (8002530 <HAL_RCC_OscConfig+0x26c>)
 80024fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fe:	f003 0302 	and.w	r3, r3, #2
 8002502:	2b00      	cmp	r3, #0
 8002504:	d0f0      	beq.n	80024e8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002506:	2001      	movs	r0, #1
 8002508:	f000 fafe 	bl	8002b08 <RCC_Delay>
 800250c:	e01c      	b.n	8002548 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250e:	4b0a      	ldr	r3, [pc, #40]	@ (8002538 <HAL_RCC_OscConfig+0x274>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002514:	f7ff fada 	bl	8001acc <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251a:	e00f      	b.n	800253c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800251c:	f7ff fad6 	bl	8001acc <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d908      	bls.n	800253c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e146      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
 800252e:	bf00      	nop
 8002530:	40021000 	.word	0x40021000
 8002534:	42420000 	.word	0x42420000
 8002538:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800253c:	4b92      	ldr	r3, [pc, #584]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e9      	bne.n	800251c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0304 	and.w	r3, r3, #4
 8002550:	2b00      	cmp	r3, #0
 8002552:	f000 80a6 	beq.w	80026a2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002556:	2300      	movs	r3, #0
 8002558:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800255a:	4b8b      	ldr	r3, [pc, #556]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d10d      	bne.n	8002582 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002566:	4b88      	ldr	r3, [pc, #544]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002568:	69db      	ldr	r3, [r3, #28]
 800256a:	4a87      	ldr	r2, [pc, #540]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	61d3      	str	r3, [r2, #28]
 8002572:	4b85      	ldr	r3, [pc, #532]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002574:	69db      	ldr	r3, [r3, #28]
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b82      	ldr	r3, [pc, #520]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b7f      	ldr	r3, [pc, #508]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a7e      	ldr	r2, [pc, #504]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7ff fa97 	bl	8001acc <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7ff fa93 	bl	8001acc <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b64      	cmp	r3, #100	@ 0x64
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e103      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b75      	ldr	r3, [pc, #468]	@ (800278c <HAL_RCC_OscConfig+0x4c8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x312>
 80025c8:	4b6f      	ldr	r3, [pc, #444]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025ca:	6a1b      	ldr	r3, [r3, #32]
 80025cc:	4a6e      	ldr	r2, [pc, #440]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6213      	str	r3, [r2, #32]
 80025d4:	e02d      	b.n	8002632 <HAL_RCC_OscConfig+0x36e>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	68db      	ldr	r3, [r3, #12]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x334>
 80025de:	4b6a      	ldr	r3, [pc, #424]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025e0:	6a1b      	ldr	r3, [r3, #32]
 80025e2:	4a69      	ldr	r2, [pc, #420]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025e4:	f023 0301 	bic.w	r3, r3, #1
 80025e8:	6213      	str	r3, [r2, #32]
 80025ea:	4b67      	ldr	r3, [pc, #412]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025ec:	6a1b      	ldr	r3, [r3, #32]
 80025ee:	4a66      	ldr	r2, [pc, #408]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80025f0:	f023 0304 	bic.w	r3, r3, #4
 80025f4:	6213      	str	r3, [r2, #32]
 80025f6:	e01c      	b.n	8002632 <HAL_RCC_OscConfig+0x36e>
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	68db      	ldr	r3, [r3, #12]
 80025fc:	2b05      	cmp	r3, #5
 80025fe:	d10c      	bne.n	800261a <HAL_RCC_OscConfig+0x356>
 8002600:	4b61      	ldr	r3, [pc, #388]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002602:	6a1b      	ldr	r3, [r3, #32]
 8002604:	4a60      	ldr	r2, [pc, #384]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002606:	f043 0304 	orr.w	r3, r3, #4
 800260a:	6213      	str	r3, [r2, #32]
 800260c:	4b5e      	ldr	r3, [pc, #376]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800260e:	6a1b      	ldr	r3, [r3, #32]
 8002610:	4a5d      	ldr	r2, [pc, #372]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002612:	f043 0301 	orr.w	r3, r3, #1
 8002616:	6213      	str	r3, [r2, #32]
 8002618:	e00b      	b.n	8002632 <HAL_RCC_OscConfig+0x36e>
 800261a:	4b5b      	ldr	r3, [pc, #364]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	4a5a      	ldr	r2, [pc, #360]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002620:	f023 0301 	bic.w	r3, r3, #1
 8002624:	6213      	str	r3, [r2, #32]
 8002626:	4b58      	ldr	r3, [pc, #352]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	4a57      	ldr	r2, [pc, #348]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800262c:	f023 0304 	bic.w	r3, r3, #4
 8002630:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	2b00      	cmp	r3, #0
 8002638:	d015      	beq.n	8002666 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800263a:	f7ff fa47 	bl	8001acc <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002640:	e00a      	b.n	8002658 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002642:	f7ff fa43 	bl	8001acc <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002650:	4293      	cmp	r3, r2
 8002652:	d901      	bls.n	8002658 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002654:	2303      	movs	r3, #3
 8002656:	e0b1      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002658:	4b4b      	ldr	r3, [pc, #300]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800265a:	6a1b      	ldr	r3, [r3, #32]
 800265c:	f003 0302 	and.w	r3, r3, #2
 8002660:	2b00      	cmp	r3, #0
 8002662:	d0ee      	beq.n	8002642 <HAL_RCC_OscConfig+0x37e>
 8002664:	e014      	b.n	8002690 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002666:	f7ff fa31 	bl	8001acc <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800266c:	e00a      	b.n	8002684 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266e:	f7ff fa2d 	bl	8001acc <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	f241 3288 	movw	r2, #5000	@ 0x1388
 800267c:	4293      	cmp	r3, r2
 800267e:	d901      	bls.n	8002684 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002680:	2303      	movs	r3, #3
 8002682:	e09b      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002684:	4b40      	ldr	r3, [pc, #256]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	f003 0302 	and.w	r3, r3, #2
 800268c:	2b00      	cmp	r3, #0
 800268e:	d1ee      	bne.n	800266e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002690:	7dfb      	ldrb	r3, [r7, #23]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d105      	bne.n	80026a2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002696:	4b3c      	ldr	r3, [pc, #240]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002698:	69db      	ldr	r3, [r3, #28]
 800269a:	4a3b      	ldr	r2, [pc, #236]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026a0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69db      	ldr	r3, [r3, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	f000 8087 	beq.w	80027ba <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80026ac:	4b36      	ldr	r3, [pc, #216]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f003 030c 	and.w	r3, r3, #12
 80026b4:	2b08      	cmp	r3, #8
 80026b6:	d061      	beq.n	800277c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	69db      	ldr	r3, [r3, #28]
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d146      	bne.n	800274e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026c0:	4b33      	ldr	r3, [pc, #204]	@ (8002790 <HAL_RCC_OscConfig+0x4cc>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026c6:	f7ff fa01 	bl	8001acc <HAL_GetTick>
 80026ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026cc:	e008      	b.n	80026e0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ce:	f7ff f9fd 	bl	8001acc <HAL_GetTick>
 80026d2:	4602      	mov	r2, r0
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d901      	bls.n	80026e0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e06d      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e0:	4b29      	ldr	r3, [pc, #164]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d1f0      	bne.n	80026ce <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f4:	d108      	bne.n	8002708 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80026f6:	4b24      	ldr	r3, [pc, #144]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 80026f8:	685b      	ldr	r3, [r3, #4]
 80026fa:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4921      	ldr	r1, [pc, #132]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002704:	4313      	orrs	r3, r2
 8002706:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002708:	4b1f      	ldr	r3, [pc, #124]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6a19      	ldr	r1, [r3, #32]
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002718:	430b      	orrs	r3, r1
 800271a:	491b      	ldr	r1, [pc, #108]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002720:	4b1b      	ldr	r3, [pc, #108]	@ (8002790 <HAL_RCC_OscConfig+0x4cc>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002726:	f7ff f9d1 	bl	8001acc <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800272e:	f7ff f9cd 	bl	8001acc <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e03d      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002740:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x46a>
 800274c:	e035      	b.n	80027ba <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800274e:	4b10      	ldr	r3, [pc, #64]	@ (8002790 <HAL_RCC_OscConfig+0x4cc>)
 8002750:	2200      	movs	r2, #0
 8002752:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002754:	f7ff f9ba 	bl	8001acc <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800275a:	e008      	b.n	800276e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800275c:	f7ff f9b6 	bl	8001acc <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	2b02      	cmp	r3, #2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e026      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800276e:	4b06      	ldr	r3, [pc, #24]	@ (8002788 <HAL_RCC_OscConfig+0x4c4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1f0      	bne.n	800275c <HAL_RCC_OscConfig+0x498>
 800277a:	e01e      	b.n	80027ba <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e019      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
 8002790:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002794:	4b0b      	ldr	r3, [pc, #44]	@ (80027c4 <HAL_RCC_OscConfig+0x500>)
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6a1b      	ldr	r3, [r3, #32]
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d106      	bne.n	80027b6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000

080027c8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d101      	bne.n	80027dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027d8:	2301      	movs	r3, #1
 80027da:	e0d0      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027dc:	4b6a      	ldr	r3, [pc, #424]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 0307 	and.w	r3, r3, #7
 80027e4:	683a      	ldr	r2, [r7, #0]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d910      	bls.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ea:	4b67      	ldr	r3, [pc, #412]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f023 0207 	bic.w	r2, r3, #7
 80027f2:	4965      	ldr	r1, [pc, #404]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027fa:	4b63      	ldr	r3, [pc, #396]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0307 	and.w	r3, r3, #7
 8002802:	683a      	ldr	r2, [r7, #0]
 8002804:	429a      	cmp	r2, r3
 8002806:	d001      	beq.n	800280c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0b8      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d020      	beq.n	800285a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0304 	and.w	r3, r3, #4
 8002820:	2b00      	cmp	r3, #0
 8002822:	d005      	beq.n	8002830 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002824:	4b59      	ldr	r3, [pc, #356]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	4a58      	ldr	r2, [pc, #352]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800282e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0308 	and.w	r3, r3, #8
 8002838:	2b00      	cmp	r3, #0
 800283a:	d005      	beq.n	8002848 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800283c:	4b53      	ldr	r3, [pc, #332]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	4a52      	ldr	r2, [pc, #328]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002846:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002848:	4b50      	ldr	r3, [pc, #320]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	494d      	ldr	r1, [pc, #308]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b00      	cmp	r3, #0
 8002864:	d040      	beq.n	80028e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	2b01      	cmp	r3, #1
 800286c:	d107      	bne.n	800287e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800286e:	4b47      	ldr	r3, [pc, #284]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d115      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	e07f      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	2b02      	cmp	r3, #2
 8002884:	d107      	bne.n	8002896 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002886:	4b41      	ldr	r3, [pc, #260]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d109      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e073      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002896:	4b3d      	ldr	r3, [pc, #244]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d101      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e06b      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028a6:	4b39      	ldr	r3, [pc, #228]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f023 0203 	bic.w	r2, r3, #3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4936      	ldr	r1, [pc, #216]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028b4:	4313      	orrs	r3, r2
 80028b6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028b8:	f7ff f908 	bl	8001acc <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7ff f904 	bl	8001acc <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e053      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d6:	4b2d      	ldr	r3, [pc, #180]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	f003 020c 	and.w	r2, r3, #12
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d1eb      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028e8:	4b27      	ldr	r3, [pc, #156]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 0307 	and.w	r3, r3, #7
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d210      	bcs.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b24      	ldr	r3, [pc, #144]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 0207 	bic.w	r2, r3, #7
 80028fe:	4922      	ldr	r1, [pc, #136]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <HAL_RCC_ClockConfig+0x1c0>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0307 	and.w	r3, r3, #7
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e032      	b.n	800297e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0304 	and.w	r3, r3, #4
 8002920:	2b00      	cmp	r3, #0
 8002922:	d008      	beq.n	8002936 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002924:	4b19      	ldr	r3, [pc, #100]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4916      	ldr	r1, [pc, #88]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002932:	4313      	orrs	r3, r2
 8002934:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 0308 	and.w	r3, r3, #8
 800293e:	2b00      	cmp	r3, #0
 8002940:	d009      	beq.n	8002956 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002942:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	00db      	lsls	r3, r3, #3
 8002950:	490e      	ldr	r1, [pc, #56]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 8002952:	4313      	orrs	r3, r2
 8002954:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002956:	f000 f821 	bl	800299c <HAL_RCC_GetSysClockFreq>
 800295a:	4602      	mov	r2, r0
 800295c:	4b0b      	ldr	r3, [pc, #44]	@ (800298c <HAL_RCC_ClockConfig+0x1c4>)
 800295e:	685b      	ldr	r3, [r3, #4]
 8002960:	091b      	lsrs	r3, r3, #4
 8002962:	f003 030f 	and.w	r3, r3, #15
 8002966:	490a      	ldr	r1, [pc, #40]	@ (8002990 <HAL_RCC_ClockConfig+0x1c8>)
 8002968:	5ccb      	ldrb	r3, [r1, r3]
 800296a:	fa22 f303 	lsr.w	r3, r2, r3
 800296e:	4a09      	ldr	r2, [pc, #36]	@ (8002994 <HAL_RCC_ClockConfig+0x1cc>)
 8002970:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002972:	4b09      	ldr	r3, [pc, #36]	@ (8002998 <HAL_RCC_ClockConfig+0x1d0>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f7fe fee6 	bl	8001748 <HAL_InitTick>

  return HAL_OK;
 800297c:	2300      	movs	r3, #0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	40022000 	.word	0x40022000
 800298c:	40021000 	.word	0x40021000
 8002990:	0800baf8 	.word	0x0800baf8
 8002994:	20000000 	.word	0x20000000
 8002998:	20000004 	.word	0x20000004

0800299c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800299c:	b480      	push	{r7}
 800299e:	b087      	sub	sp, #28
 80029a0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80029a2:	2300      	movs	r3, #0
 80029a4:	60fb      	str	r3, [r7, #12]
 80029a6:	2300      	movs	r3, #0
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
 80029ae:	2300      	movs	r3, #0
 80029b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80029b6:	4b1e      	ldr	r3, [pc, #120]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	2b04      	cmp	r3, #4
 80029c4:	d002      	beq.n	80029cc <HAL_RCC_GetSysClockFreq+0x30>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d003      	beq.n	80029d2 <HAL_RCC_GetSysClockFreq+0x36>
 80029ca:	e027      	b.n	8002a1c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80029cc:	4b19      	ldr	r3, [pc, #100]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80029ce:	613b      	str	r3, [r7, #16]
      break;
 80029d0:	e027      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	0c9b      	lsrs	r3, r3, #18
 80029d6:	f003 030f 	and.w	r3, r3, #15
 80029da:	4a17      	ldr	r2, [pc, #92]	@ (8002a38 <HAL_RCC_GetSysClockFreq+0x9c>)
 80029dc:	5cd3      	ldrb	r3, [r2, r3]
 80029de:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80029ea:	4b11      	ldr	r3, [pc, #68]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0x94>)
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	0c5b      	lsrs	r3, r3, #17
 80029f0:	f003 0301 	and.w	r3, r3, #1
 80029f4:	4a11      	ldr	r2, [pc, #68]	@ (8002a3c <HAL_RCC_GetSysClockFreq+0xa0>)
 80029f6:	5cd3      	ldrb	r3, [r2, r3]
 80029f8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a0d      	ldr	r2, [pc, #52]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 80029fe:	fb03 f202 	mul.w	r2, r3, r2
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a08:	617b      	str	r3, [r7, #20]
 8002a0a:	e004      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002a40 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002a10:	fb02 f303 	mul.w	r3, r2, r3
 8002a14:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	613b      	str	r3, [r7, #16]
      break;
 8002a1a:	e002      	b.n	8002a22 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002a1c:	4b05      	ldr	r3, [pc, #20]	@ (8002a34 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a1e:	613b      	str	r3, [r7, #16]
      break;
 8002a20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a22:	693b      	ldr	r3, [r7, #16]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	371c      	adds	r7, #28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bc80      	pop	{r7}
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop
 8002a30:	40021000 	.word	0x40021000
 8002a34:	007a1200 	.word	0x007a1200
 8002a38:	0800bb10 	.word	0x0800bb10
 8002a3c:	0800bb20 	.word	0x0800bb20
 8002a40:	003d0900 	.word	0x003d0900

08002a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a48:	4b02      	ldr	r3, [pc, #8]	@ (8002a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
}
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	20000000 	.word	0x20000000

08002a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a5c:	f7ff fff2 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a60:	4602      	mov	r2, r0
 8002a62:	4b05      	ldr	r3, [pc, #20]	@ (8002a78 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	0a1b      	lsrs	r3, r3, #8
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	4903      	ldr	r1, [pc, #12]	@ (8002a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6e:	5ccb      	ldrb	r3, [r1, r3]
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40021000 	.word	0x40021000
 8002a7c:	0800bb08 	.word	0x0800bb08

08002a80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a84:	f7ff ffde 	bl	8002a44 <HAL_RCC_GetHCLKFreq>
 8002a88:	4602      	mov	r2, r0
 8002a8a:	4b05      	ldr	r3, [pc, #20]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a8c:	685b      	ldr	r3, [r3, #4]
 8002a8e:	0adb      	lsrs	r3, r3, #11
 8002a90:	f003 0307 	and.w	r3, r3, #7
 8002a94:	4903      	ldr	r1, [pc, #12]	@ (8002aa4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a96:	5ccb      	ldrb	r3, [r1, r3]
 8002a98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40021000 	.word	0x40021000
 8002aa4:	0800bb08 	.word	0x0800bb08

08002aa8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
 8002ab0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	220f      	movs	r2, #15
 8002ab6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ab8:	4b11      	ldr	r3, [pc, #68]	@ (8002b00 <HAL_RCC_GetClockConfig+0x58>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f003 0203 	and.w	r2, r3, #3
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002ac4:	4b0e      	ldr	r3, [pc, #56]	@ (8002b00 <HAL_RCC_GetClockConfig+0x58>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8002b00 <HAL_RCC_GetClockConfig+0x58>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002adc:	4b08      	ldr	r3, [pc, #32]	@ (8002b00 <HAL_RCC_GetClockConfig+0x58>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	08db      	lsrs	r3, r3, #3
 8002ae2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002aea:	4b06      	ldr	r3, [pc, #24]	@ (8002b04 <HAL_RCC_GetClockConfig+0x5c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0207 	and.w	r2, r3, #7
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8002af6:	bf00      	nop
 8002af8:	370c      	adds	r7, #12
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40021000 	.word	0x40021000
 8002b04:	40022000 	.word	0x40022000

08002b08 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b085      	sub	sp, #20
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b10:	4b0a      	ldr	r3, [pc, #40]	@ (8002b3c <RCC_Delay+0x34>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4a0a      	ldr	r2, [pc, #40]	@ (8002b40 <RCC_Delay+0x38>)
 8002b16:	fba2 2303 	umull	r2, r3, r2, r3
 8002b1a:	0a5b      	lsrs	r3, r3, #9
 8002b1c:	687a      	ldr	r2, [r7, #4]
 8002b1e:	fb02 f303 	mul.w	r3, r2, r3
 8002b22:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b24:	bf00      	nop
  }
  while (Delay --);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1e5a      	subs	r2, r3, #1
 8002b2a:	60fa      	str	r2, [r7, #12]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d1f9      	bne.n	8002b24 <RCC_Delay+0x1c>
}
 8002b30:	bf00      	nop
 8002b32:	bf00      	nop
 8002b34:	3714      	adds	r7, #20
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bc80      	pop	{r7}
 8002b3a:	4770      	bx	lr
 8002b3c:	20000000 	.word	0x20000000
 8002b40:	10624dd3 	.word	0x10624dd3

08002b44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e041      	b.n	8002bda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5c:	b2db      	uxtb	r3, r3
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d106      	bne.n	8002b70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 f839 	bl	8002be2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	3304      	adds	r3, #4
 8002b80:	4619      	mov	r1, r3
 8002b82:	4610      	mov	r0, r2
 8002b84:	f000 f9c2 	bl	8002f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002be2:	b480      	push	{r7}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c02:	b2db      	uxtb	r3, r3
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d001      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e044      	b.n	8002c96 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	68da      	ldr	r2, [r3, #12]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f042 0201 	orr.w	r2, r2, #1
 8002c22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca0 <HAL_TIM_Base_Start_IT+0xac>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d018      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1c      	ldr	r2, [pc, #112]	@ (8002ca4 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d013      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c40:	d00e      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	@ (8002ca8 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d009      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	4a16      	ldr	r2, [pc, #88]	@ (8002cac <HAL_TIM_Base_Start_IT+0xb8>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d004      	beq.n	8002c60 <HAL_TIM_Base_Start_IT+0x6c>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a15      	ldr	r2, [pc, #84]	@ (8002cb0 <HAL_TIM_Base_Start_IT+0xbc>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d111      	bne.n	8002c84 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f003 0307 	and.w	r3, r3, #7
 8002c6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2b06      	cmp	r3, #6
 8002c70:	d010      	beq.n	8002c94 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	681a      	ldr	r2, [r3, #0]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f042 0201 	orr.w	r2, r2, #1
 8002c80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c82:	e007      	b.n	8002c94 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f042 0201 	orr.w	r2, r2, #1
 8002c92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3714      	adds	r7, #20
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40013400 	.word	0x40013400
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40000800 	.word	0x40000800
 8002cb0:	40000c00 	.word	0x40000c00

08002cb4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	691b      	ldr	r3, [r3, #16]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d122      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d11b      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f06f 0202 	mvn.w	r2, #2
 8002ce0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	699b      	ldr	r3, [r3, #24]
 8002cee:	f003 0303 	and.w	r3, r3, #3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	f000 f8ed 	bl	8002ed6 <HAL_TIM_IC_CaptureCallback>
 8002cfc:	e005      	b.n	8002d0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8e0 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f000 f8ef 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f003 0304 	and.w	r3, r3, #4
 8002d1a:	2b04      	cmp	r3, #4
 8002d1c:	d122      	bne.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f003 0304 	and.w	r3, r3, #4
 8002d28:	2b04      	cmp	r3, #4
 8002d2a:	d11b      	bne.n	8002d64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f06f 0204 	mvn.w	r2, #4
 8002d34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	2202      	movs	r2, #2
 8002d3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d003      	beq.n	8002d52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 f8c3 	bl	8002ed6 <HAL_TIM_IC_CaptureCallback>
 8002d50:	e005      	b.n	8002d5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8b6 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 f8c5 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	691b      	ldr	r3, [r3, #16]
 8002d6a:	f003 0308 	and.w	r3, r3, #8
 8002d6e:	2b08      	cmp	r3, #8
 8002d70:	d122      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	f003 0308 	and.w	r3, r3, #8
 8002d7c:	2b08      	cmp	r3, #8
 8002d7e:	d11b      	bne.n	8002db8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f06f 0208 	mvn.w	r2, #8
 8002d88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2204      	movs	r2, #4
 8002d8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	f003 0303 	and.w	r3, r3, #3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d003      	beq.n	8002da6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 f899 	bl	8002ed6 <HAL_TIM_IC_CaptureCallback>
 8002da4:	e005      	b.n	8002db2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f88c 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f89b 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	2200      	movs	r2, #0
 8002db6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f003 0310 	and.w	r3, r3, #16
 8002dc2:	2b10      	cmp	r3, #16
 8002dc4:	d122      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	f003 0310 	and.w	r3, r3, #16
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d11b      	bne.n	8002e0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f06f 0210 	mvn.w	r2, #16
 8002ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2208      	movs	r2, #8
 8002de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d003      	beq.n	8002dfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f86f 	bl	8002ed6 <HAL_TIM_IC_CaptureCallback>
 8002df8:	e005      	b.n	8002e06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 f862 	bl	8002ec4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f871 	bl	8002ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2200      	movs	r2, #0
 8002e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	691b      	ldr	r3, [r3, #16]
 8002e12:	f003 0301 	and.w	r3, r3, #1
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d10e      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d107      	bne.n	8002e38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f06f 0201 	mvn.w	r2, #1
 8002e30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7fe f930 	bl	8001098 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e42:	2b80      	cmp	r3, #128	@ 0x80
 8002e44:	d10e      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68db      	ldr	r3, [r3, #12]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b80      	cmp	r3, #128	@ 0x80
 8002e52:	d107      	bne.n	8002e64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f8d7 	bl	8003012 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e6e:	2b40      	cmp	r3, #64	@ 0x40
 8002e70:	d10e      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68db      	ldr	r3, [r3, #12]
 8002e78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e7c:	2b40      	cmp	r3, #64	@ 0x40
 8002e7e:	d107      	bne.n	8002e90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f835 	bl	8002efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	f003 0320 	and.w	r3, r3, #32
 8002e9a:	2b20      	cmp	r3, #32
 8002e9c:	d10e      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	f003 0320 	and.w	r3, r3, #32
 8002ea8:	2b20      	cmp	r3, #32
 8002eaa:	d107      	bne.n	8002ebc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f06f 0220 	mvn.w	r2, #32
 8002eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f8a2 	bl	8003000 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	3708      	adds	r7, #8
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bd80      	pop	{r7, pc}

08002ec4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	b083      	sub	sp, #12
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ecc:	bf00      	nop
 8002ece:	370c      	adds	r7, #12
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bc80      	pop	{r7}
 8002ed4:	4770      	bx	lr

08002ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed6:	b480      	push	{r7}
 8002ed8:	b083      	sub	sp, #12
 8002eda:	af00      	add	r7, sp, #0
 8002edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ede:	bf00      	nop
 8002ee0:	370c      	adds	r7, #12
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b083      	sub	sp, #12
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bc80      	pop	{r7}
 8002ef8:	4770      	bx	lr

08002efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002efa:	b480      	push	{r7}
 8002efc:	b083      	sub	sp, #12
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f02:	bf00      	nop
 8002f04:	370c      	adds	r7, #12
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bc80      	pop	{r7}
 8002f0a:	4770      	bx	lr

08002f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b085      	sub	sp, #20
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	4a33      	ldr	r2, [pc, #204]	@ (8002fec <TIM_Base_SetConfig+0xe0>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d013      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a32      	ldr	r2, [pc, #200]	@ (8002ff0 <TIM_Base_SetConfig+0xe4>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d00f      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f32:	d00b      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a2f      	ldr	r2, [pc, #188]	@ (8002ff4 <TIM_Base_SetConfig+0xe8>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d007      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a2e      	ldr	r2, [pc, #184]	@ (8002ff8 <TIM_Base_SetConfig+0xec>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d003      	beq.n	8002f4c <TIM_Base_SetConfig+0x40>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	4a2d      	ldr	r2, [pc, #180]	@ (8002ffc <TIM_Base_SetConfig+0xf0>)
 8002f48:	4293      	cmp	r3, r2
 8002f4a:	d108      	bne.n	8002f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	68fa      	ldr	r2, [r7, #12]
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a22      	ldr	r2, [pc, #136]	@ (8002fec <TIM_Base_SetConfig+0xe0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d013      	beq.n	8002f8e <TIM_Base_SetConfig+0x82>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a21      	ldr	r2, [pc, #132]	@ (8002ff0 <TIM_Base_SetConfig+0xe4>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d00f      	beq.n	8002f8e <TIM_Base_SetConfig+0x82>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f74:	d00b      	beq.n	8002f8e <TIM_Base_SetConfig+0x82>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a1e      	ldr	r2, [pc, #120]	@ (8002ff4 <TIM_Base_SetConfig+0xe8>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d007      	beq.n	8002f8e <TIM_Base_SetConfig+0x82>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a1d      	ldr	r2, [pc, #116]	@ (8002ff8 <TIM_Base_SetConfig+0xec>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_Base_SetConfig+0x82>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a1c      	ldr	r2, [pc, #112]	@ (8002ffc <TIM_Base_SetConfig+0xf0>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d108      	bne.n	8002fa0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	689a      	ldr	r2, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	4a09      	ldr	r2, [pc, #36]	@ (8002fec <TIM_Base_SetConfig+0xe0>)
 8002fc8:	4293      	cmp	r3, r2
 8002fca:	d003      	beq.n	8002fd4 <TIM_Base_SetConfig+0xc8>
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	4a08      	ldr	r2, [pc, #32]	@ (8002ff0 <TIM_Base_SetConfig+0xe4>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d103      	bne.n	8002fdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	691a      	ldr	r2, [r3, #16]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	615a      	str	r2, [r3, #20]
}
 8002fe2:	bf00      	nop
 8002fe4:	3714      	adds	r7, #20
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bc80      	pop	{r7}
 8002fea:	4770      	bx	lr
 8002fec:	40012c00 	.word	0x40012c00
 8002ff0:	40013400 	.word	0x40013400
 8002ff4:	40000400 	.word	0x40000400
 8002ff8:	40000800 	.word	0x40000800
 8002ffc:	40000c00 	.word	0x40000c00

08003000 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003000:	b480      	push	{r7}
 8003002:	b083      	sub	sp, #12
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	bc80      	pop	{r7}
 8003010:	4770      	bx	lr

08003012 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003012:	b480      	push	{r7}
 8003014:	b083      	sub	sp, #12
 8003016:	af00      	add	r7, sp, #0
 8003018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	bc80      	pop	{r7}
 8003022:	4770      	bx	lr

08003024 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b082      	sub	sp, #8
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003032:	2301      	movs	r3, #1
 8003034:	e042      	b.n	80030bc <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800303c:	b2db      	uxtb	r3, r3
 800303e:	2b00      	cmp	r3, #0
 8003040:	d106      	bne.n	8003050 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800304a:	6878      	ldr	r0, [r7, #4]
 800304c:	f7fe fb28 	bl	80016a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2224      	movs	r2, #36	@ 0x24
 8003054:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68da      	ldr	r2, [r3, #12]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003066:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003068:	6878      	ldr	r0, [r7, #4]
 800306a:	f000 fd3f 	bl	8003aec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	691a      	ldr	r2, [r3, #16]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800307c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695a      	ldr	r2, [r3, #20]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800308c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800309c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2220      	movs	r2, #32
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2220      	movs	r2, #32
 80030b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80030ba:	2300      	movs	r3, #0
}
 80030bc:	4618      	mov	r0, r3
 80030be:	3708      	adds	r7, #8
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}

080030c4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	60f8      	str	r0, [r7, #12]
 80030cc:	60b9      	str	r1, [r7, #8]
 80030ce:	4613      	mov	r3, r2
 80030d0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b20      	cmp	r3, #32
 80030dc:	d121      	bne.n	8003122 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_UART_Transmit_IT+0x26>
 80030e4:	88fb      	ldrh	r3, [r7, #6]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d101      	bne.n	80030ee <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e01a      	b.n	8003124 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2221      	movs	r2, #33	@ 0x21
 800310a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	68da      	ldr	r2, [r3, #12]
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800311c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	e000      	b.n	8003124 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003122:	2302      	movs	r3, #2
  }
}
 8003124:	4618      	mov	r0, r3
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr

0800312e <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b08c      	sub	sp, #48	@ 0x30
 8003132:	af00      	add	r7, sp, #0
 8003134:	60f8      	str	r0, [r7, #12]
 8003136:	60b9      	str	r1, [r7, #8]
 8003138:	4613      	mov	r3, r2
 800313a:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003142:	b2db      	uxtb	r3, r3
 8003144:	2b20      	cmp	r3, #32
 8003146:	d14a      	bne.n	80031de <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 800314e:	88fb      	ldrh	r3, [r7, #6]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d101      	bne.n	8003158 <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e043      	b.n	80031e0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	2201      	movs	r2, #1
 800315c:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	461a      	mov	r2, r3
 8003168:	68b9      	ldr	r1, [r7, #8]
 800316a:	68f8      	ldr	r0, [r7, #12]
 800316c:	f000 fae9 	bl	8003742 <UART_Start_Receive_IT>
 8003170:	4603      	mov	r3, r0
 8003172:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8003176:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800317a:	2b00      	cmp	r3, #0
 800317c:	d12c      	bne.n	80031d8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003182:	2b01      	cmp	r3, #1
 8003184:	d125      	bne.n	80031d2 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003186:	2300      	movs	r3, #0
 8003188:	613b      	str	r3, [r7, #16]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	613b      	str	r3, [r7, #16]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	330c      	adds	r3, #12
 80031a2:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	e853 3f00 	ldrex	r3, [r3]
 80031aa:	617b      	str	r3, [r7, #20]
   return(result);
 80031ac:	697b      	ldr	r3, [r7, #20]
 80031ae:	f043 0310 	orr.w	r3, r3, #16
 80031b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	330c      	adds	r3, #12
 80031ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80031be:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031c0:	6a39      	ldr	r1, [r7, #32]
 80031c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031c4:	e841 2300 	strex	r3, r2, [r1]
 80031c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1e5      	bne.n	800319c <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 80031d0:	e002      	b.n	80031d8 <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 80031d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80031dc:	e000      	b.n	80031e0 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 80031de:	2302      	movs	r3, #2
  }
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	3730      	adds	r7, #48	@ 0x30
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bd80      	pop	{r7, pc}

080031e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b0ba      	sub	sp, #232	@ 0xe8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003214:	2300      	movs	r3, #0
 8003216:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800321a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800321e:	f003 030f 	and.w	r3, r3, #15
 8003222:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003226:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10f      	bne.n	800324e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800322e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003232:	f003 0320 	and.w	r3, r3, #32
 8003236:	2b00      	cmp	r3, #0
 8003238:	d009      	beq.n	800324e <HAL_UART_IRQHandler+0x66>
 800323a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800323e:	f003 0320 	and.w	r3, r3, #32
 8003242:	2b00      	cmp	r3, #0
 8003244:	d003      	beq.n	800324e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fb91 	bl	800396e <UART_Receive_IT>
      return;
 800324c:	e25b      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800324e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 80de 	beq.w	8003414 <HAL_UART_IRQHandler+0x22c>
 8003258:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d106      	bne.n	8003272 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003264:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003268:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800326c:	2b00      	cmp	r3, #0
 800326e:	f000 80d1 	beq.w	8003414 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00b      	beq.n	8003296 <HAL_UART_IRQHandler+0xae>
 800327e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003282:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003286:	2b00      	cmp	r3, #0
 8003288:	d005      	beq.n	8003296 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800328e:	f043 0201 	orr.w	r2, r3, #1
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800329a:	f003 0304 	and.w	r3, r3, #4
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00b      	beq.n	80032ba <HAL_UART_IRQHandler+0xd2>
 80032a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032a6:	f003 0301 	and.w	r3, r3, #1
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d005      	beq.n	80032ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032b2:	f043 0202 	orr.w	r2, r3, #2
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80032ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032be:	f003 0302 	and.w	r3, r3, #2
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d00b      	beq.n	80032de <HAL_UART_IRQHandler+0xf6>
 80032c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d005      	beq.n	80032de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80032d6:	f043 0204 	orr.w	r2, r3, #4
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80032de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d011      	beq.n	800330e <HAL_UART_IRQHandler+0x126>
 80032ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032ee:	f003 0320 	and.w	r3, r3, #32
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d105      	bne.n	8003302 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80032f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f043 0208 	orr.w	r2, r3, #8
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	2b00      	cmp	r3, #0
 8003314:	f000 81f2 	beq.w	80036fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003318:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800331c:	f003 0320 	and.w	r3, r3, #32
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_UART_IRQHandler+0x14e>
 8003324:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003328:	f003 0320 	and.w	r3, r3, #32
 800332c:	2b00      	cmp	r3, #0
 800332e:	d002      	beq.n	8003336 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f000 fb1c 	bl	800396e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003340:	2b00      	cmp	r3, #0
 8003342:	bf14      	ite	ne
 8003344:	2301      	movne	r3, #1
 8003346:	2300      	moveq	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b00      	cmp	r3, #0
 8003358:	d103      	bne.n	8003362 <HAL_UART_IRQHandler+0x17a>
 800335a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800335e:	2b00      	cmp	r3, #0
 8003360:	d04f      	beq.n	8003402 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003362:	6878      	ldr	r0, [r7, #4]
 8003364:	f000 fa26 	bl	80037b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	695b      	ldr	r3, [r3, #20]
 800336e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003372:	2b00      	cmp	r3, #0
 8003374:	d041      	beq.n	80033fa <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	3314      	adds	r3, #20
 800337c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003380:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003384:	e853 3f00 	ldrex	r3, [r3]
 8003388:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800338c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003390:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003394:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	3314      	adds	r3, #20
 800339e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80033a2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80033a6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80033ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80033b2:	e841 2300 	strex	r3, r2, [r1]
 80033b6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80033ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d1d9      	bne.n	8003376 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d013      	beq.n	80033f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033ce:	4a7e      	ldr	r2, [pc, #504]	@ (80035c8 <HAL_UART_IRQHandler+0x3e0>)
 80033d0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fcc0 	bl	8001d5c <HAL_DMA_Abort_IT>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d016      	beq.n	8003410 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80033ec:	4610      	mov	r0, r2
 80033ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f0:	e00e      	b.n	8003410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f2:	6878      	ldr	r0, [r7, #4]
 80033f4:	f000 f99c 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f8:	e00a      	b.n	8003410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f000 f998 	bl	8003730 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003400:	e006      	b.n	8003410 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f994 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800340e:	e175      	b.n	80036fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003410:	bf00      	nop
    return;
 8003412:	e173      	b.n	80036fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003418:	2b01      	cmp	r3, #1
 800341a:	f040 814f 	bne.w	80036bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800341e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003422:	f003 0310 	and.w	r3, r3, #16
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 8148 	beq.w	80036bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800342c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003430:	f003 0310 	and.w	r3, r3, #16
 8003434:	2b00      	cmp	r3, #0
 8003436:	f000 8141 	beq.w	80036bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800343a:	2300      	movs	r3, #0
 800343c:	60bb      	str	r3, [r7, #8]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	60bb      	str	r3, [r7, #8]
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	60bb      	str	r3, [r7, #8]
 800344e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800345a:	2b00      	cmp	r3, #0
 800345c:	f000 80b6 	beq.w	80035cc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800346c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 8145 	beq.w	8003700 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800347a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800347e:	429a      	cmp	r2, r3
 8003480:	f080 813e 	bcs.w	8003700 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800348a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003490:	699b      	ldr	r3, [r3, #24]
 8003492:	2b20      	cmp	r3, #32
 8003494:	f000 8088 	beq.w	80035a8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80034ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80034b2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80034b6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	330c      	adds	r3, #12
 80034c0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80034c4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80034c8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034cc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80034d0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80034d4:	e841 2300 	strex	r3, r2, [r1]
 80034d8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80034dc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d1d9      	bne.n	8003498 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034ec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80034ee:	e853 3f00 	ldrex	r3, [r3]
 80034f2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80034f4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80034f6:	f023 0301 	bic.w	r3, r3, #1
 80034fa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	3314      	adds	r3, #20
 8003504:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003508:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800350c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800350e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003510:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003514:	e841 2300 	strex	r3, r2, [r1]
 8003518:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800351a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800351c:	2b00      	cmp	r3, #0
 800351e:	d1e1      	bne.n	80034e4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	3314      	adds	r3, #20
 8003526:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003528:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800352a:	e853 3f00 	ldrex	r3, [r3]
 800352e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003532:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003536:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	3314      	adds	r3, #20
 8003540:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003544:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003546:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003548:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800354a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800354c:	e841 2300 	strex	r3, r2, [r1]
 8003550:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003552:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003554:	2b00      	cmp	r3, #0
 8003556:	d1e3      	bne.n	8003520 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2200      	movs	r2, #0
 8003564:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	330c      	adds	r3, #12
 800356c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800356e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003570:	e853 3f00 	ldrex	r3, [r3]
 8003574:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003576:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003578:	f023 0310 	bic.w	r3, r3, #16
 800357c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	330c      	adds	r3, #12
 8003586:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800358a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800358c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800358e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003590:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003592:	e841 2300 	strex	r3, r2, [r1]
 8003596:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003598:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800359a:	2b00      	cmp	r3, #0
 800359c:	d1e3      	bne.n	8003566 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a2:	4618      	mov	r0, r3
 80035a4:	f7fe fb9f 	bl	8001ce6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2202      	movs	r2, #2
 80035ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035b6:	b29b      	uxth	r3, r3
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	b29b      	uxth	r3, r3
 80035bc:	4619      	mov	r1, r3
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7fd fb98 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80035c4:	e09c      	b.n	8003700 <HAL_UART_IRQHandler+0x518>
 80035c6:	bf00      	nop
 80035c8:	08003879 	.word	0x08003879
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80035e0:	b29b      	uxth	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	f000 808e 	beq.w	8003704 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80035e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	f000 8089 	beq.w	8003704 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	330c      	adds	r3, #12
 80035f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035fc:	e853 3f00 	ldrex	r3, [r3]
 8003600:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003602:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003604:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003608:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	330c      	adds	r3, #12
 8003612:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003616:	647a      	str	r2, [r7, #68]	@ 0x44
 8003618:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800361a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800361c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800361e:	e841 2300 	strex	r3, r2, [r1]
 8003622:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003624:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003626:	2b00      	cmp	r3, #0
 8003628:	d1e3      	bne.n	80035f2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3314      	adds	r3, #20
 8003630:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003634:	e853 3f00 	ldrex	r3, [r3]
 8003638:	623b      	str	r3, [r7, #32]
   return(result);
 800363a:	6a3b      	ldr	r3, [r7, #32]
 800363c:	f023 0301 	bic.w	r3, r3, #1
 8003640:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3314      	adds	r3, #20
 800364a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800364e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003650:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003652:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003656:	e841 2300 	strex	r3, r2, [r1]
 800365a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800365c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1e3      	bne.n	800362a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	2220      	movs	r2, #32
 8003666:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	330c      	adds	r3, #12
 8003676:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	e853 3f00 	ldrex	r3, [r3]
 800367e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f023 0310 	bic.w	r3, r3, #16
 8003686:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	330c      	adds	r3, #12
 8003690:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003694:	61fa      	str	r2, [r7, #28]
 8003696:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003698:	69b9      	ldr	r1, [r7, #24]
 800369a:	69fa      	ldr	r2, [r7, #28]
 800369c:	e841 2300 	strex	r3, r2, [r1]
 80036a0:	617b      	str	r3, [r7, #20]
   return(result);
 80036a2:	697b      	ldr	r3, [r7, #20]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d1e3      	bne.n	8003670 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2202      	movs	r2, #2
 80036ac:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036ae:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80036b2:	4619      	mov	r1, r3
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f7fd fb1d 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80036ba:	e023      	b.n	8003704 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80036bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d009      	beq.n	80036dc <HAL_UART_IRQHandler+0x4f4>
 80036c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f8e3 	bl	80038a0 <UART_Transmit_IT>
    return;
 80036da:	e014      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80036dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d00e      	beq.n	8003706 <HAL_UART_IRQHandler+0x51e>
 80036e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d008      	beq.n	8003706 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80036f4:	6878      	ldr	r0, [r7, #4]
 80036f6:	f000 f922 	bl	800393e <UART_EndTransmit_IT>
    return;
 80036fa:	e004      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
    return;
 80036fc:	bf00      	nop
 80036fe:	e002      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
      return;
 8003700:	bf00      	nop
 8003702:	e000      	b.n	8003706 <HAL_UART_IRQHandler+0x51e>
      return;
 8003704:	bf00      	nop
  }
}
 8003706:	37e8      	adds	r7, #232	@ 0xe8
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}

0800370c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800370c:	b480      	push	{r7}
 800370e:	b083      	sub	sp, #12
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003714:	bf00      	nop
 8003716:	370c      	adds	r7, #12
 8003718:	46bd      	mov	sp, r7
 800371a:	bc80      	pop	{r7}
 800371c:	4770      	bx	lr

0800371e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800371e:	b480      	push	{r7}
 8003720:	b083      	sub	sp, #12
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003726:	bf00      	nop
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	bc80      	pop	{r7}
 800372e:	4770      	bx	lr

08003730 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr

08003742 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003742:	b480      	push	{r7}
 8003744:	b085      	sub	sp, #20
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	4613      	mov	r3, r2
 800374e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	68ba      	ldr	r2, [r7, #8]
 8003754:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	88fa      	ldrh	r2, [r7, #6]
 800375a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	88fa      	ldrh	r2, [r7, #6]
 8003760:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2222      	movs	r2, #34	@ 0x22
 800376c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	691b      	ldr	r3, [r3, #16]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d007      	beq.n	8003788 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68da      	ldr	r2, [r3, #12]
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003786:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	695a      	ldr	r2, [r3, #20]
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f042 0201 	orr.w	r2, r2, #1
 8003796:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68da      	ldr	r2, [r3, #12]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0220 	orr.w	r2, r2, #32
 80037a6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr

080037b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80037b4:	b480      	push	{r7}
 80037b6:	b095      	sub	sp, #84	@ 0x54
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	330c      	adds	r3, #12
 80037c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c6:	e853 3f00 	ldrex	r3, [r3]
 80037ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	330c      	adds	r3, #12
 80037da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80037de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037e4:	e841 2300 	strex	r3, r2, [r1]
 80037e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d1e5      	bne.n	80037bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	3314      	adds	r3, #20
 80037f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f8:	6a3b      	ldr	r3, [r7, #32]
 80037fa:	e853 3f00 	ldrex	r3, [r3]
 80037fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	3314      	adds	r3, #20
 800380e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003810:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003812:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003814:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003816:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003818:	e841 2300 	strex	r3, r2, [r1]
 800381c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800381e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1e5      	bne.n	80037f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003828:	2b01      	cmp	r3, #1
 800382a:	d119      	bne.n	8003860 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	330c      	adds	r3, #12
 8003832:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	e853 3f00 	ldrex	r3, [r3]
 800383a:	60bb      	str	r3, [r7, #8]
   return(result);
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	f023 0310 	bic.w	r3, r3, #16
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	330c      	adds	r3, #12
 800384a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800384c:	61ba      	str	r2, [r7, #24]
 800384e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003850:	6979      	ldr	r1, [r7, #20]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	e841 2300 	strex	r3, r2, [r1]
 8003858:	613b      	str	r3, [r7, #16]
   return(result);
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d1e5      	bne.n	800382c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2220      	movs	r2, #32
 8003864:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800386e:	bf00      	nop
 8003870:	3754      	adds	r7, #84	@ 0x54
 8003872:	46bd      	mov	sp, r7
 8003874:	bc80      	pop	{r7}
 8003876:	4770      	bx	lr

08003878 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003884:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2200      	movs	r2, #0
 800388a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003892:	68f8      	ldr	r0, [r7, #12]
 8003894:	f7ff ff4c 	bl	8003730 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003898:	bf00      	nop
 800389a:	3710      	adds	r7, #16
 800389c:	46bd      	mov	sp, r7
 800389e:	bd80      	pop	{r7, pc}

080038a0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80038a0:	b480      	push	{r7}
 80038a2:	b085      	sub	sp, #20
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038ae:	b2db      	uxtb	r3, r3
 80038b0:	2b21      	cmp	r3, #33	@ 0x21
 80038b2:	d13e      	bne.n	8003932 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038bc:	d114      	bne.n	80038e8 <UART_Transmit_IT+0x48>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d110      	bne.n	80038e8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a1b      	ldr	r3, [r3, #32]
 80038ca:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	881b      	ldrh	r3, [r3, #0]
 80038d0:	461a      	mov	r2, r3
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038da:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	1c9a      	adds	r2, r3, #2
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	621a      	str	r2, [r3, #32]
 80038e6:	e008      	b.n	80038fa <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6a1b      	ldr	r3, [r3, #32]
 80038ec:	1c59      	adds	r1, r3, #1
 80038ee:	687a      	ldr	r2, [r7, #4]
 80038f0:	6211      	str	r1, [r2, #32]
 80038f2:	781a      	ldrb	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80038fe:	b29b      	uxth	r3, r3
 8003900:	3b01      	subs	r3, #1
 8003902:	b29b      	uxth	r3, r3
 8003904:	687a      	ldr	r2, [r7, #4]
 8003906:	4619      	mov	r1, r3
 8003908:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800390a:	2b00      	cmp	r3, #0
 800390c:	d10f      	bne.n	800392e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	68da      	ldr	r2, [r3, #12]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800391c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800392c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e000      	b.n	8003934 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003932:	2302      	movs	r3, #2
  }
}
 8003934:	4618      	mov	r0, r3
 8003936:	3714      	adds	r7, #20
 8003938:	46bd      	mov	sp, r7
 800393a:	bc80      	pop	{r7}
 800393c:	4770      	bx	lr

0800393e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003954:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2220      	movs	r2, #32
 800395a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f7ff fed4 	bl	800370c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003964:	2300      	movs	r3, #0
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}

0800396e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800396e:	b580      	push	{r7, lr}
 8003970:	b08c      	sub	sp, #48	@ 0x30
 8003972:	af00      	add	r7, sp, #0
 8003974:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b22      	cmp	r3, #34	@ 0x22
 8003980:	f040 80ae 	bne.w	8003ae0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800398c:	d117      	bne.n	80039be <UART_Receive_IT+0x50>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	691b      	ldr	r3, [r3, #16]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d113      	bne.n	80039be <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003996:	2300      	movs	r3, #0
 8003998:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800399e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039b0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039b6:	1c9a      	adds	r2, r3, #2
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	629a      	str	r2, [r3, #40]	@ 0x28
 80039bc:	e026      	b.n	8003a0c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039d0:	d007      	beq.n	80039e2 <UART_Receive_IT+0x74>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10a      	bne.n	80039f0 <UART_Receive_IT+0x82>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d106      	bne.n	80039f0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039ec:	701a      	strb	r2, [r3, #0]
 80039ee:	e008      	b.n	8003a02 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80039fc:	b2da      	uxtb	r2, r3
 80039fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a00:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d15d      	bne.n	8003adc <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	68da      	ldr	r2, [r3, #12]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0220 	bic.w	r2, r2, #32
 8003a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	68da      	ldr	r2, [r3, #12]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	695a      	ldr	r2, [r3, #20]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f022 0201 	bic.w	r2, r2, #1
 8003a4e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2220      	movs	r2, #32
 8003a54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d135      	bne.n	8003ad2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	330c      	adds	r3, #12
 8003a72:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	e853 3f00 	ldrex	r3, [r3]
 8003a7a:	613b      	str	r3, [r7, #16]
   return(result);
 8003a7c:	693b      	ldr	r3, [r7, #16]
 8003a7e:	f023 0310 	bic.w	r3, r3, #16
 8003a82:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	330c      	adds	r3, #12
 8003a8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a8c:	623a      	str	r2, [r7, #32]
 8003a8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a90:	69f9      	ldr	r1, [r7, #28]
 8003a92:	6a3a      	ldr	r2, [r7, #32]
 8003a94:	e841 2300 	strex	r3, r2, [r1]
 8003a98:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1e5      	bne.n	8003a6c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	2b10      	cmp	r3, #16
 8003aac:	d10a      	bne.n	8003ac4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	60fb      	str	r3, [r7, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7fd f912 	bl	8000cf4 <HAL_UARTEx_RxEventCallback>
 8003ad0:	e002      	b.n	8003ad8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003ad2:	6878      	ldr	r0, [r7, #4]
 8003ad4:	f7ff fe23 	bl	800371e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	e002      	b.n	8003ae2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003adc:	2300      	movs	r3, #0
 8003ade:	e000      	b.n	8003ae2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003ae0:	2302      	movs	r3, #2
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3730      	adds	r7, #48	@ 0x30
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
	...

08003aec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	691b      	ldr	r3, [r3, #16]
 8003afa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68da      	ldr	r2, [r3, #12]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	430a      	orrs	r2, r1
 8003b08:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	689a      	ldr	r2, [r3, #8]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68db      	ldr	r3, [r3, #12]
 8003b22:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003b26:	f023 030c 	bic.w	r3, r3, #12
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6812      	ldr	r2, [r2, #0]
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	430b      	orrs	r3, r1
 8003b32:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	699a      	ldr	r2, [r3, #24]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	430a      	orrs	r2, r1
 8003b48:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a2c      	ldr	r2, [pc, #176]	@ (8003c00 <UART_SetConfig+0x114>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d103      	bne.n	8003b5c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003b54:	f7fe ff94 	bl	8002a80 <HAL_RCC_GetPCLK2Freq>
 8003b58:	60f8      	str	r0, [r7, #12]
 8003b5a:	e002      	b.n	8003b62 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003b5c:	f7fe ff7c 	bl	8002a58 <HAL_RCC_GetPCLK1Freq>
 8003b60:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003b62:	68fa      	ldr	r2, [r7, #12]
 8003b64:	4613      	mov	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	4413      	add	r3, r2
 8003b6a:	009a      	lsls	r2, r3, #2
 8003b6c:	441a      	add	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b78:	4a22      	ldr	r2, [pc, #136]	@ (8003c04 <UART_SetConfig+0x118>)
 8003b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b7e:	095b      	lsrs	r3, r3, #5
 8003b80:	0119      	lsls	r1, r3, #4
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4613      	mov	r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	4413      	add	r3, r2
 8003b8a:	009a      	lsls	r2, r3, #2
 8003b8c:	441a      	add	r2, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b98:	4b1a      	ldr	r3, [pc, #104]	@ (8003c04 <UART_SetConfig+0x118>)
 8003b9a:	fba3 0302 	umull	r0, r3, r3, r2
 8003b9e:	095b      	lsrs	r3, r3, #5
 8003ba0:	2064      	movs	r0, #100	@ 0x64
 8003ba2:	fb00 f303 	mul.w	r3, r0, r3
 8003ba6:	1ad3      	subs	r3, r2, r3
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	3332      	adds	r3, #50	@ 0x32
 8003bac:	4a15      	ldr	r2, [pc, #84]	@ (8003c04 <UART_SetConfig+0x118>)
 8003bae:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb2:	095b      	lsrs	r3, r3, #5
 8003bb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003bb8:	4419      	add	r1, r3
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4613      	mov	r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	4413      	add	r3, r2
 8003bc2:	009a      	lsls	r2, r3, #2
 8003bc4:	441a      	add	r2, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	009b      	lsls	r3, r3, #2
 8003bcc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8003c04 <UART_SetConfig+0x118>)
 8003bd2:	fba3 0302 	umull	r0, r3, r3, r2
 8003bd6:	095b      	lsrs	r3, r3, #5
 8003bd8:	2064      	movs	r0, #100	@ 0x64
 8003bda:	fb00 f303 	mul.w	r3, r0, r3
 8003bde:	1ad3      	subs	r3, r2, r3
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	3332      	adds	r3, #50	@ 0x32
 8003be4:	4a07      	ldr	r2, [pc, #28]	@ (8003c04 <UART_SetConfig+0x118>)
 8003be6:	fba2 2303 	umull	r2, r3, r2, r3
 8003bea:	095b      	lsrs	r3, r3, #5
 8003bec:	f003 020f 	and.w	r2, r3, #15
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	440a      	add	r2, r1
 8003bf6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40013800 	.word	0x40013800
 8003c04:	51eb851f 	.word	0x51eb851f

08003c08 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c0e:	f3ef 8305 	mrs	r3, IPSR
 8003c12:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c14:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d10f      	bne.n	8003c3a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c1a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c1e:	607b      	str	r3, [r7, #4]
  return(result);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d109      	bne.n	8003c3a <osKernelInitialize+0x32>
 8003c26:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <osKernelInitialize+0x60>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d109      	bne.n	8003c42 <osKernelInitialize+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c2e:	f3ef 8311 	mrs	r3, BASEPRI
 8003c32:	603b      	str	r3, [r7, #0]
  return(result);
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d003      	beq.n	8003c42 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 8003c3a:	f06f 0305 	mvn.w	r3, #5
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	e00c      	b.n	8003c5c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003c42:	4b09      	ldr	r3, [pc, #36]	@ (8003c68 <osKernelInitialize+0x60>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d105      	bne.n	8003c56 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 8003c4a:	4b07      	ldr	r3, [pc, #28]	@ (8003c68 <osKernelInitialize+0x60>)
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	60fb      	str	r3, [r7, #12]
 8003c54:	e002      	b.n	8003c5c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8003c56:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr
 8003c68:	200006b0 	.word	0x200006b0

08003c6c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c72:	f3ef 8305 	mrs	r3, IPSR
 8003c76:	60bb      	str	r3, [r7, #8]
  return(result);
 8003c78:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10f      	bne.n	8003c9e <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c82:	607b      	str	r3, [r7, #4]
  return(result);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d109      	bne.n	8003c9e <osKernelStart+0x32>
 8003c8a:	4b11      	ldr	r3, [pc, #68]	@ (8003cd0 <osKernelStart+0x64>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d109      	bne.n	8003ca6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003c92:	f3ef 8311 	mrs	r3, BASEPRI
 8003c96:	603b      	str	r3, [r7, #0]
  return(result);
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d003      	beq.n	8003ca6 <osKernelStart+0x3a>
    stat = osErrorISR;
 8003c9e:	f06f 0305 	mvn.w	r3, #5
 8003ca2:	60fb      	str	r3, [r7, #12]
 8003ca4:	e00e      	b.n	8003cc4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8003cd0 <osKernelStart+0x64>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d107      	bne.n	8003cbe <osKernelStart+0x52>
      KernelState = osKernelRunning;
 8003cae:	4b08      	ldr	r3, [pc, #32]	@ (8003cd0 <osKernelStart+0x64>)
 8003cb0:	2202      	movs	r2, #2
 8003cb2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 8003cb4:	f001 f9d4 	bl	8005060 <vTaskStartScheduler>
      stat = osOK;
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	e002      	b.n	8003cc4 <osKernelStart+0x58>
    } else {
      stat = osError;
 8003cbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003cc2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3710      	adds	r7, #16
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	200006b0 	.word	0x200006b0

08003cd4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b092      	sub	sp, #72	@ 0x48
 8003cd8:	af04      	add	r7, sp, #16
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003ce4:	f3ef 8305 	mrs	r3, IPSR
 8003ce8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003cea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  if (!IS_IRQ() && (func != NULL)) {
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f040 8094 	bne.w	8003e1a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cf6:	623b      	str	r3, [r7, #32]
  return(result);
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f040 808d 	bne.w	8003e1a <osThreadNew+0x146>
 8003d00:	4b48      	ldr	r3, [pc, #288]	@ (8003e24 <osThreadNew+0x150>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b02      	cmp	r3, #2
 8003d06:	d106      	bne.n	8003d16 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003d08:	f3ef 8311 	mrs	r3, BASEPRI
 8003d0c:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	f040 8082 	bne.w	8003e1a <osThreadNew+0x146>
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d07e      	beq.n	8003e1a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 8003d1c:	2380      	movs	r3, #128	@ 0x80
 8003d1e:	633b      	str	r3, [r7, #48]	@ 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8003d20:	2318      	movs	r3, #24
 8003d22:	62fb      	str	r3, [r7, #44]	@ 0x2c

    empty = '\0';
 8003d24:	2300      	movs	r3, #0
 8003d26:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8003d28:	f107 031b 	add.w	r3, r7, #27
 8003d2c:	637b      	str	r3, [r7, #52]	@ 0x34
    mem   = -1;
 8003d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8003d32:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (attr != NULL) {
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d045      	beq.n	8003dc6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d002      	beq.n	8003d48 <osThreadNew+0x74>
        name = attr->name;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      if (attr->priority != osPriorityNone) {
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d002      	beq.n	8003d56 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d008      	beq.n	8003d6e <osThreadNew+0x9a>
 8003d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d5e:	2b38      	cmp	r3, #56	@ 0x38
 8003d60:	d805      	bhi.n	8003d6e <osThreadNew+0x9a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <osThreadNew+0x9e>
        return (NULL);
 8003d6e:	2300      	movs	r3, #0
 8003d70:	e054      	b.n	8003e1c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d003      	beq.n	8003d82 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	089b      	lsrs	r3, r3, #2
 8003d80:	633b      	str	r3, [r7, #48]	@ 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <osThreadNew+0xd4>
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	2b5b      	cmp	r3, #91	@ 0x5b
 8003d90:	d90a      	bls.n	8003da8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d006      	beq.n	8003da8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <osThreadNew+0xd4>
        mem = 1;
 8003da2:	2301      	movs	r3, #1
 8003da4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003da6:	e010      	b.n	8003dca <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10c      	bne.n	8003dca <osThreadNew+0xf6>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d108      	bne.n	8003dca <osThreadNew+0xf6>
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	691b      	ldr	r3, [r3, #16]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d104      	bne.n	8003dca <osThreadNew+0xf6>
          mem = 0;
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dc4:	e001      	b.n	8003dca <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    if (mem == 1) {
 8003dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d110      	bne.n	8003df2 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003dd8:	9202      	str	r2, [sp, #8]
 8003dda:	9301      	str	r3, [sp, #4]
 8003ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dde:	9300      	str	r3, [sp, #0]
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003de4:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 fee8 	bl	8004bbc <xTaskCreateStatic>
 8003dec:	4603      	mov	r3, r0
 8003dee:	617b      	str	r3, [r7, #20]
 8003df0:	e013      	b.n	8003e1a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8003df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d110      	bne.n	8003e1a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003df8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dfa:	b29a      	uxth	r2, r3
 8003dfc:	f107 0314 	add.w	r3, r7, #20
 8003e00:	9301      	str	r3, [sp, #4]
 8003e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e04:	9300      	str	r3, [sp, #0]
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8003e0a:	68f8      	ldr	r0, [r7, #12]
 8003e0c:	f000 ff35 	bl	8004c7a <xTaskCreate>
 8003e10:	4603      	mov	r3, r0
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d001      	beq.n	8003e1a <osThreadNew+0x146>
          hTask = NULL;
 8003e16:	2300      	movs	r3, #0
 8003e18:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003e1a:	697b      	ldr	r3, [r7, #20]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3738      	adds	r7, #56	@ 0x38
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	200006b0 	.word	0x200006b0

08003e28 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b086      	sub	sp, #24
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e30:	f3ef 8305 	mrs	r3, IPSR
 8003e34:	613b      	str	r3, [r7, #16]
  return(result);
 8003e36:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d10f      	bne.n	8003e5c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003e40:	60fb      	str	r3, [r7, #12]
  return(result);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d109      	bne.n	8003e5c <osDelay+0x34>
 8003e48:	4b0d      	ldr	r3, [pc, #52]	@ (8003e80 <osDelay+0x58>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d109      	bne.n	8003e64 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003e50:	f3ef 8311 	mrs	r3, BASEPRI
 8003e54:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e56:	68bb      	ldr	r3, [r7, #8]
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d003      	beq.n	8003e64 <osDelay+0x3c>
    stat = osErrorISR;
 8003e5c:	f06f 0305 	mvn.w	r3, #5
 8003e60:	617b      	str	r3, [r7, #20]
 8003e62:	e007      	b.n	8003e74 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8003e64:	2300      	movs	r3, #0
 8003e66:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d002      	beq.n	8003e74 <osDelay+0x4c>
      vTaskDelay(ticks);
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f001 f8c0 	bl	8004ff4 <vTaskDelay>
    }
  }

  return (stat);
 8003e74:	697b      	ldr	r3, [r7, #20]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3718      	adds	r7, #24
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	200006b0 	.word	0x200006b0

08003e84 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08c      	sub	sp, #48	@ 0x30
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8003e90:	2300      	movs	r3, #0
 8003e92:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e94:	f3ef 8305 	mrs	r3, IPSR
 8003e98:	61bb      	str	r3, [r7, #24]
  return(result);
 8003e9a:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d16f      	bne.n	8003f80 <osMessageQueueNew+0xfc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea4:	617b      	str	r3, [r7, #20]
  return(result);
 8003ea6:	697b      	ldr	r3, [r7, #20]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d169      	bne.n	8003f80 <osMessageQueueNew+0xfc>
 8003eac:	4b37      	ldr	r3, [pc, #220]	@ (8003f8c <osMessageQueueNew+0x108>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d105      	bne.n	8003ec0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8003eb4:	f3ef 8311 	mrs	r3, BASEPRI
 8003eb8:	613b      	str	r3, [r7, #16]
  return(result);
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d15f      	bne.n	8003f80 <osMessageQueueNew+0xfc>
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d05c      	beq.n	8003f80 <osMessageQueueNew+0xfc>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d059      	beq.n	8003f80 <osMessageQueueNew+0xfc>
    mem = -1;
 8003ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8003ed0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d029      	beq.n	8003f2c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	689b      	ldr	r3, [r3, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d012      	beq.n	8003f06 <osMessageQueueNew+0x82>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	68db      	ldr	r3, [r3, #12]
 8003ee4:	2b4f      	cmp	r3, #79	@ 0x4f
 8003ee6:	d90e      	bls.n	8003f06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00a      	beq.n	8003f06 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	695a      	ldr	r2, [r3, #20]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	429a      	cmp	r2, r3
 8003efe:	d302      	bcc.n	8003f06 <osMessageQueueNew+0x82>
        mem = 1;
 8003f00:	2301      	movs	r3, #1
 8003f02:	623b      	str	r3, [r7, #32]
 8003f04:	e014      	b.n	8003f30 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d110      	bne.n	8003f30 <osMessageQueueNew+0xac>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68db      	ldr	r3, [r3, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10c      	bne.n	8003f30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d108      	bne.n	8003f30 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d104      	bne.n	8003f30 <osMessageQueueNew+0xac>
          mem = 0;
 8003f26:	2300      	movs	r3, #0
 8003f28:	623b      	str	r3, [r7, #32]
 8003f2a:	e001      	b.n	8003f30 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d10b      	bne.n	8003f4e <osMessageQueueNew+0xca>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691a      	ldr	r2, [r3, #16]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2100      	movs	r1, #0
 8003f40:	9100      	str	r1, [sp, #0]
 8003f42:	68b9      	ldr	r1, [r7, #8]
 8003f44:	68f8      	ldr	r0, [r7, #12]
 8003f46:	f000 f96f 	bl	8004228 <xQueueGenericCreateStatic>
 8003f4a:	6278      	str	r0, [r7, #36]	@ 0x24
 8003f4c:	e008      	b.n	8003f60 <osMessageQueueNew+0xdc>
    }
    else {
      if (mem == 0) {
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d105      	bne.n	8003f60 <osMessageQueueNew+0xdc>
        hQueue = xQueueCreate (msg_count, msg_size);
 8003f54:	2200      	movs	r2, #0
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f9e1 	bl	8004320 <xQueueGenericCreate>
 8003f5e:	6278      	str	r0, [r7, #36]	@ 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8003f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00c      	beq.n	8003f80 <osMessageQueueNew+0xfc>
      if (attr != NULL) {
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d003      	beq.n	8003f74 <osMessageQueueNew+0xf0>
        name = attr->name;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	61fb      	str	r3, [r7, #28]
 8003f72:	e001      	b.n	8003f78 <osMessageQueueNew+0xf4>
      } else {
        name = NULL;
 8003f74:	2300      	movs	r3, #0
 8003f76:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 8003f78:	69f9      	ldr	r1, [r7, #28]
 8003f7a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f7c:	f000 fdc2 	bl	8004b04 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8003f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3728      	adds	r7, #40	@ 0x28
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200006b0 	.word	0x200006b0

08003f90 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003f90:	b480      	push	{r7}
 8003f92:	b085      	sub	sp, #20
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	60f8      	str	r0, [r7, #12]
 8003f98:	60b9      	str	r1, [r7, #8]
 8003f9a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	4a06      	ldr	r2, [pc, #24]	@ (8003fb8 <vApplicationGetIdleTaskMemory+0x28>)
 8003fa0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	4a05      	ldr	r2, [pc, #20]	@ (8003fbc <vApplicationGetIdleTaskMemory+0x2c>)
 8003fa6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2280      	movs	r2, #128	@ 0x80
 8003fac:	601a      	str	r2, [r3, #0]
}
 8003fae:	bf00      	nop
 8003fb0:	3714      	adds	r7, #20
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	bc80      	pop	{r7}
 8003fb6:	4770      	bx	lr
 8003fb8:	200006b4 	.word	0x200006b4
 8003fbc:	20000710 	.word	0x20000710

08003fc0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	60f8      	str	r0, [r7, #12]
 8003fc8:	60b9      	str	r1, [r7, #8]
 8003fca:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	4a07      	ldr	r2, [pc, #28]	@ (8003fec <vApplicationGetTimerTaskMemory+0x2c>)
 8003fd0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	4a06      	ldr	r2, [pc, #24]	@ (8003ff0 <vApplicationGetTimerTaskMemory+0x30>)
 8003fd6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003fde:	601a      	str	r2, [r3, #0]
}
 8003fe0:	bf00      	nop
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bc80      	pop	{r7}
 8003fe8:	4770      	bx	lr
 8003fea:	bf00      	nop
 8003fec:	20000910 	.word	0x20000910
 8003ff0:	2000096c 	.word	0x2000096c

08003ff4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f103 0208 	add.w	r2, r3, #8
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f04f 32ff 	mov.w	r2, #4294967295
 800400c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	f103 0208 	add.w	r2, r3, #8
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f103 0208 	add.w	r2, r3, #8
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004028:	bf00      	nop
 800402a:	370c      	adds	r7, #12
 800402c:	46bd      	mov	sp, r7
 800402e:	bc80      	pop	{r7}
 8004030:	4770      	bx	lr

08004032 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004032:	b480      	push	{r7}
 8004034:	b083      	sub	sp, #12
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	bc80      	pop	{r7}
 8004048:	4770      	bx	lr

0800404a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800404a:	b480      	push	{r7}
 800404c:	b085      	sub	sp, #20
 800404e:	af00      	add	r7, sp, #0
 8004050:	6078      	str	r0, [r7, #4]
 8004052:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800405a:	683b      	ldr	r3, [r7, #0]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	689a      	ldr	r2, [r3, #8]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	1c5a      	adds	r2, r3, #1
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	601a      	str	r2, [r3, #0]
}
 8004086:	bf00      	nop
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	bc80      	pop	{r7}
 800408e:	4770      	bx	lr

08004090 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004090:	b480      	push	{r7}
 8004092:	b085      	sub	sp, #20
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d103      	bne.n	80040b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	60fb      	str	r3, [r7, #12]
 80040ae:	e00c      	b.n	80040ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3308      	adds	r3, #8
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	e002      	b.n	80040be <vListInsert+0x2e>
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68ba      	ldr	r2, [r7, #8]
 80040c6:	429a      	cmp	r2, r3
 80040c8:	d2f6      	bcs.n	80040b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	685a      	ldr	r2, [r3, #4]
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	683a      	ldr	r2, [r7, #0]
 80040d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	1c5a      	adds	r2, r3, #1
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	601a      	str	r2, [r3, #0]
}
 80040f6:	bf00      	nop
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bc80      	pop	{r7}
 80040fe:	4770      	bx	lr

08004100 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004100:	b480      	push	{r7}
 8004102:	b085      	sub	sp, #20
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	687a      	ldr	r2, [r7, #4]
 8004114:	6892      	ldr	r2, [r2, #8]
 8004116:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	689b      	ldr	r3, [r3, #8]
 800411c:	687a      	ldr	r2, [r7, #4]
 800411e:	6852      	ldr	r2, [r2, #4]
 8004120:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	687a      	ldr	r2, [r7, #4]
 8004128:	429a      	cmp	r2, r3
 800412a:	d103      	bne.n	8004134 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	1e5a      	subs	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
}
 8004148:	4618      	mov	r0, r3
 800414a:	3714      	adds	r7, #20
 800414c:	46bd      	mov	sp, r7
 800414e:	bc80      	pop	{r7}
 8004150:	4770      	bx	lr
	...

08004154 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10b      	bne.n	8004180 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004168:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800416c:	f383 8811 	msr	BASEPRI, r3
 8004170:	f3bf 8f6f 	isb	sy
 8004174:	f3bf 8f4f 	dsb	sy
 8004178:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800417a:	bf00      	nop
 800417c:	bf00      	nop
 800417e:	e7fd      	b.n	800417c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004180:	f002 f8b4 	bl	80062ec <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004190:	fb01 f303 	mul.w	r3, r1, r3
 8004194:	441a      	add	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	3b01      	subs	r3, #1
 80041b2:	68f9      	ldr	r1, [r7, #12]
 80041b4:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80041b6:	fb01 f303 	mul.w	r3, r1, r3
 80041ba:	441a      	add	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	22ff      	movs	r2, #255	@ 0xff
 80041c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	22ff      	movs	r2, #255	@ 0xff
 80041cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d114      	bne.n	8004200 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d01a      	beq.n	8004214 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	3310      	adds	r3, #16
 80041e2:	4618      	mov	r0, r3
 80041e4:	f001 f9ce 	bl	8005584 <xTaskRemoveFromEventList>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80041ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004224 <xQueueGenericReset+0xd0>)
 80041f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	f3bf 8f4f 	dsb	sy
 80041fa:	f3bf 8f6f 	isb	sy
 80041fe:	e009      	b.n	8004214 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	3310      	adds	r3, #16
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fef5 	bl	8003ff4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	3324      	adds	r3, #36	@ 0x24
 800420e:	4618      	mov	r0, r3
 8004210:	f7ff fef0 	bl	8003ff4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004214:	f002 f89a 	bl	800634c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004218:	2301      	movs	r3, #1
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	e000ed04 	.word	0xe000ed04

08004228 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004228:	b580      	push	{r7, lr}
 800422a:	b08e      	sub	sp, #56	@ 0x38
 800422c:	af02      	add	r7, sp, #8
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
 8004234:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800423c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004240:	f383 8811 	msr	BASEPRI, r3
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	f3bf 8f4f 	dsb	sy
 800424c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800424e:	bf00      	nop
 8004250:	bf00      	nop
 8004252:	e7fd      	b.n	8004250 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d10b      	bne.n	8004272 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800425a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425e:	f383 8811 	msr	BASEPRI, r3
 8004262:	f3bf 8f6f 	isb	sy
 8004266:	f3bf 8f4f 	dsb	sy
 800426a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800426c:	bf00      	nop
 800426e:	bf00      	nop
 8004270:	e7fd      	b.n	800426e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <xQueueGenericCreateStatic+0x56>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d001      	beq.n	8004282 <xQueueGenericCreateStatic+0x5a>
 800427e:	2301      	movs	r3, #1
 8004280:	e000      	b.n	8004284 <xQueueGenericCreateStatic+0x5c>
 8004282:	2300      	movs	r3, #0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	623b      	str	r3, [r7, #32]
}
 800429a:	bf00      	nop
 800429c:	bf00      	nop
 800429e:	e7fd      	b.n	800429c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d102      	bne.n	80042ac <xQueueGenericCreateStatic+0x84>
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <xQueueGenericCreateStatic+0x88>
 80042ac:	2301      	movs	r3, #1
 80042ae:	e000      	b.n	80042b2 <xQueueGenericCreateStatic+0x8a>
 80042b0:	2300      	movs	r3, #0
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10b      	bne.n	80042ce <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	61fb      	str	r3, [r7, #28]
}
 80042c8:	bf00      	nop
 80042ca:	bf00      	nop
 80042cc:	e7fd      	b.n	80042ca <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80042ce:	2350      	movs	r3, #80	@ 0x50
 80042d0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	2b50      	cmp	r3, #80	@ 0x50
 80042d6:	d00b      	beq.n	80042f0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	61bb      	str	r3, [r7, #24]
}
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <xQueueGenericCreateStatic+0xc4>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80042f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00d      	beq.n	8004316 <xQueueGenericCreateStatic+0xee>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80042fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80042fc:	2201      	movs	r2, #1
 80042fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004302:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004308:	9300      	str	r3, [sp, #0]
 800430a:	4613      	mov	r3, r2
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	68b9      	ldr	r1, [r7, #8]
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f844 	bl	800439e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004318:	4618      	mov	r0, r3
 800431a:	3730      	adds	r7, #48	@ 0x30
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004320:	b580      	push	{r7, lr}
 8004322:	b08a      	sub	sp, #40	@ 0x28
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	4613      	mov	r3, r2
 800432c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d10b      	bne.n	800434c <xQueueGenericCreate+0x2c>
	__asm volatile
 8004334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004338:	f383 8811 	msr	BASEPRI, r3
 800433c:	f3bf 8f6f 	isb	sy
 8004340:	f3bf 8f4f 	dsb	sy
 8004344:	613b      	str	r3, [r7, #16]
}
 8004346:	bf00      	nop
 8004348:	bf00      	nop
 800434a:	e7fd      	b.n	8004348 <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d102      	bne.n	8004358 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004352:	2300      	movs	r3, #0
 8004354:	61fb      	str	r3, [r7, #28]
 8004356:	e004      	b.n	8004362 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	68ba      	ldr	r2, [r7, #8]
 800435c:	fb02 f303 	mul.w	r3, r2, r3
 8004360:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3350      	adds	r3, #80	@ 0x50
 8004366:	4618      	mov	r0, r3
 8004368:	f002 f8c2 	bl	80064f0 <pvPortMalloc>
 800436c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800436e:	69bb      	ldr	r3, [r7, #24]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00f      	beq.n	8004394 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	3350      	adds	r3, #80	@ 0x50
 8004378:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004382:	79fa      	ldrb	r2, [r7, #7]
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	4613      	mov	r3, r2
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	68b9      	ldr	r1, [r7, #8]
 800438e:	68f8      	ldr	r0, [r7, #12]
 8004390:	f000 f805 	bl	800439e <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004394:	69bb      	ldr	r3, [r7, #24]
	}
 8004396:	4618      	mov	r0, r3
 8004398:	3720      	adds	r7, #32
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}

0800439e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b084      	sub	sp, #16
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	60f8      	str	r0, [r7, #12]
 80043a6:	60b9      	str	r1, [r7, #8]
 80043a8:	607a      	str	r2, [r7, #4]
 80043aa:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d103      	bne.n	80043ba <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	69ba      	ldr	r2, [r7, #24]
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	e002      	b.n	80043c0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	687a      	ldr	r2, [r7, #4]
 80043be:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80043c0:	69bb      	ldr	r3, [r7, #24]
 80043c2:	68fa      	ldr	r2, [r7, #12]
 80043c4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	68ba      	ldr	r2, [r7, #8]
 80043ca:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80043cc:	2101      	movs	r1, #1
 80043ce:	69b8      	ldr	r0, [r7, #24]
 80043d0:	f7ff fec0 	bl	8004154 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80043d4:	69bb      	ldr	r3, [r7, #24]
 80043d6:	78fa      	ldrb	r2, [r7, #3]
 80043d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80043dc:	bf00      	nop
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08e      	sub	sp, #56	@ 0x38
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
 80043f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80043f2:	2300      	movs	r3, #0
 80043f4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80043fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10b      	bne.n	8004418 <xQueueGenericSend+0x34>
	__asm volatile
 8004400:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004404:	f383 8811 	msr	BASEPRI, r3
 8004408:	f3bf 8f6f 	isb	sy
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004412:	bf00      	nop
 8004414:	bf00      	nop
 8004416:	e7fd      	b.n	8004414 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d103      	bne.n	8004426 <xQueueGenericSend+0x42>
 800441e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004420:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <xQueueGenericSend+0x46>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <xQueueGenericSend+0x48>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <xQueueGenericSend+0x64>
	__asm volatile
 8004430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004434:	f383 8811 	msr	BASEPRI, r3
 8004438:	f3bf 8f6f 	isb	sy
 800443c:	f3bf 8f4f 	dsb	sy
 8004440:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004442:	bf00      	nop
 8004444:	bf00      	nop
 8004446:	e7fd      	b.n	8004444 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004448:	683b      	ldr	r3, [r7, #0]
 800444a:	2b02      	cmp	r3, #2
 800444c:	d103      	bne.n	8004456 <xQueueGenericSend+0x72>
 800444e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <xQueueGenericSend+0x76>
 8004456:	2301      	movs	r3, #1
 8004458:	e000      	b.n	800445c <xQueueGenericSend+0x78>
 800445a:	2300      	movs	r3, #0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10b      	bne.n	8004478 <xQueueGenericSend+0x94>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	623b      	str	r3, [r7, #32]
}
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004478:	f001 fa48 	bl	800590c <xTaskGetSchedulerState>
 800447c:	4603      	mov	r3, r0
 800447e:	2b00      	cmp	r3, #0
 8004480:	d102      	bne.n	8004488 <xQueueGenericSend+0xa4>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d101      	bne.n	800448c <xQueueGenericSend+0xa8>
 8004488:	2301      	movs	r3, #1
 800448a:	e000      	b.n	800448e <xQueueGenericSend+0xaa>
 800448c:	2300      	movs	r3, #0
 800448e:	2b00      	cmp	r3, #0
 8004490:	d10b      	bne.n	80044aa <xQueueGenericSend+0xc6>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	61fb      	str	r3, [r7, #28]
}
 80044a4:	bf00      	nop
 80044a6:	bf00      	nop
 80044a8:	e7fd      	b.n	80044a6 <xQueueGenericSend+0xc2>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044aa:	f001 ff1f 	bl	80062ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d302      	bcc.n	80044c0 <xQueueGenericSend+0xdc>
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d129      	bne.n	8004514 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80044c0:	683a      	ldr	r2, [r7, #0]
 80044c2:	68b9      	ldr	r1, [r7, #8]
 80044c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80044c6:	f000 fa0d 	bl	80048e4 <prvCopyDataToQueue>
 80044ca:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d010      	beq.n	80044f6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044d6:	3324      	adds	r3, #36	@ 0x24
 80044d8:	4618      	mov	r0, r3
 80044da:	f001 f853 	bl	8005584 <xTaskRemoveFromEventList>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d013      	beq.n	800450c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80044e4:	4b3f      	ldr	r3, [pc, #252]	@ (80045e4 <xQueueGenericSend+0x200>)
 80044e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	f3bf 8f4f 	dsb	sy
 80044f0:	f3bf 8f6f 	isb	sy
 80044f4:	e00a      	b.n	800450c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80044f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d007      	beq.n	800450c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80044fc:	4b39      	ldr	r3, [pc, #228]	@ (80045e4 <xQueueGenericSend+0x200>)
 80044fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004502:	601a      	str	r2, [r3, #0]
 8004504:	f3bf 8f4f 	dsb	sy
 8004508:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800450c:	f001 ff1e 	bl	800634c <vPortExitCritical>
				return pdPASS;
 8004510:	2301      	movs	r3, #1
 8004512:	e063      	b.n	80045dc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d103      	bne.n	8004522 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800451a:	f001 ff17 	bl	800634c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800451e:	2300      	movs	r3, #0
 8004520:	e05c      	b.n	80045dc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004528:	f107 0314 	add.w	r3, r7, #20
 800452c:	4618      	mov	r0, r3
 800452e:	f001 f88d 	bl	800564c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004532:	2301      	movs	r3, #1
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004536:	f001 ff09 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800453a:	f000 fdf9 	bl	8005130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800453e:	f001 fed5 	bl	80062ec <vPortEnterCritical>
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004548:	b25b      	sxtb	r3, r3
 800454a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800454e:	d103      	bne.n	8004558 <xQueueGenericSend+0x174>
 8004550:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004552:	2200      	movs	r2, #0
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800455a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800455e:	b25b      	sxtb	r3, r3
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d103      	bne.n	800456e <xQueueGenericSend+0x18a>
 8004566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800456e:	f001 feed 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004572:	1d3a      	adds	r2, r7, #4
 8004574:	f107 0314 	add.w	r3, r7, #20
 8004578:	4611      	mov	r1, r2
 800457a:	4618      	mov	r0, r3
 800457c:	f001 f87c 	bl	8005678 <xTaskCheckForTimeOut>
 8004580:	4603      	mov	r3, r0
 8004582:	2b00      	cmp	r3, #0
 8004584:	d124      	bne.n	80045d0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004586:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004588:	f000 faa4 	bl	8004ad4 <prvIsQueueFull>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d018      	beq.n	80045c4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004594:	3310      	adds	r3, #16
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f000 ffa0 	bl	80054e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045a2:	f000 fa2f 	bl	8004a04 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045a6:	f000 fdd1 	bl	800514c <xTaskResumeAll>
 80045aa:	4603      	mov	r3, r0
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	f47f af7c 	bne.w	80044aa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80045b2:	4b0c      	ldr	r3, [pc, #48]	@ (80045e4 <xQueueGenericSend+0x200>)
 80045b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80045b8:	601a      	str	r2, [r3, #0]
 80045ba:	f3bf 8f4f 	dsb	sy
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	e772      	b.n	80044aa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80045c4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045c6:	f000 fa1d 	bl	8004a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80045ca:	f000 fdbf 	bl	800514c <xTaskResumeAll>
 80045ce:	e76c      	b.n	80044aa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80045d0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045d2:	f000 fa17 	bl	8004a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80045d6:	f000 fdb9 	bl	800514c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80045da:	2300      	movs	r3, #0
		}
	}
}
 80045dc:	4618      	mov	r0, r3
 80045de:	3738      	adds	r7, #56	@ 0x38
 80045e0:	46bd      	mov	sp, r7
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	e000ed04 	.word	0xe000ed04

080045e8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b08e      	sub	sp, #56	@ 0x38
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
 80045f4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80045fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d10b      	bne.n	8004618 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004604:	f383 8811 	msr	BASEPRI, r3
 8004608:	f3bf 8f6f 	isb	sy
 800460c:	f3bf 8f4f 	dsb	sy
 8004610:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004612:	bf00      	nop
 8004614:	bf00      	nop
 8004616:	e7fd      	b.n	8004614 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d103      	bne.n	8004626 <xQueueGenericSendFromISR+0x3e>
 800461e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <xQueueGenericSendFromISR+0x42>
 8004626:	2301      	movs	r3, #1
 8004628:	e000      	b.n	800462c <xQueueGenericSendFromISR+0x44>
 800462a:	2300      	movs	r3, #0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10b      	bne.n	8004648 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004634:	f383 8811 	msr	BASEPRI, r3
 8004638:	f3bf 8f6f 	isb	sy
 800463c:	f3bf 8f4f 	dsb	sy
 8004640:	623b      	str	r3, [r7, #32]
}
 8004642:	bf00      	nop
 8004644:	bf00      	nop
 8004646:	e7fd      	b.n	8004644 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d103      	bne.n	8004656 <xQueueGenericSendFromISR+0x6e>
 800464e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004650:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <xQueueGenericSendFromISR+0x72>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <xQueueGenericSendFromISR+0x74>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d10b      	bne.n	8004678 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	61fb      	str	r3, [r7, #28]
}
 8004672:	bf00      	nop
 8004674:	bf00      	nop
 8004676:	e7fd      	b.n	8004674 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004678:	f001 fefa 	bl	8006470 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800467c:	f3ef 8211 	mrs	r2, BASEPRI
 8004680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	61ba      	str	r2, [r7, #24]
 8004692:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004694:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004696:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004698:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800469c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800469e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <xQueueGenericSendFromISR+0xc2>
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	2b02      	cmp	r3, #2
 80046a8:	d12c      	bne.n	8004704 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046b0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046b4:	683a      	ldr	r2, [r7, #0]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80046ba:	f000 f913 	bl	80048e4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80046be:	f997 302b 	ldrsb.w	r3, [r7, #43]	@ 0x2b
 80046c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c6:	d112      	bne.n	80046ee <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d016      	beq.n	80046fe <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046d2:	3324      	adds	r3, #36	@ 0x24
 80046d4:	4618      	mov	r0, r3
 80046d6:	f000 ff55 	bl	8005584 <xTaskRemoveFromEventList>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d00e      	beq.n	80046fe <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00b      	beq.n	80046fe <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2201      	movs	r2, #1
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	e007      	b.n	80046fe <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80046ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80046f2:	3301      	adds	r3, #1
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	b25a      	sxtb	r2, r3
 80046f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80046fe:	2301      	movs	r3, #1
 8004700:	637b      	str	r3, [r7, #52]	@ 0x34
		{
 8004702:	e001      	b.n	8004708 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004704:	2300      	movs	r3, #0
 8004706:	637b      	str	r3, [r7, #52]	@ 0x34
 8004708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800470a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004712:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004716:	4618      	mov	r0, r3
 8004718:	3738      	adds	r7, #56	@ 0x38
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
	...

08004720 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b08c      	sub	sp, #48	@ 0x30
 8004724:	af00      	add	r7, sp, #0
 8004726:	60f8      	str	r0, [r7, #12]
 8004728:	60b9      	str	r1, [r7, #8]
 800472a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800472c:	2300      	movs	r3, #0
 800472e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004736:	2b00      	cmp	r3, #0
 8004738:	d10b      	bne.n	8004752 <xQueueReceive+0x32>
	__asm volatile
 800473a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800473e:	f383 8811 	msr	BASEPRI, r3
 8004742:	f3bf 8f6f 	isb	sy
 8004746:	f3bf 8f4f 	dsb	sy
 800474a:	623b      	str	r3, [r7, #32]
}
 800474c:	bf00      	nop
 800474e:	bf00      	nop
 8004750:	e7fd      	b.n	800474e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d103      	bne.n	8004760 <xQueueReceive+0x40>
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d101      	bne.n	8004764 <xQueueReceive+0x44>
 8004760:	2301      	movs	r3, #1
 8004762:	e000      	b.n	8004766 <xQueueReceive+0x46>
 8004764:	2300      	movs	r3, #0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10b      	bne.n	8004782 <xQueueReceive+0x62>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	61fb      	str	r3, [r7, #28]
}
 800477c:	bf00      	nop
 800477e:	bf00      	nop
 8004780:	e7fd      	b.n	800477e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004782:	f001 f8c3 	bl	800590c <xTaskGetSchedulerState>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d102      	bne.n	8004792 <xQueueReceive+0x72>
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d101      	bne.n	8004796 <xQueueReceive+0x76>
 8004792:	2301      	movs	r3, #1
 8004794:	e000      	b.n	8004798 <xQueueReceive+0x78>
 8004796:	2300      	movs	r3, #0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d10b      	bne.n	80047b4 <xQueueReceive+0x94>
	__asm volatile
 800479c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047a0:	f383 8811 	msr	BASEPRI, r3
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	61bb      	str	r3, [r7, #24]
}
 80047ae:	bf00      	nop
 80047b0:	bf00      	nop
 80047b2:	e7fd      	b.n	80047b0 <xQueueReceive+0x90>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80047b4:	f001 fd9a 	bl	80062ec <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047bc:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d01f      	beq.n	8004804 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047c4:	68b9      	ldr	r1, [r7, #8]
 80047c6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80047c8:	f000 f8f6 	bl	80049b8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047ce:	1e5a      	subs	r2, r3, #1
 80047d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00f      	beq.n	80047fc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047de:	3310      	adds	r3, #16
 80047e0:	4618      	mov	r0, r3
 80047e2:	f000 fecf 	bl	8005584 <xTaskRemoveFromEventList>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d007      	beq.n	80047fc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047ec:	4b3c      	ldr	r3, [pc, #240]	@ (80048e0 <xQueueReceive+0x1c0>)
 80047ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047f2:	601a      	str	r2, [r3, #0]
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047fc:	f001 fda6 	bl	800634c <vPortExitCritical>
				return pdPASS;
 8004800:	2301      	movs	r3, #1
 8004802:	e069      	b.n	80048d8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d103      	bne.n	8004812 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800480a:	f001 fd9f 	bl	800634c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800480e:	2300      	movs	r3, #0
 8004810:	e062      	b.n	80048d8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004812:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	4618      	mov	r0, r3
 800481e:	f000 ff15 	bl	800564c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004822:	2301      	movs	r3, #1
 8004824:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004826:	f001 fd91 	bl	800634c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800482a:	f000 fc81 	bl	8005130 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800482e:	f001 fd5d 	bl	80062ec <vPortEnterCritical>
 8004832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004834:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004838:	b25b      	sxtb	r3, r3
 800483a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800483e:	d103      	bne.n	8004848 <xQueueReceive+0x128>
 8004840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004842:	2200      	movs	r2, #0
 8004844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004848:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800484e:	b25b      	sxtb	r3, r3
 8004850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004854:	d103      	bne.n	800485e <xQueueReceive+0x13e>
 8004856:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004858:	2200      	movs	r2, #0
 800485a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800485e:	f001 fd75 	bl	800634c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004862:	1d3a      	adds	r2, r7, #4
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f000 ff04 	bl	8005678 <xTaskCheckForTimeOut>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d123      	bne.n	80048be <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004876:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004878:	f000 f916 	bl	8004aa8 <prvIsQueueEmpty>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d017      	beq.n	80048b2 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004882:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004884:	3324      	adds	r3, #36	@ 0x24
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f000 fe28 	bl	80054e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004890:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004892:	f000 f8b7 	bl	8004a04 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004896:	f000 fc59 	bl	800514c <xTaskResumeAll>
 800489a:	4603      	mov	r3, r0
 800489c:	2b00      	cmp	r3, #0
 800489e:	d189      	bne.n	80047b4 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80048a0:	4b0f      	ldr	r3, [pc, #60]	@ (80048e0 <xQueueReceive+0x1c0>)
 80048a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048a6:	601a      	str	r2, [r3, #0]
 80048a8:	f3bf 8f4f 	dsb	sy
 80048ac:	f3bf 8f6f 	isb	sy
 80048b0:	e780      	b.n	80047b4 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048b4:	f000 f8a6 	bl	8004a04 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048b8:	f000 fc48 	bl	800514c <xTaskResumeAll>
 80048bc:	e77a      	b.n	80047b4 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80048be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048c0:	f000 f8a0 	bl	8004a04 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048c4:	f000 fc42 	bl	800514c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048c8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048ca:	f000 f8ed 	bl	8004aa8 <prvIsQueueEmpty>
 80048ce:	4603      	mov	r3, r0
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f43f af6f 	beq.w	80047b4 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80048d6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80048d8:	4618      	mov	r0, r3
 80048da:	3730      	adds	r7, #48	@ 0x30
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	e000ed04 	.word	0xe000ed04

080048e4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b086      	sub	sp, #24
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048f0:	2300      	movs	r3, #0
 80048f2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048f8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d10d      	bne.n	800491e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d14d      	bne.n	80049a6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	4618      	mov	r0, r3
 8004910:	f001 f81a 	bl	8005948 <xTaskPriorityDisinherit>
 8004914:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	605a      	str	r2, [r3, #4]
 800491c:	e043      	b.n	80049a6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d119      	bne.n	8004958 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6898      	ldr	r0, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492c:	461a      	mov	r2, r3
 800492e:	68b9      	ldr	r1, [r7, #8]
 8004930:	f002 ffdb 	bl	80078ea <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800493c:	441a      	add	r2, r3
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	685b      	ldr	r3, [r3, #4]
 800494a:	429a      	cmp	r2, r3
 800494c:	d32b      	bcc.n	80049a6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	609a      	str	r2, [r3, #8]
 8004956:	e026      	b.n	80049a6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	68d8      	ldr	r0, [r3, #12]
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	461a      	mov	r2, r3
 8004962:	68b9      	ldr	r1, [r7, #8]
 8004964:	f002 ffc1 	bl	80078ea <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	68da      	ldr	r2, [r3, #12]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004970:	425b      	negs	r3, r3
 8004972:	441a      	add	r2, r3
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	68da      	ldr	r2, [r3, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	429a      	cmp	r2, r3
 8004982:	d207      	bcs.n	8004994 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	685a      	ldr	r2, [r3, #4]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498c:	425b      	negs	r3, r3
 800498e:	441a      	add	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2b02      	cmp	r3, #2
 8004998:	d105      	bne.n	80049a6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d002      	beq.n	80049a6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049a0:	693b      	ldr	r3, [r7, #16]
 80049a2:	3b01      	subs	r3, #1
 80049a4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80049ae:	697b      	ldr	r3, [r7, #20]
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3718      	adds	r7, #24
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
 80049c0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d018      	beq.n	80049fc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d2:	441a      	add	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	68da      	ldr	r2, [r3, #12]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d303      	bcc.n	80049ec <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	68d9      	ldr	r1, [r3, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f4:	461a      	mov	r2, r3
 80049f6:	6838      	ldr	r0, [r7, #0]
 80049f8:	f002 ff77 	bl	80078ea <memcpy>
	}
}
 80049fc:	bf00      	nop
 80049fe:	3708      	adds	r7, #8
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a0c:	f001 fc6e 	bl	80062ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a16:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a18:	e011      	b.n	8004a3e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d012      	beq.n	8004a48 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	3324      	adds	r3, #36	@ 0x24
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 fdac 	bl	8005584 <xTaskRemoveFromEventList>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a32:	f000 fe85 	bl	8005740 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a36:	7bfb      	ldrb	r3, [r7, #15]
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	dce9      	bgt.n	8004a1a <prvUnlockQueue+0x16>
 8004a46:	e000      	b.n	8004a4a <prvUnlockQueue+0x46>
					break;
 8004a48:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	22ff      	movs	r2, #255	@ 0xff
 8004a4e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a52:	f001 fc7b 	bl	800634c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a56:	f001 fc49 	bl	80062ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004a60:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a62:	e011      	b.n	8004a88 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d012      	beq.n	8004a92 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	3310      	adds	r3, #16
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fd87 	bl	8005584 <xTaskRemoveFromEventList>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d001      	beq.n	8004a80 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a7c:	f000 fe60 	bl	8005740 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a80:	7bbb      	ldrb	r3, [r7, #14]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	b2db      	uxtb	r3, r3
 8004a86:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a88:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	dce9      	bgt.n	8004a64 <prvUnlockQueue+0x60>
 8004a90:	e000      	b.n	8004a94 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a92:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	22ff      	movs	r2, #255	@ 0xff
 8004a98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004a9c:	f001 fc56 	bl	800634c <vPortExitCritical>
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab0:	f001 fc1c 	bl	80062ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d102      	bne.n	8004ac2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004abc:	2301      	movs	r3, #1
 8004abe:	60fb      	str	r3, [r7, #12]
 8004ac0:	e001      	b.n	8004ac6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ac6:	f001 fc41 	bl	800634c <vPortExitCritical>

	return xReturn;
 8004aca:	68fb      	ldr	r3, [r7, #12]
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3710      	adds	r7, #16
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	bd80      	pop	{r7, pc}

08004ad4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b084      	sub	sp, #16
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004adc:	f001 fc06 	bl	80062ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d102      	bne.n	8004af2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e001      	b.n	8004af6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004af2:	2300      	movs	r3, #0
 8004af4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004af6:	f001 fc29 	bl	800634c <vPortExitCritical>

	return xReturn;
 8004afa:	68fb      	ldr	r3, [r7, #12]
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3710      	adds	r7, #16
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b04:	b480      	push	{r7}
 8004b06:	b085      	sub	sp, #20
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
 8004b12:	e014      	b.n	8004b3e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b14:	4a0e      	ldr	r2, [pc, #56]	@ (8004b50 <vQueueAddToRegistry+0x4c>)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10b      	bne.n	8004b38 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b20:	490b      	ldr	r1, [pc, #44]	@ (8004b50 <vQueueAddToRegistry+0x4c>)
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	683a      	ldr	r2, [r7, #0]
 8004b26:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b2a:	4a09      	ldr	r2, [pc, #36]	@ (8004b50 <vQueueAddToRegistry+0x4c>)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	4413      	add	r3, r2
 8004b32:	687a      	ldr	r2, [r7, #4]
 8004b34:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b36:	e006      	b.n	8004b46 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b07      	cmp	r3, #7
 8004b42:	d9e7      	bls.n	8004b14 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bc80      	pop	{r7}
 8004b4e:	4770      	bx	lr
 8004b50:	20000d6c 	.word	0x20000d6c

08004b54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b086      	sub	sp, #24
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	60f8      	str	r0, [r7, #12]
 8004b5c:	60b9      	str	r1, [r7, #8]
 8004b5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b64:	f001 fbc2 	bl	80062ec <vPortEnterCritical>
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004b6e:	b25b      	sxtb	r3, r3
 8004b70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b74:	d103      	bne.n	8004b7e <vQueueWaitForMessageRestricted+0x2a>
 8004b76:	697b      	ldr	r3, [r7, #20]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b7e:	697b      	ldr	r3, [r7, #20]
 8004b80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004b84:	b25b      	sxtb	r3, r3
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d103      	bne.n	8004b94 <vQueueWaitForMessageRestricted+0x40>
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2200      	movs	r2, #0
 8004b90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004b94:	f001 fbda 	bl	800634c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004b98:	697b      	ldr	r3, [r7, #20]
 8004b9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d106      	bne.n	8004bae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004ba0:	697b      	ldr	r3, [r7, #20]
 8004ba2:	3324      	adds	r3, #36	@ 0x24
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	68b9      	ldr	r1, [r7, #8]
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f000 fcbf 	bl	800552c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bae:	6978      	ldr	r0, [r7, #20]
 8004bb0:	f7ff ff28 	bl	8004a04 <prvUnlockQueue>
	}
 8004bb4:	bf00      	nop
 8004bb6:	3718      	adds	r7, #24
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}

08004bbc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b08e      	sub	sp, #56	@ 0x38
 8004bc0:	af04      	add	r7, sp, #16
 8004bc2:	60f8      	str	r0, [r7, #12]
 8004bc4:	60b9      	str	r1, [r7, #8]
 8004bc6:	607a      	str	r2, [r7, #4]
 8004bc8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d10b      	bne.n	8004be8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bd4:	f383 8811 	msr	BASEPRI, r3
 8004bd8:	f3bf 8f6f 	isb	sy
 8004bdc:	f3bf 8f4f 	dsb	sy
 8004be0:	623b      	str	r3, [r7, #32]
}
 8004be2:	bf00      	nop
 8004be4:	bf00      	nop
 8004be6:	e7fd      	b.n	8004be4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004be8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d10b      	bne.n	8004c06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf2:	f383 8811 	msr	BASEPRI, r3
 8004bf6:	f3bf 8f6f 	isb	sy
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	61fb      	str	r3, [r7, #28]
}
 8004c00:	bf00      	nop
 8004c02:	bf00      	nop
 8004c04:	e7fd      	b.n	8004c02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c06:	235c      	movs	r3, #92	@ 0x5c
 8004c08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8004c0e:	d00b      	beq.n	8004c28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c14:	f383 8811 	msr	BASEPRI, r3
 8004c18:	f3bf 8f6f 	isb	sy
 8004c1c:	f3bf 8f4f 	dsb	sy
 8004c20:	61bb      	str	r3, [r7, #24]
}
 8004c22:	bf00      	nop
 8004c24:	bf00      	nop
 8004c26:	e7fd      	b.n	8004c24 <xTaskCreateStatic+0x68>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d01e      	beq.n	8004c6c <xTaskCreateStatic+0xb0>
 8004c2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d01b      	beq.n	8004c6c <xTaskCreateStatic+0xb0>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c3c:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c40:	2202      	movs	r2, #2
 8004c42:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c46:	2300      	movs	r3, #0
 8004c48:	9303      	str	r3, [sp, #12]
 8004c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c4c:	9302      	str	r3, [sp, #8]
 8004c4e:	f107 0314 	add.w	r3, r7, #20
 8004c52:	9301      	str	r3, [sp, #4]
 8004c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68b9      	ldr	r1, [r7, #8]
 8004c5e:	68f8      	ldr	r0, [r7, #12]
 8004c60:	f000 f850 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c64:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004c66:	f000 f8d5 	bl	8004e14 <prvAddNewTaskToReadyList>
 8004c6a:	e001      	b.n	8004c70 <xTaskCreateStatic+0xb4>
		}
		else
		{
			xReturn = NULL;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004c70:	697b      	ldr	r3, [r7, #20]
	}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3728      	adds	r7, #40	@ 0x28
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}

08004c7a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004c7a:	b580      	push	{r7, lr}
 8004c7c:	b08c      	sub	sp, #48	@ 0x30
 8004c7e:	af04      	add	r7, sp, #16
 8004c80:	60f8      	str	r0, [r7, #12]
 8004c82:	60b9      	str	r1, [r7, #8]
 8004c84:	603b      	str	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c8a:	88fb      	ldrh	r3, [r7, #6]
 8004c8c:	009b      	lsls	r3, r3, #2
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f001 fc2e 	bl	80064f0 <pvPortMalloc>
 8004c94:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d00e      	beq.n	8004cba <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004c9c:	205c      	movs	r0, #92	@ 0x5c
 8004c9e:	f001 fc27 	bl	80064f0 <pvPortMalloc>
 8004ca2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cb0:	e005      	b.n	8004cbe <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004cb2:	6978      	ldr	r0, [r7, #20]
 8004cb4:	f001 fce4 	bl	8006680 <vPortFree>
 8004cb8:	e001      	b.n	8004cbe <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cbe:	69fb      	ldr	r3, [r7, #28]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d017      	beq.n	8004cf4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ccc:	88fa      	ldrh	r2, [r7, #6]
 8004cce:	2300      	movs	r3, #0
 8004cd0:	9303      	str	r3, [sp, #12]
 8004cd2:	69fb      	ldr	r3, [r7, #28]
 8004cd4:	9302      	str	r3, [sp, #8]
 8004cd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004cd8:	9301      	str	r3, [sp, #4]
 8004cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cdc:	9300      	str	r3, [sp, #0]
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	68b9      	ldr	r1, [r7, #8]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f80e 	bl	8004d04 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004ce8:	69f8      	ldr	r0, [r7, #28]
 8004cea:	f000 f893 	bl	8004e14 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e002      	b.n	8004cfa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004cfa:	69bb      	ldr	r3, [r7, #24]
	}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b088      	sub	sp, #32
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
 8004d10:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d14:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	009b      	lsls	r3, r3, #2
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	21a5      	movs	r1, #165	@ 0xa5
 8004d1e:	f002 fd56 	bl	80077ce <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d2c:	3b01      	subs	r3, #1
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004d34:	69bb      	ldr	r3, [r7, #24]
 8004d36:	f023 0307 	bic.w	r3, r3, #7
 8004d3a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d3c:	69bb      	ldr	r3, [r7, #24]
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00b      	beq.n	8004d5e <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	617b      	str	r3, [r7, #20]
}
 8004d58:	bf00      	nop
 8004d5a:	bf00      	nop
 8004d5c:	e7fd      	b.n	8004d5a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e012      	b.n	8004d8a <prvInitialiseNewTask+0x86>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d64:	68ba      	ldr	r2, [r7, #8]
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	4413      	add	r3, r2
 8004d6a:	7819      	ldrb	r1, [r3, #0]
 8004d6c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d6e:	69fb      	ldr	r3, [r7, #28]
 8004d70:	4413      	add	r3, r2
 8004d72:	3334      	adds	r3, #52	@ 0x34
 8004d74:	460a      	mov	r2, r1
 8004d76:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004d78:	68ba      	ldr	r2, [r7, #8]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d006      	beq.n	8004d92 <prvInitialiseNewTask+0x8e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	3301      	adds	r3, #1
 8004d88:	61fb      	str	r3, [r7, #28]
 8004d8a:	69fb      	ldr	r3, [r7, #28]
 8004d8c:	2b0f      	cmp	r3, #15
 8004d8e:	d9e9      	bls.n	8004d64 <prvInitialiseNewTask+0x60>
 8004d90:	e000      	b.n	8004d94 <prvInitialiseNewTask+0x90>
		{
			break;
 8004d92:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004d94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d9e:	2b37      	cmp	r3, #55	@ 0x37
 8004da0:	d901      	bls.n	8004da6 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004da2:	2337      	movs	r3, #55	@ 0x37
 8004da4:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004da8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004daa:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004db0:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004db4:	2200      	movs	r2, #0
 8004db6:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dba:	3304      	adds	r3, #4
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	f7ff f938 	bl	8004032 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	f7ff f933 	bl	8004032 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dd0:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dd4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dda:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004de0:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004de2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004de4:	2200      	movs	r2, #0
 8004de6:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004de8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004df0:	683a      	ldr	r2, [r7, #0]
 8004df2:	68f9      	ldr	r1, [r7, #12]
 8004df4:	69b8      	ldr	r0, [r7, #24]
 8004df6:	f001 f98b 	bl	8006110 <pxPortInitialiseStack>
 8004dfa:	4602      	mov	r2, r0
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dfe:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d002      	beq.n	8004e0c <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e08:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e0a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e0c:	bf00      	nop
 8004e0e:	3720      	adds	r7, #32
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bd80      	pop	{r7, pc}

08004e14 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b082      	sub	sp, #8
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e1c:	f001 fa66 	bl	80062ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e20:	4b2d      	ldr	r3, [pc, #180]	@ (8004ed8 <prvAddNewTaskToReadyList+0xc4>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	3301      	adds	r3, #1
 8004e26:	4a2c      	ldr	r2, [pc, #176]	@ (8004ed8 <prvAddNewTaskToReadyList+0xc4>)
 8004e28:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e2a:	4b2c      	ldr	r3, [pc, #176]	@ (8004edc <prvAddNewTaskToReadyList+0xc8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d109      	bne.n	8004e46 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e32:	4a2a      	ldr	r2, [pc, #168]	@ (8004edc <prvAddNewTaskToReadyList+0xc8>)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004e38:	4b27      	ldr	r3, [pc, #156]	@ (8004ed8 <prvAddNewTaskToReadyList+0xc4>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d110      	bne.n	8004e62 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004e40:	f000 fca2 	bl	8005788 <prvInitialiseTaskLists>
 8004e44:	e00d      	b.n	8004e62 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004e46:	4b26      	ldr	r3, [pc, #152]	@ (8004ee0 <prvAddNewTaskToReadyList+0xcc>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d109      	bne.n	8004e62 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004e4e:	4b23      	ldr	r3, [pc, #140]	@ (8004edc <prvAddNewTaskToReadyList+0xc8>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d802      	bhi.n	8004e62 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <prvAddNewTaskToReadyList+0xc8>)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004e62:	4b20      	ldr	r3, [pc, #128]	@ (8004ee4 <prvAddNewTaskToReadyList+0xd0>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	3301      	adds	r3, #1
 8004e68:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee4 <prvAddNewTaskToReadyList+0xd0>)
 8004e6a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8004ee4 <prvAddNewTaskToReadyList+0xd0>)
 8004e6e:	681a      	ldr	r2, [r3, #0]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e78:	4b1b      	ldr	r3, [pc, #108]	@ (8004ee8 <prvAddNewTaskToReadyList+0xd4>)
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d903      	bls.n	8004e88 <prvAddNewTaskToReadyList+0x74>
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e84:	4a18      	ldr	r2, [pc, #96]	@ (8004ee8 <prvAddNewTaskToReadyList+0xd4>)
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	4a15      	ldr	r2, [pc, #84]	@ (8004eec <prvAddNewTaskToReadyList+0xd8>)
 8004e96:	441a      	add	r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3304      	adds	r3, #4
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	f7ff f8d3 	bl	800404a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004ea4:	f001 fa52 	bl	800634c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004ea8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee0 <prvAddNewTaskToReadyList+0xcc>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d00e      	beq.n	8004ece <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8004edc <prvAddNewTaskToReadyList+0xc8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d207      	bcs.n	8004ece <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8004ef0 <prvAddNewTaskToReadyList+0xdc>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004ece:	bf00      	nop
 8004ed0:	3708      	adds	r7, #8
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}
 8004ed6:	bf00      	nop
 8004ed8:	20001280 	.word	0x20001280
 8004edc:	20000dac 	.word	0x20000dac
 8004ee0:	2000128c 	.word	0x2000128c
 8004ee4:	2000129c 	.word	0x2000129c
 8004ee8:	20001288 	.word	0x20001288
 8004eec:	20000db0 	.word	0x20000db0
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	@ 0x28
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
 8004efc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8004efe:	2300      	movs	r3, #0
 8004f00:	627b      	str	r3, [r7, #36]	@ 0x24

		configASSERT( pxPreviousWakeTime );
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10b      	bne.n	8004f20 <vTaskDelayUntil+0x2c>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	617b      	str	r3, [r7, #20]
}
 8004f1a:	bf00      	nop
 8004f1c:	bf00      	nop
 8004f1e:	e7fd      	b.n	8004f1c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10b      	bne.n	8004f3e <vTaskDelayUntil+0x4a>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	613b      	str	r3, [r7, #16]
}
 8004f38:	bf00      	nop
 8004f3a:	bf00      	nop
 8004f3c:	e7fd      	b.n	8004f3a <vTaskDelayUntil+0x46>
		configASSERT( uxSchedulerSuspended == 0 );
 8004f3e:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe8 <vTaskDelayUntil+0xf4>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <vTaskDelayUntil+0x6a>
	__asm volatile
 8004f46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4a:	f383 8811 	msr	BASEPRI, r3
 8004f4e:	f3bf 8f6f 	isb	sy
 8004f52:	f3bf 8f4f 	dsb	sy
 8004f56:	60fb      	str	r3, [r7, #12]
}
 8004f58:	bf00      	nop
 8004f5a:	bf00      	nop
 8004f5c:	e7fd      	b.n	8004f5a <vTaskDelayUntil+0x66>

		vTaskSuspendAll();
 8004f5e:	f000 f8e7 	bl	8005130 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8004f62:	4b22      	ldr	r3, [pc, #136]	@ (8004fec <vTaskDelayUntil+0xf8>)
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	683a      	ldr	r2, [r7, #0]
 8004f6e:	4413      	add	r3, r2
 8004f70:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	6a3a      	ldr	r2, [r7, #32]
 8004f78:	429a      	cmp	r2, r3
 8004f7a:	d20b      	bcs.n	8004f94 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	69fa      	ldr	r2, [r7, #28]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d211      	bcs.n	8004faa <vTaskDelayUntil+0xb6>
 8004f86:	69fa      	ldr	r2, [r7, #28]
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d90d      	bls.n	8004faa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f92:	e00a      	b.n	8004faa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	69fa      	ldr	r2, [r7, #28]
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d303      	bcc.n	8004fa6 <vTaskDelayUntil+0xb2>
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d901      	bls.n	8004faa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	627b      	str	r3, [r7, #36]	@ 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	69fa      	ldr	r2, [r7, #28]
 8004fae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d006      	beq.n	8004fc4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8004fb6:	69fa      	ldr	r2, [r7, #28]
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	1ad3      	subs	r3, r2, r3
 8004fbc:	2100      	movs	r1, #0
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	f000 fd32 	bl	8005a28 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8004fc4:	f000 f8c2 	bl	800514c <xTaskResumeAll>
 8004fc8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d107      	bne.n	8004fe0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 8004fd0:	4b07      	ldr	r3, [pc, #28]	@ (8004ff0 <vTaskDelayUntil+0xfc>)
 8004fd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd6:	601a      	str	r2, [r3, #0]
 8004fd8:	f3bf 8f4f 	dsb	sy
 8004fdc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fe0:	bf00      	nop
 8004fe2:	3728      	adds	r7, #40	@ 0x28
 8004fe4:	46bd      	mov	sp, r7
 8004fe6:	bd80      	pop	{r7, pc}
 8004fe8:	200012a8 	.word	0x200012a8
 8004fec:	20001284 	.word	0x20001284
 8004ff0:	e000ed04 	.word	0xe000ed04

08004ff4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b084      	sub	sp, #16
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d018      	beq.n	8005038 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005006:	4b14      	ldr	r3, [pc, #80]	@ (8005058 <vTaskDelay+0x64>)
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d00b      	beq.n	8005026 <vTaskDelay+0x32>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	60bb      	str	r3, [r7, #8]
}
 8005020:	bf00      	nop
 8005022:	bf00      	nop
 8005024:	e7fd      	b.n	8005022 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005026:	f000 f883 	bl	8005130 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800502a:	2100      	movs	r1, #0
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f000 fcfb 	bl	8005a28 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005032:	f000 f88b 	bl	800514c <xTaskResumeAll>
 8005036:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d107      	bne.n	800504e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800503e:	4b07      	ldr	r3, [pc, #28]	@ (800505c <vTaskDelay+0x68>)
 8005040:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800504e:	bf00      	nop
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200012a8 	.word	0x200012a8
 800505c:	e000ed04 	.word	0xe000ed04

08005060 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b08a      	sub	sp, #40	@ 0x28
 8005064:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005066:	2300      	movs	r3, #0
 8005068:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800506a:	2300      	movs	r3, #0
 800506c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800506e:	463a      	mov	r2, r7
 8005070:	1d39      	adds	r1, r7, #4
 8005072:	f107 0308 	add.w	r3, r7, #8
 8005076:	4618      	mov	r0, r3
 8005078:	f7fe ff8a 	bl	8003f90 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800507c:	6839      	ldr	r1, [r7, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	9202      	str	r2, [sp, #8]
 8005084:	9301      	str	r3, [sp, #4]
 8005086:	2300      	movs	r3, #0
 8005088:	9300      	str	r3, [sp, #0]
 800508a:	2300      	movs	r3, #0
 800508c:	460a      	mov	r2, r1
 800508e:	4922      	ldr	r1, [pc, #136]	@ (8005118 <vTaskStartScheduler+0xb8>)
 8005090:	4822      	ldr	r0, [pc, #136]	@ (800511c <vTaskStartScheduler+0xbc>)
 8005092:	f7ff fd93 	bl	8004bbc <xTaskCreateStatic>
 8005096:	4603      	mov	r3, r0
 8005098:	4a21      	ldr	r2, [pc, #132]	@ (8005120 <vTaskStartScheduler+0xc0>)
 800509a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800509c:	4b20      	ldr	r3, [pc, #128]	@ (8005120 <vTaskStartScheduler+0xc0>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d002      	beq.n	80050aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e001      	b.n	80050ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d102      	bne.n	80050ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80050b4:	f000 fd0c 	bl	8005ad0 <xTimerCreateTimerTask>
 80050b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	2b01      	cmp	r3, #1
 80050be:	d116      	bne.n	80050ee <vTaskStartScheduler+0x8e>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	613b      	str	r3, [r7, #16]
}
 80050d2:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050d4:	4b13      	ldr	r3, [pc, #76]	@ (8005124 <vTaskStartScheduler+0xc4>)
 80050d6:	f04f 32ff 	mov.w	r2, #4294967295
 80050da:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050dc:	4b12      	ldr	r3, [pc, #72]	@ (8005128 <vTaskStartScheduler+0xc8>)
 80050de:	2201      	movs	r2, #1
 80050e0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80050e2:	4b12      	ldr	r3, [pc, #72]	@ (800512c <vTaskStartScheduler+0xcc>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050e8:	f001 f88e 	bl	8006208 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050ec:	e00f      	b.n	800510e <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f4:	d10b      	bne.n	800510e <vTaskStartScheduler+0xae>
	__asm volatile
 80050f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050fa:	f383 8811 	msr	BASEPRI, r3
 80050fe:	f3bf 8f6f 	isb	sy
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	60fb      	str	r3, [r7, #12]
}
 8005108:	bf00      	nop
 800510a:	bf00      	nop
 800510c:	e7fd      	b.n	800510a <vTaskStartScheduler+0xaa>
}
 800510e:	bf00      	nop
 8005110:	3718      	adds	r7, #24
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	0800afd4 	.word	0x0800afd4
 800511c:	08005759 	.word	0x08005759
 8005120:	200012a4 	.word	0x200012a4
 8005124:	200012a0 	.word	0x200012a0
 8005128:	2000128c 	.word	0x2000128c
 800512c:	20001284 	.word	0x20001284

08005130 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005130:	b480      	push	{r7}
 8005132:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005134:	4b04      	ldr	r3, [pc, #16]	@ (8005148 <vTaskSuspendAll+0x18>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	3301      	adds	r3, #1
 800513a:	4a03      	ldr	r2, [pc, #12]	@ (8005148 <vTaskSuspendAll+0x18>)
 800513c:	6013      	str	r3, [r2, #0]
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	bc80      	pop	{r7}
 8005144:	4770      	bx	lr
 8005146:	bf00      	nop
 8005148:	200012a8 	.word	0x200012a8

0800514c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005152:	2300      	movs	r3, #0
 8005154:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800515a:	4b42      	ldr	r3, [pc, #264]	@ (8005264 <xTaskResumeAll+0x118>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d10b      	bne.n	800517a <xTaskResumeAll+0x2e>
	__asm volatile
 8005162:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005166:	f383 8811 	msr	BASEPRI, r3
 800516a:	f3bf 8f6f 	isb	sy
 800516e:	f3bf 8f4f 	dsb	sy
 8005172:	603b      	str	r3, [r7, #0]
}
 8005174:	bf00      	nop
 8005176:	bf00      	nop
 8005178:	e7fd      	b.n	8005176 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800517a:	f001 f8b7 	bl	80062ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800517e:	4b39      	ldr	r3, [pc, #228]	@ (8005264 <xTaskResumeAll+0x118>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	3b01      	subs	r3, #1
 8005184:	4a37      	ldr	r2, [pc, #220]	@ (8005264 <xTaskResumeAll+0x118>)
 8005186:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005188:	4b36      	ldr	r3, [pc, #216]	@ (8005264 <xTaskResumeAll+0x118>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d162      	bne.n	8005256 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005190:	4b35      	ldr	r3, [pc, #212]	@ (8005268 <xTaskResumeAll+0x11c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d05e      	beq.n	8005256 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005198:	e02f      	b.n	80051fa <xTaskResumeAll+0xae>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800519a:	4b34      	ldr	r3, [pc, #208]	@ (800526c <xTaskResumeAll+0x120>)
 800519c:	68db      	ldr	r3, [r3, #12]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3318      	adds	r3, #24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7fe ffaa 	bl	8004100 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	3304      	adds	r3, #4
 80051b0:	4618      	mov	r0, r3
 80051b2:	f7fe ffa5 	bl	8004100 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005270 <xTaskResumeAll+0x124>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d903      	bls.n	80051ca <xTaskResumeAll+0x7e>
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	4a2a      	ldr	r2, [pc, #168]	@ (8005270 <xTaskResumeAll+0x124>)
 80051c8:	6013      	str	r3, [r2, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	4613      	mov	r3, r2
 80051d0:	009b      	lsls	r3, r3, #2
 80051d2:	4413      	add	r3, r2
 80051d4:	009b      	lsls	r3, r3, #2
 80051d6:	4a27      	ldr	r2, [pc, #156]	@ (8005274 <xTaskResumeAll+0x128>)
 80051d8:	441a      	add	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	3304      	adds	r3, #4
 80051de:	4619      	mov	r1, r3
 80051e0:	4610      	mov	r0, r2
 80051e2:	f7fe ff32 	bl	800404a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ea:	4b23      	ldr	r3, [pc, #140]	@ (8005278 <xTaskResumeAll+0x12c>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d302      	bcc.n	80051fa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80051f4:	4b21      	ldr	r3, [pc, #132]	@ (800527c <xTaskResumeAll+0x130>)
 80051f6:	2201      	movs	r2, #1
 80051f8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051fa:	4b1c      	ldr	r3, [pc, #112]	@ (800526c <xTaskResumeAll+0x120>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d1cb      	bne.n	800519a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d001      	beq.n	800520c <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005208:	f000 fb5c 	bl	80058c4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800520c:	4b1c      	ldr	r3, [pc, #112]	@ (8005280 <xTaskResumeAll+0x134>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	2b00      	cmp	r3, #0
 8005216:	d010      	beq.n	800523a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005218:	f000 f844 	bl	80052a4 <xTaskIncrementTick>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d002      	beq.n	8005228 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005222:	4b16      	ldr	r3, [pc, #88]	@ (800527c <xTaskResumeAll+0x130>)
 8005224:	2201      	movs	r2, #1
 8005226:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3b01      	subs	r3, #1
 800522c:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d1f1      	bne.n	8005218 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8005234:	4b12      	ldr	r3, [pc, #72]	@ (8005280 <xTaskResumeAll+0x134>)
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800523a:	4b10      	ldr	r3, [pc, #64]	@ (800527c <xTaskResumeAll+0x130>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d009      	beq.n	8005256 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005242:	2301      	movs	r3, #1
 8005244:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005246:	4b0f      	ldr	r3, [pc, #60]	@ (8005284 <xTaskResumeAll+0x138>)
 8005248:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800524c:	601a      	str	r2, [r3, #0]
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005256:	f001 f879 	bl	800634c <vPortExitCritical>

	return xAlreadyYielded;
 800525a:	68bb      	ldr	r3, [r7, #8]
}
 800525c:	4618      	mov	r0, r3
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	200012a8 	.word	0x200012a8
 8005268:	20001280 	.word	0x20001280
 800526c:	20001240 	.word	0x20001240
 8005270:	20001288 	.word	0x20001288
 8005274:	20000db0 	.word	0x20000db0
 8005278:	20000dac 	.word	0x20000dac
 800527c:	20001294 	.word	0x20001294
 8005280:	20001290 	.word	0x20001290
 8005284:	e000ed04 	.word	0xe000ed04

08005288 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005288:	b480      	push	{r7}
 800528a:	b083      	sub	sp, #12
 800528c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800528e:	4b04      	ldr	r3, [pc, #16]	@ (80052a0 <xTaskGetTickCount+0x18>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005294:	687b      	ldr	r3, [r7, #4]
}
 8005296:	4618      	mov	r0, r3
 8005298:	370c      	adds	r7, #12
 800529a:	46bd      	mov	sp, r7
 800529c:	bc80      	pop	{r7}
 800529e:	4770      	bx	lr
 80052a0:	20001284 	.word	0x20001284

080052a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052aa:	2300      	movs	r3, #0
 80052ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052ae:	4b52      	ldr	r3, [pc, #328]	@ (80053f8 <xTaskIncrementTick+0x154>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	f040 808f 	bne.w	80053d6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052b8:	4b50      	ldr	r3, [pc, #320]	@ (80053fc <xTaskIncrementTick+0x158>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	3301      	adds	r3, #1
 80052be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052c0:	4a4e      	ldr	r2, [pc, #312]	@ (80053fc <xTaskIncrementTick+0x158>)
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d121      	bne.n	8005310 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80052cc:	4b4c      	ldr	r3, [pc, #304]	@ (8005400 <xTaskIncrementTick+0x15c>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d00b      	beq.n	80052ee <xTaskIncrementTick+0x4a>
	__asm volatile
 80052d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052da:	f383 8811 	msr	BASEPRI, r3
 80052de:	f3bf 8f6f 	isb	sy
 80052e2:	f3bf 8f4f 	dsb	sy
 80052e6:	603b      	str	r3, [r7, #0]
}
 80052e8:	bf00      	nop
 80052ea:	bf00      	nop
 80052ec:	e7fd      	b.n	80052ea <xTaskIncrementTick+0x46>
 80052ee:	4b44      	ldr	r3, [pc, #272]	@ (8005400 <xTaskIncrementTick+0x15c>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
 80052f4:	4b43      	ldr	r3, [pc, #268]	@ (8005404 <xTaskIncrementTick+0x160>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a41      	ldr	r2, [pc, #260]	@ (8005400 <xTaskIncrementTick+0x15c>)
 80052fa:	6013      	str	r3, [r2, #0]
 80052fc:	4a41      	ldr	r2, [pc, #260]	@ (8005404 <xTaskIncrementTick+0x160>)
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	4b41      	ldr	r3, [pc, #260]	@ (8005408 <xTaskIncrementTick+0x164>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3301      	adds	r3, #1
 8005308:	4a3f      	ldr	r2, [pc, #252]	@ (8005408 <xTaskIncrementTick+0x164>)
 800530a:	6013      	str	r3, [r2, #0]
 800530c:	f000 fada 	bl	80058c4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005310:	4b3e      	ldr	r3, [pc, #248]	@ (800540c <xTaskIncrementTick+0x168>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	429a      	cmp	r2, r3
 8005318:	d34e      	bcc.n	80053b8 <xTaskIncrementTick+0x114>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800531a:	4b39      	ldr	r3, [pc, #228]	@ (8005400 <xTaskIncrementTick+0x15c>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d101      	bne.n	8005328 <xTaskIncrementTick+0x84>
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <xTaskIncrementTick+0x86>
 8005328:	2300      	movs	r3, #0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d004      	beq.n	8005338 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800532e:	4b37      	ldr	r3, [pc, #220]	@ (800540c <xTaskIncrementTick+0x168>)
 8005330:	f04f 32ff 	mov.w	r2, #4294967295
 8005334:	601a      	str	r2, [r3, #0]
					break;
 8005336:	e03f      	b.n	80053b8 <xTaskIncrementTick+0x114>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005338:	4b31      	ldr	r3, [pc, #196]	@ (8005400 <xTaskIncrementTick+0x15c>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68db      	ldr	r3, [r3, #12]
 800533e:	68db      	ldr	r3, [r3, #12]
 8005340:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005348:	693a      	ldr	r2, [r7, #16]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	429a      	cmp	r2, r3
 800534e:	d203      	bcs.n	8005358 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005350:	4a2e      	ldr	r2, [pc, #184]	@ (800540c <xTaskIncrementTick+0x168>)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6013      	str	r3, [r2, #0]
						break;
 8005356:	e02f      	b.n	80053b8 <xTaskIncrementTick+0x114>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	3304      	adds	r3, #4
 800535c:	4618      	mov	r0, r3
 800535e:	f7fe fecf 	bl	8004100 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	2b00      	cmp	r3, #0
 8005368:	d004      	beq.n	8005374 <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800536a:	68bb      	ldr	r3, [r7, #8]
 800536c:	3318      	adds	r3, #24
 800536e:	4618      	mov	r0, r3
 8005370:	f7fe fec6 	bl	8004100 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005378:	4b25      	ldr	r3, [pc, #148]	@ (8005410 <xTaskIncrementTick+0x16c>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	429a      	cmp	r2, r3
 800537e:	d903      	bls.n	8005388 <xTaskIncrementTick+0xe4>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005384:	4a22      	ldr	r2, [pc, #136]	@ (8005410 <xTaskIncrementTick+0x16c>)
 8005386:	6013      	str	r3, [r2, #0]
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538c:	4613      	mov	r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	4413      	add	r3, r2
 8005392:	009b      	lsls	r3, r3, #2
 8005394:	4a1f      	ldr	r2, [pc, #124]	@ (8005414 <xTaskIncrementTick+0x170>)
 8005396:	441a      	add	r2, r3
 8005398:	68bb      	ldr	r3, [r7, #8]
 800539a:	3304      	adds	r3, #4
 800539c:	4619      	mov	r1, r3
 800539e:	4610      	mov	r0, r2
 80053a0:	f7fe fe53 	bl	800404a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053a8:	4b1b      	ldr	r3, [pc, #108]	@ (8005418 <xTaskIncrementTick+0x174>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053ae:	429a      	cmp	r2, r3
 80053b0:	d3b3      	bcc.n	800531a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80053b2:	2301      	movs	r3, #1
 80053b4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053b6:	e7b0      	b.n	800531a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053b8:	4b17      	ldr	r3, [pc, #92]	@ (8005418 <xTaskIncrementTick+0x174>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80053be:	4915      	ldr	r1, [pc, #84]	@ (8005414 <xTaskIncrementTick+0x170>)
 80053c0:	4613      	mov	r3, r2
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	4413      	add	r3, r2
 80053c6:	009b      	lsls	r3, r3, #2
 80053c8:	440b      	add	r3, r1
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d907      	bls.n	80053e0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	e004      	b.n	80053e0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80053d6:	4b11      	ldr	r3, [pc, #68]	@ (800541c <xTaskIncrementTick+0x178>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	3301      	adds	r3, #1
 80053dc:	4a0f      	ldr	r2, [pc, #60]	@ (800541c <xTaskIncrementTick+0x178>)
 80053de:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80053e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005420 <xTaskIncrementTick+0x17c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d001      	beq.n	80053ec <xTaskIncrementTick+0x148>
		{
			xSwitchRequired = pdTRUE;
 80053e8:	2301      	movs	r3, #1
 80053ea:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80053ec:	697b      	ldr	r3, [r7, #20]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	200012a8 	.word	0x200012a8
 80053fc:	20001284 	.word	0x20001284
 8005400:	20001238 	.word	0x20001238
 8005404:	2000123c 	.word	0x2000123c
 8005408:	20001298 	.word	0x20001298
 800540c:	200012a0 	.word	0x200012a0
 8005410:	20001288 	.word	0x20001288
 8005414:	20000db0 	.word	0x20000db0
 8005418:	20000dac 	.word	0x20000dac
 800541c:	20001290 	.word	0x20001290
 8005420:	20001294 	.word	0x20001294

08005424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005424:	b480      	push	{r7}
 8005426:	b085      	sub	sp, #20
 8005428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800542a:	4b28      	ldr	r3, [pc, #160]	@ (80054cc <vTaskSwitchContext+0xa8>)
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005432:	4b27      	ldr	r3, [pc, #156]	@ (80054d0 <vTaskSwitchContext+0xac>)
 8005434:	2201      	movs	r2, #1
 8005436:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005438:	e042      	b.n	80054c0 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800543a:	4b25      	ldr	r3, [pc, #148]	@ (80054d0 <vTaskSwitchContext+0xac>)
 800543c:	2200      	movs	r2, #0
 800543e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005440:	4b24      	ldr	r3, [pc, #144]	@ (80054d4 <vTaskSwitchContext+0xb0>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	60fb      	str	r3, [r7, #12]
 8005446:	e011      	b.n	800546c <vTaskSwitchContext+0x48>
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d10b      	bne.n	8005466 <vTaskSwitchContext+0x42>
	__asm volatile
 800544e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005452:	f383 8811 	msr	BASEPRI, r3
 8005456:	f3bf 8f6f 	isb	sy
 800545a:	f3bf 8f4f 	dsb	sy
 800545e:	607b      	str	r3, [r7, #4]
}
 8005460:	bf00      	nop
 8005462:	bf00      	nop
 8005464:	e7fd      	b.n	8005462 <vTaskSwitchContext+0x3e>
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	3b01      	subs	r3, #1
 800546a:	60fb      	str	r3, [r7, #12]
 800546c:	491a      	ldr	r1, [pc, #104]	@ (80054d8 <vTaskSwitchContext+0xb4>)
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	009b      	lsls	r3, r3, #2
 8005478:	440b      	add	r3, r1
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d0e3      	beq.n	8005448 <vTaskSwitchContext+0x24>
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	4613      	mov	r3, r2
 8005484:	009b      	lsls	r3, r3, #2
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	4a13      	ldr	r2, [pc, #76]	@ (80054d8 <vTaskSwitchContext+0xb4>)
 800548c:	4413      	add	r3, r2
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	685a      	ldr	r2, [r3, #4]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	3308      	adds	r3, #8
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d104      	bne.n	80054b0 <vTaskSwitchContext+0x8c>
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	605a      	str	r2, [r3, #4]
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	685b      	ldr	r3, [r3, #4]
 80054b4:	68db      	ldr	r3, [r3, #12]
 80054b6:	4a09      	ldr	r2, [pc, #36]	@ (80054dc <vTaskSwitchContext+0xb8>)
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	4a06      	ldr	r2, [pc, #24]	@ (80054d4 <vTaskSwitchContext+0xb0>)
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6013      	str	r3, [r2, #0]
}
 80054c0:	bf00      	nop
 80054c2:	3714      	adds	r7, #20
 80054c4:	46bd      	mov	sp, r7
 80054c6:	bc80      	pop	{r7}
 80054c8:	4770      	bx	lr
 80054ca:	bf00      	nop
 80054cc:	200012a8 	.word	0x200012a8
 80054d0:	20001294 	.word	0x20001294
 80054d4:	20001288 	.word	0x20001288
 80054d8:	20000db0 	.word	0x20000db0
 80054dc:	20000dac 	.word	0x20000dac

080054e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054e0:	b580      	push	{r7, lr}
 80054e2:	b084      	sub	sp, #16
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	6078      	str	r0, [r7, #4]
 80054e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10b      	bne.n	8005508 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60fb      	str	r3, [r7, #12]
}
 8005502:	bf00      	nop
 8005504:	bf00      	nop
 8005506:	e7fd      	b.n	8005504 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005508:	4b07      	ldr	r3, [pc, #28]	@ (8005528 <vTaskPlaceOnEventList+0x48>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	3318      	adds	r3, #24
 800550e:	4619      	mov	r1, r3
 8005510:	6878      	ldr	r0, [r7, #4]
 8005512:	f7fe fdbd 	bl	8004090 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005516:	2101      	movs	r1, #1
 8005518:	6838      	ldr	r0, [r7, #0]
 800551a:	f000 fa85 	bl	8005a28 <prvAddCurrentTaskToDelayedList>
}
 800551e:	bf00      	nop
 8005520:	3710      	adds	r7, #16
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}
 8005526:	bf00      	nop
 8005528:	20000dac 	.word	0x20000dac

0800552c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800552c:	b580      	push	{r7, lr}
 800552e:	b086      	sub	sp, #24
 8005530:	af00      	add	r7, sp, #0
 8005532:	60f8      	str	r0, [r7, #12]
 8005534:	60b9      	str	r1, [r7, #8]
 8005536:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10b      	bne.n	8005556 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	617b      	str	r3, [r7, #20]
}
 8005550:	bf00      	nop
 8005552:	bf00      	nop
 8005554:	e7fd      	b.n	8005552 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <vTaskPlaceOnEventListRestricted+0x54>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	3318      	adds	r3, #24
 800555c:	4619      	mov	r1, r3
 800555e:	68f8      	ldr	r0, [r7, #12]
 8005560:	f7fe fd73 	bl	800404a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d002      	beq.n	8005570 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800556a:	f04f 33ff 	mov.w	r3, #4294967295
 800556e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005570:	6879      	ldr	r1, [r7, #4]
 8005572:	68b8      	ldr	r0, [r7, #8]
 8005574:	f000 fa58 	bl	8005a28 <prvAddCurrentTaskToDelayedList>
	}
 8005578:	bf00      	nop
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000dac 	.word	0x20000dac

08005584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	68db      	ldr	r3, [r3, #12]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d10b      	bne.n	80055b2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800559a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800559e:	f383 8811 	msr	BASEPRI, r3
 80055a2:	f3bf 8f6f 	isb	sy
 80055a6:	f3bf 8f4f 	dsb	sy
 80055aa:	60fb      	str	r3, [r7, #12]
}
 80055ac:	bf00      	nop
 80055ae:	bf00      	nop
 80055b0:	e7fd      	b.n	80055ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	3318      	adds	r3, #24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f7fe fda2 	bl	8004100 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055bc:	4b1d      	ldr	r3, [pc, #116]	@ (8005634 <xTaskRemoveFromEventList+0xb0>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d11d      	bne.n	8005600 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055c4:	693b      	ldr	r3, [r7, #16]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4618      	mov	r0, r3
 80055ca:	f7fe fd99 	bl	8004100 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055ce:	693b      	ldr	r3, [r7, #16]
 80055d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055d2:	4b19      	ldr	r3, [pc, #100]	@ (8005638 <xTaskRemoveFromEventList+0xb4>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d903      	bls.n	80055e2 <xTaskRemoveFromEventList+0x5e>
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055de:	4a16      	ldr	r2, [pc, #88]	@ (8005638 <xTaskRemoveFromEventList+0xb4>)
 80055e0:	6013      	str	r3, [r2, #0]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055e6:	4613      	mov	r3, r2
 80055e8:	009b      	lsls	r3, r3, #2
 80055ea:	4413      	add	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4a13      	ldr	r2, [pc, #76]	@ (800563c <xTaskRemoveFromEventList+0xb8>)
 80055f0:	441a      	add	r2, r3
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3304      	adds	r3, #4
 80055f6:	4619      	mov	r1, r3
 80055f8:	4610      	mov	r0, r2
 80055fa:	f7fe fd26 	bl	800404a <vListInsertEnd>
 80055fe:	e005      	b.n	800560c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	3318      	adds	r3, #24
 8005604:	4619      	mov	r1, r3
 8005606:	480e      	ldr	r0, [pc, #56]	@ (8005640 <xTaskRemoveFromEventList+0xbc>)
 8005608:	f7fe fd1f 	bl	800404a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005610:	4b0c      	ldr	r3, [pc, #48]	@ (8005644 <xTaskRemoveFromEventList+0xc0>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005616:	429a      	cmp	r2, r3
 8005618:	d905      	bls.n	8005626 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800561a:	2301      	movs	r3, #1
 800561c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800561e:	4b0a      	ldr	r3, [pc, #40]	@ (8005648 <xTaskRemoveFromEventList+0xc4>)
 8005620:	2201      	movs	r2, #1
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	e001      	b.n	800562a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005626:	2300      	movs	r3, #0
 8005628:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 800562a:	697b      	ldr	r3, [r7, #20]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3718      	adds	r7, #24
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	200012a8 	.word	0x200012a8
 8005638:	20001288 	.word	0x20001288
 800563c:	20000db0 	.word	0x20000db0
 8005640:	20001240 	.word	0x20001240
 8005644:	20000dac 	.word	0x20000dac
 8005648:	20001294 	.word	0x20001294

0800564c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005654:	4b06      	ldr	r3, [pc, #24]	@ (8005670 <vTaskInternalSetTimeOutState+0x24>)
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800565c:	4b05      	ldr	r3, [pc, #20]	@ (8005674 <vTaskInternalSetTimeOutState+0x28>)
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	605a      	str	r2, [r3, #4]
}
 8005664:	bf00      	nop
 8005666:	370c      	adds	r7, #12
 8005668:	46bd      	mov	sp, r7
 800566a:	bc80      	pop	{r7}
 800566c:	4770      	bx	lr
 800566e:	bf00      	nop
 8005670:	20001298 	.word	0x20001298
 8005674:	20001284 	.word	0x20001284

08005678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b088      	sub	sp, #32
 800567c:	af00      	add	r7, sp, #0
 800567e:	6078      	str	r0, [r7, #4]
 8005680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2b00      	cmp	r3, #0
 8005686:	d10b      	bne.n	80056a0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800568c:	f383 8811 	msr	BASEPRI, r3
 8005690:	f3bf 8f6f 	isb	sy
 8005694:	f3bf 8f4f 	dsb	sy
 8005698:	613b      	str	r3, [r7, #16]
}
 800569a:	bf00      	nop
 800569c:	bf00      	nop
 800569e:	e7fd      	b.n	800569c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d10b      	bne.n	80056be <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80056a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056aa:	f383 8811 	msr	BASEPRI, r3
 80056ae:	f3bf 8f6f 	isb	sy
 80056b2:	f3bf 8f4f 	dsb	sy
 80056b6:	60fb      	str	r3, [r7, #12]
}
 80056b8:	bf00      	nop
 80056ba:	bf00      	nop
 80056bc:	e7fd      	b.n	80056ba <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80056be:	f000 fe15 	bl	80062ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056c2:	4b1d      	ldr	r3, [pc, #116]	@ (8005738 <xTaskCheckForTimeOut+0xc0>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	685b      	ldr	r3, [r3, #4]
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056da:	d102      	bne.n	80056e2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056dc:	2300      	movs	r3, #0
 80056de:	61fb      	str	r3, [r7, #28]
 80056e0:	e023      	b.n	800572a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	4b15      	ldr	r3, [pc, #84]	@ (800573c <xTaskCheckForTimeOut+0xc4>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d007      	beq.n	80056fe <xTaskCheckForTimeOut+0x86>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	685b      	ldr	r3, [r3, #4]
 80056f2:	69ba      	ldr	r2, [r7, #24]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d302      	bcc.n	80056fe <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056f8:	2301      	movs	r3, #1
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e015      	b.n	800572a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056fe:	683b      	ldr	r3, [r7, #0]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	429a      	cmp	r2, r3
 8005706:	d20b      	bcs.n	8005720 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	681a      	ldr	r2, [r3, #0]
 800570c:	697b      	ldr	r3, [r7, #20]
 800570e:	1ad2      	subs	r2, r2, r3
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f7ff ff99 	bl	800564c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800571a:	2300      	movs	r3, #0
 800571c:	61fb      	str	r3, [r7, #28]
 800571e:	e004      	b.n	800572a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	2200      	movs	r2, #0
 8005724:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005726:	2301      	movs	r3, #1
 8005728:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800572a:	f000 fe0f 	bl	800634c <vPortExitCritical>

	return xReturn;
 800572e:	69fb      	ldr	r3, [r7, #28]
}
 8005730:	4618      	mov	r0, r3
 8005732:	3720      	adds	r7, #32
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	20001284 	.word	0x20001284
 800573c:	20001298 	.word	0x20001298

08005740 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005740:	b480      	push	{r7}
 8005742:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005744:	4b03      	ldr	r3, [pc, #12]	@ (8005754 <vTaskMissedYield+0x14>)
 8005746:	2201      	movs	r2, #1
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	46bd      	mov	sp, r7
 800574e:	bc80      	pop	{r7}
 8005750:	4770      	bx	lr
 8005752:	bf00      	nop
 8005754:	20001294 	.word	0x20001294

08005758 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005760:	f000 f852 	bl	8005808 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <prvIdleTask+0x28>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b01      	cmp	r3, #1
 800576a:	d9f9      	bls.n	8005760 <prvIdleTask+0x8>
			{
				taskYIELD();
 800576c:	4b05      	ldr	r3, [pc, #20]	@ (8005784 <prvIdleTask+0x2c>)
 800576e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005772:	601a      	str	r2, [r3, #0]
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800577c:	e7f0      	b.n	8005760 <prvIdleTask+0x8>
 800577e:	bf00      	nop
 8005780:	20000db0 	.word	0x20000db0
 8005784:	e000ed04 	.word	0xe000ed04

08005788 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800578e:	2300      	movs	r3, #0
 8005790:	607b      	str	r3, [r7, #4]
 8005792:	e00c      	b.n	80057ae <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005794:	687a      	ldr	r2, [r7, #4]
 8005796:	4613      	mov	r3, r2
 8005798:	009b      	lsls	r3, r3, #2
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <prvInitialiseTaskLists+0x60>)
 80057a0:	4413      	add	r3, r2
 80057a2:	4618      	mov	r0, r3
 80057a4:	f7fe fc26 	bl	8003ff4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	3301      	adds	r3, #1
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2b37      	cmp	r3, #55	@ 0x37
 80057b2:	d9ef      	bls.n	8005794 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057b4:	480d      	ldr	r0, [pc, #52]	@ (80057ec <prvInitialiseTaskLists+0x64>)
 80057b6:	f7fe fc1d 	bl	8003ff4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057ba:	480d      	ldr	r0, [pc, #52]	@ (80057f0 <prvInitialiseTaskLists+0x68>)
 80057bc:	f7fe fc1a 	bl	8003ff4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057c0:	480c      	ldr	r0, [pc, #48]	@ (80057f4 <prvInitialiseTaskLists+0x6c>)
 80057c2:	f7fe fc17 	bl	8003ff4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057c6:	480c      	ldr	r0, [pc, #48]	@ (80057f8 <prvInitialiseTaskLists+0x70>)
 80057c8:	f7fe fc14 	bl	8003ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057cc:	480b      	ldr	r0, [pc, #44]	@ (80057fc <prvInitialiseTaskLists+0x74>)
 80057ce:	f7fe fc11 	bl	8003ff4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057d2:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <prvInitialiseTaskLists+0x78>)
 80057d4:	4a05      	ldr	r2, [pc, #20]	@ (80057ec <prvInitialiseTaskLists+0x64>)
 80057d6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057d8:	4b0a      	ldr	r3, [pc, #40]	@ (8005804 <prvInitialiseTaskLists+0x7c>)
 80057da:	4a05      	ldr	r2, [pc, #20]	@ (80057f0 <prvInitialiseTaskLists+0x68>)
 80057dc:	601a      	str	r2, [r3, #0]
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	20000db0 	.word	0x20000db0
 80057ec:	20001210 	.word	0x20001210
 80057f0:	20001224 	.word	0x20001224
 80057f4:	20001240 	.word	0x20001240
 80057f8:	20001254 	.word	0x20001254
 80057fc:	2000126c 	.word	0x2000126c
 8005800:	20001238 	.word	0x20001238
 8005804:	2000123c 	.word	0x2000123c

08005808 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800580e:	e019      	b.n	8005844 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005810:	f000 fd6c 	bl	80062ec <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005814:	4b10      	ldr	r3, [pc, #64]	@ (8005858 <prvCheckTasksWaitingTermination+0x50>)
 8005816:	68db      	ldr	r3, [r3, #12]
 8005818:	68db      	ldr	r3, [r3, #12]
 800581a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	3304      	adds	r3, #4
 8005820:	4618      	mov	r0, r3
 8005822:	f7fe fc6d 	bl	8004100 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005826:	4b0d      	ldr	r3, [pc, #52]	@ (800585c <prvCheckTasksWaitingTermination+0x54>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	3b01      	subs	r3, #1
 800582c:	4a0b      	ldr	r2, [pc, #44]	@ (800585c <prvCheckTasksWaitingTermination+0x54>)
 800582e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005830:	4b0b      	ldr	r3, [pc, #44]	@ (8005860 <prvCheckTasksWaitingTermination+0x58>)
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	3b01      	subs	r3, #1
 8005836:	4a0a      	ldr	r2, [pc, #40]	@ (8005860 <prvCheckTasksWaitingTermination+0x58>)
 8005838:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800583a:	f000 fd87 	bl	800634c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800583e:	6878      	ldr	r0, [r7, #4]
 8005840:	f000 f810 	bl	8005864 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005844:	4b06      	ldr	r3, [pc, #24]	@ (8005860 <prvCheckTasksWaitingTermination+0x58>)
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1e1      	bne.n	8005810 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800584c:	bf00      	nop
 800584e:	bf00      	nop
 8005850:	3708      	adds	r7, #8
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	20001254 	.word	0x20001254
 800585c:	20001280 	.word	0x20001280
 8005860:	20001268 	.word	0x20001268

08005864 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b084      	sub	sp, #16
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8005872:	2b00      	cmp	r3, #0
 8005874:	d108      	bne.n	8005888 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800587a:	4618      	mov	r0, r3
 800587c:	f000 ff00 	bl	8006680 <vPortFree>
				vPortFree( pxTCB );
 8005880:	6878      	ldr	r0, [r7, #4]
 8005882:	f000 fefd 	bl	8006680 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005886:	e019      	b.n	80058bc <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800588e:	2b01      	cmp	r3, #1
 8005890:	d103      	bne.n	800589a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f000 fef4 	bl	8006680 <vPortFree>
	}
 8005898:	e010      	b.n	80058bc <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80058a0:	2b02      	cmp	r3, #2
 80058a2:	d00b      	beq.n	80058bc <prvDeleteTCB+0x58>
	__asm volatile
 80058a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a8:	f383 8811 	msr	BASEPRI, r3
 80058ac:	f3bf 8f6f 	isb	sy
 80058b0:	f3bf 8f4f 	dsb	sy
 80058b4:	60fb      	str	r3, [r7, #12]
}
 80058b6:	bf00      	nop
 80058b8:	bf00      	nop
 80058ba:	e7fd      	b.n	80058b8 <prvDeleteTCB+0x54>
	}
 80058bc:	bf00      	nop
 80058be:	3710      	adds	r7, #16
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd80      	pop	{r7, pc}

080058c4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058ca:	4b0e      	ldr	r3, [pc, #56]	@ (8005904 <prvResetNextTaskUnblockTime+0x40>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <prvResetNextTaskUnblockTime+0x14>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <prvResetNextTaskUnblockTime+0x16>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d004      	beq.n	80058e8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058de:	4b0a      	ldr	r3, [pc, #40]	@ (8005908 <prvResetNextTaskUnblockTime+0x44>)
 80058e0:	f04f 32ff 	mov.w	r2, #4294967295
 80058e4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058e6:	e008      	b.n	80058fa <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80058e8:	4b06      	ldr	r3, [pc, #24]	@ (8005904 <prvResetNextTaskUnblockTime+0x40>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	4a04      	ldr	r2, [pc, #16]	@ (8005908 <prvResetNextTaskUnblockTime+0x44>)
 80058f8:	6013      	str	r3, [r2, #0]
}
 80058fa:	bf00      	nop
 80058fc:	370c      	adds	r7, #12
 80058fe:	46bd      	mov	sp, r7
 8005900:	bc80      	pop	{r7}
 8005902:	4770      	bx	lr
 8005904:	20001238 	.word	0x20001238
 8005908:	200012a0 	.word	0x200012a0

0800590c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005912:	4b0b      	ldr	r3, [pc, #44]	@ (8005940 <xTaskGetSchedulerState+0x34>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d102      	bne.n	8005920 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800591a:	2301      	movs	r3, #1
 800591c:	607b      	str	r3, [r7, #4]
 800591e:	e008      	b.n	8005932 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005920:	4b08      	ldr	r3, [pc, #32]	@ (8005944 <xTaskGetSchedulerState+0x38>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d102      	bne.n	800592e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005928:	2302      	movs	r3, #2
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e001      	b.n	8005932 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800592e:	2300      	movs	r3, #0
 8005930:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005932:	687b      	ldr	r3, [r7, #4]
	}
 8005934:	4618      	mov	r0, r3
 8005936:	370c      	adds	r7, #12
 8005938:	46bd      	mov	sp, r7
 800593a:	bc80      	pop	{r7}
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	2000128c 	.word	0x2000128c
 8005944:	200012a8 	.word	0x200012a8

08005948 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005948:	b580      	push	{r7, lr}
 800594a:	b086      	sub	sp, #24
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d058      	beq.n	8005a10 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800595e:	4b2f      	ldr	r3, [pc, #188]	@ (8005a1c <xTaskPriorityDisinherit+0xd4>)
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	429a      	cmp	r2, r3
 8005966:	d00b      	beq.n	8005980 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800596c:	f383 8811 	msr	BASEPRI, r3
 8005970:	f3bf 8f6f 	isb	sy
 8005974:	f3bf 8f4f 	dsb	sy
 8005978:	60fb      	str	r3, [r7, #12]
}
 800597a:	bf00      	nop
 800597c:	bf00      	nop
 800597e:	e7fd      	b.n	800597c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	60bb      	str	r3, [r7, #8]
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059a4:	1e5a      	subs	r2, r3, #1
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d02c      	beq.n	8005a10 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d128      	bne.n	8005a10 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	3304      	adds	r3, #4
 80059c2:	4618      	mov	r0, r3
 80059c4:	f7fe fb9c 	bl	8004100 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80059cc:	693b      	ldr	r3, [r7, #16]
 80059ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059e0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a20 <xTaskPriorityDisinherit+0xd8>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d903      	bls.n	80059f0 <xTaskPriorityDisinherit+0xa8>
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059ec:	4a0c      	ldr	r2, [pc, #48]	@ (8005a20 <xTaskPriorityDisinherit+0xd8>)
 80059ee:	6013      	str	r3, [r2, #0]
 80059f0:	693b      	ldr	r3, [r7, #16]
 80059f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80059f4:	4613      	mov	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	4413      	add	r3, r2
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	4a09      	ldr	r2, [pc, #36]	@ (8005a24 <xTaskPriorityDisinherit+0xdc>)
 80059fe:	441a      	add	r2, r3
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	3304      	adds	r3, #4
 8005a04:	4619      	mov	r1, r3
 8005a06:	4610      	mov	r0, r2
 8005a08:	f7fe fb1f 	bl	800404a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a10:	697b      	ldr	r3, [r7, #20]
	}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3718      	adds	r7, #24
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000dac 	.word	0x20000dac
 8005a20:	20001288 	.word	0x20001288
 8005a24:	20000db0 	.word	0x20000db0

08005a28 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
 8005a30:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a32:	4b21      	ldr	r3, [pc, #132]	@ (8005ab8 <prvAddCurrentTaskToDelayedList+0x90>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a38:	4b20      	ldr	r3, [pc, #128]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3304      	adds	r3, #4
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f7fe fb5e 	bl	8004100 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a4a:	d10a      	bne.n	8005a62 <prvAddCurrentTaskToDelayedList+0x3a>
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d007      	beq.n	8005a62 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a52:	4b1a      	ldr	r3, [pc, #104]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	3304      	adds	r3, #4
 8005a58:	4619      	mov	r1, r3
 8005a5a:	4819      	ldr	r0, [pc, #100]	@ (8005ac0 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a5c:	f7fe faf5 	bl	800404a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a60:	e026      	b.n	8005ab0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a62:	68fa      	ldr	r2, [r7, #12]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a6a:	4b14      	ldr	r3, [pc, #80]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a72:	68ba      	ldr	r2, [r7, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d209      	bcs.n	8005a8e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a7a:	4b12      	ldr	r3, [pc, #72]	@ (8005ac4 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	4b0f      	ldr	r3, [pc, #60]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	3304      	adds	r3, #4
 8005a84:	4619      	mov	r1, r3
 8005a86:	4610      	mov	r0, r2
 8005a88:	f7fe fb02 	bl	8004090 <vListInsert>
}
 8005a8c:	e010      	b.n	8005ab0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a8e:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a90:	681a      	ldr	r2, [r3, #0]
 8005a92:	4b0a      	ldr	r3, [pc, #40]	@ (8005abc <prvAddCurrentTaskToDelayedList+0x94>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	3304      	adds	r3, #4
 8005a98:	4619      	mov	r1, r3
 8005a9a:	4610      	mov	r0, r2
 8005a9c:	f7fe faf8 	bl	8004090 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8005acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68ba      	ldr	r2, [r7, #8]
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	d202      	bcs.n	8005ab0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005aaa:	4a08      	ldr	r2, [pc, #32]	@ (8005acc <prvAddCurrentTaskToDelayedList+0xa4>)
 8005aac:	68bb      	ldr	r3, [r7, #8]
 8005aae:	6013      	str	r3, [r2, #0]
}
 8005ab0:	bf00      	nop
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}
 8005ab8:	20001284 	.word	0x20001284
 8005abc:	20000dac 	.word	0x20000dac
 8005ac0:	2000126c 	.word	0x2000126c
 8005ac4:	2000123c 	.word	0x2000123c
 8005ac8:	20001238 	.word	0x20001238
 8005acc:	200012a0 	.word	0x200012a0

08005ad0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	@ 0x28
 8005ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005ada:	f000 fad9 	bl	8006090 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005ade:	4b1d      	ldr	r3, [pc, #116]	@ (8005b54 <xTimerCreateTimerTask+0x84>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d021      	beq.n	8005b2a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005aea:	2300      	movs	r3, #0
 8005aec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005aee:	1d3a      	adds	r2, r7, #4
 8005af0:	f107 0108 	add.w	r1, r7, #8
 8005af4:	f107 030c 	add.w	r3, r7, #12
 8005af8:	4618      	mov	r0, r3
 8005afa:	f7fe fa61 	bl	8003fc0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005afe:	6879      	ldr	r1, [r7, #4]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	68fa      	ldr	r2, [r7, #12]
 8005b04:	9202      	str	r2, [sp, #8]
 8005b06:	9301      	str	r3, [sp, #4]
 8005b08:	2302      	movs	r3, #2
 8005b0a:	9300      	str	r3, [sp, #0]
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	460a      	mov	r2, r1
 8005b10:	4911      	ldr	r1, [pc, #68]	@ (8005b58 <xTimerCreateTimerTask+0x88>)
 8005b12:	4812      	ldr	r0, [pc, #72]	@ (8005b5c <xTimerCreateTimerTask+0x8c>)
 8005b14:	f7ff f852 	bl	8004bbc <xTaskCreateStatic>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	4a11      	ldr	r2, [pc, #68]	@ (8005b60 <xTimerCreateTimerTask+0x90>)
 8005b1c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005b1e:	4b10      	ldr	r3, [pc, #64]	@ (8005b60 <xTimerCreateTimerTask+0x90>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d001      	beq.n	8005b2a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005b26:	2301      	movs	r3, #1
 8005b28:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d10b      	bne.n	8005b48 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
 8005b44:	bf00      	nop
 8005b46:	e7fd      	b.n	8005b44 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005b48:	697b      	ldr	r3, [r7, #20]
}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	3718      	adds	r7, #24
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	bd80      	pop	{r7, pc}
 8005b52:	bf00      	nop
 8005b54:	200012dc 	.word	0x200012dc
 8005b58:	0800afdc 	.word	0x0800afdc
 8005b5c:	08005c85 	.word	0x08005c85
 8005b60:	200012e0 	.word	0x200012e0

08005b64 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b08a      	sub	sp, #40	@ 0x28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10b      	bne.n	8005b94 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	623b      	str	r3, [r7, #32]
}
 8005b8e:	bf00      	nop
 8005b90:	bf00      	nop
 8005b92:	e7fd      	b.n	8005b90 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b94:	4b19      	ldr	r3, [pc, #100]	@ (8005bfc <xTimerGenericCommand+0x98>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d02a      	beq.n	8005bf2 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b9c:	68bb      	ldr	r3, [r7, #8]
 8005b9e:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005ba8:	68bb      	ldr	r3, [r7, #8]
 8005baa:	2b05      	cmp	r3, #5
 8005bac:	dc18      	bgt.n	8005be0 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005bae:	f7ff fead 	bl	800590c <xTaskGetSchedulerState>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d109      	bne.n	8005bcc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005bb8:	4b10      	ldr	r3, [pc, #64]	@ (8005bfc <xTimerGenericCommand+0x98>)
 8005bba:	6818      	ldr	r0, [r3, #0]
 8005bbc:	f107 0110 	add.w	r1, r7, #16
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bc4:	f7fe fc0e 	bl	80043e4 <xQueueGenericSend>
 8005bc8:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bca:	e012      	b.n	8005bf2 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8005bfc <xTimerGenericCommand+0x98>)
 8005bce:	6818      	ldr	r0, [r3, #0]
 8005bd0:	f107 0110 	add.w	r1, r7, #16
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f7fe fc04 	bl	80043e4 <xQueueGenericSend>
 8005bdc:	6278      	str	r0, [r7, #36]	@ 0x24
 8005bde:	e008      	b.n	8005bf2 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005be0:	4b06      	ldr	r3, [pc, #24]	@ (8005bfc <xTimerGenericCommand+0x98>)
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	f107 0110 	add.w	r1, r7, #16
 8005be8:	2300      	movs	r3, #0
 8005bea:	683a      	ldr	r2, [r7, #0]
 8005bec:	f7fe fcfc 	bl	80045e8 <xQueueGenericSendFromISR>
 8005bf0:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005bf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	3728      	adds	r7, #40	@ 0x28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bd80      	pop	{r7, pc}
 8005bfc:	200012dc 	.word	0x200012dc

08005c00 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b088      	sub	sp, #32
 8005c04:	af02      	add	r7, sp, #8
 8005c06:	6078      	str	r0, [r7, #4]
 8005c08:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c0a:	4b1d      	ldr	r3, [pc, #116]	@ (8005c80 <prvProcessExpiredTimer+0x80>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68db      	ldr	r3, [r3, #12]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	3304      	adds	r3, #4
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe fa71 	bl	8004100 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005c1e:	697b      	ldr	r3, [r7, #20]
 8005c20:	69db      	ldr	r3, [r3, #28]
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	d123      	bne.n	8005c6e <prvProcessExpiredTimer+0x6e>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005c26:	697b      	ldr	r3, [r7, #20]
 8005c28:	699a      	ldr	r2, [r3, #24]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	18d1      	adds	r1, r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	6978      	ldr	r0, [r7, #20]
 8005c34:	f000 f8cc 	bl	8005dd0 <prvInsertTimerInActiveList>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d017      	beq.n	8005c6e <prvProcessExpiredTimer+0x6e>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005c3e:	2300      	movs	r3, #0
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	2300      	movs	r3, #0
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	2100      	movs	r1, #0
 8005c48:	6978      	ldr	r0, [r7, #20]
 8005c4a:	f7ff ff8b 	bl	8005b64 <xTimerGenericCommand>
 8005c4e:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d10b      	bne.n	8005c6e <prvProcessExpiredTimer+0x6e>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	bf00      	nop
 8005c6c:	e7fd      	b.n	8005c6a <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c6e:	697b      	ldr	r3, [r7, #20]
 8005c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c72:	6978      	ldr	r0, [r7, #20]
 8005c74:	4798      	blx	r3
}
 8005c76:	bf00      	nop
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
 8005c7e:	bf00      	nop
 8005c80:	200012d4 	.word	0x200012d4

08005c84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b084      	sub	sp, #16
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c8c:	f107 0308 	add.w	r3, r7, #8
 8005c90:	4618      	mov	r0, r3
 8005c92:	f000 f859 	bl	8005d48 <prvGetNextExpireTime>
 8005c96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c98:	68bb      	ldr	r3, [r7, #8]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	68f8      	ldr	r0, [r7, #12]
 8005c9e:	f000 f805 	bl	8005cac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005ca2:	f000 f8d7 	bl	8005e54 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005ca6:	bf00      	nop
 8005ca8:	e7f0      	b.n	8005c8c <prvTimerTask+0x8>
	...

08005cac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b084      	sub	sp, #16
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005cb6:	f7ff fa3b 	bl	8005130 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005cba:	f107 0308 	add.w	r3, r7, #8
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	f000 f866 	bl	8005d90 <prvSampleTimeNow>
 8005cc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005cc6:	68bb      	ldr	r3, [r7, #8]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d130      	bne.n	8005d2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <prvProcessTimerOrBlockTask+0x3c>
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d806      	bhi.n	8005ce8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005cda:	f7ff fa37 	bl	800514c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005cde:	68f9      	ldr	r1, [r7, #12]
 8005ce0:	6878      	ldr	r0, [r7, #4]
 8005ce2:	f7ff ff8d 	bl	8005c00 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ce6:	e024      	b.n	8005d32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d008      	beq.n	8005d00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005cee:	4b13      	ldr	r3, [pc, #76]	@ (8005d3c <prvProcessTimerOrBlockTask+0x90>)
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	bf0c      	ite	eq
 8005cf8:	2301      	moveq	r3, #1
 8005cfa:	2300      	movne	r3, #0
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005d00:	4b0f      	ldr	r3, [pc, #60]	@ (8005d40 <prvProcessTimerOrBlockTask+0x94>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	1ad3      	subs	r3, r2, r3
 8005d0a:	683a      	ldr	r2, [r7, #0]
 8005d0c:	4619      	mov	r1, r3
 8005d0e:	f7fe ff21 	bl	8004b54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005d12:	f7ff fa1b 	bl	800514c <xTaskResumeAll>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d10a      	bne.n	8005d32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005d1c:	4b09      	ldr	r3, [pc, #36]	@ (8005d44 <prvProcessTimerOrBlockTask+0x98>)
 8005d1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	f3bf 8f6f 	isb	sy
}
 8005d2c:	e001      	b.n	8005d32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005d2e:	f7ff fa0d 	bl	800514c <xTaskResumeAll>
}
 8005d32:	bf00      	nop
 8005d34:	3710      	adds	r7, #16
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	200012d8 	.word	0x200012d8
 8005d40:	200012dc 	.word	0x200012dc
 8005d44:	e000ed04 	.word	0xe000ed04

08005d48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b085      	sub	sp, #20
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d50:	4b0e      	ldr	r3, [pc, #56]	@ (8005d8c <prvGetNextExpireTime+0x44>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	bf0c      	ite	eq
 8005d5a:	2301      	moveq	r3, #1
 8005d5c:	2300      	movne	r3, #0
 8005d5e:	b2db      	uxtb	r3, r3
 8005d60:	461a      	mov	r2, r3
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d105      	bne.n	8005d7a <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d6e:	4b07      	ldr	r3, [pc, #28]	@ (8005d8c <prvGetNextExpireTime+0x44>)
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	68db      	ldr	r3, [r3, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	60fb      	str	r3, [r7, #12]
 8005d78:	e001      	b.n	8005d7e <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bc80      	pop	{r7}
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	200012d4 	.word	0x200012d4

08005d90 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d98:	f7ff fa76 	bl	8005288 <xTaskGetTickCount>
 8005d9c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d9e:	4b0b      	ldr	r3, [pc, #44]	@ (8005dcc <prvSampleTimeNow+0x3c>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	429a      	cmp	r2, r3
 8005da6:	d205      	bcs.n	8005db4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005da8:	f000 f910 	bl	8005fcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	601a      	str	r2, [r3, #0]
 8005db2:	e002      	b.n	8005dba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	2200      	movs	r2, #0
 8005db8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005dba:	4a04      	ldr	r2, [pc, #16]	@ (8005dcc <prvSampleTimeNow+0x3c>)
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3710      	adds	r7, #16
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}
 8005dca:	bf00      	nop
 8005dcc:	200012e4 	.word	0x200012e4

08005dd0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005dd0:	b580      	push	{r7, lr}
 8005dd2:	b086      	sub	sp, #24
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	60f8      	str	r0, [r7, #12]
 8005dd8:	60b9      	str	r1, [r7, #8]
 8005dda:	607a      	str	r2, [r7, #4]
 8005ddc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005dde:	2300      	movs	r3, #0
 8005de0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	68ba      	ldr	r2, [r7, #8]
 8005de6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	68fa      	ldr	r2, [r7, #12]
 8005dec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d812      	bhi.n	8005e1c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005df6:	687a      	ldr	r2, [r7, #4]
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	699b      	ldr	r3, [r3, #24]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d302      	bcc.n	8005e0a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005e04:	2301      	movs	r3, #1
 8005e06:	617b      	str	r3, [r7, #20]
 8005e08:	e01b      	b.n	8005e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005e0a:	4b10      	ldr	r3, [pc, #64]	@ (8005e4c <prvInsertTimerInActiveList+0x7c>)
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	3304      	adds	r3, #4
 8005e12:	4619      	mov	r1, r3
 8005e14:	4610      	mov	r0, r2
 8005e16:	f7fe f93b 	bl	8004090 <vListInsert>
 8005e1a:	e012      	b.n	8005e42 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005e1c:	687a      	ldr	r2, [r7, #4]
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d206      	bcs.n	8005e32 <prvInsertTimerInActiveList+0x62>
 8005e24:	68ba      	ldr	r2, [r7, #8]
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d302      	bcc.n	8005e32 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e007      	b.n	8005e42 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <prvInsertTimerInActiveList+0x80>)
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3304      	adds	r3, #4
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4610      	mov	r0, r2
 8005e3e:	f7fe f927 	bl	8004090 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005e42:	697b      	ldr	r3, [r7, #20]
}
 8005e44:	4618      	mov	r0, r3
 8005e46:	3718      	adds	r7, #24
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	bd80      	pop	{r7, pc}
 8005e4c:	200012d8 	.word	0x200012d8
 8005e50:	200012d4 	.word	0x200012d4

08005e54 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b08e      	sub	sp, #56	@ 0x38
 8005e58:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e5a:	e0a5      	b.n	8005fa8 <prvProcessReceivedCommands+0x154>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	da19      	bge.n	8005e96 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e62:	1d3b      	adds	r3, r7, #4
 8005e64:	3304      	adds	r3, #4
 8005e66:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d10b      	bne.n	8005e86 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	61fb      	str	r3, [r7, #28]
}
 8005e80:	bf00      	nop
 8005e82:	bf00      	nop
 8005e84:	e7fd      	b.n	8005e82 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e8c:	6850      	ldr	r0, [r2, #4]
 8005e8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e90:	6892      	ldr	r2, [r2, #8]
 8005e92:	4611      	mov	r1, r2
 8005e94:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	f2c0 8085 	blt.w	8005fa8 <prvProcessReceivedCommands+0x154>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005ea2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d004      	beq.n	8005eb4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005eaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eac:	3304      	adds	r3, #4
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7fe f926 	bl	8004100 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eb4:	463b      	mov	r3, r7
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	f7ff ff6a 	bl	8005d90 <prvSampleTimeNow>
 8005ebc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b09      	cmp	r3, #9
 8005ec2:	d86c      	bhi.n	8005f9e <prvProcessReceivedCommands+0x14a>
 8005ec4:	a201      	add	r2, pc, #4	@ (adr r2, 8005ecc <prvProcessReceivedCommands+0x78>)
 8005ec6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eca:	bf00      	nop
 8005ecc:	08005ef5 	.word	0x08005ef5
 8005ed0:	08005ef5 	.word	0x08005ef5
 8005ed4:	08005ef5 	.word	0x08005ef5
 8005ed8:	08005f9f 	.word	0x08005f9f
 8005edc:	08005f53 	.word	0x08005f53
 8005ee0:	08005f8d 	.word	0x08005f8d
 8005ee4:	08005ef5 	.word	0x08005ef5
 8005ee8:	08005ef5 	.word	0x08005ef5
 8005eec:	08005f9f 	.word	0x08005f9f
 8005ef0:	08005f53 	.word	0x08005f53
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ef4:	68ba      	ldr	r2, [r7, #8]
 8005ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	18d1      	adds	r1, r2, r3
 8005efc:	68bb      	ldr	r3, [r7, #8]
 8005efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f00:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f02:	f7ff ff65 	bl	8005dd0 <prvInsertTimerInActiveList>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d04a      	beq.n	8005fa2 <prvProcessReceivedCommands+0x14e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005f0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f12:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	69db      	ldr	r3, [r3, #28]
 8005f18:	2b01      	cmp	r3, #1
 8005f1a:	d142      	bne.n	8005fa2 <prvProcessReceivedCommands+0x14e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005f1c:	68ba      	ldr	r2, [r7, #8]
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	699b      	ldr	r3, [r3, #24]
 8005f22:	441a      	add	r2, r3
 8005f24:	2300      	movs	r3, #0
 8005f26:	9300      	str	r3, [sp, #0]
 8005f28:	2300      	movs	r3, #0
 8005f2a:	2100      	movs	r1, #0
 8005f2c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f2e:	f7ff fe19 	bl	8005b64 <xTimerGenericCommand>
 8005f32:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d133      	bne.n	8005fa2 <prvProcessReceivedCommands+0x14e>
	__asm volatile
 8005f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f3e:	f383 8811 	msr	BASEPRI, r3
 8005f42:	f3bf 8f6f 	isb	sy
 8005f46:	f3bf 8f4f 	dsb	sy
 8005f4a:	61bb      	str	r3, [r7, #24]
}
 8005f4c:	bf00      	nop
 8005f4e:	bf00      	nop
 8005f50:	e7fd      	b.n	8005f4e <prvProcessReceivedCommands+0xfa>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d10b      	bne.n	8005f78 <prvProcessReceivedCommands+0x124>
	__asm volatile
 8005f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f64:	f383 8811 	msr	BASEPRI, r3
 8005f68:	f3bf 8f6f 	isb	sy
 8005f6c:	f3bf 8f4f 	dsb	sy
 8005f70:	617b      	str	r3, [r7, #20]
}
 8005f72:	bf00      	nop
 8005f74:	bf00      	nop
 8005f76:	e7fd      	b.n	8005f74 <prvProcessReceivedCommands+0x120>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7a:	699a      	ldr	r2, [r3, #24]
 8005f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7e:	18d1      	adds	r1, r2, r3
 8005f80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f84:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f86:	f7ff ff23 	bl	8005dd0 <prvInsertTimerInActiveList>
					break;
 8005f8a:	e00d      	b.n	8005fa8 <prvProcessReceivedCommands+0x154>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d107      	bne.n	8005fa6 <prvProcessReceivedCommands+0x152>
						{
							vPortFree( pxTimer );
 8005f96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f98:	f000 fb72 	bl	8006680 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f9c:	e003      	b.n	8005fa6 <prvProcessReceivedCommands+0x152>

				default	:
					/* Don't expect to get here. */
					break;
 8005f9e:	bf00      	nop
 8005fa0:	e002      	b.n	8005fa8 <prvProcessReceivedCommands+0x154>
					break;
 8005fa2:	bf00      	nop
 8005fa4:	e000      	b.n	8005fa8 <prvProcessReceivedCommands+0x154>
					break;
 8005fa6:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fa8:	4b07      	ldr	r3, [pc, #28]	@ (8005fc8 <prvProcessReceivedCommands+0x174>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	1d39      	adds	r1, r7, #4
 8005fae:	2200      	movs	r2, #0
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f7fe fbb5 	bl	8004720 <xQueueReceive>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	f47f af4f 	bne.w	8005e5c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fbe:	bf00      	nop
 8005fc0:	bf00      	nop
 8005fc2:	3730      	adds	r7, #48	@ 0x30
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	200012dc 	.word	0x200012dc

08005fcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fd2:	e046      	b.n	8006062 <prvSwitchTimerLists+0x96>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fd4:	4b2c      	ldr	r3, [pc, #176]	@ (8006088 <prvSwitchTimerLists+0xbc>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fde:	4b2a      	ldr	r3, [pc, #168]	@ (8006088 <prvSwitchTimerLists+0xbc>)
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	3304      	adds	r3, #4
 8005fec:	4618      	mov	r0, r3
 8005fee:	f7fe f887 	bl	8004100 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ff6:	68f8      	ldr	r0, [r7, #12]
 8005ff8:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	69db      	ldr	r3, [r3, #28]
 8005ffe:	2b01      	cmp	r3, #1
 8006000:	d12f      	bne.n	8006062 <prvSwitchTimerLists+0x96>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	693a      	ldr	r2, [r7, #16]
 8006008:	4413      	add	r3, r2
 800600a:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800600c:	68ba      	ldr	r2, [r7, #8]
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	429a      	cmp	r2, r3
 8006012:	d90e      	bls.n	8006032 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	68ba      	ldr	r2, [r7, #8]
 8006018:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	68fa      	ldr	r2, [r7, #12]
 800601e:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006020:	4b19      	ldr	r3, [pc, #100]	@ (8006088 <prvSwitchTimerLists+0xbc>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	3304      	adds	r3, #4
 8006028:	4619      	mov	r1, r3
 800602a:	4610      	mov	r0, r2
 800602c:	f7fe f830 	bl	8004090 <vListInsert>
 8006030:	e017      	b.n	8006062 <prvSwitchTimerLists+0x96>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006032:	2300      	movs	r3, #0
 8006034:	9300      	str	r3, [sp, #0]
 8006036:	2300      	movs	r3, #0
 8006038:	693a      	ldr	r2, [r7, #16]
 800603a:	2100      	movs	r1, #0
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff fd91 	bl	8005b64 <xTimerGenericCommand>
 8006042:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10b      	bne.n	8006062 <prvSwitchTimerLists+0x96>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	603b      	str	r3, [r7, #0]
}
 800605c:	bf00      	nop
 800605e:	bf00      	nop
 8006060:	e7fd      	b.n	800605e <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006062:	4b09      	ldr	r3, [pc, #36]	@ (8006088 <prvSwitchTimerLists+0xbc>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1b3      	bne.n	8005fd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800606c:	4b06      	ldr	r3, [pc, #24]	@ (8006088 <prvSwitchTimerLists+0xbc>)
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006072:	4b06      	ldr	r3, [pc, #24]	@ (800608c <prvSwitchTimerLists+0xc0>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	4a04      	ldr	r2, [pc, #16]	@ (8006088 <prvSwitchTimerLists+0xbc>)
 8006078:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800607a:	4a04      	ldr	r2, [pc, #16]	@ (800608c <prvSwitchTimerLists+0xc0>)
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6013      	str	r3, [r2, #0]
}
 8006080:	bf00      	nop
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	200012d4 	.word	0x200012d4
 800608c:	200012d8 	.word	0x200012d8

08006090 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006096:	f000 f929 	bl	80062ec <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800609a:	4b15      	ldr	r3, [pc, #84]	@ (80060f0 <prvCheckForValidListAndQueue+0x60>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d120      	bne.n	80060e4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060a2:	4814      	ldr	r0, [pc, #80]	@ (80060f4 <prvCheckForValidListAndQueue+0x64>)
 80060a4:	f7fd ffa6 	bl	8003ff4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060a8:	4813      	ldr	r0, [pc, #76]	@ (80060f8 <prvCheckForValidListAndQueue+0x68>)
 80060aa:	f7fd ffa3 	bl	8003ff4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060ae:	4b13      	ldr	r3, [pc, #76]	@ (80060fc <prvCheckForValidListAndQueue+0x6c>)
 80060b0:	4a10      	ldr	r2, [pc, #64]	@ (80060f4 <prvCheckForValidListAndQueue+0x64>)
 80060b2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060b4:	4b12      	ldr	r3, [pc, #72]	@ (8006100 <prvCheckForValidListAndQueue+0x70>)
 80060b6:	4a10      	ldr	r2, [pc, #64]	@ (80060f8 <prvCheckForValidListAndQueue+0x68>)
 80060b8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	4b11      	ldr	r3, [pc, #68]	@ (8006104 <prvCheckForValidListAndQueue+0x74>)
 80060c0:	4a11      	ldr	r2, [pc, #68]	@ (8006108 <prvCheckForValidListAndQueue+0x78>)
 80060c2:	2110      	movs	r1, #16
 80060c4:	200a      	movs	r0, #10
 80060c6:	f7fe f8af 	bl	8004228 <xQueueGenericCreateStatic>
 80060ca:	4603      	mov	r3, r0
 80060cc:	4a08      	ldr	r2, [pc, #32]	@ (80060f0 <prvCheckForValidListAndQueue+0x60>)
 80060ce:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060d0:	4b07      	ldr	r3, [pc, #28]	@ (80060f0 <prvCheckForValidListAndQueue+0x60>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d005      	beq.n	80060e4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060d8:	4b05      	ldr	r3, [pc, #20]	@ (80060f0 <prvCheckForValidListAndQueue+0x60>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	490b      	ldr	r1, [pc, #44]	@ (800610c <prvCheckForValidListAndQueue+0x7c>)
 80060de:	4618      	mov	r0, r3
 80060e0:	f7fe fd10 	bl	8004b04 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060e4:	f000 f932 	bl	800634c <vPortExitCritical>
}
 80060e8:	bf00      	nop
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
 80060ee:	bf00      	nop
 80060f0:	200012dc 	.word	0x200012dc
 80060f4:	200012ac 	.word	0x200012ac
 80060f8:	200012c0 	.word	0x200012c0
 80060fc:	200012d4 	.word	0x200012d4
 8006100:	200012d8 	.word	0x200012d8
 8006104:	20001388 	.word	0x20001388
 8006108:	200012e8 	.word	0x200012e8
 800610c:	0800afe4 	.word	0x0800afe4

08006110 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006110:	b480      	push	{r7}
 8006112:	b085      	sub	sp, #20
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3b04      	subs	r3, #4
 8006120:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006128:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	3b04      	subs	r3, #4
 800612e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	f023 0201 	bic.w	r2, r3, #1
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3b04      	subs	r3, #4
 800613e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006140:	4a08      	ldr	r2, [pc, #32]	@ (8006164 <pxPortInitialiseStack+0x54>)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	3b14      	subs	r3, #20
 800614a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3b20      	subs	r3, #32
 8006156:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006158:	68fb      	ldr	r3, [r7, #12]
}
 800615a:	4618      	mov	r0, r3
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	bc80      	pop	{r7}
 8006162:	4770      	bx	lr
 8006164:	08006169 	.word	0x08006169

08006168 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800616e:	2300      	movs	r3, #0
 8006170:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006172:	4b12      	ldr	r3, [pc, #72]	@ (80061bc <prvTaskExitError+0x54>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800617a:	d00b      	beq.n	8006194 <prvTaskExitError+0x2c>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	60fb      	str	r3, [r7, #12]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <prvTaskExitError+0x28>
	__asm volatile
 8006194:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006198:	f383 8811 	msr	BASEPRI, r3
 800619c:	f3bf 8f6f 	isb	sy
 80061a0:	f3bf 8f4f 	dsb	sy
 80061a4:	60bb      	str	r3, [r7, #8]
}
 80061a6:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061a8:	bf00      	nop
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d0fc      	beq.n	80061aa <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061b0:	bf00      	nop
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bc80      	pop	{r7}
 80061ba:	4770      	bx	lr
 80061bc:	2000000c 	.word	0x2000000c

080061c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061c0:	4b07      	ldr	r3, [pc, #28]	@ (80061e0 <pxCurrentTCBConst2>)
 80061c2:	6819      	ldr	r1, [r3, #0]
 80061c4:	6808      	ldr	r0, [r1, #0]
 80061c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ca:	f380 8809 	msr	PSP, r0
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f04f 0000 	mov.w	r0, #0
 80061d6:	f380 8811 	msr	BASEPRI, r0
 80061da:	f04e 0e0d 	orr.w	lr, lr, #13
 80061de:	4770      	bx	lr

080061e0 <pxCurrentTCBConst2>:
 80061e0:	20000dac 	.word	0x20000dac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop

080061e8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80061e8:	4806      	ldr	r0, [pc, #24]	@ (8006204 <prvPortStartFirstTask+0x1c>)
 80061ea:	6800      	ldr	r0, [r0, #0]
 80061ec:	6800      	ldr	r0, [r0, #0]
 80061ee:	f380 8808 	msr	MSP, r0
 80061f2:	b662      	cpsie	i
 80061f4:	b661      	cpsie	f
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
 80061fe:	df00      	svc	0
 8006200:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006202:	bf00      	nop
 8006204:	e000ed08 	.word	0xe000ed08

08006208 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b084      	sub	sp, #16
 800620c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800620e:	4b32      	ldr	r3, [pc, #200]	@ (80062d8 <xPortStartScheduler+0xd0>)
 8006210:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	b2db      	uxtb	r3, r3
 8006218:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	22ff      	movs	r2, #255	@ 0xff
 800621e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006228:	78fb      	ldrb	r3, [r7, #3]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006230:	b2da      	uxtb	r2, r3
 8006232:	4b2a      	ldr	r3, [pc, #168]	@ (80062dc <xPortStartScheduler+0xd4>)
 8006234:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006236:	4b2a      	ldr	r3, [pc, #168]	@ (80062e0 <xPortStartScheduler+0xd8>)
 8006238:	2207      	movs	r2, #7
 800623a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800623c:	e009      	b.n	8006252 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800623e:	4b28      	ldr	r3, [pc, #160]	@ (80062e0 <xPortStartScheduler+0xd8>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	3b01      	subs	r3, #1
 8006244:	4a26      	ldr	r2, [pc, #152]	@ (80062e0 <xPortStartScheduler+0xd8>)
 8006246:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	005b      	lsls	r3, r3, #1
 800624e:	b2db      	uxtb	r3, r3
 8006250:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006252:	78fb      	ldrb	r3, [r7, #3]
 8006254:	b2db      	uxtb	r3, r3
 8006256:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625a:	2b80      	cmp	r3, #128	@ 0x80
 800625c:	d0ef      	beq.n	800623e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800625e:	4b20      	ldr	r3, [pc, #128]	@ (80062e0 <xPortStartScheduler+0xd8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f1c3 0307 	rsb	r3, r3, #7
 8006266:	2b04      	cmp	r3, #4
 8006268:	d00b      	beq.n	8006282 <xPortStartScheduler+0x7a>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	60bb      	str	r3, [r7, #8]
}
 800627c:	bf00      	nop
 800627e:	bf00      	nop
 8006280:	e7fd      	b.n	800627e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006282:	4b17      	ldr	r3, [pc, #92]	@ (80062e0 <xPortStartScheduler+0xd8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	021b      	lsls	r3, r3, #8
 8006288:	4a15      	ldr	r2, [pc, #84]	@ (80062e0 <xPortStartScheduler+0xd8>)
 800628a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800628c:	4b14      	ldr	r3, [pc, #80]	@ (80062e0 <xPortStartScheduler+0xd8>)
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8006294:	4a12      	ldr	r2, [pc, #72]	@ (80062e0 <xPortStartScheduler+0xd8>)
 8006296:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062a0:	4b10      	ldr	r3, [pc, #64]	@ (80062e4 <xPortStartScheduler+0xdc>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a0f      	ldr	r2, [pc, #60]	@ (80062e4 <xPortStartScheduler+0xdc>)
 80062a6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062aa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062ac:	4b0d      	ldr	r3, [pc, #52]	@ (80062e4 <xPortStartScheduler+0xdc>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a0c      	ldr	r2, [pc, #48]	@ (80062e4 <xPortStartScheduler+0xdc>)
 80062b2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062b6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062b8:	f000 f8b8 	bl	800642c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062bc:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <xPortStartScheduler+0xe0>)
 80062be:	2200      	movs	r2, #0
 80062c0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062c2:	f7ff ff91 	bl	80061e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062c6:	f7ff f8ad 	bl	8005424 <vTaskSwitchContext>
	prvTaskExitError();
 80062ca:	f7ff ff4d 	bl	8006168 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	3710      	adds	r7, #16
 80062d4:	46bd      	mov	sp, r7
 80062d6:	bd80      	pop	{r7, pc}
 80062d8:	e000e400 	.word	0xe000e400
 80062dc:	200013d8 	.word	0x200013d8
 80062e0:	200013dc 	.word	0x200013dc
 80062e4:	e000ed20 	.word	0xe000ed20
 80062e8:	2000000c 	.word	0x2000000c

080062ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	607b      	str	r3, [r7, #4]
}
 8006304:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006306:	4b0f      	ldr	r3, [pc, #60]	@ (8006344 <vPortEnterCritical+0x58>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	3301      	adds	r3, #1
 800630c:	4a0d      	ldr	r2, [pc, #52]	@ (8006344 <vPortEnterCritical+0x58>)
 800630e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006310:	4b0c      	ldr	r3, [pc, #48]	@ (8006344 <vPortEnterCritical+0x58>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d110      	bne.n	800633a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006318:	4b0b      	ldr	r3, [pc, #44]	@ (8006348 <vPortEnterCritical+0x5c>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d00b      	beq.n	800633a <vPortEnterCritical+0x4e>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	603b      	str	r3, [r7, #0]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <vPortEnterCritical+0x4a>
	}
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	bc80      	pop	{r7}
 8006342:	4770      	bx	lr
 8006344:	2000000c 	.word	0x2000000c
 8006348:	e000ed04 	.word	0xe000ed04

0800634c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006352:	4b12      	ldr	r3, [pc, #72]	@ (800639c <vPortExitCritical+0x50>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d10b      	bne.n	8006372 <vPortExitCritical+0x26>
	__asm volatile
 800635a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800635e:	f383 8811 	msr	BASEPRI, r3
 8006362:	f3bf 8f6f 	isb	sy
 8006366:	f3bf 8f4f 	dsb	sy
 800636a:	607b      	str	r3, [r7, #4]
}
 800636c:	bf00      	nop
 800636e:	bf00      	nop
 8006370:	e7fd      	b.n	800636e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006372:	4b0a      	ldr	r3, [pc, #40]	@ (800639c <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3b01      	subs	r3, #1
 8006378:	4a08      	ldr	r2, [pc, #32]	@ (800639c <vPortExitCritical+0x50>)
 800637a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800637c:	4b07      	ldr	r3, [pc, #28]	@ (800639c <vPortExitCritical+0x50>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d105      	bne.n	8006390 <vPortExitCritical+0x44>
 8006384:	2300      	movs	r3, #0
 8006386:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	f383 8811 	msr	BASEPRI, r3
}
 800638e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006390:	bf00      	nop
 8006392:	370c      	adds	r7, #12
 8006394:	46bd      	mov	sp, r7
 8006396:	bc80      	pop	{r7}
 8006398:	4770      	bx	lr
 800639a:	bf00      	nop
 800639c:	2000000c 	.word	0x2000000c

080063a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063a0:	f3ef 8009 	mrs	r0, PSP
 80063a4:	f3bf 8f6f 	isb	sy
 80063a8:	4b0d      	ldr	r3, [pc, #52]	@ (80063e0 <pxCurrentTCBConst>)
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063b0:	6010      	str	r0, [r2, #0]
 80063b2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063b6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063ba:	f380 8811 	msr	BASEPRI, r0
 80063be:	f7ff f831 	bl	8005424 <vTaskSwitchContext>
 80063c2:	f04f 0000 	mov.w	r0, #0
 80063c6:	f380 8811 	msr	BASEPRI, r0
 80063ca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063ce:	6819      	ldr	r1, [r3, #0]
 80063d0:	6808      	ldr	r0, [r1, #0]
 80063d2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063d6:	f380 8809 	msr	PSP, r0
 80063da:	f3bf 8f6f 	isb	sy
 80063de:	4770      	bx	lr

080063e0 <pxCurrentTCBConst>:
 80063e0:	20000dac 	.word	0x20000dac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80063e4:	bf00      	nop
 80063e6:	bf00      	nop

080063e8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b082      	sub	sp, #8
 80063ec:	af00      	add	r7, sp, #0
	__asm volatile
 80063ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f2:	f383 8811 	msr	BASEPRI, r3
 80063f6:	f3bf 8f6f 	isb	sy
 80063fa:	f3bf 8f4f 	dsb	sy
 80063fe:	607b      	str	r3, [r7, #4]
}
 8006400:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006402:	f7fe ff4f 	bl	80052a4 <xTaskIncrementTick>
 8006406:	4603      	mov	r3, r0
 8006408:	2b00      	cmp	r3, #0
 800640a:	d003      	beq.n	8006414 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800640c:	4b06      	ldr	r3, [pc, #24]	@ (8006428 <SysTick_Handler+0x40>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	2300      	movs	r3, #0
 8006416:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	f383 8811 	msr	BASEPRI, r3
}
 800641e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006420:	bf00      	nop
 8006422:	3708      	adds	r7, #8
 8006424:	46bd      	mov	sp, r7
 8006426:	bd80      	pop	{r7, pc}
 8006428:	e000ed04 	.word	0xe000ed04

0800642c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800642c:	b480      	push	{r7}
 800642e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006430:	4b0a      	ldr	r3, [pc, #40]	@ (800645c <vPortSetupTimerInterrupt+0x30>)
 8006432:	2200      	movs	r2, #0
 8006434:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006436:	4b0a      	ldr	r3, [pc, #40]	@ (8006460 <vPortSetupTimerInterrupt+0x34>)
 8006438:	2200      	movs	r2, #0
 800643a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800643c:	4b09      	ldr	r3, [pc, #36]	@ (8006464 <vPortSetupTimerInterrupt+0x38>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a09      	ldr	r2, [pc, #36]	@ (8006468 <vPortSetupTimerInterrupt+0x3c>)
 8006442:	fba2 2303 	umull	r2, r3, r2, r3
 8006446:	099b      	lsrs	r3, r3, #6
 8006448:	4a08      	ldr	r2, [pc, #32]	@ (800646c <vPortSetupTimerInterrupt+0x40>)
 800644a:	3b01      	subs	r3, #1
 800644c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800644e:	4b03      	ldr	r3, [pc, #12]	@ (800645c <vPortSetupTimerInterrupt+0x30>)
 8006450:	2207      	movs	r2, #7
 8006452:	601a      	str	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	46bd      	mov	sp, r7
 8006458:	bc80      	pop	{r7}
 800645a:	4770      	bx	lr
 800645c:	e000e010 	.word	0xe000e010
 8006460:	e000e018 	.word	0xe000e018
 8006464:	20000000 	.word	0x20000000
 8006468:	10624dd3 	.word	0x10624dd3
 800646c:	e000e014 	.word	0xe000e014

08006470 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006470:	b480      	push	{r7}
 8006472:	b085      	sub	sp, #20
 8006474:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006476:	f3ef 8305 	mrs	r3, IPSR
 800647a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	2b0f      	cmp	r3, #15
 8006480:	d915      	bls.n	80064ae <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006482:	4a17      	ldr	r2, [pc, #92]	@ (80064e0 <vPortValidateInterruptPriority+0x70>)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4413      	add	r3, r2
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800648c:	4b15      	ldr	r3, [pc, #84]	@ (80064e4 <vPortValidateInterruptPriority+0x74>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	7afa      	ldrb	r2, [r7, #11]
 8006492:	429a      	cmp	r2, r3
 8006494:	d20b      	bcs.n	80064ae <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8006496:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649a:	f383 8811 	msr	BASEPRI, r3
 800649e:	f3bf 8f6f 	isb	sy
 80064a2:	f3bf 8f4f 	dsb	sy
 80064a6:	607b      	str	r3, [r7, #4]
}
 80064a8:	bf00      	nop
 80064aa:	bf00      	nop
 80064ac:	e7fd      	b.n	80064aa <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064ae:	4b0e      	ldr	r3, [pc, #56]	@ (80064e8 <vPortValidateInterruptPriority+0x78>)
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064b6:	4b0d      	ldr	r3, [pc, #52]	@ (80064ec <vPortValidateInterruptPriority+0x7c>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	429a      	cmp	r2, r3
 80064bc:	d90b      	bls.n	80064d6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064c2:	f383 8811 	msr	BASEPRI, r3
 80064c6:	f3bf 8f6f 	isb	sy
 80064ca:	f3bf 8f4f 	dsb	sy
 80064ce:	603b      	str	r3, [r7, #0]
}
 80064d0:	bf00      	nop
 80064d2:	bf00      	nop
 80064d4:	e7fd      	b.n	80064d2 <vPortValidateInterruptPriority+0x62>
	}
 80064d6:	bf00      	nop
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	bc80      	pop	{r7}
 80064de:	4770      	bx	lr
 80064e0:	e000e3f0 	.word	0xe000e3f0
 80064e4:	200013d8 	.word	0x200013d8
 80064e8:	e000ed0c 	.word	0xe000ed0c
 80064ec:	200013dc 	.word	0x200013dc

080064f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b08a      	sub	sp, #40	@ 0x28
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80064f8:	2300      	movs	r3, #0
 80064fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80064fc:	f7fe fe18 	bl	8005130 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006500:	4b5a      	ldr	r3, [pc, #360]	@ (800666c <pvPortMalloc+0x17c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d101      	bne.n	800650c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006508:	f000 f916 	bl	8006738 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800650c:	4b58      	ldr	r3, [pc, #352]	@ (8006670 <pvPortMalloc+0x180>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4013      	ands	r3, r2
 8006514:	2b00      	cmp	r3, #0
 8006516:	f040 8090 	bne.w	800663a <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01e      	beq.n	800655e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006520:	2208      	movs	r2, #8
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4413      	add	r3, r2
 8006526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f003 0307 	and.w	r3, r3, #7
 800652e:	2b00      	cmp	r3, #0
 8006530:	d015      	beq.n	800655e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f023 0307 	bic.w	r3, r3, #7
 8006538:	3308      	adds	r3, #8
 800653a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f003 0307 	and.w	r3, r3, #7
 8006542:	2b00      	cmp	r3, #0
 8006544:	d00b      	beq.n	800655e <pvPortMalloc+0x6e>
	__asm volatile
 8006546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800654a:	f383 8811 	msr	BASEPRI, r3
 800654e:	f3bf 8f6f 	isb	sy
 8006552:	f3bf 8f4f 	dsb	sy
 8006556:	617b      	str	r3, [r7, #20]
}
 8006558:	bf00      	nop
 800655a:	bf00      	nop
 800655c:	e7fd      	b.n	800655a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d06a      	beq.n	800663a <pvPortMalloc+0x14a>
 8006564:	4b43      	ldr	r3, [pc, #268]	@ (8006674 <pvPortMalloc+0x184>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	429a      	cmp	r2, r3
 800656c:	d865      	bhi.n	800663a <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800656e:	4b42      	ldr	r3, [pc, #264]	@ (8006678 <pvPortMalloc+0x188>)
 8006570:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006572:	4b41      	ldr	r3, [pc, #260]	@ (8006678 <pvPortMalloc+0x188>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006578:	e004      	b.n	8006584 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800657a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006584:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006586:	685b      	ldr	r3, [r3, #4]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d903      	bls.n	8006596 <pvPortMalloc+0xa6>
 800658e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f1      	bne.n	800657a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006596:	4b35      	ldr	r3, [pc, #212]	@ (800666c <pvPortMalloc+0x17c>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800659c:	429a      	cmp	r2, r3
 800659e:	d04c      	beq.n	800663a <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065a0:	6a3b      	ldr	r3, [r7, #32]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2208      	movs	r2, #8
 80065a6:	4413      	add	r3, r2
 80065a8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	6a3b      	ldr	r3, [r7, #32]
 80065b0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b4:	685a      	ldr	r2, [r3, #4]
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	1ad2      	subs	r2, r2, r3
 80065ba:	2308      	movs	r3, #8
 80065bc:	005b      	lsls	r3, r3, #1
 80065be:	429a      	cmp	r2, r3
 80065c0:	d920      	bls.n	8006604 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	4413      	add	r3, r2
 80065c8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d00b      	beq.n	80065ec <pvPortMalloc+0xfc>
	__asm volatile
 80065d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d8:	f383 8811 	msr	BASEPRI, r3
 80065dc:	f3bf 8f6f 	isb	sy
 80065e0:	f3bf 8f4f 	dsb	sy
 80065e4:	613b      	str	r3, [r7, #16]
}
 80065e6:	bf00      	nop
 80065e8:	bf00      	nop
 80065ea:	e7fd      	b.n	80065e8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80065ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ee:	685a      	ldr	r2, [r3, #4]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	1ad2      	subs	r2, r2, r3
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80065f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80065fe:	69b8      	ldr	r0, [r7, #24]
 8006600:	f000 f8fc 	bl	80067fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006604:	4b1b      	ldr	r3, [pc, #108]	@ (8006674 <pvPortMalloc+0x184>)
 8006606:	681a      	ldr	r2, [r3, #0]
 8006608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	1ad3      	subs	r3, r2, r3
 800660e:	4a19      	ldr	r2, [pc, #100]	@ (8006674 <pvPortMalloc+0x184>)
 8006610:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006612:	4b18      	ldr	r3, [pc, #96]	@ (8006674 <pvPortMalloc+0x184>)
 8006614:	681a      	ldr	r2, [r3, #0]
 8006616:	4b19      	ldr	r3, [pc, #100]	@ (800667c <pvPortMalloc+0x18c>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	429a      	cmp	r2, r3
 800661c:	d203      	bcs.n	8006626 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800661e:	4b15      	ldr	r3, [pc, #84]	@ (8006674 <pvPortMalloc+0x184>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a16      	ldr	r2, [pc, #88]	@ (800667c <pvPortMalloc+0x18c>)
 8006624:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006628:	685a      	ldr	r2, [r3, #4]
 800662a:	4b11      	ldr	r3, [pc, #68]	@ (8006670 <pvPortMalloc+0x180>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	431a      	orrs	r2, r3
 8006630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006632:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006636:	2200      	movs	r2, #0
 8006638:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800663a:	f7fe fd87 	bl	800514c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00b      	beq.n	8006660 <pvPortMalloc+0x170>
	__asm volatile
 8006648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664c:	f383 8811 	msr	BASEPRI, r3
 8006650:	f3bf 8f6f 	isb	sy
 8006654:	f3bf 8f4f 	dsb	sy
 8006658:	60fb      	str	r3, [r7, #12]
}
 800665a:	bf00      	nop
 800665c:	bf00      	nop
 800665e:	e7fd      	b.n	800665c <pvPortMalloc+0x16c>
	return pvReturn;
 8006660:	69fb      	ldr	r3, [r7, #28]
}
 8006662:	4618      	mov	r0, r3
 8006664:	3728      	adds	r7, #40	@ 0x28
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	bf00      	nop
 800666c:	20001fe8 	.word	0x20001fe8
 8006670:	20001ff4 	.word	0x20001ff4
 8006674:	20001fec 	.word	0x20001fec
 8006678:	20001fe0 	.word	0x20001fe0
 800667c:	20001ff0 	.word	0x20001ff0

08006680 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006680:	b580      	push	{r7, lr}
 8006682:	b086      	sub	sp, #24
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d04a      	beq.n	8006728 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006692:	2308      	movs	r3, #8
 8006694:	425b      	negs	r3, r3
 8006696:	697a      	ldr	r2, [r7, #20]
 8006698:	4413      	add	r3, r2
 800669a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	685a      	ldr	r2, [r3, #4]
 80066a4:	4b22      	ldr	r3, [pc, #136]	@ (8006730 <vPortFree+0xb0>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	4013      	ands	r3, r2
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10b      	bne.n	80066c6 <vPortFree+0x46>
	__asm volatile
 80066ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066b2:	f383 8811 	msr	BASEPRI, r3
 80066b6:	f3bf 8f6f 	isb	sy
 80066ba:	f3bf 8f4f 	dsb	sy
 80066be:	60fb      	str	r3, [r7, #12]
}
 80066c0:	bf00      	nop
 80066c2:	bf00      	nop
 80066c4:	e7fd      	b.n	80066c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d00b      	beq.n	80066e6 <vPortFree+0x66>
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	60bb      	str	r3, [r7, #8]
}
 80066e0:	bf00      	nop
 80066e2:	bf00      	nop
 80066e4:	e7fd      	b.n	80066e2 <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	685a      	ldr	r2, [r3, #4]
 80066ea:	4b11      	ldr	r3, [pc, #68]	@ (8006730 <vPortFree+0xb0>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4013      	ands	r3, r2
 80066f0:	2b00      	cmp	r3, #0
 80066f2:	d019      	beq.n	8006728 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d115      	bne.n	8006728 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	685a      	ldr	r2, [r3, #4]
 8006700:	4b0b      	ldr	r3, [pc, #44]	@ (8006730 <vPortFree+0xb0>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	43db      	mvns	r3, r3
 8006706:	401a      	ands	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800670c:	f7fe fd10 	bl	8005130 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	4b07      	ldr	r3, [pc, #28]	@ (8006734 <vPortFree+0xb4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4413      	add	r3, r2
 800671a:	4a06      	ldr	r2, [pc, #24]	@ (8006734 <vPortFree+0xb4>)
 800671c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800671e:	6938      	ldr	r0, [r7, #16]
 8006720:	f000 f86c 	bl	80067fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006724:	f7fe fd12 	bl	800514c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006728:	bf00      	nop
 800672a:	3718      	adds	r7, #24
 800672c:	46bd      	mov	sp, r7
 800672e:	bd80      	pop	{r7, pc}
 8006730:	20001ff4 	.word	0x20001ff4
 8006734:	20001fec 	.word	0x20001fec

08006738 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006738:	b480      	push	{r7}
 800673a:	b085      	sub	sp, #20
 800673c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800673e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006742:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006744:	4b27      	ldr	r3, [pc, #156]	@ (80067e4 <prvHeapInit+0xac>)
 8006746:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	f003 0307 	and.w	r3, r3, #7
 800674e:	2b00      	cmp	r3, #0
 8006750:	d00c      	beq.n	800676c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3307      	adds	r3, #7
 8006756:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f023 0307 	bic.w	r3, r3, #7
 800675e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	1ad3      	subs	r3, r2, r3
 8006766:	4a1f      	ldr	r2, [pc, #124]	@ (80067e4 <prvHeapInit+0xac>)
 8006768:	4413      	add	r3, r2
 800676a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006770:	4a1d      	ldr	r2, [pc, #116]	@ (80067e8 <prvHeapInit+0xb0>)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006776:	4b1c      	ldr	r3, [pc, #112]	@ (80067e8 <prvHeapInit+0xb0>)
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68ba      	ldr	r2, [r7, #8]
 8006780:	4413      	add	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006784:	2208      	movs	r2, #8
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	1a9b      	subs	r3, r3, r2
 800678a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	f023 0307 	bic.w	r3, r3, #7
 8006792:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	4a15      	ldr	r2, [pc, #84]	@ (80067ec <prvHeapInit+0xb4>)
 8006798:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800679a:	4b14      	ldr	r3, [pc, #80]	@ (80067ec <prvHeapInit+0xb4>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2200      	movs	r2, #0
 80067a0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067a2:	4b12      	ldr	r3, [pc, #72]	@ (80067ec <prvHeapInit+0xb4>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2200      	movs	r2, #0
 80067a8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	1ad2      	subs	r2, r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067b8:	4b0c      	ldr	r3, [pc, #48]	@ (80067ec <prvHeapInit+0xb4>)
 80067ba:	681a      	ldr	r2, [r3, #0]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067c0:	683b      	ldr	r3, [r7, #0]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	4a0a      	ldr	r2, [pc, #40]	@ (80067f0 <prvHeapInit+0xb8>)
 80067c6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685b      	ldr	r3, [r3, #4]
 80067cc:	4a09      	ldr	r2, [pc, #36]	@ (80067f4 <prvHeapInit+0xbc>)
 80067ce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <prvHeapInit+0xc0>)
 80067d2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80067d6:	601a      	str	r2, [r3, #0]
}
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	bc80      	pop	{r7}
 80067e0:	4770      	bx	lr
 80067e2:	bf00      	nop
 80067e4:	200013e0 	.word	0x200013e0
 80067e8:	20001fe0 	.word	0x20001fe0
 80067ec:	20001fe8 	.word	0x20001fe8
 80067f0:	20001ff0 	.word	0x20001ff0
 80067f4:	20001fec 	.word	0x20001fec
 80067f8:	20001ff4 	.word	0x20001ff4

080067fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006804:	4b27      	ldr	r3, [pc, #156]	@ (80068a4 <prvInsertBlockIntoFreeList+0xa8>)
 8006806:	60fb      	str	r3, [r7, #12]
 8006808:	e002      	b.n	8006810 <prvInsertBlockIntoFreeList+0x14>
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	60fb      	str	r3, [r7, #12]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	429a      	cmp	r2, r3
 8006818:	d8f7      	bhi.n	800680a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	4413      	add	r3, r2
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	429a      	cmp	r2, r3
 800682a:	d108      	bne.n	800683e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	441a      	add	r2, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	68ba      	ldr	r2, [r7, #8]
 8006848:	441a      	add	r2, r3
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	429a      	cmp	r2, r3
 8006850:	d118      	bne.n	8006884 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681a      	ldr	r2, [r3, #0]
 8006856:	4b14      	ldr	r3, [pc, #80]	@ (80068a8 <prvInsertBlockIntoFreeList+0xac>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	429a      	cmp	r2, r3
 800685c:	d00d      	beq.n	800687a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	441a      	add	r2, r3
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	e008      	b.n	800688c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800687a:	4b0b      	ldr	r3, [pc, #44]	@ (80068a8 <prvInsertBlockIntoFreeList+0xac>)
 800687c:	681a      	ldr	r2, [r3, #0]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	601a      	str	r2, [r3, #0]
 8006882:	e003      	b.n	800688c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	681a      	ldr	r2, [r3, #0]
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800688c:	68fa      	ldr	r2, [r7, #12]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d002      	beq.n	800689a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	687a      	ldr	r2, [r7, #4]
 8006898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800689a:	bf00      	nop
 800689c:	3714      	adds	r7, #20
 800689e:	46bd      	mov	sp, r7
 80068a0:	bc80      	pop	{r7}
 80068a2:	4770      	bx	lr
 80068a4:	20001fe0 	.word	0x20001fe0
 80068a8:	20001fe8 	.word	0x20001fe8

080068ac <__cvt>:
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068b2:	461d      	mov	r5, r3
 80068b4:	bfbb      	ittet	lt
 80068b6:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80068ba:	461d      	movlt	r5, r3
 80068bc:	2300      	movge	r3, #0
 80068be:	232d      	movlt	r3, #45	@ 0x2d
 80068c0:	b088      	sub	sp, #32
 80068c2:	4614      	mov	r4, r2
 80068c4:	bfb8      	it	lt
 80068c6:	4614      	movlt	r4, r2
 80068c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80068ca:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80068cc:	7013      	strb	r3, [r2, #0]
 80068ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80068d0:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80068d4:	f023 0820 	bic.w	r8, r3, #32
 80068d8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80068dc:	d005      	beq.n	80068ea <__cvt+0x3e>
 80068de:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80068e2:	d100      	bne.n	80068e6 <__cvt+0x3a>
 80068e4:	3601      	adds	r6, #1
 80068e6:	2302      	movs	r3, #2
 80068e8:	e000      	b.n	80068ec <__cvt+0x40>
 80068ea:	2303      	movs	r3, #3
 80068ec:	aa07      	add	r2, sp, #28
 80068ee:	9204      	str	r2, [sp, #16]
 80068f0:	aa06      	add	r2, sp, #24
 80068f2:	e9cd a202 	strd	sl, r2, [sp, #8]
 80068f6:	e9cd 3600 	strd	r3, r6, [sp]
 80068fa:	4622      	mov	r2, r4
 80068fc:	462b      	mov	r3, r5
 80068fe:	f001 f88f 	bl	8007a20 <_dtoa_r>
 8006902:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006906:	4607      	mov	r7, r0
 8006908:	d119      	bne.n	800693e <__cvt+0x92>
 800690a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800690c:	07db      	lsls	r3, r3, #31
 800690e:	d50e      	bpl.n	800692e <__cvt+0x82>
 8006910:	eb00 0906 	add.w	r9, r0, r6
 8006914:	2200      	movs	r2, #0
 8006916:	2300      	movs	r3, #0
 8006918:	4620      	mov	r0, r4
 800691a:	4629      	mov	r1, r5
 800691c:	f7fa f8b4 	bl	8000a88 <__aeabi_dcmpeq>
 8006920:	b108      	cbz	r0, 8006926 <__cvt+0x7a>
 8006922:	f8cd 901c 	str.w	r9, [sp, #28]
 8006926:	2230      	movs	r2, #48	@ 0x30
 8006928:	9b07      	ldr	r3, [sp, #28]
 800692a:	454b      	cmp	r3, r9
 800692c:	d31e      	bcc.n	800696c <__cvt+0xc0>
 800692e:	4638      	mov	r0, r7
 8006930:	9b07      	ldr	r3, [sp, #28]
 8006932:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8006934:	1bdb      	subs	r3, r3, r7
 8006936:	6013      	str	r3, [r2, #0]
 8006938:	b008      	add	sp, #32
 800693a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800693e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006942:	eb00 0906 	add.w	r9, r0, r6
 8006946:	d1e5      	bne.n	8006914 <__cvt+0x68>
 8006948:	7803      	ldrb	r3, [r0, #0]
 800694a:	2b30      	cmp	r3, #48	@ 0x30
 800694c:	d10a      	bne.n	8006964 <__cvt+0xb8>
 800694e:	2200      	movs	r2, #0
 8006950:	2300      	movs	r3, #0
 8006952:	4620      	mov	r0, r4
 8006954:	4629      	mov	r1, r5
 8006956:	f7fa f897 	bl	8000a88 <__aeabi_dcmpeq>
 800695a:	b918      	cbnz	r0, 8006964 <__cvt+0xb8>
 800695c:	f1c6 0601 	rsb	r6, r6, #1
 8006960:	f8ca 6000 	str.w	r6, [sl]
 8006964:	f8da 3000 	ldr.w	r3, [sl]
 8006968:	4499      	add	r9, r3
 800696a:	e7d3      	b.n	8006914 <__cvt+0x68>
 800696c:	1c59      	adds	r1, r3, #1
 800696e:	9107      	str	r1, [sp, #28]
 8006970:	701a      	strb	r2, [r3, #0]
 8006972:	e7d9      	b.n	8006928 <__cvt+0x7c>

08006974 <__exponent>:
 8006974:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006976:	2900      	cmp	r1, #0
 8006978:	bfb6      	itet	lt
 800697a:	232d      	movlt	r3, #45	@ 0x2d
 800697c:	232b      	movge	r3, #43	@ 0x2b
 800697e:	4249      	neglt	r1, r1
 8006980:	2909      	cmp	r1, #9
 8006982:	7002      	strb	r2, [r0, #0]
 8006984:	7043      	strb	r3, [r0, #1]
 8006986:	dd29      	ble.n	80069dc <__exponent+0x68>
 8006988:	f10d 0307 	add.w	r3, sp, #7
 800698c:	461d      	mov	r5, r3
 800698e:	270a      	movs	r7, #10
 8006990:	fbb1 f6f7 	udiv	r6, r1, r7
 8006994:	461a      	mov	r2, r3
 8006996:	fb07 1416 	mls	r4, r7, r6, r1
 800699a:	3430      	adds	r4, #48	@ 0x30
 800699c:	f802 4c01 	strb.w	r4, [r2, #-1]
 80069a0:	460c      	mov	r4, r1
 80069a2:	2c63      	cmp	r4, #99	@ 0x63
 80069a4:	4631      	mov	r1, r6
 80069a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80069aa:	dcf1      	bgt.n	8006990 <__exponent+0x1c>
 80069ac:	3130      	adds	r1, #48	@ 0x30
 80069ae:	1e94      	subs	r4, r2, #2
 80069b0:	f803 1c01 	strb.w	r1, [r3, #-1]
 80069b4:	4623      	mov	r3, r4
 80069b6:	1c41      	adds	r1, r0, #1
 80069b8:	42ab      	cmp	r3, r5
 80069ba:	d30a      	bcc.n	80069d2 <__exponent+0x5e>
 80069bc:	f10d 0309 	add.w	r3, sp, #9
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	42ac      	cmp	r4, r5
 80069c4:	bf88      	it	hi
 80069c6:	2300      	movhi	r3, #0
 80069c8:	3302      	adds	r3, #2
 80069ca:	4403      	add	r3, r0
 80069cc:	1a18      	subs	r0, r3, r0
 80069ce:	b003      	add	sp, #12
 80069d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80069d2:	f813 6b01 	ldrb.w	r6, [r3], #1
 80069d6:	f801 6f01 	strb.w	r6, [r1, #1]!
 80069da:	e7ed      	b.n	80069b8 <__exponent+0x44>
 80069dc:	2330      	movs	r3, #48	@ 0x30
 80069de:	3130      	adds	r1, #48	@ 0x30
 80069e0:	7083      	strb	r3, [r0, #2]
 80069e2:	70c1      	strb	r1, [r0, #3]
 80069e4:	1d03      	adds	r3, r0, #4
 80069e6:	e7f1      	b.n	80069cc <__exponent+0x58>

080069e8 <_printf_float>:
 80069e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069ec:	b091      	sub	sp, #68	@ 0x44
 80069ee:	460c      	mov	r4, r1
 80069f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80069f4:	4616      	mov	r6, r2
 80069f6:	461f      	mov	r7, r3
 80069f8:	4605      	mov	r5, r0
 80069fa:	f000 fef1 	bl	80077e0 <_localeconv_r>
 80069fe:	6803      	ldr	r3, [r0, #0]
 8006a00:	4618      	mov	r0, r3
 8006a02:	9308      	str	r3, [sp, #32]
 8006a04:	f7f9 fc14 	bl	8000230 <strlen>
 8006a08:	2300      	movs	r3, #0
 8006a0a:	930e      	str	r3, [sp, #56]	@ 0x38
 8006a0c:	f8d8 3000 	ldr.w	r3, [r8]
 8006a10:	9009      	str	r0, [sp, #36]	@ 0x24
 8006a12:	3307      	adds	r3, #7
 8006a14:	f023 0307 	bic.w	r3, r3, #7
 8006a18:	f103 0208 	add.w	r2, r3, #8
 8006a1c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006a20:	f8d4 b000 	ldr.w	fp, [r4]
 8006a24:	f8c8 2000 	str.w	r2, [r8]
 8006a28:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006a2c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006a30:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a32:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006a36:	f04f 32ff 	mov.w	r2, #4294967295
 8006a3a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a3e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006a42:	4b9c      	ldr	r3, [pc, #624]	@ (8006cb4 <_printf_float+0x2cc>)
 8006a44:	f7fa f852 	bl	8000aec <__aeabi_dcmpun>
 8006a48:	bb70      	cbnz	r0, 8006aa8 <_printf_float+0xc0>
 8006a4a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8006a4e:	f04f 32ff 	mov.w	r2, #4294967295
 8006a52:	4b98      	ldr	r3, [pc, #608]	@ (8006cb4 <_printf_float+0x2cc>)
 8006a54:	f7fa f82c 	bl	8000ab0 <__aeabi_dcmple>
 8006a58:	bb30      	cbnz	r0, 8006aa8 <_printf_float+0xc0>
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	4640      	mov	r0, r8
 8006a60:	4649      	mov	r1, r9
 8006a62:	f7fa f81b 	bl	8000a9c <__aeabi_dcmplt>
 8006a66:	b110      	cbz	r0, 8006a6e <_printf_float+0x86>
 8006a68:	232d      	movs	r3, #45	@ 0x2d
 8006a6a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a6e:	4a92      	ldr	r2, [pc, #584]	@ (8006cb8 <_printf_float+0x2d0>)
 8006a70:	4b92      	ldr	r3, [pc, #584]	@ (8006cbc <_printf_float+0x2d4>)
 8006a72:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006a76:	bf94      	ite	ls
 8006a78:	4690      	movls	r8, r2
 8006a7a:	4698      	movhi	r8, r3
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	f04f 0900 	mov.w	r9, #0
 8006a82:	6123      	str	r3, [r4, #16]
 8006a84:	f02b 0304 	bic.w	r3, fp, #4
 8006a88:	6023      	str	r3, [r4, #0]
 8006a8a:	4633      	mov	r3, r6
 8006a8c:	4621      	mov	r1, r4
 8006a8e:	4628      	mov	r0, r5
 8006a90:	9700      	str	r7, [sp, #0]
 8006a92:	aa0f      	add	r2, sp, #60	@ 0x3c
 8006a94:	f000 f9d4 	bl	8006e40 <_printf_common>
 8006a98:	3001      	adds	r0, #1
 8006a9a:	f040 8090 	bne.w	8006bbe <_printf_float+0x1d6>
 8006a9e:	f04f 30ff 	mov.w	r0, #4294967295
 8006aa2:	b011      	add	sp, #68	@ 0x44
 8006aa4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aa8:	4642      	mov	r2, r8
 8006aaa:	464b      	mov	r3, r9
 8006aac:	4640      	mov	r0, r8
 8006aae:	4649      	mov	r1, r9
 8006ab0:	f7fa f81c 	bl	8000aec <__aeabi_dcmpun>
 8006ab4:	b148      	cbz	r0, 8006aca <_printf_float+0xe2>
 8006ab6:	464b      	mov	r3, r9
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	bfb8      	it	lt
 8006abc:	232d      	movlt	r3, #45	@ 0x2d
 8006abe:	4a80      	ldr	r2, [pc, #512]	@ (8006cc0 <_printf_float+0x2d8>)
 8006ac0:	bfb8      	it	lt
 8006ac2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006ac6:	4b7f      	ldr	r3, [pc, #508]	@ (8006cc4 <_printf_float+0x2dc>)
 8006ac8:	e7d3      	b.n	8006a72 <_printf_float+0x8a>
 8006aca:	6863      	ldr	r3, [r4, #4]
 8006acc:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8006ad0:	1c5a      	adds	r2, r3, #1
 8006ad2:	d13f      	bne.n	8006b54 <_printf_float+0x16c>
 8006ad4:	2306      	movs	r3, #6
 8006ad6:	6063      	str	r3, [r4, #4]
 8006ad8:	2200      	movs	r2, #0
 8006ada:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8006ade:	6023      	str	r3, [r4, #0]
 8006ae0:	9206      	str	r2, [sp, #24]
 8006ae2:	aa0e      	add	r2, sp, #56	@ 0x38
 8006ae4:	e9cd a204 	strd	sl, r2, [sp, #16]
 8006ae8:	aa0d      	add	r2, sp, #52	@ 0x34
 8006aea:	9203      	str	r2, [sp, #12]
 8006aec:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8006af0:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006af4:	6863      	ldr	r3, [r4, #4]
 8006af6:	4642      	mov	r2, r8
 8006af8:	9300      	str	r3, [sp, #0]
 8006afa:	4628      	mov	r0, r5
 8006afc:	464b      	mov	r3, r9
 8006afe:	910a      	str	r1, [sp, #40]	@ 0x28
 8006b00:	f7ff fed4 	bl	80068ac <__cvt>
 8006b04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b06:	4680      	mov	r8, r0
 8006b08:	2947      	cmp	r1, #71	@ 0x47
 8006b0a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8006b0c:	d128      	bne.n	8006b60 <_printf_float+0x178>
 8006b0e:	1cc8      	adds	r0, r1, #3
 8006b10:	db02      	blt.n	8006b18 <_printf_float+0x130>
 8006b12:	6863      	ldr	r3, [r4, #4]
 8006b14:	4299      	cmp	r1, r3
 8006b16:	dd40      	ble.n	8006b9a <_printf_float+0x1b2>
 8006b18:	f1aa 0a02 	sub.w	sl, sl, #2
 8006b1c:	fa5f fa8a 	uxtb.w	sl, sl
 8006b20:	4652      	mov	r2, sl
 8006b22:	3901      	subs	r1, #1
 8006b24:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006b28:	910d      	str	r1, [sp, #52]	@ 0x34
 8006b2a:	f7ff ff23 	bl	8006974 <__exponent>
 8006b2e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b30:	4681      	mov	r9, r0
 8006b32:	1813      	adds	r3, r2, r0
 8006b34:	2a01      	cmp	r2, #1
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	dc02      	bgt.n	8006b40 <_printf_float+0x158>
 8006b3a:	6822      	ldr	r2, [r4, #0]
 8006b3c:	07d2      	lsls	r2, r2, #31
 8006b3e:	d501      	bpl.n	8006b44 <_printf_float+0x15c>
 8006b40:	3301      	adds	r3, #1
 8006b42:	6123      	str	r3, [r4, #16]
 8006b44:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	d09e      	beq.n	8006a8a <_printf_float+0xa2>
 8006b4c:	232d      	movs	r3, #45	@ 0x2d
 8006b4e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b52:	e79a      	b.n	8006a8a <_printf_float+0xa2>
 8006b54:	2947      	cmp	r1, #71	@ 0x47
 8006b56:	d1bf      	bne.n	8006ad8 <_printf_float+0xf0>
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1bd      	bne.n	8006ad8 <_printf_float+0xf0>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e7ba      	b.n	8006ad6 <_printf_float+0xee>
 8006b60:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006b64:	d9dc      	bls.n	8006b20 <_printf_float+0x138>
 8006b66:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006b6a:	d118      	bne.n	8006b9e <_printf_float+0x1b6>
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	6863      	ldr	r3, [r4, #4]
 8006b70:	dd0b      	ble.n	8006b8a <_printf_float+0x1a2>
 8006b72:	6121      	str	r1, [r4, #16]
 8006b74:	b913      	cbnz	r3, 8006b7c <_printf_float+0x194>
 8006b76:	6822      	ldr	r2, [r4, #0]
 8006b78:	07d0      	lsls	r0, r2, #31
 8006b7a:	d502      	bpl.n	8006b82 <_printf_float+0x19a>
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	440b      	add	r3, r1
 8006b80:	6123      	str	r3, [r4, #16]
 8006b82:	f04f 0900 	mov.w	r9, #0
 8006b86:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006b88:	e7dc      	b.n	8006b44 <_printf_float+0x15c>
 8006b8a:	b913      	cbnz	r3, 8006b92 <_printf_float+0x1aa>
 8006b8c:	6822      	ldr	r2, [r4, #0]
 8006b8e:	07d2      	lsls	r2, r2, #31
 8006b90:	d501      	bpl.n	8006b96 <_printf_float+0x1ae>
 8006b92:	3302      	adds	r3, #2
 8006b94:	e7f4      	b.n	8006b80 <_printf_float+0x198>
 8006b96:	2301      	movs	r3, #1
 8006b98:	e7f2      	b.n	8006b80 <_printf_float+0x198>
 8006b9a:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006b9e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ba0:	4299      	cmp	r1, r3
 8006ba2:	db05      	blt.n	8006bb0 <_printf_float+0x1c8>
 8006ba4:	6823      	ldr	r3, [r4, #0]
 8006ba6:	6121      	str	r1, [r4, #16]
 8006ba8:	07d8      	lsls	r0, r3, #31
 8006baa:	d5ea      	bpl.n	8006b82 <_printf_float+0x19a>
 8006bac:	1c4b      	adds	r3, r1, #1
 8006bae:	e7e7      	b.n	8006b80 <_printf_float+0x198>
 8006bb0:	2900      	cmp	r1, #0
 8006bb2:	bfcc      	ite	gt
 8006bb4:	2201      	movgt	r2, #1
 8006bb6:	f1c1 0202 	rsble	r2, r1, #2
 8006bba:	4413      	add	r3, r2
 8006bbc:	e7e0      	b.n	8006b80 <_printf_float+0x198>
 8006bbe:	6823      	ldr	r3, [r4, #0]
 8006bc0:	055a      	lsls	r2, r3, #21
 8006bc2:	d407      	bmi.n	8006bd4 <_printf_float+0x1ec>
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	4642      	mov	r2, r8
 8006bc8:	4631      	mov	r1, r6
 8006bca:	4628      	mov	r0, r5
 8006bcc:	47b8      	blx	r7
 8006bce:	3001      	adds	r0, #1
 8006bd0:	d12b      	bne.n	8006c2a <_printf_float+0x242>
 8006bd2:	e764      	b.n	8006a9e <_printf_float+0xb6>
 8006bd4:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006bd8:	f240 80dc 	bls.w	8006d94 <_printf_float+0x3ac>
 8006bdc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006be0:	2200      	movs	r2, #0
 8006be2:	2300      	movs	r3, #0
 8006be4:	f7f9 ff50 	bl	8000a88 <__aeabi_dcmpeq>
 8006be8:	2800      	cmp	r0, #0
 8006bea:	d033      	beq.n	8006c54 <_printf_float+0x26c>
 8006bec:	2301      	movs	r3, #1
 8006bee:	4631      	mov	r1, r6
 8006bf0:	4628      	mov	r0, r5
 8006bf2:	4a35      	ldr	r2, [pc, #212]	@ (8006cc8 <_printf_float+0x2e0>)
 8006bf4:	47b8      	blx	r7
 8006bf6:	3001      	adds	r0, #1
 8006bf8:	f43f af51 	beq.w	8006a9e <_printf_float+0xb6>
 8006bfc:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8006c00:	4543      	cmp	r3, r8
 8006c02:	db02      	blt.n	8006c0a <_printf_float+0x222>
 8006c04:	6823      	ldr	r3, [r4, #0]
 8006c06:	07d8      	lsls	r0, r3, #31
 8006c08:	d50f      	bpl.n	8006c2a <_printf_float+0x242>
 8006c0a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c0e:	4631      	mov	r1, r6
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b8      	blx	r7
 8006c14:	3001      	adds	r0, #1
 8006c16:	f43f af42 	beq.w	8006a9e <_printf_float+0xb6>
 8006c1a:	f04f 0900 	mov.w	r9, #0
 8006c1e:	f108 38ff 	add.w	r8, r8, #4294967295
 8006c22:	f104 0a1a 	add.w	sl, r4, #26
 8006c26:	45c8      	cmp	r8, r9
 8006c28:	dc09      	bgt.n	8006c3e <_printf_float+0x256>
 8006c2a:	6823      	ldr	r3, [r4, #0]
 8006c2c:	079b      	lsls	r3, r3, #30
 8006c2e:	f100 8102 	bmi.w	8006e36 <_printf_float+0x44e>
 8006c32:	68e0      	ldr	r0, [r4, #12]
 8006c34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c36:	4298      	cmp	r0, r3
 8006c38:	bfb8      	it	lt
 8006c3a:	4618      	movlt	r0, r3
 8006c3c:	e731      	b.n	8006aa2 <_printf_float+0xba>
 8006c3e:	2301      	movs	r3, #1
 8006c40:	4652      	mov	r2, sl
 8006c42:	4631      	mov	r1, r6
 8006c44:	4628      	mov	r0, r5
 8006c46:	47b8      	blx	r7
 8006c48:	3001      	adds	r0, #1
 8006c4a:	f43f af28 	beq.w	8006a9e <_printf_float+0xb6>
 8006c4e:	f109 0901 	add.w	r9, r9, #1
 8006c52:	e7e8      	b.n	8006c26 <_printf_float+0x23e>
 8006c54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	dc38      	bgt.n	8006ccc <_printf_float+0x2e4>
 8006c5a:	2301      	movs	r3, #1
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4628      	mov	r0, r5
 8006c60:	4a19      	ldr	r2, [pc, #100]	@ (8006cc8 <_printf_float+0x2e0>)
 8006c62:	47b8      	blx	r7
 8006c64:	3001      	adds	r0, #1
 8006c66:	f43f af1a 	beq.w	8006a9e <_printf_float+0xb6>
 8006c6a:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8006c6e:	ea59 0303 	orrs.w	r3, r9, r3
 8006c72:	d102      	bne.n	8006c7a <_printf_float+0x292>
 8006c74:	6823      	ldr	r3, [r4, #0]
 8006c76:	07d9      	lsls	r1, r3, #31
 8006c78:	d5d7      	bpl.n	8006c2a <_printf_float+0x242>
 8006c7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006c7e:	4631      	mov	r1, r6
 8006c80:	4628      	mov	r0, r5
 8006c82:	47b8      	blx	r7
 8006c84:	3001      	adds	r0, #1
 8006c86:	f43f af0a 	beq.w	8006a9e <_printf_float+0xb6>
 8006c8a:	f04f 0a00 	mov.w	sl, #0
 8006c8e:	f104 0b1a 	add.w	fp, r4, #26
 8006c92:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006c94:	425b      	negs	r3, r3
 8006c96:	4553      	cmp	r3, sl
 8006c98:	dc01      	bgt.n	8006c9e <_printf_float+0x2b6>
 8006c9a:	464b      	mov	r3, r9
 8006c9c:	e793      	b.n	8006bc6 <_printf_float+0x1de>
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	465a      	mov	r2, fp
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	4628      	mov	r0, r5
 8006ca6:	47b8      	blx	r7
 8006ca8:	3001      	adds	r0, #1
 8006caa:	f43f aef8 	beq.w	8006a9e <_printf_float+0xb6>
 8006cae:	f10a 0a01 	add.w	sl, sl, #1
 8006cb2:	e7ee      	b.n	8006c92 <_printf_float+0x2aa>
 8006cb4:	7fefffff 	.word	0x7fefffff
 8006cb8:	0800bb22 	.word	0x0800bb22
 8006cbc:	0800bb26 	.word	0x0800bb26
 8006cc0:	0800bb2a 	.word	0x0800bb2a
 8006cc4:	0800bb2e 	.word	0x0800bb2e
 8006cc8:	0800bb32 	.word	0x0800bb32
 8006ccc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cce:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006cd2:	4553      	cmp	r3, sl
 8006cd4:	bfa8      	it	ge
 8006cd6:	4653      	movge	r3, sl
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	4699      	mov	r9, r3
 8006cdc:	dc36      	bgt.n	8006d4c <_printf_float+0x364>
 8006cde:	f04f 0b00 	mov.w	fp, #0
 8006ce2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ce6:	f104 021a 	add.w	r2, r4, #26
 8006cea:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006cec:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cee:	eba3 0309 	sub.w	r3, r3, r9
 8006cf2:	455b      	cmp	r3, fp
 8006cf4:	dc31      	bgt.n	8006d5a <_printf_float+0x372>
 8006cf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006cf8:	459a      	cmp	sl, r3
 8006cfa:	dc3a      	bgt.n	8006d72 <_printf_float+0x38a>
 8006cfc:	6823      	ldr	r3, [r4, #0]
 8006cfe:	07da      	lsls	r2, r3, #31
 8006d00:	d437      	bmi.n	8006d72 <_printf_float+0x38a>
 8006d02:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d04:	ebaa 0903 	sub.w	r9, sl, r3
 8006d08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d0a:	ebaa 0303 	sub.w	r3, sl, r3
 8006d0e:	4599      	cmp	r9, r3
 8006d10:	bfa8      	it	ge
 8006d12:	4699      	movge	r9, r3
 8006d14:	f1b9 0f00 	cmp.w	r9, #0
 8006d18:	dc33      	bgt.n	8006d82 <_printf_float+0x39a>
 8006d1a:	f04f 0800 	mov.w	r8, #0
 8006d1e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006d22:	f104 0b1a 	add.w	fp, r4, #26
 8006d26:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006d28:	ebaa 0303 	sub.w	r3, sl, r3
 8006d2c:	eba3 0309 	sub.w	r3, r3, r9
 8006d30:	4543      	cmp	r3, r8
 8006d32:	f77f af7a 	ble.w	8006c2a <_printf_float+0x242>
 8006d36:	2301      	movs	r3, #1
 8006d38:	465a      	mov	r2, fp
 8006d3a:	4631      	mov	r1, r6
 8006d3c:	4628      	mov	r0, r5
 8006d3e:	47b8      	blx	r7
 8006d40:	3001      	adds	r0, #1
 8006d42:	f43f aeac 	beq.w	8006a9e <_printf_float+0xb6>
 8006d46:	f108 0801 	add.w	r8, r8, #1
 8006d4a:	e7ec      	b.n	8006d26 <_printf_float+0x33e>
 8006d4c:	4642      	mov	r2, r8
 8006d4e:	4631      	mov	r1, r6
 8006d50:	4628      	mov	r0, r5
 8006d52:	47b8      	blx	r7
 8006d54:	3001      	adds	r0, #1
 8006d56:	d1c2      	bne.n	8006cde <_printf_float+0x2f6>
 8006d58:	e6a1      	b.n	8006a9e <_printf_float+0xb6>
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	4631      	mov	r1, r6
 8006d5e:	4628      	mov	r0, r5
 8006d60:	920a      	str	r2, [sp, #40]	@ 0x28
 8006d62:	47b8      	blx	r7
 8006d64:	3001      	adds	r0, #1
 8006d66:	f43f ae9a 	beq.w	8006a9e <_printf_float+0xb6>
 8006d6a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d6c:	f10b 0b01 	add.w	fp, fp, #1
 8006d70:	e7bb      	b.n	8006cea <_printf_float+0x302>
 8006d72:	4631      	mov	r1, r6
 8006d74:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006d78:	4628      	mov	r0, r5
 8006d7a:	47b8      	blx	r7
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d1c0      	bne.n	8006d02 <_printf_float+0x31a>
 8006d80:	e68d      	b.n	8006a9e <_printf_float+0xb6>
 8006d82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006d84:	464b      	mov	r3, r9
 8006d86:	4631      	mov	r1, r6
 8006d88:	4628      	mov	r0, r5
 8006d8a:	4442      	add	r2, r8
 8006d8c:	47b8      	blx	r7
 8006d8e:	3001      	adds	r0, #1
 8006d90:	d1c3      	bne.n	8006d1a <_printf_float+0x332>
 8006d92:	e684      	b.n	8006a9e <_printf_float+0xb6>
 8006d94:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8006d98:	f1ba 0f01 	cmp.w	sl, #1
 8006d9c:	dc01      	bgt.n	8006da2 <_printf_float+0x3ba>
 8006d9e:	07db      	lsls	r3, r3, #31
 8006da0:	d536      	bpl.n	8006e10 <_printf_float+0x428>
 8006da2:	2301      	movs	r3, #1
 8006da4:	4642      	mov	r2, r8
 8006da6:	4631      	mov	r1, r6
 8006da8:	4628      	mov	r0, r5
 8006daa:	47b8      	blx	r7
 8006dac:	3001      	adds	r0, #1
 8006dae:	f43f ae76 	beq.w	8006a9e <_printf_float+0xb6>
 8006db2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8006db6:	4631      	mov	r1, r6
 8006db8:	4628      	mov	r0, r5
 8006dba:	47b8      	blx	r7
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	f43f ae6e 	beq.w	8006a9e <_printf_float+0xb6>
 8006dc2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	2300      	movs	r3, #0
 8006dca:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006dce:	f7f9 fe5b 	bl	8000a88 <__aeabi_dcmpeq>
 8006dd2:	b9c0      	cbnz	r0, 8006e06 <_printf_float+0x41e>
 8006dd4:	4653      	mov	r3, sl
 8006dd6:	f108 0201 	add.w	r2, r8, #1
 8006dda:	4631      	mov	r1, r6
 8006ddc:	4628      	mov	r0, r5
 8006dde:	47b8      	blx	r7
 8006de0:	3001      	adds	r0, #1
 8006de2:	d10c      	bne.n	8006dfe <_printf_float+0x416>
 8006de4:	e65b      	b.n	8006a9e <_printf_float+0xb6>
 8006de6:	2301      	movs	r3, #1
 8006de8:	465a      	mov	r2, fp
 8006dea:	4631      	mov	r1, r6
 8006dec:	4628      	mov	r0, r5
 8006dee:	47b8      	blx	r7
 8006df0:	3001      	adds	r0, #1
 8006df2:	f43f ae54 	beq.w	8006a9e <_printf_float+0xb6>
 8006df6:	f108 0801 	add.w	r8, r8, #1
 8006dfa:	45d0      	cmp	r8, sl
 8006dfc:	dbf3      	blt.n	8006de6 <_printf_float+0x3fe>
 8006dfe:	464b      	mov	r3, r9
 8006e00:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006e04:	e6e0      	b.n	8006bc8 <_printf_float+0x1e0>
 8006e06:	f04f 0800 	mov.w	r8, #0
 8006e0a:	f104 0b1a 	add.w	fp, r4, #26
 8006e0e:	e7f4      	b.n	8006dfa <_printf_float+0x412>
 8006e10:	2301      	movs	r3, #1
 8006e12:	4642      	mov	r2, r8
 8006e14:	e7e1      	b.n	8006dda <_printf_float+0x3f2>
 8006e16:	2301      	movs	r3, #1
 8006e18:	464a      	mov	r2, r9
 8006e1a:	4631      	mov	r1, r6
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	47b8      	blx	r7
 8006e20:	3001      	adds	r0, #1
 8006e22:	f43f ae3c 	beq.w	8006a9e <_printf_float+0xb6>
 8006e26:	f108 0801 	add.w	r8, r8, #1
 8006e2a:	68e3      	ldr	r3, [r4, #12]
 8006e2c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8006e2e:	1a5b      	subs	r3, r3, r1
 8006e30:	4543      	cmp	r3, r8
 8006e32:	dcf0      	bgt.n	8006e16 <_printf_float+0x42e>
 8006e34:	e6fd      	b.n	8006c32 <_printf_float+0x24a>
 8006e36:	f04f 0800 	mov.w	r8, #0
 8006e3a:	f104 0919 	add.w	r9, r4, #25
 8006e3e:	e7f4      	b.n	8006e2a <_printf_float+0x442>

08006e40 <_printf_common>:
 8006e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e44:	4616      	mov	r6, r2
 8006e46:	4698      	mov	r8, r3
 8006e48:	688a      	ldr	r2, [r1, #8]
 8006e4a:	690b      	ldr	r3, [r1, #16]
 8006e4c:	4607      	mov	r7, r0
 8006e4e:	4293      	cmp	r3, r2
 8006e50:	bfb8      	it	lt
 8006e52:	4613      	movlt	r3, r2
 8006e54:	6033      	str	r3, [r6, #0]
 8006e56:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e5a:	460c      	mov	r4, r1
 8006e5c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e60:	b10a      	cbz	r2, 8006e66 <_printf_common+0x26>
 8006e62:	3301      	adds	r3, #1
 8006e64:	6033      	str	r3, [r6, #0]
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	0699      	lsls	r1, r3, #26
 8006e6a:	bf42      	ittt	mi
 8006e6c:	6833      	ldrmi	r3, [r6, #0]
 8006e6e:	3302      	addmi	r3, #2
 8006e70:	6033      	strmi	r3, [r6, #0]
 8006e72:	6825      	ldr	r5, [r4, #0]
 8006e74:	f015 0506 	ands.w	r5, r5, #6
 8006e78:	d106      	bne.n	8006e88 <_printf_common+0x48>
 8006e7a:	f104 0a19 	add.w	sl, r4, #25
 8006e7e:	68e3      	ldr	r3, [r4, #12]
 8006e80:	6832      	ldr	r2, [r6, #0]
 8006e82:	1a9b      	subs	r3, r3, r2
 8006e84:	42ab      	cmp	r3, r5
 8006e86:	dc2b      	bgt.n	8006ee0 <_printf_common+0xa0>
 8006e88:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006e8c:	6822      	ldr	r2, [r4, #0]
 8006e8e:	3b00      	subs	r3, #0
 8006e90:	bf18      	it	ne
 8006e92:	2301      	movne	r3, #1
 8006e94:	0692      	lsls	r2, r2, #26
 8006e96:	d430      	bmi.n	8006efa <_printf_common+0xba>
 8006e98:	4641      	mov	r1, r8
 8006e9a:	4638      	mov	r0, r7
 8006e9c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ea0:	47c8      	blx	r9
 8006ea2:	3001      	adds	r0, #1
 8006ea4:	d023      	beq.n	8006eee <_printf_common+0xae>
 8006ea6:	6823      	ldr	r3, [r4, #0]
 8006ea8:	6922      	ldr	r2, [r4, #16]
 8006eaa:	f003 0306 	and.w	r3, r3, #6
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	bf14      	ite	ne
 8006eb2:	2500      	movne	r5, #0
 8006eb4:	6833      	ldreq	r3, [r6, #0]
 8006eb6:	f04f 0600 	mov.w	r6, #0
 8006eba:	bf08      	it	eq
 8006ebc:	68e5      	ldreq	r5, [r4, #12]
 8006ebe:	f104 041a 	add.w	r4, r4, #26
 8006ec2:	bf08      	it	eq
 8006ec4:	1aed      	subeq	r5, r5, r3
 8006ec6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8006eca:	bf08      	it	eq
 8006ecc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	bfc4      	itt	gt
 8006ed4:	1a9b      	subgt	r3, r3, r2
 8006ed6:	18ed      	addgt	r5, r5, r3
 8006ed8:	42b5      	cmp	r5, r6
 8006eda:	d11a      	bne.n	8006f12 <_printf_common+0xd2>
 8006edc:	2000      	movs	r0, #0
 8006ede:	e008      	b.n	8006ef2 <_printf_common+0xb2>
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	4652      	mov	r2, sl
 8006ee4:	4641      	mov	r1, r8
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	47c8      	blx	r9
 8006eea:	3001      	adds	r0, #1
 8006eec:	d103      	bne.n	8006ef6 <_printf_common+0xb6>
 8006eee:	f04f 30ff 	mov.w	r0, #4294967295
 8006ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ef6:	3501      	adds	r5, #1
 8006ef8:	e7c1      	b.n	8006e7e <_printf_common+0x3e>
 8006efa:	2030      	movs	r0, #48	@ 0x30
 8006efc:	18e1      	adds	r1, r4, r3
 8006efe:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f08:	4422      	add	r2, r4
 8006f0a:	3302      	adds	r3, #2
 8006f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f10:	e7c2      	b.n	8006e98 <_printf_common+0x58>
 8006f12:	2301      	movs	r3, #1
 8006f14:	4622      	mov	r2, r4
 8006f16:	4641      	mov	r1, r8
 8006f18:	4638      	mov	r0, r7
 8006f1a:	47c8      	blx	r9
 8006f1c:	3001      	adds	r0, #1
 8006f1e:	d0e6      	beq.n	8006eee <_printf_common+0xae>
 8006f20:	3601      	adds	r6, #1
 8006f22:	e7d9      	b.n	8006ed8 <_printf_common+0x98>

08006f24 <_printf_i>:
 8006f24:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f28:	7e0f      	ldrb	r7, [r1, #24]
 8006f2a:	4691      	mov	r9, r2
 8006f2c:	2f78      	cmp	r7, #120	@ 0x78
 8006f2e:	4680      	mov	r8, r0
 8006f30:	460c      	mov	r4, r1
 8006f32:	469a      	mov	sl, r3
 8006f34:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f36:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f3a:	d807      	bhi.n	8006f4c <_printf_i+0x28>
 8006f3c:	2f62      	cmp	r7, #98	@ 0x62
 8006f3e:	d80a      	bhi.n	8006f56 <_printf_i+0x32>
 8006f40:	2f00      	cmp	r7, #0
 8006f42:	f000 80d3 	beq.w	80070ec <_printf_i+0x1c8>
 8006f46:	2f58      	cmp	r7, #88	@ 0x58
 8006f48:	f000 80ba 	beq.w	80070c0 <_printf_i+0x19c>
 8006f4c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f50:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f54:	e03a      	b.n	8006fcc <_printf_i+0xa8>
 8006f56:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f5a:	2b15      	cmp	r3, #21
 8006f5c:	d8f6      	bhi.n	8006f4c <_printf_i+0x28>
 8006f5e:	a101      	add	r1, pc, #4	@ (adr r1, 8006f64 <_printf_i+0x40>)
 8006f60:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f64:	08006fbd 	.word	0x08006fbd
 8006f68:	08006fd1 	.word	0x08006fd1
 8006f6c:	08006f4d 	.word	0x08006f4d
 8006f70:	08006f4d 	.word	0x08006f4d
 8006f74:	08006f4d 	.word	0x08006f4d
 8006f78:	08006f4d 	.word	0x08006f4d
 8006f7c:	08006fd1 	.word	0x08006fd1
 8006f80:	08006f4d 	.word	0x08006f4d
 8006f84:	08006f4d 	.word	0x08006f4d
 8006f88:	08006f4d 	.word	0x08006f4d
 8006f8c:	08006f4d 	.word	0x08006f4d
 8006f90:	080070d3 	.word	0x080070d3
 8006f94:	08006ffb 	.word	0x08006ffb
 8006f98:	0800708d 	.word	0x0800708d
 8006f9c:	08006f4d 	.word	0x08006f4d
 8006fa0:	08006f4d 	.word	0x08006f4d
 8006fa4:	080070f5 	.word	0x080070f5
 8006fa8:	08006f4d 	.word	0x08006f4d
 8006fac:	08006ffb 	.word	0x08006ffb
 8006fb0:	08006f4d 	.word	0x08006f4d
 8006fb4:	08006f4d 	.word	0x08006f4d
 8006fb8:	08007095 	.word	0x08007095
 8006fbc:	6833      	ldr	r3, [r6, #0]
 8006fbe:	1d1a      	adds	r2, r3, #4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	6032      	str	r2, [r6, #0]
 8006fc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fc8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fcc:	2301      	movs	r3, #1
 8006fce:	e09e      	b.n	800710e <_printf_i+0x1ea>
 8006fd0:	6833      	ldr	r3, [r6, #0]
 8006fd2:	6820      	ldr	r0, [r4, #0]
 8006fd4:	1d19      	adds	r1, r3, #4
 8006fd6:	6031      	str	r1, [r6, #0]
 8006fd8:	0606      	lsls	r6, r0, #24
 8006fda:	d501      	bpl.n	8006fe0 <_printf_i+0xbc>
 8006fdc:	681d      	ldr	r5, [r3, #0]
 8006fde:	e003      	b.n	8006fe8 <_printf_i+0xc4>
 8006fe0:	0645      	lsls	r5, r0, #25
 8006fe2:	d5fb      	bpl.n	8006fdc <_printf_i+0xb8>
 8006fe4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006fe8:	2d00      	cmp	r5, #0
 8006fea:	da03      	bge.n	8006ff4 <_printf_i+0xd0>
 8006fec:	232d      	movs	r3, #45	@ 0x2d
 8006fee:	426d      	negs	r5, r5
 8006ff0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ff4:	230a      	movs	r3, #10
 8006ff6:	4859      	ldr	r0, [pc, #356]	@ (800715c <_printf_i+0x238>)
 8006ff8:	e011      	b.n	800701e <_printf_i+0xfa>
 8006ffa:	6821      	ldr	r1, [r4, #0]
 8006ffc:	6833      	ldr	r3, [r6, #0]
 8006ffe:	0608      	lsls	r0, r1, #24
 8007000:	f853 5b04 	ldr.w	r5, [r3], #4
 8007004:	d402      	bmi.n	800700c <_printf_i+0xe8>
 8007006:	0649      	lsls	r1, r1, #25
 8007008:	bf48      	it	mi
 800700a:	b2ad      	uxthmi	r5, r5
 800700c:	2f6f      	cmp	r7, #111	@ 0x6f
 800700e:	6033      	str	r3, [r6, #0]
 8007010:	bf14      	ite	ne
 8007012:	230a      	movne	r3, #10
 8007014:	2308      	moveq	r3, #8
 8007016:	4851      	ldr	r0, [pc, #324]	@ (800715c <_printf_i+0x238>)
 8007018:	2100      	movs	r1, #0
 800701a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800701e:	6866      	ldr	r6, [r4, #4]
 8007020:	2e00      	cmp	r6, #0
 8007022:	bfa8      	it	ge
 8007024:	6821      	ldrge	r1, [r4, #0]
 8007026:	60a6      	str	r6, [r4, #8]
 8007028:	bfa4      	itt	ge
 800702a:	f021 0104 	bicge.w	r1, r1, #4
 800702e:	6021      	strge	r1, [r4, #0]
 8007030:	b90d      	cbnz	r5, 8007036 <_printf_i+0x112>
 8007032:	2e00      	cmp	r6, #0
 8007034:	d04b      	beq.n	80070ce <_printf_i+0x1aa>
 8007036:	4616      	mov	r6, r2
 8007038:	fbb5 f1f3 	udiv	r1, r5, r3
 800703c:	fb03 5711 	mls	r7, r3, r1, r5
 8007040:	5dc7      	ldrb	r7, [r0, r7]
 8007042:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007046:	462f      	mov	r7, r5
 8007048:	42bb      	cmp	r3, r7
 800704a:	460d      	mov	r5, r1
 800704c:	d9f4      	bls.n	8007038 <_printf_i+0x114>
 800704e:	2b08      	cmp	r3, #8
 8007050:	d10b      	bne.n	800706a <_printf_i+0x146>
 8007052:	6823      	ldr	r3, [r4, #0]
 8007054:	07df      	lsls	r7, r3, #31
 8007056:	d508      	bpl.n	800706a <_printf_i+0x146>
 8007058:	6923      	ldr	r3, [r4, #16]
 800705a:	6861      	ldr	r1, [r4, #4]
 800705c:	4299      	cmp	r1, r3
 800705e:	bfde      	ittt	le
 8007060:	2330      	movle	r3, #48	@ 0x30
 8007062:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007066:	f106 36ff 	addle.w	r6, r6, #4294967295
 800706a:	1b92      	subs	r2, r2, r6
 800706c:	6122      	str	r2, [r4, #16]
 800706e:	464b      	mov	r3, r9
 8007070:	4621      	mov	r1, r4
 8007072:	4640      	mov	r0, r8
 8007074:	f8cd a000 	str.w	sl, [sp]
 8007078:	aa03      	add	r2, sp, #12
 800707a:	f7ff fee1 	bl	8006e40 <_printf_common>
 800707e:	3001      	adds	r0, #1
 8007080:	d14a      	bne.n	8007118 <_printf_i+0x1f4>
 8007082:	f04f 30ff 	mov.w	r0, #4294967295
 8007086:	b004      	add	sp, #16
 8007088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800708c:	6823      	ldr	r3, [r4, #0]
 800708e:	f043 0320 	orr.w	r3, r3, #32
 8007092:	6023      	str	r3, [r4, #0]
 8007094:	2778      	movs	r7, #120	@ 0x78
 8007096:	4832      	ldr	r0, [pc, #200]	@ (8007160 <_printf_i+0x23c>)
 8007098:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800709c:	6823      	ldr	r3, [r4, #0]
 800709e:	6831      	ldr	r1, [r6, #0]
 80070a0:	061f      	lsls	r7, r3, #24
 80070a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80070a6:	d402      	bmi.n	80070ae <_printf_i+0x18a>
 80070a8:	065f      	lsls	r7, r3, #25
 80070aa:	bf48      	it	mi
 80070ac:	b2ad      	uxthmi	r5, r5
 80070ae:	6031      	str	r1, [r6, #0]
 80070b0:	07d9      	lsls	r1, r3, #31
 80070b2:	bf44      	itt	mi
 80070b4:	f043 0320 	orrmi.w	r3, r3, #32
 80070b8:	6023      	strmi	r3, [r4, #0]
 80070ba:	b11d      	cbz	r5, 80070c4 <_printf_i+0x1a0>
 80070bc:	2310      	movs	r3, #16
 80070be:	e7ab      	b.n	8007018 <_printf_i+0xf4>
 80070c0:	4826      	ldr	r0, [pc, #152]	@ (800715c <_printf_i+0x238>)
 80070c2:	e7e9      	b.n	8007098 <_printf_i+0x174>
 80070c4:	6823      	ldr	r3, [r4, #0]
 80070c6:	f023 0320 	bic.w	r3, r3, #32
 80070ca:	6023      	str	r3, [r4, #0]
 80070cc:	e7f6      	b.n	80070bc <_printf_i+0x198>
 80070ce:	4616      	mov	r6, r2
 80070d0:	e7bd      	b.n	800704e <_printf_i+0x12a>
 80070d2:	6833      	ldr	r3, [r6, #0]
 80070d4:	6825      	ldr	r5, [r4, #0]
 80070d6:	1d18      	adds	r0, r3, #4
 80070d8:	6961      	ldr	r1, [r4, #20]
 80070da:	6030      	str	r0, [r6, #0]
 80070dc:	062e      	lsls	r6, r5, #24
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	d501      	bpl.n	80070e6 <_printf_i+0x1c2>
 80070e2:	6019      	str	r1, [r3, #0]
 80070e4:	e002      	b.n	80070ec <_printf_i+0x1c8>
 80070e6:	0668      	lsls	r0, r5, #25
 80070e8:	d5fb      	bpl.n	80070e2 <_printf_i+0x1be>
 80070ea:	8019      	strh	r1, [r3, #0]
 80070ec:	2300      	movs	r3, #0
 80070ee:	4616      	mov	r6, r2
 80070f0:	6123      	str	r3, [r4, #16]
 80070f2:	e7bc      	b.n	800706e <_printf_i+0x14a>
 80070f4:	6833      	ldr	r3, [r6, #0]
 80070f6:	2100      	movs	r1, #0
 80070f8:	1d1a      	adds	r2, r3, #4
 80070fa:	6032      	str	r2, [r6, #0]
 80070fc:	681e      	ldr	r6, [r3, #0]
 80070fe:	6862      	ldr	r2, [r4, #4]
 8007100:	4630      	mov	r0, r6
 8007102:	f000 fbe4 	bl	80078ce <memchr>
 8007106:	b108      	cbz	r0, 800710c <_printf_i+0x1e8>
 8007108:	1b80      	subs	r0, r0, r6
 800710a:	6060      	str	r0, [r4, #4]
 800710c:	6863      	ldr	r3, [r4, #4]
 800710e:	6123      	str	r3, [r4, #16]
 8007110:	2300      	movs	r3, #0
 8007112:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007116:	e7aa      	b.n	800706e <_printf_i+0x14a>
 8007118:	4632      	mov	r2, r6
 800711a:	4649      	mov	r1, r9
 800711c:	4640      	mov	r0, r8
 800711e:	6923      	ldr	r3, [r4, #16]
 8007120:	47d0      	blx	sl
 8007122:	3001      	adds	r0, #1
 8007124:	d0ad      	beq.n	8007082 <_printf_i+0x15e>
 8007126:	6823      	ldr	r3, [r4, #0]
 8007128:	079b      	lsls	r3, r3, #30
 800712a:	d413      	bmi.n	8007154 <_printf_i+0x230>
 800712c:	68e0      	ldr	r0, [r4, #12]
 800712e:	9b03      	ldr	r3, [sp, #12]
 8007130:	4298      	cmp	r0, r3
 8007132:	bfb8      	it	lt
 8007134:	4618      	movlt	r0, r3
 8007136:	e7a6      	b.n	8007086 <_printf_i+0x162>
 8007138:	2301      	movs	r3, #1
 800713a:	4632      	mov	r2, r6
 800713c:	4649      	mov	r1, r9
 800713e:	4640      	mov	r0, r8
 8007140:	47d0      	blx	sl
 8007142:	3001      	adds	r0, #1
 8007144:	d09d      	beq.n	8007082 <_printf_i+0x15e>
 8007146:	3501      	adds	r5, #1
 8007148:	68e3      	ldr	r3, [r4, #12]
 800714a:	9903      	ldr	r1, [sp, #12]
 800714c:	1a5b      	subs	r3, r3, r1
 800714e:	42ab      	cmp	r3, r5
 8007150:	dcf2      	bgt.n	8007138 <_printf_i+0x214>
 8007152:	e7eb      	b.n	800712c <_printf_i+0x208>
 8007154:	2500      	movs	r5, #0
 8007156:	f104 0619 	add.w	r6, r4, #25
 800715a:	e7f5      	b.n	8007148 <_printf_i+0x224>
 800715c:	0800bb34 	.word	0x0800bb34
 8007160:	0800bb45 	.word	0x0800bb45

08007164 <_scanf_float>:
 8007164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007168:	b087      	sub	sp, #28
 800716a:	9303      	str	r3, [sp, #12]
 800716c:	688b      	ldr	r3, [r1, #8]
 800716e:	4617      	mov	r7, r2
 8007170:	1e5a      	subs	r2, r3, #1
 8007172:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007176:	bf82      	ittt	hi
 8007178:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800717c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007180:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007184:	460a      	mov	r2, r1
 8007186:	f04f 0500 	mov.w	r5, #0
 800718a:	bf88      	it	hi
 800718c:	608b      	strhi	r3, [r1, #8]
 800718e:	680b      	ldr	r3, [r1, #0]
 8007190:	4680      	mov	r8, r0
 8007192:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007196:	f842 3b1c 	str.w	r3, [r2], #28
 800719a:	460c      	mov	r4, r1
 800719c:	bf98      	it	ls
 800719e:	f04f 0b00 	movls.w	fp, #0
 80071a2:	4616      	mov	r6, r2
 80071a4:	46aa      	mov	sl, r5
 80071a6:	46a9      	mov	r9, r5
 80071a8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80071ac:	9201      	str	r2, [sp, #4]
 80071ae:	9502      	str	r5, [sp, #8]
 80071b0:	68a2      	ldr	r2, [r4, #8]
 80071b2:	b152      	cbz	r2, 80071ca <_scanf_float+0x66>
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80071ba:	d865      	bhi.n	8007288 <_scanf_float+0x124>
 80071bc:	2b40      	cmp	r3, #64	@ 0x40
 80071be:	d83d      	bhi.n	800723c <_scanf_float+0xd8>
 80071c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80071c4:	b2c8      	uxtb	r0, r1
 80071c6:	280e      	cmp	r0, #14
 80071c8:	d93b      	bls.n	8007242 <_scanf_float+0xde>
 80071ca:	f1b9 0f00 	cmp.w	r9, #0
 80071ce:	d003      	beq.n	80071d8 <_scanf_float+0x74>
 80071d0:	6823      	ldr	r3, [r4, #0]
 80071d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071dc:	f1ba 0f01 	cmp.w	sl, #1
 80071e0:	f200 8118 	bhi.w	8007414 <_scanf_float+0x2b0>
 80071e4:	9b01      	ldr	r3, [sp, #4]
 80071e6:	429e      	cmp	r6, r3
 80071e8:	f200 8109 	bhi.w	80073fe <_scanf_float+0x29a>
 80071ec:	2001      	movs	r0, #1
 80071ee:	b007      	add	sp, #28
 80071f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071f4:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80071f8:	2a0d      	cmp	r2, #13
 80071fa:	d8e6      	bhi.n	80071ca <_scanf_float+0x66>
 80071fc:	a101      	add	r1, pc, #4	@ (adr r1, 8007204 <_scanf_float+0xa0>)
 80071fe:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007202:	bf00      	nop
 8007204:	0800734b 	.word	0x0800734b
 8007208:	080071cb 	.word	0x080071cb
 800720c:	080071cb 	.word	0x080071cb
 8007210:	080071cb 	.word	0x080071cb
 8007214:	080073ab 	.word	0x080073ab
 8007218:	08007383 	.word	0x08007383
 800721c:	080071cb 	.word	0x080071cb
 8007220:	080071cb 	.word	0x080071cb
 8007224:	08007359 	.word	0x08007359
 8007228:	080071cb 	.word	0x080071cb
 800722c:	080071cb 	.word	0x080071cb
 8007230:	080071cb 	.word	0x080071cb
 8007234:	080071cb 	.word	0x080071cb
 8007238:	08007311 	.word	0x08007311
 800723c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007240:	e7da      	b.n	80071f8 <_scanf_float+0x94>
 8007242:	290e      	cmp	r1, #14
 8007244:	d8c1      	bhi.n	80071ca <_scanf_float+0x66>
 8007246:	a001      	add	r0, pc, #4	@ (adr r0, 800724c <_scanf_float+0xe8>)
 8007248:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800724c:	08007301 	.word	0x08007301
 8007250:	080071cb 	.word	0x080071cb
 8007254:	08007301 	.word	0x08007301
 8007258:	08007397 	.word	0x08007397
 800725c:	080071cb 	.word	0x080071cb
 8007260:	080072a9 	.word	0x080072a9
 8007264:	080072e7 	.word	0x080072e7
 8007268:	080072e7 	.word	0x080072e7
 800726c:	080072e7 	.word	0x080072e7
 8007270:	080072e7 	.word	0x080072e7
 8007274:	080072e7 	.word	0x080072e7
 8007278:	080072e7 	.word	0x080072e7
 800727c:	080072e7 	.word	0x080072e7
 8007280:	080072e7 	.word	0x080072e7
 8007284:	080072e7 	.word	0x080072e7
 8007288:	2b6e      	cmp	r3, #110	@ 0x6e
 800728a:	d809      	bhi.n	80072a0 <_scanf_float+0x13c>
 800728c:	2b60      	cmp	r3, #96	@ 0x60
 800728e:	d8b1      	bhi.n	80071f4 <_scanf_float+0x90>
 8007290:	2b54      	cmp	r3, #84	@ 0x54
 8007292:	d07b      	beq.n	800738c <_scanf_float+0x228>
 8007294:	2b59      	cmp	r3, #89	@ 0x59
 8007296:	d198      	bne.n	80071ca <_scanf_float+0x66>
 8007298:	2d07      	cmp	r5, #7
 800729a:	d196      	bne.n	80071ca <_scanf_float+0x66>
 800729c:	2508      	movs	r5, #8
 800729e:	e02c      	b.n	80072fa <_scanf_float+0x196>
 80072a0:	2b74      	cmp	r3, #116	@ 0x74
 80072a2:	d073      	beq.n	800738c <_scanf_float+0x228>
 80072a4:	2b79      	cmp	r3, #121	@ 0x79
 80072a6:	e7f6      	b.n	8007296 <_scanf_float+0x132>
 80072a8:	6821      	ldr	r1, [r4, #0]
 80072aa:	05c8      	lsls	r0, r1, #23
 80072ac:	d51b      	bpl.n	80072e6 <_scanf_float+0x182>
 80072ae:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80072b2:	6021      	str	r1, [r4, #0]
 80072b4:	f109 0901 	add.w	r9, r9, #1
 80072b8:	f1bb 0f00 	cmp.w	fp, #0
 80072bc:	d003      	beq.n	80072c6 <_scanf_float+0x162>
 80072be:	3201      	adds	r2, #1
 80072c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80072c4:	60a2      	str	r2, [r4, #8]
 80072c6:	68a3      	ldr	r3, [r4, #8]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	60a3      	str	r3, [r4, #8]
 80072cc:	6923      	ldr	r3, [r4, #16]
 80072ce:	3301      	adds	r3, #1
 80072d0:	6123      	str	r3, [r4, #16]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	3b01      	subs	r3, #1
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	607b      	str	r3, [r7, #4]
 80072da:	f340 8087 	ble.w	80073ec <_scanf_float+0x288>
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	3301      	adds	r3, #1
 80072e2:	603b      	str	r3, [r7, #0]
 80072e4:	e764      	b.n	80071b0 <_scanf_float+0x4c>
 80072e6:	eb1a 0105 	adds.w	r1, sl, r5
 80072ea:	f47f af6e 	bne.w	80071ca <_scanf_float+0x66>
 80072ee:	460d      	mov	r5, r1
 80072f0:	468a      	mov	sl, r1
 80072f2:	6822      	ldr	r2, [r4, #0]
 80072f4:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80072f8:	6022      	str	r2, [r4, #0]
 80072fa:	f806 3b01 	strb.w	r3, [r6], #1
 80072fe:	e7e2      	b.n	80072c6 <_scanf_float+0x162>
 8007300:	6822      	ldr	r2, [r4, #0]
 8007302:	0610      	lsls	r0, r2, #24
 8007304:	f57f af61 	bpl.w	80071ca <_scanf_float+0x66>
 8007308:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800730c:	6022      	str	r2, [r4, #0]
 800730e:	e7f4      	b.n	80072fa <_scanf_float+0x196>
 8007310:	f1ba 0f00 	cmp.w	sl, #0
 8007314:	d10e      	bne.n	8007334 <_scanf_float+0x1d0>
 8007316:	f1b9 0f00 	cmp.w	r9, #0
 800731a:	d10e      	bne.n	800733a <_scanf_float+0x1d6>
 800731c:	6822      	ldr	r2, [r4, #0]
 800731e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007322:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007326:	d108      	bne.n	800733a <_scanf_float+0x1d6>
 8007328:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800732c:	f04f 0a01 	mov.w	sl, #1
 8007330:	6022      	str	r2, [r4, #0]
 8007332:	e7e2      	b.n	80072fa <_scanf_float+0x196>
 8007334:	f1ba 0f02 	cmp.w	sl, #2
 8007338:	d055      	beq.n	80073e6 <_scanf_float+0x282>
 800733a:	2d01      	cmp	r5, #1
 800733c:	d002      	beq.n	8007344 <_scanf_float+0x1e0>
 800733e:	2d04      	cmp	r5, #4
 8007340:	f47f af43 	bne.w	80071ca <_scanf_float+0x66>
 8007344:	3501      	adds	r5, #1
 8007346:	b2ed      	uxtb	r5, r5
 8007348:	e7d7      	b.n	80072fa <_scanf_float+0x196>
 800734a:	f1ba 0f01 	cmp.w	sl, #1
 800734e:	f47f af3c 	bne.w	80071ca <_scanf_float+0x66>
 8007352:	f04f 0a02 	mov.w	sl, #2
 8007356:	e7d0      	b.n	80072fa <_scanf_float+0x196>
 8007358:	b97d      	cbnz	r5, 800737a <_scanf_float+0x216>
 800735a:	f1b9 0f00 	cmp.w	r9, #0
 800735e:	f47f af37 	bne.w	80071d0 <_scanf_float+0x6c>
 8007362:	6822      	ldr	r2, [r4, #0]
 8007364:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007368:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800736c:	f040 8103 	bne.w	8007576 <_scanf_float+0x412>
 8007370:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007374:	2501      	movs	r5, #1
 8007376:	6022      	str	r2, [r4, #0]
 8007378:	e7bf      	b.n	80072fa <_scanf_float+0x196>
 800737a:	2d03      	cmp	r5, #3
 800737c:	d0e2      	beq.n	8007344 <_scanf_float+0x1e0>
 800737e:	2d05      	cmp	r5, #5
 8007380:	e7de      	b.n	8007340 <_scanf_float+0x1dc>
 8007382:	2d02      	cmp	r5, #2
 8007384:	f47f af21 	bne.w	80071ca <_scanf_float+0x66>
 8007388:	2503      	movs	r5, #3
 800738a:	e7b6      	b.n	80072fa <_scanf_float+0x196>
 800738c:	2d06      	cmp	r5, #6
 800738e:	f47f af1c 	bne.w	80071ca <_scanf_float+0x66>
 8007392:	2507      	movs	r5, #7
 8007394:	e7b1      	b.n	80072fa <_scanf_float+0x196>
 8007396:	6822      	ldr	r2, [r4, #0]
 8007398:	0591      	lsls	r1, r2, #22
 800739a:	f57f af16 	bpl.w	80071ca <_scanf_float+0x66>
 800739e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80073a2:	6022      	str	r2, [r4, #0]
 80073a4:	f8cd 9008 	str.w	r9, [sp, #8]
 80073a8:	e7a7      	b.n	80072fa <_scanf_float+0x196>
 80073aa:	6822      	ldr	r2, [r4, #0]
 80073ac:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80073b0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80073b4:	d006      	beq.n	80073c4 <_scanf_float+0x260>
 80073b6:	0550      	lsls	r0, r2, #21
 80073b8:	f57f af07 	bpl.w	80071ca <_scanf_float+0x66>
 80073bc:	f1b9 0f00 	cmp.w	r9, #0
 80073c0:	f000 80d9 	beq.w	8007576 <_scanf_float+0x412>
 80073c4:	0591      	lsls	r1, r2, #22
 80073c6:	bf58      	it	pl
 80073c8:	9902      	ldrpl	r1, [sp, #8]
 80073ca:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80073ce:	bf58      	it	pl
 80073d0:	eba9 0101 	subpl.w	r1, r9, r1
 80073d4:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80073d8:	f04f 0900 	mov.w	r9, #0
 80073dc:	bf58      	it	pl
 80073de:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80073e2:	6022      	str	r2, [r4, #0]
 80073e4:	e789      	b.n	80072fa <_scanf_float+0x196>
 80073e6:	f04f 0a03 	mov.w	sl, #3
 80073ea:	e786      	b.n	80072fa <_scanf_float+0x196>
 80073ec:	4639      	mov	r1, r7
 80073ee:	4640      	mov	r0, r8
 80073f0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80073f4:	4798      	blx	r3
 80073f6:	2800      	cmp	r0, #0
 80073f8:	f43f aeda 	beq.w	80071b0 <_scanf_float+0x4c>
 80073fc:	e6e5      	b.n	80071ca <_scanf_float+0x66>
 80073fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007402:	463a      	mov	r2, r7
 8007404:	4640      	mov	r0, r8
 8007406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800740a:	4798      	blx	r3
 800740c:	6923      	ldr	r3, [r4, #16]
 800740e:	3b01      	subs	r3, #1
 8007410:	6123      	str	r3, [r4, #16]
 8007412:	e6e7      	b.n	80071e4 <_scanf_float+0x80>
 8007414:	1e6b      	subs	r3, r5, #1
 8007416:	2b06      	cmp	r3, #6
 8007418:	d824      	bhi.n	8007464 <_scanf_float+0x300>
 800741a:	2d02      	cmp	r5, #2
 800741c:	d836      	bhi.n	800748c <_scanf_float+0x328>
 800741e:	9b01      	ldr	r3, [sp, #4]
 8007420:	429e      	cmp	r6, r3
 8007422:	f67f aee3 	bls.w	80071ec <_scanf_float+0x88>
 8007426:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800742a:	463a      	mov	r2, r7
 800742c:	4640      	mov	r0, r8
 800742e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007432:	4798      	blx	r3
 8007434:	6923      	ldr	r3, [r4, #16]
 8007436:	3b01      	subs	r3, #1
 8007438:	6123      	str	r3, [r4, #16]
 800743a:	e7f0      	b.n	800741e <_scanf_float+0x2ba>
 800743c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007440:	463a      	mov	r2, r7
 8007442:	4640      	mov	r0, r8
 8007444:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007448:	4798      	blx	r3
 800744a:	6923      	ldr	r3, [r4, #16]
 800744c:	3b01      	subs	r3, #1
 800744e:	6123      	str	r3, [r4, #16]
 8007450:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007454:	fa5f fa8a 	uxtb.w	sl, sl
 8007458:	f1ba 0f02 	cmp.w	sl, #2
 800745c:	d1ee      	bne.n	800743c <_scanf_float+0x2d8>
 800745e:	3d03      	subs	r5, #3
 8007460:	b2ed      	uxtb	r5, r5
 8007462:	1b76      	subs	r6, r6, r5
 8007464:	6823      	ldr	r3, [r4, #0]
 8007466:	05da      	lsls	r2, r3, #23
 8007468:	d530      	bpl.n	80074cc <_scanf_float+0x368>
 800746a:	055b      	lsls	r3, r3, #21
 800746c:	d511      	bpl.n	8007492 <_scanf_float+0x32e>
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	429e      	cmp	r6, r3
 8007472:	f67f aebb 	bls.w	80071ec <_scanf_float+0x88>
 8007476:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800747a:	463a      	mov	r2, r7
 800747c:	4640      	mov	r0, r8
 800747e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007482:	4798      	blx	r3
 8007484:	6923      	ldr	r3, [r4, #16]
 8007486:	3b01      	subs	r3, #1
 8007488:	6123      	str	r3, [r4, #16]
 800748a:	e7f0      	b.n	800746e <_scanf_float+0x30a>
 800748c:	46aa      	mov	sl, r5
 800748e:	46b3      	mov	fp, r6
 8007490:	e7de      	b.n	8007450 <_scanf_float+0x2ec>
 8007492:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007496:	6923      	ldr	r3, [r4, #16]
 8007498:	2965      	cmp	r1, #101	@ 0x65
 800749a:	f103 33ff 	add.w	r3, r3, #4294967295
 800749e:	f106 35ff 	add.w	r5, r6, #4294967295
 80074a2:	6123      	str	r3, [r4, #16]
 80074a4:	d00c      	beq.n	80074c0 <_scanf_float+0x35c>
 80074a6:	2945      	cmp	r1, #69	@ 0x45
 80074a8:	d00a      	beq.n	80074c0 <_scanf_float+0x35c>
 80074aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074ae:	463a      	mov	r2, r7
 80074b0:	4640      	mov	r0, r8
 80074b2:	4798      	blx	r3
 80074b4:	6923      	ldr	r3, [r4, #16]
 80074b6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80074ba:	3b01      	subs	r3, #1
 80074bc:	1eb5      	subs	r5, r6, #2
 80074be:	6123      	str	r3, [r4, #16]
 80074c0:	463a      	mov	r2, r7
 80074c2:	4640      	mov	r0, r8
 80074c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80074c8:	4798      	blx	r3
 80074ca:	462e      	mov	r6, r5
 80074cc:	6822      	ldr	r2, [r4, #0]
 80074ce:	f012 0210 	ands.w	r2, r2, #16
 80074d2:	d001      	beq.n	80074d8 <_scanf_float+0x374>
 80074d4:	2000      	movs	r0, #0
 80074d6:	e68a      	b.n	80071ee <_scanf_float+0x8a>
 80074d8:	7032      	strb	r2, [r6, #0]
 80074da:	6823      	ldr	r3, [r4, #0]
 80074dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80074e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80074e4:	d11c      	bne.n	8007520 <_scanf_float+0x3bc>
 80074e6:	9b02      	ldr	r3, [sp, #8]
 80074e8:	454b      	cmp	r3, r9
 80074ea:	eba3 0209 	sub.w	r2, r3, r9
 80074ee:	d123      	bne.n	8007538 <_scanf_float+0x3d4>
 80074f0:	2200      	movs	r2, #0
 80074f2:	4640      	mov	r0, r8
 80074f4:	9901      	ldr	r1, [sp, #4]
 80074f6:	f002 fbfb 	bl	8009cf0 <_strtod_r>
 80074fa:	9b03      	ldr	r3, [sp, #12]
 80074fc:	6825      	ldr	r5, [r4, #0]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f015 0f02 	tst.w	r5, #2
 8007504:	4606      	mov	r6, r0
 8007506:	460f      	mov	r7, r1
 8007508:	f103 0204 	add.w	r2, r3, #4
 800750c:	d01f      	beq.n	800754e <_scanf_float+0x3ea>
 800750e:	9903      	ldr	r1, [sp, #12]
 8007510:	600a      	str	r2, [r1, #0]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	e9c3 6700 	strd	r6, r7, [r3]
 8007518:	68e3      	ldr	r3, [r4, #12]
 800751a:	3301      	adds	r3, #1
 800751c:	60e3      	str	r3, [r4, #12]
 800751e:	e7d9      	b.n	80074d4 <_scanf_float+0x370>
 8007520:	9b04      	ldr	r3, [sp, #16]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d0e4      	beq.n	80074f0 <_scanf_float+0x38c>
 8007526:	9905      	ldr	r1, [sp, #20]
 8007528:	230a      	movs	r3, #10
 800752a:	4640      	mov	r0, r8
 800752c:	3101      	adds	r1, #1
 800752e:	f002 fc5f 	bl	8009df0 <_strtol_r>
 8007532:	9b04      	ldr	r3, [sp, #16]
 8007534:	9e05      	ldr	r6, [sp, #20]
 8007536:	1ac2      	subs	r2, r0, r3
 8007538:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800753c:	429e      	cmp	r6, r3
 800753e:	bf28      	it	cs
 8007540:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007544:	4630      	mov	r0, r6
 8007546:	490d      	ldr	r1, [pc, #52]	@ (800757c <_scanf_float+0x418>)
 8007548:	f000 f8de 	bl	8007708 <siprintf>
 800754c:	e7d0      	b.n	80074f0 <_scanf_float+0x38c>
 800754e:	076d      	lsls	r5, r5, #29
 8007550:	d4dd      	bmi.n	800750e <_scanf_float+0x3aa>
 8007552:	9d03      	ldr	r5, [sp, #12]
 8007554:	602a      	str	r2, [r5, #0]
 8007556:	681d      	ldr	r5, [r3, #0]
 8007558:	4602      	mov	r2, r0
 800755a:	460b      	mov	r3, r1
 800755c:	f7f9 fac6 	bl	8000aec <__aeabi_dcmpun>
 8007560:	b120      	cbz	r0, 800756c <_scanf_float+0x408>
 8007562:	4807      	ldr	r0, [pc, #28]	@ (8007580 <_scanf_float+0x41c>)
 8007564:	f000 f9d0 	bl	8007908 <nanf>
 8007568:	6028      	str	r0, [r5, #0]
 800756a:	e7d5      	b.n	8007518 <_scanf_float+0x3b4>
 800756c:	4630      	mov	r0, r6
 800756e:	4639      	mov	r1, r7
 8007570:	f7f9 fb1a 	bl	8000ba8 <__aeabi_d2f>
 8007574:	e7f8      	b.n	8007568 <_scanf_float+0x404>
 8007576:	f04f 0900 	mov.w	r9, #0
 800757a:	e62d      	b.n	80071d8 <_scanf_float+0x74>
 800757c:	0800bb56 	.word	0x0800bb56
 8007580:	0800beed 	.word	0x0800beed

08007584 <std>:
 8007584:	2300      	movs	r3, #0
 8007586:	b510      	push	{r4, lr}
 8007588:	4604      	mov	r4, r0
 800758a:	e9c0 3300 	strd	r3, r3, [r0]
 800758e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007592:	6083      	str	r3, [r0, #8]
 8007594:	8181      	strh	r1, [r0, #12]
 8007596:	6643      	str	r3, [r0, #100]	@ 0x64
 8007598:	81c2      	strh	r2, [r0, #14]
 800759a:	6183      	str	r3, [r0, #24]
 800759c:	4619      	mov	r1, r3
 800759e:	2208      	movs	r2, #8
 80075a0:	305c      	adds	r0, #92	@ 0x5c
 80075a2:	f000 f914 	bl	80077ce <memset>
 80075a6:	4b0d      	ldr	r3, [pc, #52]	@ (80075dc <std+0x58>)
 80075a8:	6224      	str	r4, [r4, #32]
 80075aa:	6263      	str	r3, [r4, #36]	@ 0x24
 80075ac:	4b0c      	ldr	r3, [pc, #48]	@ (80075e0 <std+0x5c>)
 80075ae:	62a3      	str	r3, [r4, #40]	@ 0x28
 80075b0:	4b0c      	ldr	r3, [pc, #48]	@ (80075e4 <std+0x60>)
 80075b2:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80075b4:	4b0c      	ldr	r3, [pc, #48]	@ (80075e8 <std+0x64>)
 80075b6:	6323      	str	r3, [r4, #48]	@ 0x30
 80075b8:	4b0c      	ldr	r3, [pc, #48]	@ (80075ec <std+0x68>)
 80075ba:	429c      	cmp	r4, r3
 80075bc:	d006      	beq.n	80075cc <std+0x48>
 80075be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80075c2:	4294      	cmp	r4, r2
 80075c4:	d002      	beq.n	80075cc <std+0x48>
 80075c6:	33d0      	adds	r3, #208	@ 0xd0
 80075c8:	429c      	cmp	r4, r3
 80075ca:	d105      	bne.n	80075d8 <std+0x54>
 80075cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80075d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075d4:	f000 b978 	b.w	80078c8 <__retarget_lock_init_recursive>
 80075d8:	bd10      	pop	{r4, pc}
 80075da:	bf00      	nop
 80075dc:	08007749 	.word	0x08007749
 80075e0:	0800776b 	.word	0x0800776b
 80075e4:	080077a3 	.word	0x080077a3
 80075e8:	080077c7 	.word	0x080077c7
 80075ec:	20001ff8 	.word	0x20001ff8

080075f0 <stdio_exit_handler>:
 80075f0:	4a02      	ldr	r2, [pc, #8]	@ (80075fc <stdio_exit_handler+0xc>)
 80075f2:	4903      	ldr	r1, [pc, #12]	@ (8007600 <stdio_exit_handler+0x10>)
 80075f4:	4803      	ldr	r0, [pc, #12]	@ (8007604 <stdio_exit_handler+0x14>)
 80075f6:	f000 b869 	b.w	80076cc <_fwalk_sglue>
 80075fa:	bf00      	nop
 80075fc:	20000010 	.word	0x20000010
 8007600:	0800a1a5 	.word	0x0800a1a5
 8007604:	20000020 	.word	0x20000020

08007608 <cleanup_stdio>:
 8007608:	6841      	ldr	r1, [r0, #4]
 800760a:	4b0c      	ldr	r3, [pc, #48]	@ (800763c <cleanup_stdio+0x34>)
 800760c:	b510      	push	{r4, lr}
 800760e:	4299      	cmp	r1, r3
 8007610:	4604      	mov	r4, r0
 8007612:	d001      	beq.n	8007618 <cleanup_stdio+0x10>
 8007614:	f002 fdc6 	bl	800a1a4 <_fflush_r>
 8007618:	68a1      	ldr	r1, [r4, #8]
 800761a:	4b09      	ldr	r3, [pc, #36]	@ (8007640 <cleanup_stdio+0x38>)
 800761c:	4299      	cmp	r1, r3
 800761e:	d002      	beq.n	8007626 <cleanup_stdio+0x1e>
 8007620:	4620      	mov	r0, r4
 8007622:	f002 fdbf 	bl	800a1a4 <_fflush_r>
 8007626:	68e1      	ldr	r1, [r4, #12]
 8007628:	4b06      	ldr	r3, [pc, #24]	@ (8007644 <cleanup_stdio+0x3c>)
 800762a:	4299      	cmp	r1, r3
 800762c:	d004      	beq.n	8007638 <cleanup_stdio+0x30>
 800762e:	4620      	mov	r0, r4
 8007630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007634:	f002 bdb6 	b.w	800a1a4 <_fflush_r>
 8007638:	bd10      	pop	{r4, pc}
 800763a:	bf00      	nop
 800763c:	20001ff8 	.word	0x20001ff8
 8007640:	20002060 	.word	0x20002060
 8007644:	200020c8 	.word	0x200020c8

08007648 <global_stdio_init.part.0>:
 8007648:	b510      	push	{r4, lr}
 800764a:	4b0b      	ldr	r3, [pc, #44]	@ (8007678 <global_stdio_init.part.0+0x30>)
 800764c:	4c0b      	ldr	r4, [pc, #44]	@ (800767c <global_stdio_init.part.0+0x34>)
 800764e:	4a0c      	ldr	r2, [pc, #48]	@ (8007680 <global_stdio_init.part.0+0x38>)
 8007650:	4620      	mov	r0, r4
 8007652:	601a      	str	r2, [r3, #0]
 8007654:	2104      	movs	r1, #4
 8007656:	2200      	movs	r2, #0
 8007658:	f7ff ff94 	bl	8007584 <std>
 800765c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007660:	2201      	movs	r2, #1
 8007662:	2109      	movs	r1, #9
 8007664:	f7ff ff8e 	bl	8007584 <std>
 8007668:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800766c:	2202      	movs	r2, #2
 800766e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007672:	2112      	movs	r1, #18
 8007674:	f7ff bf86 	b.w	8007584 <std>
 8007678:	20002130 	.word	0x20002130
 800767c:	20001ff8 	.word	0x20001ff8
 8007680:	080075f1 	.word	0x080075f1

08007684 <__sfp_lock_acquire>:
 8007684:	4801      	ldr	r0, [pc, #4]	@ (800768c <__sfp_lock_acquire+0x8>)
 8007686:	f000 b920 	b.w	80078ca <__retarget_lock_acquire_recursive>
 800768a:	bf00      	nop
 800768c:	20002139 	.word	0x20002139

08007690 <__sfp_lock_release>:
 8007690:	4801      	ldr	r0, [pc, #4]	@ (8007698 <__sfp_lock_release+0x8>)
 8007692:	f000 b91b 	b.w	80078cc <__retarget_lock_release_recursive>
 8007696:	bf00      	nop
 8007698:	20002139 	.word	0x20002139

0800769c <__sinit>:
 800769c:	b510      	push	{r4, lr}
 800769e:	4604      	mov	r4, r0
 80076a0:	f7ff fff0 	bl	8007684 <__sfp_lock_acquire>
 80076a4:	6a23      	ldr	r3, [r4, #32]
 80076a6:	b11b      	cbz	r3, 80076b0 <__sinit+0x14>
 80076a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076ac:	f7ff bff0 	b.w	8007690 <__sfp_lock_release>
 80076b0:	4b04      	ldr	r3, [pc, #16]	@ (80076c4 <__sinit+0x28>)
 80076b2:	6223      	str	r3, [r4, #32]
 80076b4:	4b04      	ldr	r3, [pc, #16]	@ (80076c8 <__sinit+0x2c>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1f5      	bne.n	80076a8 <__sinit+0xc>
 80076bc:	f7ff ffc4 	bl	8007648 <global_stdio_init.part.0>
 80076c0:	e7f2      	b.n	80076a8 <__sinit+0xc>
 80076c2:	bf00      	nop
 80076c4:	08007609 	.word	0x08007609
 80076c8:	20002130 	.word	0x20002130

080076cc <_fwalk_sglue>:
 80076cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80076d0:	4607      	mov	r7, r0
 80076d2:	4688      	mov	r8, r1
 80076d4:	4614      	mov	r4, r2
 80076d6:	2600      	movs	r6, #0
 80076d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80076dc:	f1b9 0901 	subs.w	r9, r9, #1
 80076e0:	d505      	bpl.n	80076ee <_fwalk_sglue+0x22>
 80076e2:	6824      	ldr	r4, [r4, #0]
 80076e4:	2c00      	cmp	r4, #0
 80076e6:	d1f7      	bne.n	80076d8 <_fwalk_sglue+0xc>
 80076e8:	4630      	mov	r0, r6
 80076ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80076ee:	89ab      	ldrh	r3, [r5, #12]
 80076f0:	2b01      	cmp	r3, #1
 80076f2:	d907      	bls.n	8007704 <_fwalk_sglue+0x38>
 80076f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80076f8:	3301      	adds	r3, #1
 80076fa:	d003      	beq.n	8007704 <_fwalk_sglue+0x38>
 80076fc:	4629      	mov	r1, r5
 80076fe:	4638      	mov	r0, r7
 8007700:	47c0      	blx	r8
 8007702:	4306      	orrs	r6, r0
 8007704:	3568      	adds	r5, #104	@ 0x68
 8007706:	e7e9      	b.n	80076dc <_fwalk_sglue+0x10>

08007708 <siprintf>:
 8007708:	b40e      	push	{r1, r2, r3}
 800770a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800770e:	b500      	push	{lr}
 8007710:	b09c      	sub	sp, #112	@ 0x70
 8007712:	ab1d      	add	r3, sp, #116	@ 0x74
 8007714:	9002      	str	r0, [sp, #8]
 8007716:	9006      	str	r0, [sp, #24]
 8007718:	9107      	str	r1, [sp, #28]
 800771a:	9104      	str	r1, [sp, #16]
 800771c:	4808      	ldr	r0, [pc, #32]	@ (8007740 <siprintf+0x38>)
 800771e:	4909      	ldr	r1, [pc, #36]	@ (8007744 <siprintf+0x3c>)
 8007720:	f853 2b04 	ldr.w	r2, [r3], #4
 8007724:	9105      	str	r1, [sp, #20]
 8007726:	6800      	ldr	r0, [r0, #0]
 8007728:	a902      	add	r1, sp, #8
 800772a:	9301      	str	r3, [sp, #4]
 800772c:	f002 fbbe 	bl	8009eac <_svfiprintf_r>
 8007730:	2200      	movs	r2, #0
 8007732:	9b02      	ldr	r3, [sp, #8]
 8007734:	701a      	strb	r2, [r3, #0]
 8007736:	b01c      	add	sp, #112	@ 0x70
 8007738:	f85d eb04 	ldr.w	lr, [sp], #4
 800773c:	b003      	add	sp, #12
 800773e:	4770      	bx	lr
 8007740:	2000001c 	.word	0x2000001c
 8007744:	ffff0208 	.word	0xffff0208

08007748 <__sread>:
 8007748:	b510      	push	{r4, lr}
 800774a:	460c      	mov	r4, r1
 800774c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007750:	f000 f86c 	bl	800782c <_read_r>
 8007754:	2800      	cmp	r0, #0
 8007756:	bfab      	itete	ge
 8007758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800775a:	89a3      	ldrhlt	r3, [r4, #12]
 800775c:	181b      	addge	r3, r3, r0
 800775e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007762:	bfac      	ite	ge
 8007764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007766:	81a3      	strhlt	r3, [r4, #12]
 8007768:	bd10      	pop	{r4, pc}

0800776a <__swrite>:
 800776a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800776e:	461f      	mov	r7, r3
 8007770:	898b      	ldrh	r3, [r1, #12]
 8007772:	4605      	mov	r5, r0
 8007774:	05db      	lsls	r3, r3, #23
 8007776:	460c      	mov	r4, r1
 8007778:	4616      	mov	r6, r2
 800777a:	d505      	bpl.n	8007788 <__swrite+0x1e>
 800777c:	2302      	movs	r3, #2
 800777e:	2200      	movs	r2, #0
 8007780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007784:	f000 f840 	bl	8007808 <_lseek_r>
 8007788:	89a3      	ldrh	r3, [r4, #12]
 800778a:	4632      	mov	r2, r6
 800778c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007790:	81a3      	strh	r3, [r4, #12]
 8007792:	4628      	mov	r0, r5
 8007794:	463b      	mov	r3, r7
 8007796:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800779a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800779e:	f000 b857 	b.w	8007850 <_write_r>

080077a2 <__sseek>:
 80077a2:	b510      	push	{r4, lr}
 80077a4:	460c      	mov	r4, r1
 80077a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077aa:	f000 f82d 	bl	8007808 <_lseek_r>
 80077ae:	1c43      	adds	r3, r0, #1
 80077b0:	89a3      	ldrh	r3, [r4, #12]
 80077b2:	bf15      	itete	ne
 80077b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80077b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077be:	81a3      	strheq	r3, [r4, #12]
 80077c0:	bf18      	it	ne
 80077c2:	81a3      	strhne	r3, [r4, #12]
 80077c4:	bd10      	pop	{r4, pc}

080077c6 <__sclose>:
 80077c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077ca:	f000 b80d 	b.w	80077e8 <_close_r>

080077ce <memset>:
 80077ce:	4603      	mov	r3, r0
 80077d0:	4402      	add	r2, r0
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d100      	bne.n	80077d8 <memset+0xa>
 80077d6:	4770      	bx	lr
 80077d8:	f803 1b01 	strb.w	r1, [r3], #1
 80077dc:	e7f9      	b.n	80077d2 <memset+0x4>
	...

080077e0 <_localeconv_r>:
 80077e0:	4800      	ldr	r0, [pc, #0]	@ (80077e4 <_localeconv_r+0x4>)
 80077e2:	4770      	bx	lr
 80077e4:	2000015c 	.word	0x2000015c

080077e8 <_close_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	2300      	movs	r3, #0
 80077ec:	4d05      	ldr	r5, [pc, #20]	@ (8007804 <_close_r+0x1c>)
 80077ee:	4604      	mov	r4, r0
 80077f0:	4608      	mov	r0, r1
 80077f2:	602b      	str	r3, [r5, #0]
 80077f4:	f7fa f8af 	bl	8001956 <_close>
 80077f8:	1c43      	adds	r3, r0, #1
 80077fa:	d102      	bne.n	8007802 <_close_r+0x1a>
 80077fc:	682b      	ldr	r3, [r5, #0]
 80077fe:	b103      	cbz	r3, 8007802 <_close_r+0x1a>
 8007800:	6023      	str	r3, [r4, #0]
 8007802:	bd38      	pop	{r3, r4, r5, pc}
 8007804:	20002134 	.word	0x20002134

08007808 <_lseek_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	4604      	mov	r4, r0
 800780c:	4608      	mov	r0, r1
 800780e:	4611      	mov	r1, r2
 8007810:	2200      	movs	r2, #0
 8007812:	4d05      	ldr	r5, [pc, #20]	@ (8007828 <_lseek_r+0x20>)
 8007814:	602a      	str	r2, [r5, #0]
 8007816:	461a      	mov	r2, r3
 8007818:	f7fa f8c1 	bl	800199e <_lseek>
 800781c:	1c43      	adds	r3, r0, #1
 800781e:	d102      	bne.n	8007826 <_lseek_r+0x1e>
 8007820:	682b      	ldr	r3, [r5, #0]
 8007822:	b103      	cbz	r3, 8007826 <_lseek_r+0x1e>
 8007824:	6023      	str	r3, [r4, #0]
 8007826:	bd38      	pop	{r3, r4, r5, pc}
 8007828:	20002134 	.word	0x20002134

0800782c <_read_r>:
 800782c:	b538      	push	{r3, r4, r5, lr}
 800782e:	4604      	mov	r4, r0
 8007830:	4608      	mov	r0, r1
 8007832:	4611      	mov	r1, r2
 8007834:	2200      	movs	r2, #0
 8007836:	4d05      	ldr	r5, [pc, #20]	@ (800784c <_read_r+0x20>)
 8007838:	602a      	str	r2, [r5, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	f7fa f852 	bl	80018e4 <_read>
 8007840:	1c43      	adds	r3, r0, #1
 8007842:	d102      	bne.n	800784a <_read_r+0x1e>
 8007844:	682b      	ldr	r3, [r5, #0]
 8007846:	b103      	cbz	r3, 800784a <_read_r+0x1e>
 8007848:	6023      	str	r3, [r4, #0]
 800784a:	bd38      	pop	{r3, r4, r5, pc}
 800784c:	20002134 	.word	0x20002134

08007850 <_write_r>:
 8007850:	b538      	push	{r3, r4, r5, lr}
 8007852:	4604      	mov	r4, r0
 8007854:	4608      	mov	r0, r1
 8007856:	4611      	mov	r1, r2
 8007858:	2200      	movs	r2, #0
 800785a:	4d05      	ldr	r5, [pc, #20]	@ (8007870 <_write_r+0x20>)
 800785c:	602a      	str	r2, [r5, #0]
 800785e:	461a      	mov	r2, r3
 8007860:	f7fa f85d 	bl	800191e <_write>
 8007864:	1c43      	adds	r3, r0, #1
 8007866:	d102      	bne.n	800786e <_write_r+0x1e>
 8007868:	682b      	ldr	r3, [r5, #0]
 800786a:	b103      	cbz	r3, 800786e <_write_r+0x1e>
 800786c:	6023      	str	r3, [r4, #0]
 800786e:	bd38      	pop	{r3, r4, r5, pc}
 8007870:	20002134 	.word	0x20002134

08007874 <__errno>:
 8007874:	4b01      	ldr	r3, [pc, #4]	@ (800787c <__errno+0x8>)
 8007876:	6818      	ldr	r0, [r3, #0]
 8007878:	4770      	bx	lr
 800787a:	bf00      	nop
 800787c:	2000001c 	.word	0x2000001c

08007880 <__libc_init_array>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	2600      	movs	r6, #0
 8007884:	4d0c      	ldr	r5, [pc, #48]	@ (80078b8 <__libc_init_array+0x38>)
 8007886:	4c0d      	ldr	r4, [pc, #52]	@ (80078bc <__libc_init_array+0x3c>)
 8007888:	1b64      	subs	r4, r4, r5
 800788a:	10a4      	asrs	r4, r4, #2
 800788c:	42a6      	cmp	r6, r4
 800788e:	d109      	bne.n	80078a4 <__libc_init_array+0x24>
 8007890:	f003 fb66 	bl	800af60 <_init>
 8007894:	2600      	movs	r6, #0
 8007896:	4d0a      	ldr	r5, [pc, #40]	@ (80078c0 <__libc_init_array+0x40>)
 8007898:	4c0a      	ldr	r4, [pc, #40]	@ (80078c4 <__libc_init_array+0x44>)
 800789a:	1b64      	subs	r4, r4, r5
 800789c:	10a4      	asrs	r4, r4, #2
 800789e:	42a6      	cmp	r6, r4
 80078a0:	d105      	bne.n	80078ae <__libc_init_array+0x2e>
 80078a2:	bd70      	pop	{r4, r5, r6, pc}
 80078a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80078a8:	4798      	blx	r3
 80078aa:	3601      	adds	r6, #1
 80078ac:	e7ee      	b.n	800788c <__libc_init_array+0xc>
 80078ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80078b2:	4798      	blx	r3
 80078b4:	3601      	adds	r6, #1
 80078b6:	e7f2      	b.n	800789e <__libc_init_array+0x1e>
 80078b8:	0800bf58 	.word	0x0800bf58
 80078bc:	0800bf58 	.word	0x0800bf58
 80078c0:	0800bf58 	.word	0x0800bf58
 80078c4:	0800bf5c 	.word	0x0800bf5c

080078c8 <__retarget_lock_init_recursive>:
 80078c8:	4770      	bx	lr

080078ca <__retarget_lock_acquire_recursive>:
 80078ca:	4770      	bx	lr

080078cc <__retarget_lock_release_recursive>:
 80078cc:	4770      	bx	lr

080078ce <memchr>:
 80078ce:	4603      	mov	r3, r0
 80078d0:	b510      	push	{r4, lr}
 80078d2:	b2c9      	uxtb	r1, r1
 80078d4:	4402      	add	r2, r0
 80078d6:	4293      	cmp	r3, r2
 80078d8:	4618      	mov	r0, r3
 80078da:	d101      	bne.n	80078e0 <memchr+0x12>
 80078dc:	2000      	movs	r0, #0
 80078de:	e003      	b.n	80078e8 <memchr+0x1a>
 80078e0:	7804      	ldrb	r4, [r0, #0]
 80078e2:	3301      	adds	r3, #1
 80078e4:	428c      	cmp	r4, r1
 80078e6:	d1f6      	bne.n	80078d6 <memchr+0x8>
 80078e8:	bd10      	pop	{r4, pc}

080078ea <memcpy>:
 80078ea:	440a      	add	r2, r1
 80078ec:	4291      	cmp	r1, r2
 80078ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80078f2:	d100      	bne.n	80078f6 <memcpy+0xc>
 80078f4:	4770      	bx	lr
 80078f6:	b510      	push	{r4, lr}
 80078f8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80078fc:	4291      	cmp	r1, r2
 80078fe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007902:	d1f9      	bne.n	80078f8 <memcpy+0xe>
 8007904:	bd10      	pop	{r4, pc}
	...

08007908 <nanf>:
 8007908:	4800      	ldr	r0, [pc, #0]	@ (800790c <nanf+0x4>)
 800790a:	4770      	bx	lr
 800790c:	7fc00000 	.word	0x7fc00000

08007910 <quorem>:
 8007910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007914:	6903      	ldr	r3, [r0, #16]
 8007916:	690c      	ldr	r4, [r1, #16]
 8007918:	4607      	mov	r7, r0
 800791a:	42a3      	cmp	r3, r4
 800791c:	db7e      	blt.n	8007a1c <quorem+0x10c>
 800791e:	3c01      	subs	r4, #1
 8007920:	00a3      	lsls	r3, r4, #2
 8007922:	f100 0514 	add.w	r5, r0, #20
 8007926:	f101 0814 	add.w	r8, r1, #20
 800792a:	9300      	str	r3, [sp, #0]
 800792c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007930:	9301      	str	r3, [sp, #4]
 8007932:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007936:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800793a:	3301      	adds	r3, #1
 800793c:	429a      	cmp	r2, r3
 800793e:	fbb2 f6f3 	udiv	r6, r2, r3
 8007942:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8007946:	d32e      	bcc.n	80079a6 <quorem+0x96>
 8007948:	f04f 0a00 	mov.w	sl, #0
 800794c:	46c4      	mov	ip, r8
 800794e:	46ae      	mov	lr, r5
 8007950:	46d3      	mov	fp, sl
 8007952:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007956:	b298      	uxth	r0, r3
 8007958:	fb06 a000 	mla	r0, r6, r0, sl
 800795c:	0c1b      	lsrs	r3, r3, #16
 800795e:	0c02      	lsrs	r2, r0, #16
 8007960:	fb06 2303 	mla	r3, r6, r3, r2
 8007964:	f8de 2000 	ldr.w	r2, [lr]
 8007968:	b280      	uxth	r0, r0
 800796a:	b292      	uxth	r2, r2
 800796c:	1a12      	subs	r2, r2, r0
 800796e:	445a      	add	r2, fp
 8007970:	f8de 0000 	ldr.w	r0, [lr]
 8007974:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007978:	b29b      	uxth	r3, r3
 800797a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800797e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007982:	b292      	uxth	r2, r2
 8007984:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007988:	45e1      	cmp	r9, ip
 800798a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800798e:	f84e 2b04 	str.w	r2, [lr], #4
 8007992:	d2de      	bcs.n	8007952 <quorem+0x42>
 8007994:	9b00      	ldr	r3, [sp, #0]
 8007996:	58eb      	ldr	r3, [r5, r3]
 8007998:	b92b      	cbnz	r3, 80079a6 <quorem+0x96>
 800799a:	9b01      	ldr	r3, [sp, #4]
 800799c:	3b04      	subs	r3, #4
 800799e:	429d      	cmp	r5, r3
 80079a0:	461a      	mov	r2, r3
 80079a2:	d32f      	bcc.n	8007a04 <quorem+0xf4>
 80079a4:	613c      	str	r4, [r7, #16]
 80079a6:	4638      	mov	r0, r7
 80079a8:	f001 f9c2 	bl	8008d30 <__mcmp>
 80079ac:	2800      	cmp	r0, #0
 80079ae:	db25      	blt.n	80079fc <quorem+0xec>
 80079b0:	4629      	mov	r1, r5
 80079b2:	2000      	movs	r0, #0
 80079b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80079b8:	f8d1 c000 	ldr.w	ip, [r1]
 80079bc:	fa1f fe82 	uxth.w	lr, r2
 80079c0:	fa1f f38c 	uxth.w	r3, ip
 80079c4:	eba3 030e 	sub.w	r3, r3, lr
 80079c8:	4403      	add	r3, r0
 80079ca:	0c12      	lsrs	r2, r2, #16
 80079cc:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80079d0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80079da:	45c1      	cmp	r9, r8
 80079dc:	ea4f 4022 	mov.w	r0, r2, asr #16
 80079e0:	f841 3b04 	str.w	r3, [r1], #4
 80079e4:	d2e6      	bcs.n	80079b4 <quorem+0xa4>
 80079e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80079ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80079ee:	b922      	cbnz	r2, 80079fa <quorem+0xea>
 80079f0:	3b04      	subs	r3, #4
 80079f2:	429d      	cmp	r5, r3
 80079f4:	461a      	mov	r2, r3
 80079f6:	d30b      	bcc.n	8007a10 <quorem+0x100>
 80079f8:	613c      	str	r4, [r7, #16]
 80079fa:	3601      	adds	r6, #1
 80079fc:	4630      	mov	r0, r6
 80079fe:	b003      	add	sp, #12
 8007a00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a04:	6812      	ldr	r2, [r2, #0]
 8007a06:	3b04      	subs	r3, #4
 8007a08:	2a00      	cmp	r2, #0
 8007a0a:	d1cb      	bne.n	80079a4 <quorem+0x94>
 8007a0c:	3c01      	subs	r4, #1
 8007a0e:	e7c6      	b.n	800799e <quorem+0x8e>
 8007a10:	6812      	ldr	r2, [r2, #0]
 8007a12:	3b04      	subs	r3, #4
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	d1ef      	bne.n	80079f8 <quorem+0xe8>
 8007a18:	3c01      	subs	r4, #1
 8007a1a:	e7ea      	b.n	80079f2 <quorem+0xe2>
 8007a1c:	2000      	movs	r0, #0
 8007a1e:	e7ee      	b.n	80079fe <quorem+0xee>

08007a20 <_dtoa_r>:
 8007a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a24:	4614      	mov	r4, r2
 8007a26:	461d      	mov	r5, r3
 8007a28:	69c7      	ldr	r7, [r0, #28]
 8007a2a:	b097      	sub	sp, #92	@ 0x5c
 8007a2c:	4683      	mov	fp, r0
 8007a2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8007a32:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8007a34:	b97f      	cbnz	r7, 8007a56 <_dtoa_r+0x36>
 8007a36:	2010      	movs	r0, #16
 8007a38:	f000 fe02 	bl	8008640 <malloc>
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	f8cb 001c 	str.w	r0, [fp, #28]
 8007a42:	b920      	cbnz	r0, 8007a4e <_dtoa_r+0x2e>
 8007a44:	21ef      	movs	r1, #239	@ 0xef
 8007a46:	4ba8      	ldr	r3, [pc, #672]	@ (8007ce8 <_dtoa_r+0x2c8>)
 8007a48:	48a8      	ldr	r0, [pc, #672]	@ (8007cec <_dtoa_r+0x2cc>)
 8007a4a:	f002 fc15 	bl	800a278 <__assert_func>
 8007a4e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007a52:	6007      	str	r7, [r0, #0]
 8007a54:	60c7      	str	r7, [r0, #12]
 8007a56:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a5a:	6819      	ldr	r1, [r3, #0]
 8007a5c:	b159      	cbz	r1, 8007a76 <_dtoa_r+0x56>
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	2301      	movs	r3, #1
 8007a62:	4093      	lsls	r3, r2
 8007a64:	604a      	str	r2, [r1, #4]
 8007a66:	608b      	str	r3, [r1, #8]
 8007a68:	4658      	mov	r0, fp
 8007a6a:	f000 fedf 	bl	800882c <_Bfree>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007a74:	601a      	str	r2, [r3, #0]
 8007a76:	1e2b      	subs	r3, r5, #0
 8007a78:	bfaf      	iteee	ge
 8007a7a:	2300      	movge	r3, #0
 8007a7c:	2201      	movlt	r2, #1
 8007a7e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007a82:	9303      	strlt	r3, [sp, #12]
 8007a84:	bfa8      	it	ge
 8007a86:	6033      	strge	r3, [r6, #0]
 8007a88:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8007a8c:	4b98      	ldr	r3, [pc, #608]	@ (8007cf0 <_dtoa_r+0x2d0>)
 8007a8e:	bfb8      	it	lt
 8007a90:	6032      	strlt	r2, [r6, #0]
 8007a92:	ea33 0308 	bics.w	r3, r3, r8
 8007a96:	d112      	bne.n	8007abe <_dtoa_r+0x9e>
 8007a98:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007a9c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a9e:	6013      	str	r3, [r2, #0]
 8007aa0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8007aa4:	4323      	orrs	r3, r4
 8007aa6:	f000 8550 	beq.w	800854a <_dtoa_r+0xb2a>
 8007aaa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007aac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8007cf4 <_dtoa_r+0x2d4>
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 8552 	beq.w	800855a <_dtoa_r+0xb3a>
 8007ab6:	f10a 0303 	add.w	r3, sl, #3
 8007aba:	f000 bd4c 	b.w	8008556 <_dtoa_r+0xb36>
 8007abe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007ac2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007ac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	f7f8 ffdb 	bl	8000a88 <__aeabi_dcmpeq>
 8007ad2:	4607      	mov	r7, r0
 8007ad4:	b158      	cbz	r0, 8007aee <_dtoa_r+0xce>
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007ada:	6013      	str	r3, [r2, #0]
 8007adc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007ade:	b113      	cbz	r3, 8007ae6 <_dtoa_r+0xc6>
 8007ae0:	4b85      	ldr	r3, [pc, #532]	@ (8007cf8 <_dtoa_r+0x2d8>)
 8007ae2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007ae4:	6013      	str	r3, [r2, #0]
 8007ae6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8007cfc <_dtoa_r+0x2dc>
 8007aea:	f000 bd36 	b.w	800855a <_dtoa_r+0xb3a>
 8007aee:	ab14      	add	r3, sp, #80	@ 0x50
 8007af0:	9301      	str	r3, [sp, #4]
 8007af2:	ab15      	add	r3, sp, #84	@ 0x54
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	4658      	mov	r0, fp
 8007af8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007afc:	f001 fa30 	bl	8008f60 <__d2b>
 8007b00:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8007b04:	4681      	mov	r9, r0
 8007b06:	2e00      	cmp	r6, #0
 8007b08:	d077      	beq.n	8007bfa <_dtoa_r+0x1da>
 8007b0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b10:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007b14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007b18:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007b1c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8007b20:	9712      	str	r7, [sp, #72]	@ 0x48
 8007b22:	4619      	mov	r1, r3
 8007b24:	2200      	movs	r2, #0
 8007b26:	4b76      	ldr	r3, [pc, #472]	@ (8007d00 <_dtoa_r+0x2e0>)
 8007b28:	f7f8 fb8e 	bl	8000248 <__aeabi_dsub>
 8007b2c:	a368      	add	r3, pc, #416	@ (adr r3, 8007cd0 <_dtoa_r+0x2b0>)
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	f7f8 fd41 	bl	80005b8 <__aeabi_dmul>
 8007b36:	a368      	add	r3, pc, #416	@ (adr r3, 8007cd8 <_dtoa_r+0x2b8>)
 8007b38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b3c:	f7f8 fb86 	bl	800024c <__adddf3>
 8007b40:	4604      	mov	r4, r0
 8007b42:	4630      	mov	r0, r6
 8007b44:	460d      	mov	r5, r1
 8007b46:	f7f8 fccd 	bl	80004e4 <__aeabi_i2d>
 8007b4a:	a365      	add	r3, pc, #404	@ (adr r3, 8007ce0 <_dtoa_r+0x2c0>)
 8007b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b50:	f7f8 fd32 	bl	80005b8 <__aeabi_dmul>
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	4620      	mov	r0, r4
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	f7f8 fb76 	bl	800024c <__adddf3>
 8007b60:	4604      	mov	r4, r0
 8007b62:	460d      	mov	r5, r1
 8007b64:	f7f8 ffd8 	bl	8000b18 <__aeabi_d2iz>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	4607      	mov	r7, r0
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	4620      	mov	r0, r4
 8007b70:	4629      	mov	r1, r5
 8007b72:	f7f8 ff93 	bl	8000a9c <__aeabi_dcmplt>
 8007b76:	b140      	cbz	r0, 8007b8a <_dtoa_r+0x16a>
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7f8 fcb3 	bl	80004e4 <__aeabi_i2d>
 8007b7e:	4622      	mov	r2, r4
 8007b80:	462b      	mov	r3, r5
 8007b82:	f7f8 ff81 	bl	8000a88 <__aeabi_dcmpeq>
 8007b86:	b900      	cbnz	r0, 8007b8a <_dtoa_r+0x16a>
 8007b88:	3f01      	subs	r7, #1
 8007b8a:	2f16      	cmp	r7, #22
 8007b8c:	d853      	bhi.n	8007c36 <_dtoa_r+0x216>
 8007b8e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b92:	4b5c      	ldr	r3, [pc, #368]	@ (8007d04 <_dtoa_r+0x2e4>)
 8007b94:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b9c:	f7f8 ff7e 	bl	8000a9c <__aeabi_dcmplt>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	d04a      	beq.n	8007c3a <_dtoa_r+0x21a>
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	3f01      	subs	r7, #1
 8007ba8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007baa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007bac:	1b9b      	subs	r3, r3, r6
 8007bae:	1e5a      	subs	r2, r3, #1
 8007bb0:	bf46      	itte	mi
 8007bb2:	f1c3 0801 	rsbmi	r8, r3, #1
 8007bb6:	2300      	movmi	r3, #0
 8007bb8:	f04f 0800 	movpl.w	r8, #0
 8007bbc:	9209      	str	r2, [sp, #36]	@ 0x24
 8007bbe:	bf48      	it	mi
 8007bc0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 8007bc2:	2f00      	cmp	r7, #0
 8007bc4:	db3b      	blt.n	8007c3e <_dtoa_r+0x21e>
 8007bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bc8:	970e      	str	r7, [sp, #56]	@ 0x38
 8007bca:	443b      	add	r3, r7
 8007bcc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bce:	2300      	movs	r3, #0
 8007bd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8007bd2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007bd4:	2b09      	cmp	r3, #9
 8007bd6:	d866      	bhi.n	8007ca6 <_dtoa_r+0x286>
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	bfc4      	itt	gt
 8007bdc:	3b04      	subgt	r3, #4
 8007bde:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8007be0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8007be2:	bfc8      	it	gt
 8007be4:	2400      	movgt	r4, #0
 8007be6:	f1a3 0302 	sub.w	r3, r3, #2
 8007bea:	bfd8      	it	le
 8007bec:	2401      	movle	r4, #1
 8007bee:	2b03      	cmp	r3, #3
 8007bf0:	d864      	bhi.n	8007cbc <_dtoa_r+0x29c>
 8007bf2:	e8df f003 	tbb	[pc, r3]
 8007bf6:	382b      	.short	0x382b
 8007bf8:	5636      	.short	0x5636
 8007bfa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007bfe:	441e      	add	r6, r3
 8007c00:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007c04:	2b20      	cmp	r3, #32
 8007c06:	bfc1      	itttt	gt
 8007c08:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007c0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8007c10:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007c14:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007c18:	bfd6      	itet	le
 8007c1a:	f1c3 0320 	rsble	r3, r3, #32
 8007c1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8007c22:	fa04 f003 	lslle.w	r0, r4, r3
 8007c26:	f7f8 fc4d 	bl	80004c4 <__aeabi_ui2d>
 8007c2a:	2201      	movs	r2, #1
 8007c2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007c30:	3e01      	subs	r6, #1
 8007c32:	9212      	str	r2, [sp, #72]	@ 0x48
 8007c34:	e775      	b.n	8007b22 <_dtoa_r+0x102>
 8007c36:	2301      	movs	r3, #1
 8007c38:	e7b6      	b.n	8007ba8 <_dtoa_r+0x188>
 8007c3a:	900f      	str	r0, [sp, #60]	@ 0x3c
 8007c3c:	e7b5      	b.n	8007baa <_dtoa_r+0x18a>
 8007c3e:	427b      	negs	r3, r7
 8007c40:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c42:	2300      	movs	r3, #0
 8007c44:	eba8 0807 	sub.w	r8, r8, r7
 8007c48:	930e      	str	r3, [sp, #56]	@ 0x38
 8007c4a:	e7c2      	b.n	8007bd2 <_dtoa_r+0x1b2>
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	dc35      	bgt.n	8007cc2 <_dtoa_r+0x2a2>
 8007c56:	2301      	movs	r3, #1
 8007c58:	461a      	mov	r2, r3
 8007c5a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007c5e:	9221      	str	r2, [sp, #132]	@ 0x84
 8007c60:	e00b      	b.n	8007c7a <_dtoa_r+0x25a>
 8007c62:	2301      	movs	r3, #1
 8007c64:	e7f3      	b.n	8007c4e <_dtoa_r+0x22e>
 8007c66:	2300      	movs	r3, #0
 8007c68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c6a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007c6c:	18fb      	adds	r3, r7, r3
 8007c6e:	9308      	str	r3, [sp, #32]
 8007c70:	3301      	adds	r3, #1
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	9307      	str	r3, [sp, #28]
 8007c76:	bfb8      	it	lt
 8007c78:	2301      	movlt	r3, #1
 8007c7a:	2100      	movs	r1, #0
 8007c7c:	2204      	movs	r2, #4
 8007c7e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007c82:	f102 0514 	add.w	r5, r2, #20
 8007c86:	429d      	cmp	r5, r3
 8007c88:	d91f      	bls.n	8007cca <_dtoa_r+0x2aa>
 8007c8a:	6041      	str	r1, [r0, #4]
 8007c8c:	4658      	mov	r0, fp
 8007c8e:	f000 fd8d 	bl	80087ac <_Balloc>
 8007c92:	4682      	mov	sl, r0
 8007c94:	2800      	cmp	r0, #0
 8007c96:	d139      	bne.n	8007d0c <_dtoa_r+0x2ec>
 8007c98:	4602      	mov	r2, r0
 8007c9a:	f240 11af 	movw	r1, #431	@ 0x1af
 8007c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8007d08 <_dtoa_r+0x2e8>)
 8007ca0:	e6d2      	b.n	8007a48 <_dtoa_r+0x28>
 8007ca2:	2301      	movs	r3, #1
 8007ca4:	e7e0      	b.n	8007c68 <_dtoa_r+0x248>
 8007ca6:	2401      	movs	r4, #1
 8007ca8:	2300      	movs	r3, #0
 8007caa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007cac:	9320      	str	r3, [sp, #128]	@ 0x80
 8007cae:	f04f 33ff 	mov.w	r3, #4294967295
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007cb8:	2312      	movs	r3, #18
 8007cba:	e7d0      	b.n	8007c5e <_dtoa_r+0x23e>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007cc0:	e7f5      	b.n	8007cae <_dtoa_r+0x28e>
 8007cc2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007cc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8007cc8:	e7d7      	b.n	8007c7a <_dtoa_r+0x25a>
 8007cca:	3101      	adds	r1, #1
 8007ccc:	0052      	lsls	r2, r2, #1
 8007cce:	e7d8      	b.n	8007c82 <_dtoa_r+0x262>
 8007cd0:	636f4361 	.word	0x636f4361
 8007cd4:	3fd287a7 	.word	0x3fd287a7
 8007cd8:	8b60c8b3 	.word	0x8b60c8b3
 8007cdc:	3fc68a28 	.word	0x3fc68a28
 8007ce0:	509f79fb 	.word	0x509f79fb
 8007ce4:	3fd34413 	.word	0x3fd34413
 8007ce8:	0800bb68 	.word	0x0800bb68
 8007cec:	0800bb7f 	.word	0x0800bb7f
 8007cf0:	7ff00000 	.word	0x7ff00000
 8007cf4:	0800bb64 	.word	0x0800bb64
 8007cf8:	0800bb33 	.word	0x0800bb33
 8007cfc:	0800bb32 	.word	0x0800bb32
 8007d00:	3ff80000 	.word	0x3ff80000
 8007d04:	0800bc78 	.word	0x0800bc78
 8007d08:	0800bbd7 	.word	0x0800bbd7
 8007d0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007d10:	6018      	str	r0, [r3, #0]
 8007d12:	9b07      	ldr	r3, [sp, #28]
 8007d14:	2b0e      	cmp	r3, #14
 8007d16:	f200 80a4 	bhi.w	8007e62 <_dtoa_r+0x442>
 8007d1a:	2c00      	cmp	r4, #0
 8007d1c:	f000 80a1 	beq.w	8007e62 <_dtoa_r+0x442>
 8007d20:	2f00      	cmp	r7, #0
 8007d22:	dd33      	ble.n	8007d8c <_dtoa_r+0x36c>
 8007d24:	4b86      	ldr	r3, [pc, #536]	@ (8007f40 <_dtoa_r+0x520>)
 8007d26:	f007 020f 	and.w	r2, r7, #15
 8007d2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007d2e:	05f8      	lsls	r0, r7, #23
 8007d30:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007d34:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007d38:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007d3c:	d516      	bpl.n	8007d6c <_dtoa_r+0x34c>
 8007d3e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d42:	4b80      	ldr	r3, [pc, #512]	@ (8007f44 <_dtoa_r+0x524>)
 8007d44:	2603      	movs	r6, #3
 8007d46:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007d4a:	f7f8 fd5f 	bl	800080c <__aeabi_ddiv>
 8007d4e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d52:	f004 040f 	and.w	r4, r4, #15
 8007d56:	4d7b      	ldr	r5, [pc, #492]	@ (8007f44 <_dtoa_r+0x524>)
 8007d58:	b954      	cbnz	r4, 8007d70 <_dtoa_r+0x350>
 8007d5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d62:	f7f8 fd53 	bl	800080c <__aeabi_ddiv>
 8007d66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007d6a:	e028      	b.n	8007dbe <_dtoa_r+0x39e>
 8007d6c:	2602      	movs	r6, #2
 8007d6e:	e7f2      	b.n	8007d56 <_dtoa_r+0x336>
 8007d70:	07e1      	lsls	r1, r4, #31
 8007d72:	d508      	bpl.n	8007d86 <_dtoa_r+0x366>
 8007d74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007d78:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d7c:	f7f8 fc1c 	bl	80005b8 <__aeabi_dmul>
 8007d80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007d84:	3601      	adds	r6, #1
 8007d86:	1064      	asrs	r4, r4, #1
 8007d88:	3508      	adds	r5, #8
 8007d8a:	e7e5      	b.n	8007d58 <_dtoa_r+0x338>
 8007d8c:	f000 80d2 	beq.w	8007f34 <_dtoa_r+0x514>
 8007d90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d94:	427c      	negs	r4, r7
 8007d96:	4b6a      	ldr	r3, [pc, #424]	@ (8007f40 <_dtoa_r+0x520>)
 8007d98:	f004 020f 	and.w	r2, r4, #15
 8007d9c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da4:	f7f8 fc08 	bl	80005b8 <__aeabi_dmul>
 8007da8:	2602      	movs	r6, #2
 8007daa:	2300      	movs	r3, #0
 8007dac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007db0:	4d64      	ldr	r5, [pc, #400]	@ (8007f44 <_dtoa_r+0x524>)
 8007db2:	1124      	asrs	r4, r4, #4
 8007db4:	2c00      	cmp	r4, #0
 8007db6:	f040 80b2 	bne.w	8007f1e <_dtoa_r+0x4fe>
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1d3      	bne.n	8007d66 <_dtoa_r+0x346>
 8007dbe:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007dc2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	f000 80b7 	beq.w	8007f38 <_dtoa_r+0x518>
 8007dca:	2200      	movs	r2, #0
 8007dcc:	4620      	mov	r0, r4
 8007dce:	4629      	mov	r1, r5
 8007dd0:	4b5d      	ldr	r3, [pc, #372]	@ (8007f48 <_dtoa_r+0x528>)
 8007dd2:	f7f8 fe63 	bl	8000a9c <__aeabi_dcmplt>
 8007dd6:	2800      	cmp	r0, #0
 8007dd8:	f000 80ae 	beq.w	8007f38 <_dtoa_r+0x518>
 8007ddc:	9b07      	ldr	r3, [sp, #28]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	f000 80aa 	beq.w	8007f38 <_dtoa_r+0x518>
 8007de4:	9b08      	ldr	r3, [sp, #32]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	dd37      	ble.n	8007e5a <_dtoa_r+0x43a>
 8007dea:	1e7b      	subs	r3, r7, #1
 8007dec:	4620      	mov	r0, r4
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	2200      	movs	r2, #0
 8007df2:	4629      	mov	r1, r5
 8007df4:	4b55      	ldr	r3, [pc, #340]	@ (8007f4c <_dtoa_r+0x52c>)
 8007df6:	f7f8 fbdf 	bl	80005b8 <__aeabi_dmul>
 8007dfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007dfe:	9c08      	ldr	r4, [sp, #32]
 8007e00:	3601      	adds	r6, #1
 8007e02:	4630      	mov	r0, r6
 8007e04:	f7f8 fb6e 	bl	80004e4 <__aeabi_i2d>
 8007e08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e0c:	f7f8 fbd4 	bl	80005b8 <__aeabi_dmul>
 8007e10:	2200      	movs	r2, #0
 8007e12:	4b4f      	ldr	r3, [pc, #316]	@ (8007f50 <_dtoa_r+0x530>)
 8007e14:	f7f8 fa1a 	bl	800024c <__adddf3>
 8007e18:	4605      	mov	r5, r0
 8007e1a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007e1e:	2c00      	cmp	r4, #0
 8007e20:	f040 809a 	bne.w	8007f58 <_dtoa_r+0x538>
 8007e24:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	4b4a      	ldr	r3, [pc, #296]	@ (8007f54 <_dtoa_r+0x534>)
 8007e2c:	f7f8 fa0c 	bl	8000248 <__aeabi_dsub>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e38:	462a      	mov	r2, r5
 8007e3a:	4633      	mov	r3, r6
 8007e3c:	f7f8 fe4c 	bl	8000ad8 <__aeabi_dcmpgt>
 8007e40:	2800      	cmp	r0, #0
 8007e42:	f040 828e 	bne.w	8008362 <_dtoa_r+0x942>
 8007e46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e4a:	462a      	mov	r2, r5
 8007e4c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007e50:	f7f8 fe24 	bl	8000a9c <__aeabi_dcmplt>
 8007e54:	2800      	cmp	r0, #0
 8007e56:	f040 8127 	bne.w	80080a8 <_dtoa_r+0x688>
 8007e5a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007e5e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007e62:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	f2c0 8163 	blt.w	8008130 <_dtoa_r+0x710>
 8007e6a:	2f0e      	cmp	r7, #14
 8007e6c:	f300 8160 	bgt.w	8008130 <_dtoa_r+0x710>
 8007e70:	4b33      	ldr	r3, [pc, #204]	@ (8007f40 <_dtoa_r+0x520>)
 8007e72:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007e76:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007e7a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007e7e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	da03      	bge.n	8007e8c <_dtoa_r+0x46c>
 8007e84:	9b07      	ldr	r3, [sp, #28]
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	f340 8100 	ble.w	800808c <_dtoa_r+0x66c>
 8007e8c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007e90:	4656      	mov	r6, sl
 8007e92:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007e96:	4620      	mov	r0, r4
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7f8 fcb7 	bl	800080c <__aeabi_ddiv>
 8007e9e:	f7f8 fe3b 	bl	8000b18 <__aeabi_d2iz>
 8007ea2:	4680      	mov	r8, r0
 8007ea4:	f7f8 fb1e 	bl	80004e4 <__aeabi_i2d>
 8007ea8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eac:	f7f8 fb84 	bl	80005b8 <__aeabi_dmul>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	460b      	mov	r3, r1
 8007eb4:	4620      	mov	r0, r4
 8007eb6:	4629      	mov	r1, r5
 8007eb8:	f7f8 f9c6 	bl	8000248 <__aeabi_dsub>
 8007ebc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007ec0:	9d07      	ldr	r5, [sp, #28]
 8007ec2:	f806 4b01 	strb.w	r4, [r6], #1
 8007ec6:	eba6 040a 	sub.w	r4, r6, sl
 8007eca:	42a5      	cmp	r5, r4
 8007ecc:	4602      	mov	r2, r0
 8007ece:	460b      	mov	r3, r1
 8007ed0:	f040 8116 	bne.w	8008100 <_dtoa_r+0x6e0>
 8007ed4:	f7f8 f9ba 	bl	800024c <__adddf3>
 8007ed8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007edc:	4604      	mov	r4, r0
 8007ede:	460d      	mov	r5, r1
 8007ee0:	f7f8 fdfa 	bl	8000ad8 <__aeabi_dcmpgt>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	f040 80f8 	bne.w	80080da <_dtoa_r+0x6ba>
 8007eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007eee:	4620      	mov	r0, r4
 8007ef0:	4629      	mov	r1, r5
 8007ef2:	f7f8 fdc9 	bl	8000a88 <__aeabi_dcmpeq>
 8007ef6:	b118      	cbz	r0, 8007f00 <_dtoa_r+0x4e0>
 8007ef8:	f018 0f01 	tst.w	r8, #1
 8007efc:	f040 80ed 	bne.w	80080da <_dtoa_r+0x6ba>
 8007f00:	4649      	mov	r1, r9
 8007f02:	4658      	mov	r0, fp
 8007f04:	f000 fc92 	bl	800882c <_Bfree>
 8007f08:	2300      	movs	r3, #0
 8007f0a:	7033      	strb	r3, [r6, #0]
 8007f0c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8007f0e:	3701      	adds	r7, #1
 8007f10:	601f      	str	r7, [r3, #0]
 8007f12:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	f000 8320 	beq.w	800855a <_dtoa_r+0xb3a>
 8007f1a:	601e      	str	r6, [r3, #0]
 8007f1c:	e31d      	b.n	800855a <_dtoa_r+0xb3a>
 8007f1e:	07e2      	lsls	r2, r4, #31
 8007f20:	d505      	bpl.n	8007f2e <_dtoa_r+0x50e>
 8007f22:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007f26:	f7f8 fb47 	bl	80005b8 <__aeabi_dmul>
 8007f2a:	2301      	movs	r3, #1
 8007f2c:	3601      	adds	r6, #1
 8007f2e:	1064      	asrs	r4, r4, #1
 8007f30:	3508      	adds	r5, #8
 8007f32:	e73f      	b.n	8007db4 <_dtoa_r+0x394>
 8007f34:	2602      	movs	r6, #2
 8007f36:	e742      	b.n	8007dbe <_dtoa_r+0x39e>
 8007f38:	9c07      	ldr	r4, [sp, #28]
 8007f3a:	9704      	str	r7, [sp, #16]
 8007f3c:	e761      	b.n	8007e02 <_dtoa_r+0x3e2>
 8007f3e:	bf00      	nop
 8007f40:	0800bc78 	.word	0x0800bc78
 8007f44:	0800bc50 	.word	0x0800bc50
 8007f48:	3ff00000 	.word	0x3ff00000
 8007f4c:	40240000 	.word	0x40240000
 8007f50:	401c0000 	.word	0x401c0000
 8007f54:	40140000 	.word	0x40140000
 8007f58:	4b70      	ldr	r3, [pc, #448]	@ (800811c <_dtoa_r+0x6fc>)
 8007f5a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007f5c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007f60:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007f64:	4454      	add	r4, sl
 8007f66:	2900      	cmp	r1, #0
 8007f68:	d045      	beq.n	8007ff6 <_dtoa_r+0x5d6>
 8007f6a:	2000      	movs	r0, #0
 8007f6c:	496c      	ldr	r1, [pc, #432]	@ (8008120 <_dtoa_r+0x700>)
 8007f6e:	f7f8 fc4d 	bl	800080c <__aeabi_ddiv>
 8007f72:	4633      	mov	r3, r6
 8007f74:	462a      	mov	r2, r5
 8007f76:	f7f8 f967 	bl	8000248 <__aeabi_dsub>
 8007f7a:	4656      	mov	r6, sl
 8007f7c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f84:	f7f8 fdc8 	bl	8000b18 <__aeabi_d2iz>
 8007f88:	4605      	mov	r5, r0
 8007f8a:	f7f8 faab 	bl	80004e4 <__aeabi_i2d>
 8007f8e:	4602      	mov	r2, r0
 8007f90:	460b      	mov	r3, r1
 8007f92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f96:	f7f8 f957 	bl	8000248 <__aeabi_dsub>
 8007f9a:	4602      	mov	r2, r0
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	3530      	adds	r5, #48	@ 0x30
 8007fa0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007fa4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fa8:	f806 5b01 	strb.w	r5, [r6], #1
 8007fac:	f7f8 fd76 	bl	8000a9c <__aeabi_dcmplt>
 8007fb0:	2800      	cmp	r0, #0
 8007fb2:	d163      	bne.n	800807c <_dtoa_r+0x65c>
 8007fb4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007fb8:	2000      	movs	r0, #0
 8007fba:	495a      	ldr	r1, [pc, #360]	@ (8008124 <_dtoa_r+0x704>)
 8007fbc:	f7f8 f944 	bl	8000248 <__aeabi_dsub>
 8007fc0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007fc4:	f7f8 fd6a 	bl	8000a9c <__aeabi_dcmplt>
 8007fc8:	2800      	cmp	r0, #0
 8007fca:	f040 8087 	bne.w	80080dc <_dtoa_r+0x6bc>
 8007fce:	42a6      	cmp	r6, r4
 8007fd0:	f43f af43 	beq.w	8007e5a <_dtoa_r+0x43a>
 8007fd4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007fd8:	2200      	movs	r2, #0
 8007fda:	4b53      	ldr	r3, [pc, #332]	@ (8008128 <_dtoa_r+0x708>)
 8007fdc:	f7f8 faec 	bl	80005b8 <__aeabi_dmul>
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007fe6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007fea:	4b4f      	ldr	r3, [pc, #316]	@ (8008128 <_dtoa_r+0x708>)
 8007fec:	f7f8 fae4 	bl	80005b8 <__aeabi_dmul>
 8007ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ff4:	e7c4      	b.n	8007f80 <_dtoa_r+0x560>
 8007ff6:	4631      	mov	r1, r6
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f7f8 fadd 	bl	80005b8 <__aeabi_dmul>
 8007ffe:	4656      	mov	r6, sl
 8008000:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008004:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008006:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800800a:	f7f8 fd85 	bl	8000b18 <__aeabi_d2iz>
 800800e:	4605      	mov	r5, r0
 8008010:	f7f8 fa68 	bl	80004e4 <__aeabi_i2d>
 8008014:	4602      	mov	r2, r0
 8008016:	460b      	mov	r3, r1
 8008018:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800801c:	f7f8 f914 	bl	8000248 <__aeabi_dsub>
 8008020:	4602      	mov	r2, r0
 8008022:	460b      	mov	r3, r1
 8008024:	3530      	adds	r5, #48	@ 0x30
 8008026:	f806 5b01 	strb.w	r5, [r6], #1
 800802a:	42a6      	cmp	r6, r4
 800802c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008030:	f04f 0200 	mov.w	r2, #0
 8008034:	d124      	bne.n	8008080 <_dtoa_r+0x660>
 8008036:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800803a:	4b39      	ldr	r3, [pc, #228]	@ (8008120 <_dtoa_r+0x700>)
 800803c:	f7f8 f906 	bl	800024c <__adddf3>
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008048:	f7f8 fd46 	bl	8000ad8 <__aeabi_dcmpgt>
 800804c:	2800      	cmp	r0, #0
 800804e:	d145      	bne.n	80080dc <_dtoa_r+0x6bc>
 8008050:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008054:	2000      	movs	r0, #0
 8008056:	4932      	ldr	r1, [pc, #200]	@ (8008120 <_dtoa_r+0x700>)
 8008058:	f7f8 f8f6 	bl	8000248 <__aeabi_dsub>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008064:	f7f8 fd1a 	bl	8000a9c <__aeabi_dcmplt>
 8008068:	2800      	cmp	r0, #0
 800806a:	f43f aef6 	beq.w	8007e5a <_dtoa_r+0x43a>
 800806e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008070:	1e73      	subs	r3, r6, #1
 8008072:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008074:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008078:	2b30      	cmp	r3, #48	@ 0x30
 800807a:	d0f8      	beq.n	800806e <_dtoa_r+0x64e>
 800807c:	9f04      	ldr	r7, [sp, #16]
 800807e:	e73f      	b.n	8007f00 <_dtoa_r+0x4e0>
 8008080:	4b29      	ldr	r3, [pc, #164]	@ (8008128 <_dtoa_r+0x708>)
 8008082:	f7f8 fa99 	bl	80005b8 <__aeabi_dmul>
 8008086:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800808a:	e7bc      	b.n	8008006 <_dtoa_r+0x5e6>
 800808c:	d10c      	bne.n	80080a8 <_dtoa_r+0x688>
 800808e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008092:	2200      	movs	r2, #0
 8008094:	4b25      	ldr	r3, [pc, #148]	@ (800812c <_dtoa_r+0x70c>)
 8008096:	f7f8 fa8f 	bl	80005b8 <__aeabi_dmul>
 800809a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800809e:	f7f8 fd11 	bl	8000ac4 <__aeabi_dcmpge>
 80080a2:	2800      	cmp	r0, #0
 80080a4:	f000 815b 	beq.w	800835e <_dtoa_r+0x93e>
 80080a8:	2400      	movs	r4, #0
 80080aa:	4625      	mov	r5, r4
 80080ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80080ae:	4656      	mov	r6, sl
 80080b0:	43db      	mvns	r3, r3
 80080b2:	9304      	str	r3, [sp, #16]
 80080b4:	2700      	movs	r7, #0
 80080b6:	4621      	mov	r1, r4
 80080b8:	4658      	mov	r0, fp
 80080ba:	f000 fbb7 	bl	800882c <_Bfree>
 80080be:	2d00      	cmp	r5, #0
 80080c0:	d0dc      	beq.n	800807c <_dtoa_r+0x65c>
 80080c2:	b12f      	cbz	r7, 80080d0 <_dtoa_r+0x6b0>
 80080c4:	42af      	cmp	r7, r5
 80080c6:	d003      	beq.n	80080d0 <_dtoa_r+0x6b0>
 80080c8:	4639      	mov	r1, r7
 80080ca:	4658      	mov	r0, fp
 80080cc:	f000 fbae 	bl	800882c <_Bfree>
 80080d0:	4629      	mov	r1, r5
 80080d2:	4658      	mov	r0, fp
 80080d4:	f000 fbaa 	bl	800882c <_Bfree>
 80080d8:	e7d0      	b.n	800807c <_dtoa_r+0x65c>
 80080da:	9704      	str	r7, [sp, #16]
 80080dc:	4633      	mov	r3, r6
 80080de:	461e      	mov	r6, r3
 80080e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080e4:	2a39      	cmp	r2, #57	@ 0x39
 80080e6:	d107      	bne.n	80080f8 <_dtoa_r+0x6d8>
 80080e8:	459a      	cmp	sl, r3
 80080ea:	d1f8      	bne.n	80080de <_dtoa_r+0x6be>
 80080ec:	9a04      	ldr	r2, [sp, #16]
 80080ee:	3201      	adds	r2, #1
 80080f0:	9204      	str	r2, [sp, #16]
 80080f2:	2230      	movs	r2, #48	@ 0x30
 80080f4:	f88a 2000 	strb.w	r2, [sl]
 80080f8:	781a      	ldrb	r2, [r3, #0]
 80080fa:	3201      	adds	r2, #1
 80080fc:	701a      	strb	r2, [r3, #0]
 80080fe:	e7bd      	b.n	800807c <_dtoa_r+0x65c>
 8008100:	2200      	movs	r2, #0
 8008102:	4b09      	ldr	r3, [pc, #36]	@ (8008128 <_dtoa_r+0x708>)
 8008104:	f7f8 fa58 	bl	80005b8 <__aeabi_dmul>
 8008108:	2200      	movs	r2, #0
 800810a:	2300      	movs	r3, #0
 800810c:	4604      	mov	r4, r0
 800810e:	460d      	mov	r5, r1
 8008110:	f7f8 fcba 	bl	8000a88 <__aeabi_dcmpeq>
 8008114:	2800      	cmp	r0, #0
 8008116:	f43f aebc 	beq.w	8007e92 <_dtoa_r+0x472>
 800811a:	e6f1      	b.n	8007f00 <_dtoa_r+0x4e0>
 800811c:	0800bc78 	.word	0x0800bc78
 8008120:	3fe00000 	.word	0x3fe00000
 8008124:	3ff00000 	.word	0x3ff00000
 8008128:	40240000 	.word	0x40240000
 800812c:	40140000 	.word	0x40140000
 8008130:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008132:	2a00      	cmp	r2, #0
 8008134:	f000 80db 	beq.w	80082ee <_dtoa_r+0x8ce>
 8008138:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800813a:	2a01      	cmp	r2, #1
 800813c:	f300 80bf 	bgt.w	80082be <_dtoa_r+0x89e>
 8008140:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008142:	2a00      	cmp	r2, #0
 8008144:	f000 80b7 	beq.w	80082b6 <_dtoa_r+0x896>
 8008148:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800814c:	4646      	mov	r6, r8
 800814e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008150:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008152:	2101      	movs	r1, #1
 8008154:	441a      	add	r2, r3
 8008156:	4658      	mov	r0, fp
 8008158:	4498      	add	r8, r3
 800815a:	9209      	str	r2, [sp, #36]	@ 0x24
 800815c:	f000 fc64 	bl	8008a28 <__i2b>
 8008160:	4605      	mov	r5, r0
 8008162:	b15e      	cbz	r6, 800817c <_dtoa_r+0x75c>
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	2b00      	cmp	r3, #0
 8008168:	dd08      	ble.n	800817c <_dtoa_r+0x75c>
 800816a:	42b3      	cmp	r3, r6
 800816c:	bfa8      	it	ge
 800816e:	4633      	movge	r3, r6
 8008170:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008172:	eba8 0803 	sub.w	r8, r8, r3
 8008176:	1af6      	subs	r6, r6, r3
 8008178:	1ad3      	subs	r3, r2, r3
 800817a:	9309      	str	r3, [sp, #36]	@ 0x24
 800817c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800817e:	b1f3      	cbz	r3, 80081be <_dtoa_r+0x79e>
 8008180:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80b7 	beq.w	80082f6 <_dtoa_r+0x8d6>
 8008188:	b18c      	cbz	r4, 80081ae <_dtoa_r+0x78e>
 800818a:	4629      	mov	r1, r5
 800818c:	4622      	mov	r2, r4
 800818e:	4658      	mov	r0, fp
 8008190:	f000 fd08 	bl	8008ba4 <__pow5mult>
 8008194:	464a      	mov	r2, r9
 8008196:	4601      	mov	r1, r0
 8008198:	4605      	mov	r5, r0
 800819a:	4658      	mov	r0, fp
 800819c:	f000 fc5a 	bl	8008a54 <__multiply>
 80081a0:	4649      	mov	r1, r9
 80081a2:	9004      	str	r0, [sp, #16]
 80081a4:	4658      	mov	r0, fp
 80081a6:	f000 fb41 	bl	800882c <_Bfree>
 80081aa:	9b04      	ldr	r3, [sp, #16]
 80081ac:	4699      	mov	r9, r3
 80081ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80081b0:	1b1a      	subs	r2, r3, r4
 80081b2:	d004      	beq.n	80081be <_dtoa_r+0x79e>
 80081b4:	4649      	mov	r1, r9
 80081b6:	4658      	mov	r0, fp
 80081b8:	f000 fcf4 	bl	8008ba4 <__pow5mult>
 80081bc:	4681      	mov	r9, r0
 80081be:	2101      	movs	r1, #1
 80081c0:	4658      	mov	r0, fp
 80081c2:	f000 fc31 	bl	8008a28 <__i2b>
 80081c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80081c8:	4604      	mov	r4, r0
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	f000 81c9 	beq.w	8008562 <_dtoa_r+0xb42>
 80081d0:	461a      	mov	r2, r3
 80081d2:	4601      	mov	r1, r0
 80081d4:	4658      	mov	r0, fp
 80081d6:	f000 fce5 	bl	8008ba4 <__pow5mult>
 80081da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80081dc:	4604      	mov	r4, r0
 80081de:	2b01      	cmp	r3, #1
 80081e0:	f300 808f 	bgt.w	8008302 <_dtoa_r+0x8e2>
 80081e4:	9b02      	ldr	r3, [sp, #8]
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	f040 8087 	bne.w	80082fa <_dtoa_r+0x8da>
 80081ec:	9b03      	ldr	r3, [sp, #12]
 80081ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	f040 8083 	bne.w	80082fe <_dtoa_r+0x8de>
 80081f8:	9b03      	ldr	r3, [sp, #12]
 80081fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081fe:	0d1b      	lsrs	r3, r3, #20
 8008200:	051b      	lsls	r3, r3, #20
 8008202:	b12b      	cbz	r3, 8008210 <_dtoa_r+0x7f0>
 8008204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008206:	f108 0801 	add.w	r8, r8, #1
 800820a:	3301      	adds	r3, #1
 800820c:	9309      	str	r3, [sp, #36]	@ 0x24
 800820e:	2301      	movs	r3, #1
 8008210:	930a      	str	r3, [sp, #40]	@ 0x28
 8008212:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 81aa 	beq.w	800856e <_dtoa_r+0xb4e>
 800821a:	6923      	ldr	r3, [r4, #16]
 800821c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008220:	6918      	ldr	r0, [r3, #16]
 8008222:	f000 fbb5 	bl	8008990 <__hi0bits>
 8008226:	f1c0 0020 	rsb	r0, r0, #32
 800822a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800822c:	4418      	add	r0, r3
 800822e:	f010 001f 	ands.w	r0, r0, #31
 8008232:	d071      	beq.n	8008318 <_dtoa_r+0x8f8>
 8008234:	f1c0 0320 	rsb	r3, r0, #32
 8008238:	2b04      	cmp	r3, #4
 800823a:	dd65      	ble.n	8008308 <_dtoa_r+0x8e8>
 800823c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800823e:	f1c0 001c 	rsb	r0, r0, #28
 8008242:	4403      	add	r3, r0
 8008244:	4480      	add	r8, r0
 8008246:	4406      	add	r6, r0
 8008248:	9309      	str	r3, [sp, #36]	@ 0x24
 800824a:	f1b8 0f00 	cmp.w	r8, #0
 800824e:	dd05      	ble.n	800825c <_dtoa_r+0x83c>
 8008250:	4649      	mov	r1, r9
 8008252:	4642      	mov	r2, r8
 8008254:	4658      	mov	r0, fp
 8008256:	f000 fcff 	bl	8008c58 <__lshift>
 800825a:	4681      	mov	r9, r0
 800825c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800825e:	2b00      	cmp	r3, #0
 8008260:	dd05      	ble.n	800826e <_dtoa_r+0x84e>
 8008262:	4621      	mov	r1, r4
 8008264:	461a      	mov	r2, r3
 8008266:	4658      	mov	r0, fp
 8008268:	f000 fcf6 	bl	8008c58 <__lshift>
 800826c:	4604      	mov	r4, r0
 800826e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008270:	2b00      	cmp	r3, #0
 8008272:	d053      	beq.n	800831c <_dtoa_r+0x8fc>
 8008274:	4621      	mov	r1, r4
 8008276:	4648      	mov	r0, r9
 8008278:	f000 fd5a 	bl	8008d30 <__mcmp>
 800827c:	2800      	cmp	r0, #0
 800827e:	da4d      	bge.n	800831c <_dtoa_r+0x8fc>
 8008280:	1e7b      	subs	r3, r7, #1
 8008282:	4649      	mov	r1, r9
 8008284:	9304      	str	r3, [sp, #16]
 8008286:	220a      	movs	r2, #10
 8008288:	2300      	movs	r3, #0
 800828a:	4658      	mov	r0, fp
 800828c:	f000 faf0 	bl	8008870 <__multadd>
 8008290:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008292:	4681      	mov	r9, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	f000 816c 	beq.w	8008572 <_dtoa_r+0xb52>
 800829a:	2300      	movs	r3, #0
 800829c:	4629      	mov	r1, r5
 800829e:	220a      	movs	r2, #10
 80082a0:	4658      	mov	r0, fp
 80082a2:	f000 fae5 	bl	8008870 <__multadd>
 80082a6:	9b08      	ldr	r3, [sp, #32]
 80082a8:	4605      	mov	r5, r0
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	dc61      	bgt.n	8008372 <_dtoa_r+0x952>
 80082ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80082b0:	2b02      	cmp	r3, #2
 80082b2:	dc3b      	bgt.n	800832c <_dtoa_r+0x90c>
 80082b4:	e05d      	b.n	8008372 <_dtoa_r+0x952>
 80082b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80082b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80082bc:	e746      	b.n	800814c <_dtoa_r+0x72c>
 80082be:	9b07      	ldr	r3, [sp, #28]
 80082c0:	1e5c      	subs	r4, r3, #1
 80082c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	bfbf      	itttt	lt
 80082c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80082ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80082cc:	1ae3      	sublt	r3, r4, r3
 80082ce:	18d2      	addlt	r2, r2, r3
 80082d0:	bfa8      	it	ge
 80082d2:	1b1c      	subge	r4, r3, r4
 80082d4:	9b07      	ldr	r3, [sp, #28]
 80082d6:	bfbe      	ittt	lt
 80082d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80082da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80082dc:	2400      	movlt	r4, #0
 80082de:	2b00      	cmp	r3, #0
 80082e0:	bfb5      	itete	lt
 80082e2:	eba8 0603 	sublt.w	r6, r8, r3
 80082e6:	4646      	movge	r6, r8
 80082e8:	2300      	movlt	r3, #0
 80082ea:	9b07      	ldrge	r3, [sp, #28]
 80082ec:	e730      	b.n	8008150 <_dtoa_r+0x730>
 80082ee:	4646      	mov	r6, r8
 80082f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80082f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80082f4:	e735      	b.n	8008162 <_dtoa_r+0x742>
 80082f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80082f8:	e75c      	b.n	80081b4 <_dtoa_r+0x794>
 80082fa:	2300      	movs	r3, #0
 80082fc:	e788      	b.n	8008210 <_dtoa_r+0x7f0>
 80082fe:	9b02      	ldr	r3, [sp, #8]
 8008300:	e786      	b.n	8008210 <_dtoa_r+0x7f0>
 8008302:	2300      	movs	r3, #0
 8008304:	930a      	str	r3, [sp, #40]	@ 0x28
 8008306:	e788      	b.n	800821a <_dtoa_r+0x7fa>
 8008308:	d09f      	beq.n	800824a <_dtoa_r+0x82a>
 800830a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800830c:	331c      	adds	r3, #28
 800830e:	441a      	add	r2, r3
 8008310:	4498      	add	r8, r3
 8008312:	441e      	add	r6, r3
 8008314:	9209      	str	r2, [sp, #36]	@ 0x24
 8008316:	e798      	b.n	800824a <_dtoa_r+0x82a>
 8008318:	4603      	mov	r3, r0
 800831a:	e7f6      	b.n	800830a <_dtoa_r+0x8ea>
 800831c:	9b07      	ldr	r3, [sp, #28]
 800831e:	9704      	str	r7, [sp, #16]
 8008320:	2b00      	cmp	r3, #0
 8008322:	dc20      	bgt.n	8008366 <_dtoa_r+0x946>
 8008324:	9308      	str	r3, [sp, #32]
 8008326:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008328:	2b02      	cmp	r3, #2
 800832a:	dd1e      	ble.n	800836a <_dtoa_r+0x94a>
 800832c:	9b08      	ldr	r3, [sp, #32]
 800832e:	2b00      	cmp	r3, #0
 8008330:	f47f aebc 	bne.w	80080ac <_dtoa_r+0x68c>
 8008334:	4621      	mov	r1, r4
 8008336:	2205      	movs	r2, #5
 8008338:	4658      	mov	r0, fp
 800833a:	f000 fa99 	bl	8008870 <__multadd>
 800833e:	4601      	mov	r1, r0
 8008340:	4604      	mov	r4, r0
 8008342:	4648      	mov	r0, r9
 8008344:	f000 fcf4 	bl	8008d30 <__mcmp>
 8008348:	2800      	cmp	r0, #0
 800834a:	f77f aeaf 	ble.w	80080ac <_dtoa_r+0x68c>
 800834e:	2331      	movs	r3, #49	@ 0x31
 8008350:	4656      	mov	r6, sl
 8008352:	f806 3b01 	strb.w	r3, [r6], #1
 8008356:	9b04      	ldr	r3, [sp, #16]
 8008358:	3301      	adds	r3, #1
 800835a:	9304      	str	r3, [sp, #16]
 800835c:	e6aa      	b.n	80080b4 <_dtoa_r+0x694>
 800835e:	9c07      	ldr	r4, [sp, #28]
 8008360:	9704      	str	r7, [sp, #16]
 8008362:	4625      	mov	r5, r4
 8008364:	e7f3      	b.n	800834e <_dtoa_r+0x92e>
 8008366:	9b07      	ldr	r3, [sp, #28]
 8008368:	9308      	str	r3, [sp, #32]
 800836a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800836c:	2b00      	cmp	r3, #0
 800836e:	f000 8104 	beq.w	800857a <_dtoa_r+0xb5a>
 8008372:	2e00      	cmp	r6, #0
 8008374:	dd05      	ble.n	8008382 <_dtoa_r+0x962>
 8008376:	4629      	mov	r1, r5
 8008378:	4632      	mov	r2, r6
 800837a:	4658      	mov	r0, fp
 800837c:	f000 fc6c 	bl	8008c58 <__lshift>
 8008380:	4605      	mov	r5, r0
 8008382:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008384:	2b00      	cmp	r3, #0
 8008386:	d05a      	beq.n	800843e <_dtoa_r+0xa1e>
 8008388:	4658      	mov	r0, fp
 800838a:	6869      	ldr	r1, [r5, #4]
 800838c:	f000 fa0e 	bl	80087ac <_Balloc>
 8008390:	4606      	mov	r6, r0
 8008392:	b928      	cbnz	r0, 80083a0 <_dtoa_r+0x980>
 8008394:	4602      	mov	r2, r0
 8008396:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800839a:	4b83      	ldr	r3, [pc, #524]	@ (80085a8 <_dtoa_r+0xb88>)
 800839c:	f7ff bb54 	b.w	8007a48 <_dtoa_r+0x28>
 80083a0:	692a      	ldr	r2, [r5, #16]
 80083a2:	f105 010c 	add.w	r1, r5, #12
 80083a6:	3202      	adds	r2, #2
 80083a8:	0092      	lsls	r2, r2, #2
 80083aa:	300c      	adds	r0, #12
 80083ac:	f7ff fa9d 	bl	80078ea <memcpy>
 80083b0:	2201      	movs	r2, #1
 80083b2:	4631      	mov	r1, r6
 80083b4:	4658      	mov	r0, fp
 80083b6:	f000 fc4f 	bl	8008c58 <__lshift>
 80083ba:	462f      	mov	r7, r5
 80083bc:	4605      	mov	r5, r0
 80083be:	f10a 0301 	add.w	r3, sl, #1
 80083c2:	9307      	str	r3, [sp, #28]
 80083c4:	9b08      	ldr	r3, [sp, #32]
 80083c6:	4453      	add	r3, sl
 80083c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80083ca:	9b02      	ldr	r3, [sp, #8]
 80083cc:	f003 0301 	and.w	r3, r3, #1
 80083d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80083d2:	9b07      	ldr	r3, [sp, #28]
 80083d4:	4621      	mov	r1, r4
 80083d6:	3b01      	subs	r3, #1
 80083d8:	4648      	mov	r0, r9
 80083da:	9302      	str	r3, [sp, #8]
 80083dc:	f7ff fa98 	bl	8007910 <quorem>
 80083e0:	4639      	mov	r1, r7
 80083e2:	9008      	str	r0, [sp, #32]
 80083e4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80083e8:	4648      	mov	r0, r9
 80083ea:	f000 fca1 	bl	8008d30 <__mcmp>
 80083ee:	462a      	mov	r2, r5
 80083f0:	9009      	str	r0, [sp, #36]	@ 0x24
 80083f2:	4621      	mov	r1, r4
 80083f4:	4658      	mov	r0, fp
 80083f6:	f000 fcb7 	bl	8008d68 <__mdiff>
 80083fa:	68c2      	ldr	r2, [r0, #12]
 80083fc:	4606      	mov	r6, r0
 80083fe:	bb02      	cbnz	r2, 8008442 <_dtoa_r+0xa22>
 8008400:	4601      	mov	r1, r0
 8008402:	4648      	mov	r0, r9
 8008404:	f000 fc94 	bl	8008d30 <__mcmp>
 8008408:	4602      	mov	r2, r0
 800840a:	4631      	mov	r1, r6
 800840c:	4658      	mov	r0, fp
 800840e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008410:	f000 fa0c 	bl	800882c <_Bfree>
 8008414:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008416:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008418:	9e07      	ldr	r6, [sp, #28]
 800841a:	ea43 0102 	orr.w	r1, r3, r2
 800841e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008420:	4319      	orrs	r1, r3
 8008422:	d110      	bne.n	8008446 <_dtoa_r+0xa26>
 8008424:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008428:	d029      	beq.n	800847e <_dtoa_r+0xa5e>
 800842a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800842c:	2b00      	cmp	r3, #0
 800842e:	dd02      	ble.n	8008436 <_dtoa_r+0xa16>
 8008430:	9b08      	ldr	r3, [sp, #32]
 8008432:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008436:	9b02      	ldr	r3, [sp, #8]
 8008438:	f883 8000 	strb.w	r8, [r3]
 800843c:	e63b      	b.n	80080b6 <_dtoa_r+0x696>
 800843e:	4628      	mov	r0, r5
 8008440:	e7bb      	b.n	80083ba <_dtoa_r+0x99a>
 8008442:	2201      	movs	r2, #1
 8008444:	e7e1      	b.n	800840a <_dtoa_r+0x9ea>
 8008446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	db04      	blt.n	8008456 <_dtoa_r+0xa36>
 800844c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800844e:	430b      	orrs	r3, r1
 8008450:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008452:	430b      	orrs	r3, r1
 8008454:	d120      	bne.n	8008498 <_dtoa_r+0xa78>
 8008456:	2a00      	cmp	r2, #0
 8008458:	dded      	ble.n	8008436 <_dtoa_r+0xa16>
 800845a:	4649      	mov	r1, r9
 800845c:	2201      	movs	r2, #1
 800845e:	4658      	mov	r0, fp
 8008460:	f000 fbfa 	bl	8008c58 <__lshift>
 8008464:	4621      	mov	r1, r4
 8008466:	4681      	mov	r9, r0
 8008468:	f000 fc62 	bl	8008d30 <__mcmp>
 800846c:	2800      	cmp	r0, #0
 800846e:	dc03      	bgt.n	8008478 <_dtoa_r+0xa58>
 8008470:	d1e1      	bne.n	8008436 <_dtoa_r+0xa16>
 8008472:	f018 0f01 	tst.w	r8, #1
 8008476:	d0de      	beq.n	8008436 <_dtoa_r+0xa16>
 8008478:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800847c:	d1d8      	bne.n	8008430 <_dtoa_r+0xa10>
 800847e:	2339      	movs	r3, #57	@ 0x39
 8008480:	9a02      	ldr	r2, [sp, #8]
 8008482:	7013      	strb	r3, [r2, #0]
 8008484:	4633      	mov	r3, r6
 8008486:	461e      	mov	r6, r3
 8008488:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800848c:	3b01      	subs	r3, #1
 800848e:	2a39      	cmp	r2, #57	@ 0x39
 8008490:	d052      	beq.n	8008538 <_dtoa_r+0xb18>
 8008492:	3201      	adds	r2, #1
 8008494:	701a      	strb	r2, [r3, #0]
 8008496:	e60e      	b.n	80080b6 <_dtoa_r+0x696>
 8008498:	2a00      	cmp	r2, #0
 800849a:	dd07      	ble.n	80084ac <_dtoa_r+0xa8c>
 800849c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80084a0:	d0ed      	beq.n	800847e <_dtoa_r+0xa5e>
 80084a2:	9a02      	ldr	r2, [sp, #8]
 80084a4:	f108 0301 	add.w	r3, r8, #1
 80084a8:	7013      	strb	r3, [r2, #0]
 80084aa:	e604      	b.n	80080b6 <_dtoa_r+0x696>
 80084ac:	9b07      	ldr	r3, [sp, #28]
 80084ae:	9a07      	ldr	r2, [sp, #28]
 80084b0:	f803 8c01 	strb.w	r8, [r3, #-1]
 80084b4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d028      	beq.n	800850c <_dtoa_r+0xaec>
 80084ba:	4649      	mov	r1, r9
 80084bc:	2300      	movs	r3, #0
 80084be:	220a      	movs	r2, #10
 80084c0:	4658      	mov	r0, fp
 80084c2:	f000 f9d5 	bl	8008870 <__multadd>
 80084c6:	42af      	cmp	r7, r5
 80084c8:	4681      	mov	r9, r0
 80084ca:	f04f 0300 	mov.w	r3, #0
 80084ce:	f04f 020a 	mov.w	r2, #10
 80084d2:	4639      	mov	r1, r7
 80084d4:	4658      	mov	r0, fp
 80084d6:	d107      	bne.n	80084e8 <_dtoa_r+0xac8>
 80084d8:	f000 f9ca 	bl	8008870 <__multadd>
 80084dc:	4607      	mov	r7, r0
 80084de:	4605      	mov	r5, r0
 80084e0:	9b07      	ldr	r3, [sp, #28]
 80084e2:	3301      	adds	r3, #1
 80084e4:	9307      	str	r3, [sp, #28]
 80084e6:	e774      	b.n	80083d2 <_dtoa_r+0x9b2>
 80084e8:	f000 f9c2 	bl	8008870 <__multadd>
 80084ec:	4629      	mov	r1, r5
 80084ee:	4607      	mov	r7, r0
 80084f0:	2300      	movs	r3, #0
 80084f2:	220a      	movs	r2, #10
 80084f4:	4658      	mov	r0, fp
 80084f6:	f000 f9bb 	bl	8008870 <__multadd>
 80084fa:	4605      	mov	r5, r0
 80084fc:	e7f0      	b.n	80084e0 <_dtoa_r+0xac0>
 80084fe:	9b08      	ldr	r3, [sp, #32]
 8008500:	2700      	movs	r7, #0
 8008502:	2b00      	cmp	r3, #0
 8008504:	bfcc      	ite	gt
 8008506:	461e      	movgt	r6, r3
 8008508:	2601      	movle	r6, #1
 800850a:	4456      	add	r6, sl
 800850c:	4649      	mov	r1, r9
 800850e:	2201      	movs	r2, #1
 8008510:	4658      	mov	r0, fp
 8008512:	f000 fba1 	bl	8008c58 <__lshift>
 8008516:	4621      	mov	r1, r4
 8008518:	4681      	mov	r9, r0
 800851a:	f000 fc09 	bl	8008d30 <__mcmp>
 800851e:	2800      	cmp	r0, #0
 8008520:	dcb0      	bgt.n	8008484 <_dtoa_r+0xa64>
 8008522:	d102      	bne.n	800852a <_dtoa_r+0xb0a>
 8008524:	f018 0f01 	tst.w	r8, #1
 8008528:	d1ac      	bne.n	8008484 <_dtoa_r+0xa64>
 800852a:	4633      	mov	r3, r6
 800852c:	461e      	mov	r6, r3
 800852e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008532:	2a30      	cmp	r2, #48	@ 0x30
 8008534:	d0fa      	beq.n	800852c <_dtoa_r+0xb0c>
 8008536:	e5be      	b.n	80080b6 <_dtoa_r+0x696>
 8008538:	459a      	cmp	sl, r3
 800853a:	d1a4      	bne.n	8008486 <_dtoa_r+0xa66>
 800853c:	9b04      	ldr	r3, [sp, #16]
 800853e:	3301      	adds	r3, #1
 8008540:	9304      	str	r3, [sp, #16]
 8008542:	2331      	movs	r3, #49	@ 0x31
 8008544:	f88a 3000 	strb.w	r3, [sl]
 8008548:	e5b5      	b.n	80080b6 <_dtoa_r+0x696>
 800854a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800854c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80085ac <_dtoa_r+0xb8c>
 8008550:	b11b      	cbz	r3, 800855a <_dtoa_r+0xb3a>
 8008552:	f10a 0308 	add.w	r3, sl, #8
 8008556:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008558:	6013      	str	r3, [r2, #0]
 800855a:	4650      	mov	r0, sl
 800855c:	b017      	add	sp, #92	@ 0x5c
 800855e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008562:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008564:	2b01      	cmp	r3, #1
 8008566:	f77f ae3d 	ble.w	80081e4 <_dtoa_r+0x7c4>
 800856a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800856c:	930a      	str	r3, [sp, #40]	@ 0x28
 800856e:	2001      	movs	r0, #1
 8008570:	e65b      	b.n	800822a <_dtoa_r+0x80a>
 8008572:	9b08      	ldr	r3, [sp, #32]
 8008574:	2b00      	cmp	r3, #0
 8008576:	f77f aed6 	ble.w	8008326 <_dtoa_r+0x906>
 800857a:	4656      	mov	r6, sl
 800857c:	4621      	mov	r1, r4
 800857e:	4648      	mov	r0, r9
 8008580:	f7ff f9c6 	bl	8007910 <quorem>
 8008584:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008588:	9b08      	ldr	r3, [sp, #32]
 800858a:	f806 8b01 	strb.w	r8, [r6], #1
 800858e:	eba6 020a 	sub.w	r2, r6, sl
 8008592:	4293      	cmp	r3, r2
 8008594:	ddb3      	ble.n	80084fe <_dtoa_r+0xade>
 8008596:	4649      	mov	r1, r9
 8008598:	2300      	movs	r3, #0
 800859a:	220a      	movs	r2, #10
 800859c:	4658      	mov	r0, fp
 800859e:	f000 f967 	bl	8008870 <__multadd>
 80085a2:	4681      	mov	r9, r0
 80085a4:	e7ea      	b.n	800857c <_dtoa_r+0xb5c>
 80085a6:	bf00      	nop
 80085a8:	0800bbd7 	.word	0x0800bbd7
 80085ac:	0800bb5b 	.word	0x0800bb5b

080085b0 <_free_r>:
 80085b0:	b538      	push	{r3, r4, r5, lr}
 80085b2:	4605      	mov	r5, r0
 80085b4:	2900      	cmp	r1, #0
 80085b6:	d040      	beq.n	800863a <_free_r+0x8a>
 80085b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085bc:	1f0c      	subs	r4, r1, #4
 80085be:	2b00      	cmp	r3, #0
 80085c0:	bfb8      	it	lt
 80085c2:	18e4      	addlt	r4, r4, r3
 80085c4:	f000 f8e6 	bl	8008794 <__malloc_lock>
 80085c8:	4a1c      	ldr	r2, [pc, #112]	@ (800863c <_free_r+0x8c>)
 80085ca:	6813      	ldr	r3, [r2, #0]
 80085cc:	b933      	cbnz	r3, 80085dc <_free_r+0x2c>
 80085ce:	6063      	str	r3, [r4, #4]
 80085d0:	6014      	str	r4, [r2, #0]
 80085d2:	4628      	mov	r0, r5
 80085d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80085d8:	f000 b8e2 	b.w	80087a0 <__malloc_unlock>
 80085dc:	42a3      	cmp	r3, r4
 80085de:	d908      	bls.n	80085f2 <_free_r+0x42>
 80085e0:	6820      	ldr	r0, [r4, #0]
 80085e2:	1821      	adds	r1, r4, r0
 80085e4:	428b      	cmp	r3, r1
 80085e6:	bf01      	itttt	eq
 80085e8:	6819      	ldreq	r1, [r3, #0]
 80085ea:	685b      	ldreq	r3, [r3, #4]
 80085ec:	1809      	addeq	r1, r1, r0
 80085ee:	6021      	streq	r1, [r4, #0]
 80085f0:	e7ed      	b.n	80085ce <_free_r+0x1e>
 80085f2:	461a      	mov	r2, r3
 80085f4:	685b      	ldr	r3, [r3, #4]
 80085f6:	b10b      	cbz	r3, 80085fc <_free_r+0x4c>
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	d9fa      	bls.n	80085f2 <_free_r+0x42>
 80085fc:	6811      	ldr	r1, [r2, #0]
 80085fe:	1850      	adds	r0, r2, r1
 8008600:	42a0      	cmp	r0, r4
 8008602:	d10b      	bne.n	800861c <_free_r+0x6c>
 8008604:	6820      	ldr	r0, [r4, #0]
 8008606:	4401      	add	r1, r0
 8008608:	1850      	adds	r0, r2, r1
 800860a:	4283      	cmp	r3, r0
 800860c:	6011      	str	r1, [r2, #0]
 800860e:	d1e0      	bne.n	80085d2 <_free_r+0x22>
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	685b      	ldr	r3, [r3, #4]
 8008614:	4408      	add	r0, r1
 8008616:	6010      	str	r0, [r2, #0]
 8008618:	6053      	str	r3, [r2, #4]
 800861a:	e7da      	b.n	80085d2 <_free_r+0x22>
 800861c:	d902      	bls.n	8008624 <_free_r+0x74>
 800861e:	230c      	movs	r3, #12
 8008620:	602b      	str	r3, [r5, #0]
 8008622:	e7d6      	b.n	80085d2 <_free_r+0x22>
 8008624:	6820      	ldr	r0, [r4, #0]
 8008626:	1821      	adds	r1, r4, r0
 8008628:	428b      	cmp	r3, r1
 800862a:	bf01      	itttt	eq
 800862c:	6819      	ldreq	r1, [r3, #0]
 800862e:	685b      	ldreq	r3, [r3, #4]
 8008630:	1809      	addeq	r1, r1, r0
 8008632:	6021      	streq	r1, [r4, #0]
 8008634:	6063      	str	r3, [r4, #4]
 8008636:	6054      	str	r4, [r2, #4]
 8008638:	e7cb      	b.n	80085d2 <_free_r+0x22>
 800863a:	bd38      	pop	{r3, r4, r5, pc}
 800863c:	20002140 	.word	0x20002140

08008640 <malloc>:
 8008640:	4b02      	ldr	r3, [pc, #8]	@ (800864c <malloc+0xc>)
 8008642:	4601      	mov	r1, r0
 8008644:	6818      	ldr	r0, [r3, #0]
 8008646:	f000 b825 	b.w	8008694 <_malloc_r>
 800864a:	bf00      	nop
 800864c:	2000001c 	.word	0x2000001c

08008650 <sbrk_aligned>:
 8008650:	b570      	push	{r4, r5, r6, lr}
 8008652:	4e0f      	ldr	r6, [pc, #60]	@ (8008690 <sbrk_aligned+0x40>)
 8008654:	460c      	mov	r4, r1
 8008656:	6831      	ldr	r1, [r6, #0]
 8008658:	4605      	mov	r5, r0
 800865a:	b911      	cbnz	r1, 8008662 <sbrk_aligned+0x12>
 800865c:	f001 fdf6 	bl	800a24c <_sbrk_r>
 8008660:	6030      	str	r0, [r6, #0]
 8008662:	4621      	mov	r1, r4
 8008664:	4628      	mov	r0, r5
 8008666:	f001 fdf1 	bl	800a24c <_sbrk_r>
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	d103      	bne.n	8008676 <sbrk_aligned+0x26>
 800866e:	f04f 34ff 	mov.w	r4, #4294967295
 8008672:	4620      	mov	r0, r4
 8008674:	bd70      	pop	{r4, r5, r6, pc}
 8008676:	1cc4      	adds	r4, r0, #3
 8008678:	f024 0403 	bic.w	r4, r4, #3
 800867c:	42a0      	cmp	r0, r4
 800867e:	d0f8      	beq.n	8008672 <sbrk_aligned+0x22>
 8008680:	1a21      	subs	r1, r4, r0
 8008682:	4628      	mov	r0, r5
 8008684:	f001 fde2 	bl	800a24c <_sbrk_r>
 8008688:	3001      	adds	r0, #1
 800868a:	d1f2      	bne.n	8008672 <sbrk_aligned+0x22>
 800868c:	e7ef      	b.n	800866e <sbrk_aligned+0x1e>
 800868e:	bf00      	nop
 8008690:	2000213c 	.word	0x2000213c

08008694 <_malloc_r>:
 8008694:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008698:	1ccd      	adds	r5, r1, #3
 800869a:	f025 0503 	bic.w	r5, r5, #3
 800869e:	3508      	adds	r5, #8
 80086a0:	2d0c      	cmp	r5, #12
 80086a2:	bf38      	it	cc
 80086a4:	250c      	movcc	r5, #12
 80086a6:	2d00      	cmp	r5, #0
 80086a8:	4606      	mov	r6, r0
 80086aa:	db01      	blt.n	80086b0 <_malloc_r+0x1c>
 80086ac:	42a9      	cmp	r1, r5
 80086ae:	d904      	bls.n	80086ba <_malloc_r+0x26>
 80086b0:	230c      	movs	r3, #12
 80086b2:	6033      	str	r3, [r6, #0]
 80086b4:	2000      	movs	r0, #0
 80086b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80086ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008790 <_malloc_r+0xfc>
 80086be:	f000 f869 	bl	8008794 <__malloc_lock>
 80086c2:	f8d8 3000 	ldr.w	r3, [r8]
 80086c6:	461c      	mov	r4, r3
 80086c8:	bb44      	cbnz	r4, 800871c <_malloc_r+0x88>
 80086ca:	4629      	mov	r1, r5
 80086cc:	4630      	mov	r0, r6
 80086ce:	f7ff ffbf 	bl	8008650 <sbrk_aligned>
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	4604      	mov	r4, r0
 80086d6:	d158      	bne.n	800878a <_malloc_r+0xf6>
 80086d8:	f8d8 4000 	ldr.w	r4, [r8]
 80086dc:	4627      	mov	r7, r4
 80086de:	2f00      	cmp	r7, #0
 80086e0:	d143      	bne.n	800876a <_malloc_r+0xd6>
 80086e2:	2c00      	cmp	r4, #0
 80086e4:	d04b      	beq.n	800877e <_malloc_r+0xea>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	4639      	mov	r1, r7
 80086ea:	4630      	mov	r0, r6
 80086ec:	eb04 0903 	add.w	r9, r4, r3
 80086f0:	f001 fdac 	bl	800a24c <_sbrk_r>
 80086f4:	4581      	cmp	r9, r0
 80086f6:	d142      	bne.n	800877e <_malloc_r+0xea>
 80086f8:	6821      	ldr	r1, [r4, #0]
 80086fa:	4630      	mov	r0, r6
 80086fc:	1a6d      	subs	r5, r5, r1
 80086fe:	4629      	mov	r1, r5
 8008700:	f7ff ffa6 	bl	8008650 <sbrk_aligned>
 8008704:	3001      	adds	r0, #1
 8008706:	d03a      	beq.n	800877e <_malloc_r+0xea>
 8008708:	6823      	ldr	r3, [r4, #0]
 800870a:	442b      	add	r3, r5
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	f8d8 3000 	ldr.w	r3, [r8]
 8008712:	685a      	ldr	r2, [r3, #4]
 8008714:	bb62      	cbnz	r2, 8008770 <_malloc_r+0xdc>
 8008716:	f8c8 7000 	str.w	r7, [r8]
 800871a:	e00f      	b.n	800873c <_malloc_r+0xa8>
 800871c:	6822      	ldr	r2, [r4, #0]
 800871e:	1b52      	subs	r2, r2, r5
 8008720:	d420      	bmi.n	8008764 <_malloc_r+0xd0>
 8008722:	2a0b      	cmp	r2, #11
 8008724:	d917      	bls.n	8008756 <_malloc_r+0xc2>
 8008726:	1961      	adds	r1, r4, r5
 8008728:	42a3      	cmp	r3, r4
 800872a:	6025      	str	r5, [r4, #0]
 800872c:	bf18      	it	ne
 800872e:	6059      	strne	r1, [r3, #4]
 8008730:	6863      	ldr	r3, [r4, #4]
 8008732:	bf08      	it	eq
 8008734:	f8c8 1000 	streq.w	r1, [r8]
 8008738:	5162      	str	r2, [r4, r5]
 800873a:	604b      	str	r3, [r1, #4]
 800873c:	4630      	mov	r0, r6
 800873e:	f000 f82f 	bl	80087a0 <__malloc_unlock>
 8008742:	f104 000b 	add.w	r0, r4, #11
 8008746:	1d23      	adds	r3, r4, #4
 8008748:	f020 0007 	bic.w	r0, r0, #7
 800874c:	1ac2      	subs	r2, r0, r3
 800874e:	bf1c      	itt	ne
 8008750:	1a1b      	subne	r3, r3, r0
 8008752:	50a3      	strne	r3, [r4, r2]
 8008754:	e7af      	b.n	80086b6 <_malloc_r+0x22>
 8008756:	6862      	ldr	r2, [r4, #4]
 8008758:	42a3      	cmp	r3, r4
 800875a:	bf0c      	ite	eq
 800875c:	f8c8 2000 	streq.w	r2, [r8]
 8008760:	605a      	strne	r2, [r3, #4]
 8008762:	e7eb      	b.n	800873c <_malloc_r+0xa8>
 8008764:	4623      	mov	r3, r4
 8008766:	6864      	ldr	r4, [r4, #4]
 8008768:	e7ae      	b.n	80086c8 <_malloc_r+0x34>
 800876a:	463c      	mov	r4, r7
 800876c:	687f      	ldr	r7, [r7, #4]
 800876e:	e7b6      	b.n	80086de <_malloc_r+0x4a>
 8008770:	461a      	mov	r2, r3
 8008772:	685b      	ldr	r3, [r3, #4]
 8008774:	42a3      	cmp	r3, r4
 8008776:	d1fb      	bne.n	8008770 <_malloc_r+0xdc>
 8008778:	2300      	movs	r3, #0
 800877a:	6053      	str	r3, [r2, #4]
 800877c:	e7de      	b.n	800873c <_malloc_r+0xa8>
 800877e:	230c      	movs	r3, #12
 8008780:	4630      	mov	r0, r6
 8008782:	6033      	str	r3, [r6, #0]
 8008784:	f000 f80c 	bl	80087a0 <__malloc_unlock>
 8008788:	e794      	b.n	80086b4 <_malloc_r+0x20>
 800878a:	6005      	str	r5, [r0, #0]
 800878c:	e7d6      	b.n	800873c <_malloc_r+0xa8>
 800878e:	bf00      	nop
 8008790:	20002140 	.word	0x20002140

08008794 <__malloc_lock>:
 8008794:	4801      	ldr	r0, [pc, #4]	@ (800879c <__malloc_lock+0x8>)
 8008796:	f7ff b898 	b.w	80078ca <__retarget_lock_acquire_recursive>
 800879a:	bf00      	nop
 800879c:	20002138 	.word	0x20002138

080087a0 <__malloc_unlock>:
 80087a0:	4801      	ldr	r0, [pc, #4]	@ (80087a8 <__malloc_unlock+0x8>)
 80087a2:	f7ff b893 	b.w	80078cc <__retarget_lock_release_recursive>
 80087a6:	bf00      	nop
 80087a8:	20002138 	.word	0x20002138

080087ac <_Balloc>:
 80087ac:	b570      	push	{r4, r5, r6, lr}
 80087ae:	69c6      	ldr	r6, [r0, #28]
 80087b0:	4604      	mov	r4, r0
 80087b2:	460d      	mov	r5, r1
 80087b4:	b976      	cbnz	r6, 80087d4 <_Balloc+0x28>
 80087b6:	2010      	movs	r0, #16
 80087b8:	f7ff ff42 	bl	8008640 <malloc>
 80087bc:	4602      	mov	r2, r0
 80087be:	61e0      	str	r0, [r4, #28]
 80087c0:	b920      	cbnz	r0, 80087cc <_Balloc+0x20>
 80087c2:	216b      	movs	r1, #107	@ 0x6b
 80087c4:	4b17      	ldr	r3, [pc, #92]	@ (8008824 <_Balloc+0x78>)
 80087c6:	4818      	ldr	r0, [pc, #96]	@ (8008828 <_Balloc+0x7c>)
 80087c8:	f001 fd56 	bl	800a278 <__assert_func>
 80087cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80087d0:	6006      	str	r6, [r0, #0]
 80087d2:	60c6      	str	r6, [r0, #12]
 80087d4:	69e6      	ldr	r6, [r4, #28]
 80087d6:	68f3      	ldr	r3, [r6, #12]
 80087d8:	b183      	cbz	r3, 80087fc <_Balloc+0x50>
 80087da:	69e3      	ldr	r3, [r4, #28]
 80087dc:	68db      	ldr	r3, [r3, #12]
 80087de:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80087e2:	b9b8      	cbnz	r0, 8008814 <_Balloc+0x68>
 80087e4:	2101      	movs	r1, #1
 80087e6:	fa01 f605 	lsl.w	r6, r1, r5
 80087ea:	1d72      	adds	r2, r6, #5
 80087ec:	4620      	mov	r0, r4
 80087ee:	0092      	lsls	r2, r2, #2
 80087f0:	f001 fd60 	bl	800a2b4 <_calloc_r>
 80087f4:	b160      	cbz	r0, 8008810 <_Balloc+0x64>
 80087f6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80087fa:	e00e      	b.n	800881a <_Balloc+0x6e>
 80087fc:	2221      	movs	r2, #33	@ 0x21
 80087fe:	2104      	movs	r1, #4
 8008800:	4620      	mov	r0, r4
 8008802:	f001 fd57 	bl	800a2b4 <_calloc_r>
 8008806:	69e3      	ldr	r3, [r4, #28]
 8008808:	60f0      	str	r0, [r6, #12]
 800880a:	68db      	ldr	r3, [r3, #12]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d1e4      	bne.n	80087da <_Balloc+0x2e>
 8008810:	2000      	movs	r0, #0
 8008812:	bd70      	pop	{r4, r5, r6, pc}
 8008814:	6802      	ldr	r2, [r0, #0]
 8008816:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800881a:	2300      	movs	r3, #0
 800881c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008820:	e7f7      	b.n	8008812 <_Balloc+0x66>
 8008822:	bf00      	nop
 8008824:	0800bb68 	.word	0x0800bb68
 8008828:	0800bbe8 	.word	0x0800bbe8

0800882c <_Bfree>:
 800882c:	b570      	push	{r4, r5, r6, lr}
 800882e:	69c6      	ldr	r6, [r0, #28]
 8008830:	4605      	mov	r5, r0
 8008832:	460c      	mov	r4, r1
 8008834:	b976      	cbnz	r6, 8008854 <_Bfree+0x28>
 8008836:	2010      	movs	r0, #16
 8008838:	f7ff ff02 	bl	8008640 <malloc>
 800883c:	4602      	mov	r2, r0
 800883e:	61e8      	str	r0, [r5, #28]
 8008840:	b920      	cbnz	r0, 800884c <_Bfree+0x20>
 8008842:	218f      	movs	r1, #143	@ 0x8f
 8008844:	4b08      	ldr	r3, [pc, #32]	@ (8008868 <_Bfree+0x3c>)
 8008846:	4809      	ldr	r0, [pc, #36]	@ (800886c <_Bfree+0x40>)
 8008848:	f001 fd16 	bl	800a278 <__assert_func>
 800884c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008850:	6006      	str	r6, [r0, #0]
 8008852:	60c6      	str	r6, [r0, #12]
 8008854:	b13c      	cbz	r4, 8008866 <_Bfree+0x3a>
 8008856:	69eb      	ldr	r3, [r5, #28]
 8008858:	6862      	ldr	r2, [r4, #4]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008860:	6021      	str	r1, [r4, #0]
 8008862:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008866:	bd70      	pop	{r4, r5, r6, pc}
 8008868:	0800bb68 	.word	0x0800bb68
 800886c:	0800bbe8 	.word	0x0800bbe8

08008870 <__multadd>:
 8008870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008874:	4607      	mov	r7, r0
 8008876:	460c      	mov	r4, r1
 8008878:	461e      	mov	r6, r3
 800887a:	2000      	movs	r0, #0
 800887c:	690d      	ldr	r5, [r1, #16]
 800887e:	f101 0c14 	add.w	ip, r1, #20
 8008882:	f8dc 3000 	ldr.w	r3, [ip]
 8008886:	3001      	adds	r0, #1
 8008888:	b299      	uxth	r1, r3
 800888a:	fb02 6101 	mla	r1, r2, r1, r6
 800888e:	0c1e      	lsrs	r6, r3, #16
 8008890:	0c0b      	lsrs	r3, r1, #16
 8008892:	fb02 3306 	mla	r3, r2, r6, r3
 8008896:	b289      	uxth	r1, r1
 8008898:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800889c:	4285      	cmp	r5, r0
 800889e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80088a2:	f84c 1b04 	str.w	r1, [ip], #4
 80088a6:	dcec      	bgt.n	8008882 <__multadd+0x12>
 80088a8:	b30e      	cbz	r6, 80088ee <__multadd+0x7e>
 80088aa:	68a3      	ldr	r3, [r4, #8]
 80088ac:	42ab      	cmp	r3, r5
 80088ae:	dc19      	bgt.n	80088e4 <__multadd+0x74>
 80088b0:	6861      	ldr	r1, [r4, #4]
 80088b2:	4638      	mov	r0, r7
 80088b4:	3101      	adds	r1, #1
 80088b6:	f7ff ff79 	bl	80087ac <_Balloc>
 80088ba:	4680      	mov	r8, r0
 80088bc:	b928      	cbnz	r0, 80088ca <__multadd+0x5a>
 80088be:	4602      	mov	r2, r0
 80088c0:	21ba      	movs	r1, #186	@ 0xba
 80088c2:	4b0c      	ldr	r3, [pc, #48]	@ (80088f4 <__multadd+0x84>)
 80088c4:	480c      	ldr	r0, [pc, #48]	@ (80088f8 <__multadd+0x88>)
 80088c6:	f001 fcd7 	bl	800a278 <__assert_func>
 80088ca:	6922      	ldr	r2, [r4, #16]
 80088cc:	f104 010c 	add.w	r1, r4, #12
 80088d0:	3202      	adds	r2, #2
 80088d2:	0092      	lsls	r2, r2, #2
 80088d4:	300c      	adds	r0, #12
 80088d6:	f7ff f808 	bl	80078ea <memcpy>
 80088da:	4621      	mov	r1, r4
 80088dc:	4638      	mov	r0, r7
 80088de:	f7ff ffa5 	bl	800882c <_Bfree>
 80088e2:	4644      	mov	r4, r8
 80088e4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80088e8:	3501      	adds	r5, #1
 80088ea:	615e      	str	r6, [r3, #20]
 80088ec:	6125      	str	r5, [r4, #16]
 80088ee:	4620      	mov	r0, r4
 80088f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088f4:	0800bbd7 	.word	0x0800bbd7
 80088f8:	0800bbe8 	.word	0x0800bbe8

080088fc <__s2b>:
 80088fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008900:	4615      	mov	r5, r2
 8008902:	2209      	movs	r2, #9
 8008904:	461f      	mov	r7, r3
 8008906:	3308      	adds	r3, #8
 8008908:	460c      	mov	r4, r1
 800890a:	fb93 f3f2 	sdiv	r3, r3, r2
 800890e:	4606      	mov	r6, r0
 8008910:	2201      	movs	r2, #1
 8008912:	2100      	movs	r1, #0
 8008914:	429a      	cmp	r2, r3
 8008916:	db09      	blt.n	800892c <__s2b+0x30>
 8008918:	4630      	mov	r0, r6
 800891a:	f7ff ff47 	bl	80087ac <_Balloc>
 800891e:	b940      	cbnz	r0, 8008932 <__s2b+0x36>
 8008920:	4602      	mov	r2, r0
 8008922:	21d3      	movs	r1, #211	@ 0xd3
 8008924:	4b18      	ldr	r3, [pc, #96]	@ (8008988 <__s2b+0x8c>)
 8008926:	4819      	ldr	r0, [pc, #100]	@ (800898c <__s2b+0x90>)
 8008928:	f001 fca6 	bl	800a278 <__assert_func>
 800892c:	0052      	lsls	r2, r2, #1
 800892e:	3101      	adds	r1, #1
 8008930:	e7f0      	b.n	8008914 <__s2b+0x18>
 8008932:	9b08      	ldr	r3, [sp, #32]
 8008934:	2d09      	cmp	r5, #9
 8008936:	6143      	str	r3, [r0, #20]
 8008938:	f04f 0301 	mov.w	r3, #1
 800893c:	6103      	str	r3, [r0, #16]
 800893e:	dd16      	ble.n	800896e <__s2b+0x72>
 8008940:	f104 0909 	add.w	r9, r4, #9
 8008944:	46c8      	mov	r8, r9
 8008946:	442c      	add	r4, r5
 8008948:	f818 3b01 	ldrb.w	r3, [r8], #1
 800894c:	4601      	mov	r1, r0
 800894e:	220a      	movs	r2, #10
 8008950:	4630      	mov	r0, r6
 8008952:	3b30      	subs	r3, #48	@ 0x30
 8008954:	f7ff ff8c 	bl	8008870 <__multadd>
 8008958:	45a0      	cmp	r8, r4
 800895a:	d1f5      	bne.n	8008948 <__s2b+0x4c>
 800895c:	f1a5 0408 	sub.w	r4, r5, #8
 8008960:	444c      	add	r4, r9
 8008962:	1b2d      	subs	r5, r5, r4
 8008964:	1963      	adds	r3, r4, r5
 8008966:	42bb      	cmp	r3, r7
 8008968:	db04      	blt.n	8008974 <__s2b+0x78>
 800896a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800896e:	2509      	movs	r5, #9
 8008970:	340a      	adds	r4, #10
 8008972:	e7f6      	b.n	8008962 <__s2b+0x66>
 8008974:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008978:	4601      	mov	r1, r0
 800897a:	220a      	movs	r2, #10
 800897c:	4630      	mov	r0, r6
 800897e:	3b30      	subs	r3, #48	@ 0x30
 8008980:	f7ff ff76 	bl	8008870 <__multadd>
 8008984:	e7ee      	b.n	8008964 <__s2b+0x68>
 8008986:	bf00      	nop
 8008988:	0800bbd7 	.word	0x0800bbd7
 800898c:	0800bbe8 	.word	0x0800bbe8

08008990 <__hi0bits>:
 8008990:	4603      	mov	r3, r0
 8008992:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008996:	bf3a      	itte	cc
 8008998:	0403      	lslcc	r3, r0, #16
 800899a:	2010      	movcc	r0, #16
 800899c:	2000      	movcs	r0, #0
 800899e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80089a2:	bf3c      	itt	cc
 80089a4:	021b      	lslcc	r3, r3, #8
 80089a6:	3008      	addcc	r0, #8
 80089a8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80089ac:	bf3c      	itt	cc
 80089ae:	011b      	lslcc	r3, r3, #4
 80089b0:	3004      	addcc	r0, #4
 80089b2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80089b6:	bf3c      	itt	cc
 80089b8:	009b      	lslcc	r3, r3, #2
 80089ba:	3002      	addcc	r0, #2
 80089bc:	2b00      	cmp	r3, #0
 80089be:	db05      	blt.n	80089cc <__hi0bits+0x3c>
 80089c0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80089c4:	f100 0001 	add.w	r0, r0, #1
 80089c8:	bf08      	it	eq
 80089ca:	2020      	moveq	r0, #32
 80089cc:	4770      	bx	lr

080089ce <__lo0bits>:
 80089ce:	6803      	ldr	r3, [r0, #0]
 80089d0:	4602      	mov	r2, r0
 80089d2:	f013 0007 	ands.w	r0, r3, #7
 80089d6:	d00b      	beq.n	80089f0 <__lo0bits+0x22>
 80089d8:	07d9      	lsls	r1, r3, #31
 80089da:	d421      	bmi.n	8008a20 <__lo0bits+0x52>
 80089dc:	0798      	lsls	r0, r3, #30
 80089de:	bf49      	itett	mi
 80089e0:	085b      	lsrmi	r3, r3, #1
 80089e2:	089b      	lsrpl	r3, r3, #2
 80089e4:	2001      	movmi	r0, #1
 80089e6:	6013      	strmi	r3, [r2, #0]
 80089e8:	bf5c      	itt	pl
 80089ea:	2002      	movpl	r0, #2
 80089ec:	6013      	strpl	r3, [r2, #0]
 80089ee:	4770      	bx	lr
 80089f0:	b299      	uxth	r1, r3
 80089f2:	b909      	cbnz	r1, 80089f8 <__lo0bits+0x2a>
 80089f4:	2010      	movs	r0, #16
 80089f6:	0c1b      	lsrs	r3, r3, #16
 80089f8:	b2d9      	uxtb	r1, r3
 80089fa:	b909      	cbnz	r1, 8008a00 <__lo0bits+0x32>
 80089fc:	3008      	adds	r0, #8
 80089fe:	0a1b      	lsrs	r3, r3, #8
 8008a00:	0719      	lsls	r1, r3, #28
 8008a02:	bf04      	itt	eq
 8008a04:	091b      	lsreq	r3, r3, #4
 8008a06:	3004      	addeq	r0, #4
 8008a08:	0799      	lsls	r1, r3, #30
 8008a0a:	bf04      	itt	eq
 8008a0c:	089b      	lsreq	r3, r3, #2
 8008a0e:	3002      	addeq	r0, #2
 8008a10:	07d9      	lsls	r1, r3, #31
 8008a12:	d403      	bmi.n	8008a1c <__lo0bits+0x4e>
 8008a14:	085b      	lsrs	r3, r3, #1
 8008a16:	f100 0001 	add.w	r0, r0, #1
 8008a1a:	d003      	beq.n	8008a24 <__lo0bits+0x56>
 8008a1c:	6013      	str	r3, [r2, #0]
 8008a1e:	4770      	bx	lr
 8008a20:	2000      	movs	r0, #0
 8008a22:	4770      	bx	lr
 8008a24:	2020      	movs	r0, #32
 8008a26:	4770      	bx	lr

08008a28 <__i2b>:
 8008a28:	b510      	push	{r4, lr}
 8008a2a:	460c      	mov	r4, r1
 8008a2c:	2101      	movs	r1, #1
 8008a2e:	f7ff febd 	bl	80087ac <_Balloc>
 8008a32:	4602      	mov	r2, r0
 8008a34:	b928      	cbnz	r0, 8008a42 <__i2b+0x1a>
 8008a36:	f240 1145 	movw	r1, #325	@ 0x145
 8008a3a:	4b04      	ldr	r3, [pc, #16]	@ (8008a4c <__i2b+0x24>)
 8008a3c:	4804      	ldr	r0, [pc, #16]	@ (8008a50 <__i2b+0x28>)
 8008a3e:	f001 fc1b 	bl	800a278 <__assert_func>
 8008a42:	2301      	movs	r3, #1
 8008a44:	6144      	str	r4, [r0, #20]
 8008a46:	6103      	str	r3, [r0, #16]
 8008a48:	bd10      	pop	{r4, pc}
 8008a4a:	bf00      	nop
 8008a4c:	0800bbd7 	.word	0x0800bbd7
 8008a50:	0800bbe8 	.word	0x0800bbe8

08008a54 <__multiply>:
 8008a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a58:	4614      	mov	r4, r2
 8008a5a:	690a      	ldr	r2, [r1, #16]
 8008a5c:	6923      	ldr	r3, [r4, #16]
 8008a5e:	460f      	mov	r7, r1
 8008a60:	429a      	cmp	r2, r3
 8008a62:	bfa2      	ittt	ge
 8008a64:	4623      	movge	r3, r4
 8008a66:	460c      	movge	r4, r1
 8008a68:	461f      	movge	r7, r3
 8008a6a:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008a6e:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008a72:	68a3      	ldr	r3, [r4, #8]
 8008a74:	6861      	ldr	r1, [r4, #4]
 8008a76:	eb0a 0609 	add.w	r6, sl, r9
 8008a7a:	42b3      	cmp	r3, r6
 8008a7c:	b085      	sub	sp, #20
 8008a7e:	bfb8      	it	lt
 8008a80:	3101      	addlt	r1, #1
 8008a82:	f7ff fe93 	bl	80087ac <_Balloc>
 8008a86:	b930      	cbnz	r0, 8008a96 <__multiply+0x42>
 8008a88:	4602      	mov	r2, r0
 8008a8a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008a8e:	4b43      	ldr	r3, [pc, #268]	@ (8008b9c <__multiply+0x148>)
 8008a90:	4843      	ldr	r0, [pc, #268]	@ (8008ba0 <__multiply+0x14c>)
 8008a92:	f001 fbf1 	bl	800a278 <__assert_func>
 8008a96:	f100 0514 	add.w	r5, r0, #20
 8008a9a:	462b      	mov	r3, r5
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008aa2:	4543      	cmp	r3, r8
 8008aa4:	d321      	bcc.n	8008aea <__multiply+0x96>
 8008aa6:	f107 0114 	add.w	r1, r7, #20
 8008aaa:	f104 0214 	add.w	r2, r4, #20
 8008aae:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8008ab2:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008ab6:	9302      	str	r3, [sp, #8]
 8008ab8:	1b13      	subs	r3, r2, r4
 8008aba:	3b15      	subs	r3, #21
 8008abc:	f023 0303 	bic.w	r3, r3, #3
 8008ac0:	3304      	adds	r3, #4
 8008ac2:	f104 0715 	add.w	r7, r4, #21
 8008ac6:	42ba      	cmp	r2, r7
 8008ac8:	bf38      	it	cc
 8008aca:	2304      	movcc	r3, #4
 8008acc:	9301      	str	r3, [sp, #4]
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	9103      	str	r1, [sp, #12]
 8008ad2:	428b      	cmp	r3, r1
 8008ad4:	d80c      	bhi.n	8008af0 <__multiply+0x9c>
 8008ad6:	2e00      	cmp	r6, #0
 8008ad8:	dd03      	ble.n	8008ae2 <__multiply+0x8e>
 8008ada:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d05a      	beq.n	8008b98 <__multiply+0x144>
 8008ae2:	6106      	str	r6, [r0, #16]
 8008ae4:	b005      	add	sp, #20
 8008ae6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008aea:	f843 2b04 	str.w	r2, [r3], #4
 8008aee:	e7d8      	b.n	8008aa2 <__multiply+0x4e>
 8008af0:	f8b1 a000 	ldrh.w	sl, [r1]
 8008af4:	f1ba 0f00 	cmp.w	sl, #0
 8008af8:	d023      	beq.n	8008b42 <__multiply+0xee>
 8008afa:	46a9      	mov	r9, r5
 8008afc:	f04f 0c00 	mov.w	ip, #0
 8008b00:	f104 0e14 	add.w	lr, r4, #20
 8008b04:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008b08:	f8d9 3000 	ldr.w	r3, [r9]
 8008b0c:	fa1f fb87 	uxth.w	fp, r7
 8008b10:	b29b      	uxth	r3, r3
 8008b12:	fb0a 330b 	mla	r3, sl, fp, r3
 8008b16:	4463      	add	r3, ip
 8008b18:	f8d9 c000 	ldr.w	ip, [r9]
 8008b1c:	0c3f      	lsrs	r7, r7, #16
 8008b1e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8008b22:	fb0a c707 	mla	r7, sl, r7, ip
 8008b26:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008b2a:	b29b      	uxth	r3, r3
 8008b2c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b30:	4572      	cmp	r2, lr
 8008b32:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8008b36:	f849 3b04 	str.w	r3, [r9], #4
 8008b3a:	d8e3      	bhi.n	8008b04 <__multiply+0xb0>
 8008b3c:	9b01      	ldr	r3, [sp, #4]
 8008b3e:	f845 c003 	str.w	ip, [r5, r3]
 8008b42:	9b03      	ldr	r3, [sp, #12]
 8008b44:	3104      	adds	r1, #4
 8008b46:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008b4a:	f1b9 0f00 	cmp.w	r9, #0
 8008b4e:	d021      	beq.n	8008b94 <__multiply+0x140>
 8008b50:	46ae      	mov	lr, r5
 8008b52:	f04f 0a00 	mov.w	sl, #0
 8008b56:	682b      	ldr	r3, [r5, #0]
 8008b58:	f104 0c14 	add.w	ip, r4, #20
 8008b5c:	f8bc b000 	ldrh.w	fp, [ip]
 8008b60:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8008b64:	b29b      	uxth	r3, r3
 8008b66:	fb09 770b 	mla	r7, r9, fp, r7
 8008b6a:	4457      	add	r7, sl
 8008b6c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8008b70:	f84e 3b04 	str.w	r3, [lr], #4
 8008b74:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008b78:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b7c:	f8be 3000 	ldrh.w	r3, [lr]
 8008b80:	4562      	cmp	r2, ip
 8008b82:	fb09 330a 	mla	r3, r9, sl, r3
 8008b86:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008b8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008b8e:	d8e5      	bhi.n	8008b5c <__multiply+0x108>
 8008b90:	9f01      	ldr	r7, [sp, #4]
 8008b92:	51eb      	str	r3, [r5, r7]
 8008b94:	3504      	adds	r5, #4
 8008b96:	e79a      	b.n	8008ace <__multiply+0x7a>
 8008b98:	3e01      	subs	r6, #1
 8008b9a:	e79c      	b.n	8008ad6 <__multiply+0x82>
 8008b9c:	0800bbd7 	.word	0x0800bbd7
 8008ba0:	0800bbe8 	.word	0x0800bbe8

08008ba4 <__pow5mult>:
 8008ba4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ba8:	4615      	mov	r5, r2
 8008baa:	f012 0203 	ands.w	r2, r2, #3
 8008bae:	4607      	mov	r7, r0
 8008bb0:	460e      	mov	r6, r1
 8008bb2:	d007      	beq.n	8008bc4 <__pow5mult+0x20>
 8008bb4:	4c25      	ldr	r4, [pc, #148]	@ (8008c4c <__pow5mult+0xa8>)
 8008bb6:	3a01      	subs	r2, #1
 8008bb8:	2300      	movs	r3, #0
 8008bba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008bbe:	f7ff fe57 	bl	8008870 <__multadd>
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	10ad      	asrs	r5, r5, #2
 8008bc6:	d03d      	beq.n	8008c44 <__pow5mult+0xa0>
 8008bc8:	69fc      	ldr	r4, [r7, #28]
 8008bca:	b97c      	cbnz	r4, 8008bec <__pow5mult+0x48>
 8008bcc:	2010      	movs	r0, #16
 8008bce:	f7ff fd37 	bl	8008640 <malloc>
 8008bd2:	4602      	mov	r2, r0
 8008bd4:	61f8      	str	r0, [r7, #28]
 8008bd6:	b928      	cbnz	r0, 8008be4 <__pow5mult+0x40>
 8008bd8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008bdc:	4b1c      	ldr	r3, [pc, #112]	@ (8008c50 <__pow5mult+0xac>)
 8008bde:	481d      	ldr	r0, [pc, #116]	@ (8008c54 <__pow5mult+0xb0>)
 8008be0:	f001 fb4a 	bl	800a278 <__assert_func>
 8008be4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008be8:	6004      	str	r4, [r0, #0]
 8008bea:	60c4      	str	r4, [r0, #12]
 8008bec:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008bf0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008bf4:	b94c      	cbnz	r4, 8008c0a <__pow5mult+0x66>
 8008bf6:	f240 2171 	movw	r1, #625	@ 0x271
 8008bfa:	4638      	mov	r0, r7
 8008bfc:	f7ff ff14 	bl	8008a28 <__i2b>
 8008c00:	2300      	movs	r3, #0
 8008c02:	4604      	mov	r4, r0
 8008c04:	f8c8 0008 	str.w	r0, [r8, #8]
 8008c08:	6003      	str	r3, [r0, #0]
 8008c0a:	f04f 0900 	mov.w	r9, #0
 8008c0e:	07eb      	lsls	r3, r5, #31
 8008c10:	d50a      	bpl.n	8008c28 <__pow5mult+0x84>
 8008c12:	4631      	mov	r1, r6
 8008c14:	4622      	mov	r2, r4
 8008c16:	4638      	mov	r0, r7
 8008c18:	f7ff ff1c 	bl	8008a54 <__multiply>
 8008c1c:	4680      	mov	r8, r0
 8008c1e:	4631      	mov	r1, r6
 8008c20:	4638      	mov	r0, r7
 8008c22:	f7ff fe03 	bl	800882c <_Bfree>
 8008c26:	4646      	mov	r6, r8
 8008c28:	106d      	asrs	r5, r5, #1
 8008c2a:	d00b      	beq.n	8008c44 <__pow5mult+0xa0>
 8008c2c:	6820      	ldr	r0, [r4, #0]
 8008c2e:	b938      	cbnz	r0, 8008c40 <__pow5mult+0x9c>
 8008c30:	4622      	mov	r2, r4
 8008c32:	4621      	mov	r1, r4
 8008c34:	4638      	mov	r0, r7
 8008c36:	f7ff ff0d 	bl	8008a54 <__multiply>
 8008c3a:	6020      	str	r0, [r4, #0]
 8008c3c:	f8c0 9000 	str.w	r9, [r0]
 8008c40:	4604      	mov	r4, r0
 8008c42:	e7e4      	b.n	8008c0e <__pow5mult+0x6a>
 8008c44:	4630      	mov	r0, r6
 8008c46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c4a:	bf00      	nop
 8008c4c:	0800bc44 	.word	0x0800bc44
 8008c50:	0800bb68 	.word	0x0800bb68
 8008c54:	0800bbe8 	.word	0x0800bbe8

08008c58 <__lshift>:
 8008c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	4607      	mov	r7, r0
 8008c60:	4691      	mov	r9, r2
 8008c62:	6923      	ldr	r3, [r4, #16]
 8008c64:	6849      	ldr	r1, [r1, #4]
 8008c66:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008c6a:	68a3      	ldr	r3, [r4, #8]
 8008c6c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008c70:	f108 0601 	add.w	r6, r8, #1
 8008c74:	42b3      	cmp	r3, r6
 8008c76:	db0b      	blt.n	8008c90 <__lshift+0x38>
 8008c78:	4638      	mov	r0, r7
 8008c7a:	f7ff fd97 	bl	80087ac <_Balloc>
 8008c7e:	4605      	mov	r5, r0
 8008c80:	b948      	cbnz	r0, 8008c96 <__lshift+0x3e>
 8008c82:	4602      	mov	r2, r0
 8008c84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008c88:	4b27      	ldr	r3, [pc, #156]	@ (8008d28 <__lshift+0xd0>)
 8008c8a:	4828      	ldr	r0, [pc, #160]	@ (8008d2c <__lshift+0xd4>)
 8008c8c:	f001 faf4 	bl	800a278 <__assert_func>
 8008c90:	3101      	adds	r1, #1
 8008c92:	005b      	lsls	r3, r3, #1
 8008c94:	e7ee      	b.n	8008c74 <__lshift+0x1c>
 8008c96:	2300      	movs	r3, #0
 8008c98:	f100 0114 	add.w	r1, r0, #20
 8008c9c:	f100 0210 	add.w	r2, r0, #16
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	4553      	cmp	r3, sl
 8008ca4:	db33      	blt.n	8008d0e <__lshift+0xb6>
 8008ca6:	6920      	ldr	r0, [r4, #16]
 8008ca8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008cac:	f104 0314 	add.w	r3, r4, #20
 8008cb0:	f019 091f 	ands.w	r9, r9, #31
 8008cb4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008cb8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008cbc:	d02b      	beq.n	8008d16 <__lshift+0xbe>
 8008cbe:	468a      	mov	sl, r1
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f1c9 0e20 	rsb	lr, r9, #32
 8008cc6:	6818      	ldr	r0, [r3, #0]
 8008cc8:	fa00 f009 	lsl.w	r0, r0, r9
 8008ccc:	4310      	orrs	r0, r2
 8008cce:	f84a 0b04 	str.w	r0, [sl], #4
 8008cd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8008cd6:	459c      	cmp	ip, r3
 8008cd8:	fa22 f20e 	lsr.w	r2, r2, lr
 8008cdc:	d8f3      	bhi.n	8008cc6 <__lshift+0x6e>
 8008cde:	ebac 0304 	sub.w	r3, ip, r4
 8008ce2:	3b15      	subs	r3, #21
 8008ce4:	f023 0303 	bic.w	r3, r3, #3
 8008ce8:	3304      	adds	r3, #4
 8008cea:	f104 0015 	add.w	r0, r4, #21
 8008cee:	4584      	cmp	ip, r0
 8008cf0:	bf38      	it	cc
 8008cf2:	2304      	movcc	r3, #4
 8008cf4:	50ca      	str	r2, [r1, r3]
 8008cf6:	b10a      	cbz	r2, 8008cfc <__lshift+0xa4>
 8008cf8:	f108 0602 	add.w	r6, r8, #2
 8008cfc:	3e01      	subs	r6, #1
 8008cfe:	4638      	mov	r0, r7
 8008d00:	4621      	mov	r1, r4
 8008d02:	612e      	str	r6, [r5, #16]
 8008d04:	f7ff fd92 	bl	800882c <_Bfree>
 8008d08:	4628      	mov	r0, r5
 8008d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d0e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008d12:	3301      	adds	r3, #1
 8008d14:	e7c5      	b.n	8008ca2 <__lshift+0x4a>
 8008d16:	3904      	subs	r1, #4
 8008d18:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d1c:	459c      	cmp	ip, r3
 8008d1e:	f841 2f04 	str.w	r2, [r1, #4]!
 8008d22:	d8f9      	bhi.n	8008d18 <__lshift+0xc0>
 8008d24:	e7ea      	b.n	8008cfc <__lshift+0xa4>
 8008d26:	bf00      	nop
 8008d28:	0800bbd7 	.word	0x0800bbd7
 8008d2c:	0800bbe8 	.word	0x0800bbe8

08008d30 <__mcmp>:
 8008d30:	4603      	mov	r3, r0
 8008d32:	690a      	ldr	r2, [r1, #16]
 8008d34:	6900      	ldr	r0, [r0, #16]
 8008d36:	b530      	push	{r4, r5, lr}
 8008d38:	1a80      	subs	r0, r0, r2
 8008d3a:	d10e      	bne.n	8008d5a <__mcmp+0x2a>
 8008d3c:	3314      	adds	r3, #20
 8008d3e:	3114      	adds	r1, #20
 8008d40:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008d44:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008d48:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008d4c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008d50:	4295      	cmp	r5, r2
 8008d52:	d003      	beq.n	8008d5c <__mcmp+0x2c>
 8008d54:	d205      	bcs.n	8008d62 <__mcmp+0x32>
 8008d56:	f04f 30ff 	mov.w	r0, #4294967295
 8008d5a:	bd30      	pop	{r4, r5, pc}
 8008d5c:	42a3      	cmp	r3, r4
 8008d5e:	d3f3      	bcc.n	8008d48 <__mcmp+0x18>
 8008d60:	e7fb      	b.n	8008d5a <__mcmp+0x2a>
 8008d62:	2001      	movs	r0, #1
 8008d64:	e7f9      	b.n	8008d5a <__mcmp+0x2a>
	...

08008d68 <__mdiff>:
 8008d68:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	4689      	mov	r9, r1
 8008d6e:	4606      	mov	r6, r0
 8008d70:	4611      	mov	r1, r2
 8008d72:	4648      	mov	r0, r9
 8008d74:	4614      	mov	r4, r2
 8008d76:	f7ff ffdb 	bl	8008d30 <__mcmp>
 8008d7a:	1e05      	subs	r5, r0, #0
 8008d7c:	d112      	bne.n	8008da4 <__mdiff+0x3c>
 8008d7e:	4629      	mov	r1, r5
 8008d80:	4630      	mov	r0, r6
 8008d82:	f7ff fd13 	bl	80087ac <_Balloc>
 8008d86:	4602      	mov	r2, r0
 8008d88:	b928      	cbnz	r0, 8008d96 <__mdiff+0x2e>
 8008d8a:	f240 2137 	movw	r1, #567	@ 0x237
 8008d8e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e88 <__mdiff+0x120>)
 8008d90:	483e      	ldr	r0, [pc, #248]	@ (8008e8c <__mdiff+0x124>)
 8008d92:	f001 fa71 	bl	800a278 <__assert_func>
 8008d96:	2301      	movs	r3, #1
 8008d98:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008d9c:	4610      	mov	r0, r2
 8008d9e:	b003      	add	sp, #12
 8008da0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008da4:	bfbc      	itt	lt
 8008da6:	464b      	movlt	r3, r9
 8008da8:	46a1      	movlt	r9, r4
 8008daa:	4630      	mov	r0, r6
 8008dac:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008db0:	bfba      	itte	lt
 8008db2:	461c      	movlt	r4, r3
 8008db4:	2501      	movlt	r5, #1
 8008db6:	2500      	movge	r5, #0
 8008db8:	f7ff fcf8 	bl	80087ac <_Balloc>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	b918      	cbnz	r0, 8008dc8 <__mdiff+0x60>
 8008dc0:	f240 2145 	movw	r1, #581	@ 0x245
 8008dc4:	4b30      	ldr	r3, [pc, #192]	@ (8008e88 <__mdiff+0x120>)
 8008dc6:	e7e3      	b.n	8008d90 <__mdiff+0x28>
 8008dc8:	f100 0b14 	add.w	fp, r0, #20
 8008dcc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008dd0:	f109 0310 	add.w	r3, r9, #16
 8008dd4:	60c5      	str	r5, [r0, #12]
 8008dd6:	f04f 0c00 	mov.w	ip, #0
 8008dda:	f109 0514 	add.w	r5, r9, #20
 8008dde:	46d9      	mov	r9, fp
 8008de0:	6926      	ldr	r6, [r4, #16]
 8008de2:	f104 0e14 	add.w	lr, r4, #20
 8008de6:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008dea:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	9b01      	ldr	r3, [sp, #4]
 8008df2:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008df6:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008dfa:	b281      	uxth	r1, r0
 8008dfc:	9301      	str	r3, [sp, #4]
 8008dfe:	fa1f f38a 	uxth.w	r3, sl
 8008e02:	1a5b      	subs	r3, r3, r1
 8008e04:	0c00      	lsrs	r0, r0, #16
 8008e06:	4463      	add	r3, ip
 8008e08:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008e0c:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008e10:	b29b      	uxth	r3, r3
 8008e12:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008e16:	4576      	cmp	r6, lr
 8008e18:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e1c:	f849 3b04 	str.w	r3, [r9], #4
 8008e20:	d8e6      	bhi.n	8008df0 <__mdiff+0x88>
 8008e22:	1b33      	subs	r3, r6, r4
 8008e24:	3b15      	subs	r3, #21
 8008e26:	f023 0303 	bic.w	r3, r3, #3
 8008e2a:	3415      	adds	r4, #21
 8008e2c:	3304      	adds	r3, #4
 8008e2e:	42a6      	cmp	r6, r4
 8008e30:	bf38      	it	cc
 8008e32:	2304      	movcc	r3, #4
 8008e34:	441d      	add	r5, r3
 8008e36:	445b      	add	r3, fp
 8008e38:	461e      	mov	r6, r3
 8008e3a:	462c      	mov	r4, r5
 8008e3c:	4544      	cmp	r4, r8
 8008e3e:	d30e      	bcc.n	8008e5e <__mdiff+0xf6>
 8008e40:	f108 0103 	add.w	r1, r8, #3
 8008e44:	1b49      	subs	r1, r1, r5
 8008e46:	f021 0103 	bic.w	r1, r1, #3
 8008e4a:	3d03      	subs	r5, #3
 8008e4c:	45a8      	cmp	r8, r5
 8008e4e:	bf38      	it	cc
 8008e50:	2100      	movcc	r1, #0
 8008e52:	440b      	add	r3, r1
 8008e54:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008e58:	b199      	cbz	r1, 8008e82 <__mdiff+0x11a>
 8008e5a:	6117      	str	r7, [r2, #16]
 8008e5c:	e79e      	b.n	8008d9c <__mdiff+0x34>
 8008e5e:	46e6      	mov	lr, ip
 8008e60:	f854 1b04 	ldr.w	r1, [r4], #4
 8008e64:	fa1f fc81 	uxth.w	ip, r1
 8008e68:	44f4      	add	ip, lr
 8008e6a:	0c08      	lsrs	r0, r1, #16
 8008e6c:	4471      	add	r1, lr
 8008e6e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008e72:	b289      	uxth	r1, r1
 8008e74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008e78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008e7c:	f846 1b04 	str.w	r1, [r6], #4
 8008e80:	e7dc      	b.n	8008e3c <__mdiff+0xd4>
 8008e82:	3f01      	subs	r7, #1
 8008e84:	e7e6      	b.n	8008e54 <__mdiff+0xec>
 8008e86:	bf00      	nop
 8008e88:	0800bbd7 	.word	0x0800bbd7
 8008e8c:	0800bbe8 	.word	0x0800bbe8

08008e90 <__ulp>:
 8008e90:	4b0e      	ldr	r3, [pc, #56]	@ (8008ecc <__ulp+0x3c>)
 8008e92:	400b      	ands	r3, r1
 8008e94:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	dc08      	bgt.n	8008eae <__ulp+0x1e>
 8008e9c:	425b      	negs	r3, r3
 8008e9e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008ea2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008ea6:	da04      	bge.n	8008eb2 <__ulp+0x22>
 8008ea8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008eac:	4113      	asrs	r3, r2
 8008eae:	2200      	movs	r2, #0
 8008eb0:	e008      	b.n	8008ec4 <__ulp+0x34>
 8008eb2:	f1a2 0314 	sub.w	r3, r2, #20
 8008eb6:	2b1e      	cmp	r3, #30
 8008eb8:	bfd6      	itet	le
 8008eba:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008ebe:	2201      	movgt	r2, #1
 8008ec0:	40da      	lsrle	r2, r3
 8008ec2:	2300      	movs	r3, #0
 8008ec4:	4619      	mov	r1, r3
 8008ec6:	4610      	mov	r0, r2
 8008ec8:	4770      	bx	lr
 8008eca:	bf00      	nop
 8008ecc:	7ff00000 	.word	0x7ff00000

08008ed0 <__b2d>:
 8008ed0:	6902      	ldr	r2, [r0, #16]
 8008ed2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ed4:	f100 0614 	add.w	r6, r0, #20
 8008ed8:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8008edc:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8008ee0:	4f1e      	ldr	r7, [pc, #120]	@ (8008f5c <__b2d+0x8c>)
 8008ee2:	4620      	mov	r0, r4
 8008ee4:	f7ff fd54 	bl	8008990 <__hi0bits>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	f1c0 0020 	rsb	r0, r0, #32
 8008eee:	2b0a      	cmp	r3, #10
 8008ef0:	f1a2 0504 	sub.w	r5, r2, #4
 8008ef4:	6008      	str	r0, [r1, #0]
 8008ef6:	dc12      	bgt.n	8008f1e <__b2d+0x4e>
 8008ef8:	42ae      	cmp	r6, r5
 8008efa:	bf2c      	ite	cs
 8008efc:	2200      	movcs	r2, #0
 8008efe:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f02:	f1c3 0c0b 	rsb	ip, r3, #11
 8008f06:	3315      	adds	r3, #21
 8008f08:	fa24 fe0c 	lsr.w	lr, r4, ip
 8008f0c:	fa04 f303 	lsl.w	r3, r4, r3
 8008f10:	fa22 f20c 	lsr.w	r2, r2, ip
 8008f14:	ea4e 0107 	orr.w	r1, lr, r7
 8008f18:	431a      	orrs	r2, r3
 8008f1a:	4610      	mov	r0, r2
 8008f1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f1e:	42ae      	cmp	r6, r5
 8008f20:	bf36      	itet	cc
 8008f22:	f1a2 0508 	subcc.w	r5, r2, #8
 8008f26:	2200      	movcs	r2, #0
 8008f28:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8008f2c:	3b0b      	subs	r3, #11
 8008f2e:	d012      	beq.n	8008f56 <__b2d+0x86>
 8008f30:	f1c3 0720 	rsb	r7, r3, #32
 8008f34:	fa22 f107 	lsr.w	r1, r2, r7
 8008f38:	409c      	lsls	r4, r3
 8008f3a:	430c      	orrs	r4, r1
 8008f3c:	42b5      	cmp	r5, r6
 8008f3e:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8008f42:	bf94      	ite	ls
 8008f44:	2400      	movls	r4, #0
 8008f46:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8008f4a:	409a      	lsls	r2, r3
 8008f4c:	40fc      	lsrs	r4, r7
 8008f4e:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8008f52:	4322      	orrs	r2, r4
 8008f54:	e7e1      	b.n	8008f1a <__b2d+0x4a>
 8008f56:	ea44 0107 	orr.w	r1, r4, r7
 8008f5a:	e7de      	b.n	8008f1a <__b2d+0x4a>
 8008f5c:	3ff00000 	.word	0x3ff00000

08008f60 <__d2b>:
 8008f60:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8008f64:	2101      	movs	r1, #1
 8008f66:	4690      	mov	r8, r2
 8008f68:	4699      	mov	r9, r3
 8008f6a:	9e08      	ldr	r6, [sp, #32]
 8008f6c:	f7ff fc1e 	bl	80087ac <_Balloc>
 8008f70:	4604      	mov	r4, r0
 8008f72:	b930      	cbnz	r0, 8008f82 <__d2b+0x22>
 8008f74:	4602      	mov	r2, r0
 8008f76:	f240 310f 	movw	r1, #783	@ 0x30f
 8008f7a:	4b23      	ldr	r3, [pc, #140]	@ (8009008 <__d2b+0xa8>)
 8008f7c:	4823      	ldr	r0, [pc, #140]	@ (800900c <__d2b+0xac>)
 8008f7e:	f001 f97b 	bl	800a278 <__assert_func>
 8008f82:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008f86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008f8a:	b10d      	cbz	r5, 8008f90 <__d2b+0x30>
 8008f8c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008f90:	9301      	str	r3, [sp, #4]
 8008f92:	f1b8 0300 	subs.w	r3, r8, #0
 8008f96:	d024      	beq.n	8008fe2 <__d2b+0x82>
 8008f98:	4668      	mov	r0, sp
 8008f9a:	9300      	str	r3, [sp, #0]
 8008f9c:	f7ff fd17 	bl	80089ce <__lo0bits>
 8008fa0:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008fa4:	b1d8      	cbz	r0, 8008fde <__d2b+0x7e>
 8008fa6:	f1c0 0320 	rsb	r3, r0, #32
 8008faa:	fa02 f303 	lsl.w	r3, r2, r3
 8008fae:	430b      	orrs	r3, r1
 8008fb0:	40c2      	lsrs	r2, r0
 8008fb2:	6163      	str	r3, [r4, #20]
 8008fb4:	9201      	str	r2, [sp, #4]
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	bf0c      	ite	eq
 8008fbc:	2201      	moveq	r2, #1
 8008fbe:	2202      	movne	r2, #2
 8008fc0:	61a3      	str	r3, [r4, #24]
 8008fc2:	6122      	str	r2, [r4, #16]
 8008fc4:	b1ad      	cbz	r5, 8008ff2 <__d2b+0x92>
 8008fc6:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008fca:	4405      	add	r5, r0
 8008fcc:	6035      	str	r5, [r6, #0]
 8008fce:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008fd2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008fd4:	6018      	str	r0, [r3, #0]
 8008fd6:	4620      	mov	r0, r4
 8008fd8:	b002      	add	sp, #8
 8008fda:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8008fde:	6161      	str	r1, [r4, #20]
 8008fe0:	e7e9      	b.n	8008fb6 <__d2b+0x56>
 8008fe2:	a801      	add	r0, sp, #4
 8008fe4:	f7ff fcf3 	bl	80089ce <__lo0bits>
 8008fe8:	9b01      	ldr	r3, [sp, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	6163      	str	r3, [r4, #20]
 8008fee:	3020      	adds	r0, #32
 8008ff0:	e7e7      	b.n	8008fc2 <__d2b+0x62>
 8008ff2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008ff6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008ffa:	6030      	str	r0, [r6, #0]
 8008ffc:	6918      	ldr	r0, [r3, #16]
 8008ffe:	f7ff fcc7 	bl	8008990 <__hi0bits>
 8009002:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009006:	e7e4      	b.n	8008fd2 <__d2b+0x72>
 8009008:	0800bbd7 	.word	0x0800bbd7
 800900c:	0800bbe8 	.word	0x0800bbe8

08009010 <__ratio>:
 8009010:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009014:	b085      	sub	sp, #20
 8009016:	e9cd 1000 	strd	r1, r0, [sp]
 800901a:	a902      	add	r1, sp, #8
 800901c:	f7ff ff58 	bl	8008ed0 <__b2d>
 8009020:	468b      	mov	fp, r1
 8009022:	4606      	mov	r6, r0
 8009024:	460f      	mov	r7, r1
 8009026:	9800      	ldr	r0, [sp, #0]
 8009028:	a903      	add	r1, sp, #12
 800902a:	f7ff ff51 	bl	8008ed0 <__b2d>
 800902e:	460d      	mov	r5, r1
 8009030:	9b01      	ldr	r3, [sp, #4]
 8009032:	4689      	mov	r9, r1
 8009034:	6919      	ldr	r1, [r3, #16]
 8009036:	9b00      	ldr	r3, [sp, #0]
 8009038:	4604      	mov	r4, r0
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	4630      	mov	r0, r6
 800903e:	1ac9      	subs	r1, r1, r3
 8009040:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8009044:	1a9b      	subs	r3, r3, r2
 8009046:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800904a:	2b00      	cmp	r3, #0
 800904c:	bfcd      	iteet	gt
 800904e:	463a      	movgt	r2, r7
 8009050:	462a      	movle	r2, r5
 8009052:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8009056:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800905a:	bfd8      	it	le
 800905c:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8009060:	464b      	mov	r3, r9
 8009062:	4622      	mov	r2, r4
 8009064:	4659      	mov	r1, fp
 8009066:	f7f7 fbd1 	bl	800080c <__aeabi_ddiv>
 800906a:	b005      	add	sp, #20
 800906c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009070 <__copybits>:
 8009070:	3901      	subs	r1, #1
 8009072:	b570      	push	{r4, r5, r6, lr}
 8009074:	1149      	asrs	r1, r1, #5
 8009076:	6914      	ldr	r4, [r2, #16]
 8009078:	3101      	adds	r1, #1
 800907a:	f102 0314 	add.w	r3, r2, #20
 800907e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009082:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8009086:	1f05      	subs	r5, r0, #4
 8009088:	42a3      	cmp	r3, r4
 800908a:	d30c      	bcc.n	80090a6 <__copybits+0x36>
 800908c:	1aa3      	subs	r3, r4, r2
 800908e:	3b11      	subs	r3, #17
 8009090:	f023 0303 	bic.w	r3, r3, #3
 8009094:	3211      	adds	r2, #17
 8009096:	42a2      	cmp	r2, r4
 8009098:	bf88      	it	hi
 800909a:	2300      	movhi	r3, #0
 800909c:	4418      	add	r0, r3
 800909e:	2300      	movs	r3, #0
 80090a0:	4288      	cmp	r0, r1
 80090a2:	d305      	bcc.n	80090b0 <__copybits+0x40>
 80090a4:	bd70      	pop	{r4, r5, r6, pc}
 80090a6:	f853 6b04 	ldr.w	r6, [r3], #4
 80090aa:	f845 6f04 	str.w	r6, [r5, #4]!
 80090ae:	e7eb      	b.n	8009088 <__copybits+0x18>
 80090b0:	f840 3b04 	str.w	r3, [r0], #4
 80090b4:	e7f4      	b.n	80090a0 <__copybits+0x30>

080090b6 <__any_on>:
 80090b6:	f100 0214 	add.w	r2, r0, #20
 80090ba:	6900      	ldr	r0, [r0, #16]
 80090bc:	114b      	asrs	r3, r1, #5
 80090be:	4298      	cmp	r0, r3
 80090c0:	b510      	push	{r4, lr}
 80090c2:	db11      	blt.n	80090e8 <__any_on+0x32>
 80090c4:	dd0a      	ble.n	80090dc <__any_on+0x26>
 80090c6:	f011 011f 	ands.w	r1, r1, #31
 80090ca:	d007      	beq.n	80090dc <__any_on+0x26>
 80090cc:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80090d0:	fa24 f001 	lsr.w	r0, r4, r1
 80090d4:	fa00 f101 	lsl.w	r1, r0, r1
 80090d8:	428c      	cmp	r4, r1
 80090da:	d10b      	bne.n	80090f4 <__any_on+0x3e>
 80090dc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d803      	bhi.n	80090ec <__any_on+0x36>
 80090e4:	2000      	movs	r0, #0
 80090e6:	bd10      	pop	{r4, pc}
 80090e8:	4603      	mov	r3, r0
 80090ea:	e7f7      	b.n	80090dc <__any_on+0x26>
 80090ec:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80090f0:	2900      	cmp	r1, #0
 80090f2:	d0f5      	beq.n	80090e0 <__any_on+0x2a>
 80090f4:	2001      	movs	r0, #1
 80090f6:	e7f6      	b.n	80090e6 <__any_on+0x30>

080090f8 <sulp>:
 80090f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090fc:	460f      	mov	r7, r1
 80090fe:	4690      	mov	r8, r2
 8009100:	f7ff fec6 	bl	8008e90 <__ulp>
 8009104:	4604      	mov	r4, r0
 8009106:	460d      	mov	r5, r1
 8009108:	f1b8 0f00 	cmp.w	r8, #0
 800910c:	d011      	beq.n	8009132 <sulp+0x3a>
 800910e:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8009112:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009116:	2b00      	cmp	r3, #0
 8009118:	dd0b      	ble.n	8009132 <sulp+0x3a>
 800911a:	2400      	movs	r4, #0
 800911c:	051b      	lsls	r3, r3, #20
 800911e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8009122:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8009126:	4622      	mov	r2, r4
 8009128:	462b      	mov	r3, r5
 800912a:	f7f7 fa45 	bl	80005b8 <__aeabi_dmul>
 800912e:	4604      	mov	r4, r0
 8009130:	460d      	mov	r5, r1
 8009132:	4620      	mov	r0, r4
 8009134:	4629      	mov	r1, r5
 8009136:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800913a:	0000      	movs	r0, r0
 800913c:	0000      	movs	r0, r0
	...

08009140 <_strtod_l>:
 8009140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009144:	b09f      	sub	sp, #124	@ 0x7c
 8009146:	9217      	str	r2, [sp, #92]	@ 0x5c
 8009148:	2200      	movs	r2, #0
 800914a:	460c      	mov	r4, r1
 800914c:	921a      	str	r2, [sp, #104]	@ 0x68
 800914e:	f04f 0a00 	mov.w	sl, #0
 8009152:	f04f 0b00 	mov.w	fp, #0
 8009156:	460a      	mov	r2, r1
 8009158:	9005      	str	r0, [sp, #20]
 800915a:	9219      	str	r2, [sp, #100]	@ 0x64
 800915c:	7811      	ldrb	r1, [r2, #0]
 800915e:	292b      	cmp	r1, #43	@ 0x2b
 8009160:	d048      	beq.n	80091f4 <_strtod_l+0xb4>
 8009162:	d836      	bhi.n	80091d2 <_strtod_l+0x92>
 8009164:	290d      	cmp	r1, #13
 8009166:	d830      	bhi.n	80091ca <_strtod_l+0x8a>
 8009168:	2908      	cmp	r1, #8
 800916a:	d830      	bhi.n	80091ce <_strtod_l+0x8e>
 800916c:	2900      	cmp	r1, #0
 800916e:	d039      	beq.n	80091e4 <_strtod_l+0xa4>
 8009170:	2200      	movs	r2, #0
 8009172:	920b      	str	r2, [sp, #44]	@ 0x2c
 8009174:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009176:	782a      	ldrb	r2, [r5, #0]
 8009178:	2a30      	cmp	r2, #48	@ 0x30
 800917a:	f040 80b1 	bne.w	80092e0 <_strtod_l+0x1a0>
 800917e:	786a      	ldrb	r2, [r5, #1]
 8009180:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009184:	2a58      	cmp	r2, #88	@ 0x58
 8009186:	d16c      	bne.n	8009262 <_strtod_l+0x122>
 8009188:	9302      	str	r3, [sp, #8]
 800918a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800918c:	4a8e      	ldr	r2, [pc, #568]	@ (80093c8 <_strtod_l+0x288>)
 800918e:	9301      	str	r3, [sp, #4]
 8009190:	ab1a      	add	r3, sp, #104	@ 0x68
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	9805      	ldr	r0, [sp, #20]
 8009196:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009198:	a919      	add	r1, sp, #100	@ 0x64
 800919a:	f001 f907 	bl	800a3ac <__gethex>
 800919e:	f010 060f 	ands.w	r6, r0, #15
 80091a2:	4604      	mov	r4, r0
 80091a4:	d005      	beq.n	80091b2 <_strtod_l+0x72>
 80091a6:	2e06      	cmp	r6, #6
 80091a8:	d126      	bne.n	80091f8 <_strtod_l+0xb8>
 80091aa:	2300      	movs	r3, #0
 80091ac:	3501      	adds	r5, #1
 80091ae:	9519      	str	r5, [sp, #100]	@ 0x64
 80091b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	f040 8584 	bne.w	8009cc2 <_strtod_l+0xb82>
 80091ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80091bc:	b1bb      	cbz	r3, 80091ee <_strtod_l+0xae>
 80091be:	4650      	mov	r0, sl
 80091c0:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 80091c4:	b01f      	add	sp, #124	@ 0x7c
 80091c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091ca:	2920      	cmp	r1, #32
 80091cc:	d1d0      	bne.n	8009170 <_strtod_l+0x30>
 80091ce:	3201      	adds	r2, #1
 80091d0:	e7c3      	b.n	800915a <_strtod_l+0x1a>
 80091d2:	292d      	cmp	r1, #45	@ 0x2d
 80091d4:	d1cc      	bne.n	8009170 <_strtod_l+0x30>
 80091d6:	2101      	movs	r1, #1
 80091d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80091da:	1c51      	adds	r1, r2, #1
 80091dc:	9119      	str	r1, [sp, #100]	@ 0x64
 80091de:	7852      	ldrb	r2, [r2, #1]
 80091e0:	2a00      	cmp	r2, #0
 80091e2:	d1c7      	bne.n	8009174 <_strtod_l+0x34>
 80091e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80091e6:	9419      	str	r4, [sp, #100]	@ 0x64
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	f040 8568 	bne.w	8009cbe <_strtod_l+0xb7e>
 80091ee:	4650      	mov	r0, sl
 80091f0:	4659      	mov	r1, fp
 80091f2:	e7e7      	b.n	80091c4 <_strtod_l+0x84>
 80091f4:	2100      	movs	r1, #0
 80091f6:	e7ef      	b.n	80091d8 <_strtod_l+0x98>
 80091f8:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80091fa:	b13a      	cbz	r2, 800920c <_strtod_l+0xcc>
 80091fc:	2135      	movs	r1, #53	@ 0x35
 80091fe:	a81c      	add	r0, sp, #112	@ 0x70
 8009200:	f7ff ff36 	bl	8009070 <__copybits>
 8009204:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009206:	9805      	ldr	r0, [sp, #20]
 8009208:	f7ff fb10 	bl	800882c <_Bfree>
 800920c:	3e01      	subs	r6, #1
 800920e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009210:	2e04      	cmp	r6, #4
 8009212:	d806      	bhi.n	8009222 <_strtod_l+0xe2>
 8009214:	e8df f006 	tbb	[pc, r6]
 8009218:	201d0314 	.word	0x201d0314
 800921c:	14          	.byte	0x14
 800921d:	00          	.byte	0x00
 800921e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009222:	05e1      	lsls	r1, r4, #23
 8009224:	bf48      	it	mi
 8009226:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800922a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800922e:	0d1b      	lsrs	r3, r3, #20
 8009230:	051b      	lsls	r3, r3, #20
 8009232:	2b00      	cmp	r3, #0
 8009234:	d1bd      	bne.n	80091b2 <_strtod_l+0x72>
 8009236:	f7fe fb1d 	bl	8007874 <__errno>
 800923a:	2322      	movs	r3, #34	@ 0x22
 800923c:	6003      	str	r3, [r0, #0]
 800923e:	e7b8      	b.n	80091b2 <_strtod_l+0x72>
 8009240:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009244:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009248:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800924c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009250:	e7e7      	b.n	8009222 <_strtod_l+0xe2>
 8009252:	f8df b178 	ldr.w	fp, [pc, #376]	@ 80093cc <_strtod_l+0x28c>
 8009256:	e7e4      	b.n	8009222 <_strtod_l+0xe2>
 8009258:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800925c:	f04f 3aff 	mov.w	sl, #4294967295
 8009260:	e7df      	b.n	8009222 <_strtod_l+0xe2>
 8009262:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009264:	1c5a      	adds	r2, r3, #1
 8009266:	9219      	str	r2, [sp, #100]	@ 0x64
 8009268:	785b      	ldrb	r3, [r3, #1]
 800926a:	2b30      	cmp	r3, #48	@ 0x30
 800926c:	d0f9      	beq.n	8009262 <_strtod_l+0x122>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d09f      	beq.n	80091b2 <_strtod_l+0x72>
 8009272:	2301      	movs	r3, #1
 8009274:	9309      	str	r3, [sp, #36]	@ 0x24
 8009276:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009278:	220a      	movs	r2, #10
 800927a:	930c      	str	r3, [sp, #48]	@ 0x30
 800927c:	2300      	movs	r3, #0
 800927e:	461f      	mov	r7, r3
 8009280:	9308      	str	r3, [sp, #32]
 8009282:	930a      	str	r3, [sp, #40]	@ 0x28
 8009284:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009286:	7805      	ldrb	r5, [r0, #0]
 8009288:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800928c:	b2d9      	uxtb	r1, r3
 800928e:	2909      	cmp	r1, #9
 8009290:	d928      	bls.n	80092e4 <_strtod_l+0x1a4>
 8009292:	2201      	movs	r2, #1
 8009294:	494e      	ldr	r1, [pc, #312]	@ (80093d0 <_strtod_l+0x290>)
 8009296:	f000 ffc7 	bl	800a228 <strncmp>
 800929a:	2800      	cmp	r0, #0
 800929c:	d032      	beq.n	8009304 <_strtod_l+0x1c4>
 800929e:	2000      	movs	r0, #0
 80092a0:	462a      	mov	r2, r5
 80092a2:	4681      	mov	r9, r0
 80092a4:	463d      	mov	r5, r7
 80092a6:	4603      	mov	r3, r0
 80092a8:	2a65      	cmp	r2, #101	@ 0x65
 80092aa:	d001      	beq.n	80092b0 <_strtod_l+0x170>
 80092ac:	2a45      	cmp	r2, #69	@ 0x45
 80092ae:	d114      	bne.n	80092da <_strtod_l+0x19a>
 80092b0:	b91d      	cbnz	r5, 80092ba <_strtod_l+0x17a>
 80092b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80092b4:	4302      	orrs	r2, r0
 80092b6:	d095      	beq.n	80091e4 <_strtod_l+0xa4>
 80092b8:	2500      	movs	r5, #0
 80092ba:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80092bc:	1c62      	adds	r2, r4, #1
 80092be:	9219      	str	r2, [sp, #100]	@ 0x64
 80092c0:	7862      	ldrb	r2, [r4, #1]
 80092c2:	2a2b      	cmp	r2, #43	@ 0x2b
 80092c4:	d077      	beq.n	80093b6 <_strtod_l+0x276>
 80092c6:	2a2d      	cmp	r2, #45	@ 0x2d
 80092c8:	d07b      	beq.n	80093c2 <_strtod_l+0x282>
 80092ca:	f04f 0c00 	mov.w	ip, #0
 80092ce:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80092d2:	2909      	cmp	r1, #9
 80092d4:	f240 8082 	bls.w	80093dc <_strtod_l+0x29c>
 80092d8:	9419      	str	r4, [sp, #100]	@ 0x64
 80092da:	f04f 0800 	mov.w	r8, #0
 80092de:	e0a2      	b.n	8009426 <_strtod_l+0x2e6>
 80092e0:	2300      	movs	r3, #0
 80092e2:	e7c7      	b.n	8009274 <_strtod_l+0x134>
 80092e4:	2f08      	cmp	r7, #8
 80092e6:	bfd5      	itete	le
 80092e8:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 80092ea:	9908      	ldrgt	r1, [sp, #32]
 80092ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80092f0:	fb02 3301 	mlagt	r3, r2, r1, r3
 80092f4:	f100 0001 	add.w	r0, r0, #1
 80092f8:	bfd4      	ite	le
 80092fa:	930a      	strle	r3, [sp, #40]	@ 0x28
 80092fc:	9308      	strgt	r3, [sp, #32]
 80092fe:	3701      	adds	r7, #1
 8009300:	9019      	str	r0, [sp, #100]	@ 0x64
 8009302:	e7bf      	b.n	8009284 <_strtod_l+0x144>
 8009304:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009306:	1c5a      	adds	r2, r3, #1
 8009308:	9219      	str	r2, [sp, #100]	@ 0x64
 800930a:	785a      	ldrb	r2, [r3, #1]
 800930c:	b37f      	cbz	r7, 800936e <_strtod_l+0x22e>
 800930e:	4681      	mov	r9, r0
 8009310:	463d      	mov	r5, r7
 8009312:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009316:	2b09      	cmp	r3, #9
 8009318:	d912      	bls.n	8009340 <_strtod_l+0x200>
 800931a:	2301      	movs	r3, #1
 800931c:	e7c4      	b.n	80092a8 <_strtod_l+0x168>
 800931e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009320:	3001      	adds	r0, #1
 8009322:	1c5a      	adds	r2, r3, #1
 8009324:	9219      	str	r2, [sp, #100]	@ 0x64
 8009326:	785a      	ldrb	r2, [r3, #1]
 8009328:	2a30      	cmp	r2, #48	@ 0x30
 800932a:	d0f8      	beq.n	800931e <_strtod_l+0x1de>
 800932c:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009330:	2b08      	cmp	r3, #8
 8009332:	f200 84cb 	bhi.w	8009ccc <_strtod_l+0xb8c>
 8009336:	4681      	mov	r9, r0
 8009338:	2000      	movs	r0, #0
 800933a:	4605      	mov	r5, r0
 800933c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800933e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009340:	3a30      	subs	r2, #48	@ 0x30
 8009342:	f100 0301 	add.w	r3, r0, #1
 8009346:	d02a      	beq.n	800939e <_strtod_l+0x25e>
 8009348:	4499      	add	r9, r3
 800934a:	210a      	movs	r1, #10
 800934c:	462b      	mov	r3, r5
 800934e:	eb00 0c05 	add.w	ip, r0, r5
 8009352:	4563      	cmp	r3, ip
 8009354:	d10d      	bne.n	8009372 <_strtod_l+0x232>
 8009356:	1c69      	adds	r1, r5, #1
 8009358:	4401      	add	r1, r0
 800935a:	4428      	add	r0, r5
 800935c:	2808      	cmp	r0, #8
 800935e:	dc16      	bgt.n	800938e <_strtod_l+0x24e>
 8009360:	230a      	movs	r3, #10
 8009362:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8009364:	fb03 2300 	mla	r3, r3, r0, r2
 8009368:	930a      	str	r3, [sp, #40]	@ 0x28
 800936a:	2300      	movs	r3, #0
 800936c:	e018      	b.n	80093a0 <_strtod_l+0x260>
 800936e:	4638      	mov	r0, r7
 8009370:	e7da      	b.n	8009328 <_strtod_l+0x1e8>
 8009372:	2b08      	cmp	r3, #8
 8009374:	f103 0301 	add.w	r3, r3, #1
 8009378:	dc03      	bgt.n	8009382 <_strtod_l+0x242>
 800937a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800937c:	434e      	muls	r6, r1
 800937e:	960a      	str	r6, [sp, #40]	@ 0x28
 8009380:	e7e7      	b.n	8009352 <_strtod_l+0x212>
 8009382:	2b10      	cmp	r3, #16
 8009384:	bfde      	ittt	le
 8009386:	9e08      	ldrle	r6, [sp, #32]
 8009388:	434e      	mulle	r6, r1
 800938a:	9608      	strle	r6, [sp, #32]
 800938c:	e7e1      	b.n	8009352 <_strtod_l+0x212>
 800938e:	280f      	cmp	r0, #15
 8009390:	dceb      	bgt.n	800936a <_strtod_l+0x22a>
 8009392:	230a      	movs	r3, #10
 8009394:	9808      	ldr	r0, [sp, #32]
 8009396:	fb03 2300 	mla	r3, r3, r0, r2
 800939a:	9308      	str	r3, [sp, #32]
 800939c:	e7e5      	b.n	800936a <_strtod_l+0x22a>
 800939e:	4629      	mov	r1, r5
 80093a0:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093a2:	460d      	mov	r5, r1
 80093a4:	1c50      	adds	r0, r2, #1
 80093a6:	9019      	str	r0, [sp, #100]	@ 0x64
 80093a8:	7852      	ldrb	r2, [r2, #1]
 80093aa:	4618      	mov	r0, r3
 80093ac:	e7b1      	b.n	8009312 <_strtod_l+0x1d2>
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	2301      	movs	r3, #1
 80093b4:	e77d      	b.n	80092b2 <_strtod_l+0x172>
 80093b6:	f04f 0c00 	mov.w	ip, #0
 80093ba:	1ca2      	adds	r2, r4, #2
 80093bc:	9219      	str	r2, [sp, #100]	@ 0x64
 80093be:	78a2      	ldrb	r2, [r4, #2]
 80093c0:	e785      	b.n	80092ce <_strtod_l+0x18e>
 80093c2:	f04f 0c01 	mov.w	ip, #1
 80093c6:	e7f8      	b.n	80093ba <_strtod_l+0x27a>
 80093c8:	0800bd58 	.word	0x0800bd58
 80093cc:	7ff00000 	.word	0x7ff00000
 80093d0:	0800bd40 	.word	0x0800bd40
 80093d4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093d6:	1c51      	adds	r1, r2, #1
 80093d8:	9119      	str	r1, [sp, #100]	@ 0x64
 80093da:	7852      	ldrb	r2, [r2, #1]
 80093dc:	2a30      	cmp	r2, #48	@ 0x30
 80093de:	d0f9      	beq.n	80093d4 <_strtod_l+0x294>
 80093e0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80093e4:	2908      	cmp	r1, #8
 80093e6:	f63f af78 	bhi.w	80092da <_strtod_l+0x19a>
 80093ea:	f04f 080a 	mov.w	r8, #10
 80093ee:	3a30      	subs	r2, #48	@ 0x30
 80093f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80093f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 80093f6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80093f8:	1c56      	adds	r6, r2, #1
 80093fa:	9619      	str	r6, [sp, #100]	@ 0x64
 80093fc:	7852      	ldrb	r2, [r2, #1]
 80093fe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009402:	f1be 0f09 	cmp.w	lr, #9
 8009406:	d939      	bls.n	800947c <_strtod_l+0x33c>
 8009408:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800940a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800940e:	1a76      	subs	r6, r6, r1
 8009410:	2e08      	cmp	r6, #8
 8009412:	dc03      	bgt.n	800941c <_strtod_l+0x2dc>
 8009414:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8009416:	4588      	cmp	r8, r1
 8009418:	bfa8      	it	ge
 800941a:	4688      	movge	r8, r1
 800941c:	f1bc 0f00 	cmp.w	ip, #0
 8009420:	d001      	beq.n	8009426 <_strtod_l+0x2e6>
 8009422:	f1c8 0800 	rsb	r8, r8, #0
 8009426:	2d00      	cmp	r5, #0
 8009428:	d14e      	bne.n	80094c8 <_strtod_l+0x388>
 800942a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800942c:	4308      	orrs	r0, r1
 800942e:	f47f aec0 	bne.w	80091b2 <_strtod_l+0x72>
 8009432:	2b00      	cmp	r3, #0
 8009434:	f47f aed6 	bne.w	80091e4 <_strtod_l+0xa4>
 8009438:	2a69      	cmp	r2, #105	@ 0x69
 800943a:	d028      	beq.n	800948e <_strtod_l+0x34e>
 800943c:	dc25      	bgt.n	800948a <_strtod_l+0x34a>
 800943e:	2a49      	cmp	r2, #73	@ 0x49
 8009440:	d025      	beq.n	800948e <_strtod_l+0x34e>
 8009442:	2a4e      	cmp	r2, #78	@ 0x4e
 8009444:	f47f aece 	bne.w	80091e4 <_strtod_l+0xa4>
 8009448:	499a      	ldr	r1, [pc, #616]	@ (80096b4 <_strtod_l+0x574>)
 800944a:	a819      	add	r0, sp, #100	@ 0x64
 800944c:	f001 f9d0 	bl	800a7f0 <__match>
 8009450:	2800      	cmp	r0, #0
 8009452:	f43f aec7 	beq.w	80091e4 <_strtod_l+0xa4>
 8009456:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	2b28      	cmp	r3, #40	@ 0x28
 800945c:	d12e      	bne.n	80094bc <_strtod_l+0x37c>
 800945e:	4996      	ldr	r1, [pc, #600]	@ (80096b8 <_strtod_l+0x578>)
 8009460:	aa1c      	add	r2, sp, #112	@ 0x70
 8009462:	a819      	add	r0, sp, #100	@ 0x64
 8009464:	f001 f9d8 	bl	800a818 <__hexnan>
 8009468:	2805      	cmp	r0, #5
 800946a:	d127      	bne.n	80094bc <_strtod_l+0x37c>
 800946c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800946e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009472:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009476:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800947a:	e69a      	b.n	80091b2 <_strtod_l+0x72>
 800947c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800947e:	fb08 2101 	mla	r1, r8, r1, r2
 8009482:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009486:	920e      	str	r2, [sp, #56]	@ 0x38
 8009488:	e7b5      	b.n	80093f6 <_strtod_l+0x2b6>
 800948a:	2a6e      	cmp	r2, #110	@ 0x6e
 800948c:	e7da      	b.n	8009444 <_strtod_l+0x304>
 800948e:	498b      	ldr	r1, [pc, #556]	@ (80096bc <_strtod_l+0x57c>)
 8009490:	a819      	add	r0, sp, #100	@ 0x64
 8009492:	f001 f9ad 	bl	800a7f0 <__match>
 8009496:	2800      	cmp	r0, #0
 8009498:	f43f aea4 	beq.w	80091e4 <_strtod_l+0xa4>
 800949c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800949e:	4988      	ldr	r1, [pc, #544]	@ (80096c0 <_strtod_l+0x580>)
 80094a0:	3b01      	subs	r3, #1
 80094a2:	a819      	add	r0, sp, #100	@ 0x64
 80094a4:	9319      	str	r3, [sp, #100]	@ 0x64
 80094a6:	f001 f9a3 	bl	800a7f0 <__match>
 80094aa:	b910      	cbnz	r0, 80094b2 <_strtod_l+0x372>
 80094ac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80094ae:	3301      	adds	r3, #1
 80094b0:	9319      	str	r3, [sp, #100]	@ 0x64
 80094b2:	f04f 0a00 	mov.w	sl, #0
 80094b6:	f8df b20c 	ldr.w	fp, [pc, #524]	@ 80096c4 <_strtod_l+0x584>
 80094ba:	e67a      	b.n	80091b2 <_strtod_l+0x72>
 80094bc:	4882      	ldr	r0, [pc, #520]	@ (80096c8 <_strtod_l+0x588>)
 80094be:	f000 fed5 	bl	800a26c <nan>
 80094c2:	4682      	mov	sl, r0
 80094c4:	468b      	mov	fp, r1
 80094c6:	e674      	b.n	80091b2 <_strtod_l+0x72>
 80094c8:	eba8 0309 	sub.w	r3, r8, r9
 80094cc:	2f00      	cmp	r7, #0
 80094ce:	bf08      	it	eq
 80094d0:	462f      	moveq	r7, r5
 80094d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80094d4:	2d10      	cmp	r5, #16
 80094d6:	462c      	mov	r4, r5
 80094d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80094da:	bfa8      	it	ge
 80094dc:	2410      	movge	r4, #16
 80094de:	f7f6 fff1 	bl	80004c4 <__aeabi_ui2d>
 80094e2:	2d09      	cmp	r5, #9
 80094e4:	4682      	mov	sl, r0
 80094e6:	468b      	mov	fp, r1
 80094e8:	dc11      	bgt.n	800950e <_strtod_l+0x3ce>
 80094ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ec:	2b00      	cmp	r3, #0
 80094ee:	f43f ae60 	beq.w	80091b2 <_strtod_l+0x72>
 80094f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094f4:	dd76      	ble.n	80095e4 <_strtod_l+0x4a4>
 80094f6:	2b16      	cmp	r3, #22
 80094f8:	dc5d      	bgt.n	80095b6 <_strtod_l+0x476>
 80094fa:	4974      	ldr	r1, [pc, #464]	@ (80096cc <_strtod_l+0x58c>)
 80094fc:	4652      	mov	r2, sl
 80094fe:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009502:	465b      	mov	r3, fp
 8009504:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009508:	f7f7 f856 	bl	80005b8 <__aeabi_dmul>
 800950c:	e7d9      	b.n	80094c2 <_strtod_l+0x382>
 800950e:	4b6f      	ldr	r3, [pc, #444]	@ (80096cc <_strtod_l+0x58c>)
 8009510:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009514:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009518:	f7f7 f84e 	bl	80005b8 <__aeabi_dmul>
 800951c:	4682      	mov	sl, r0
 800951e:	9808      	ldr	r0, [sp, #32]
 8009520:	468b      	mov	fp, r1
 8009522:	f7f6 ffcf 	bl	80004c4 <__aeabi_ui2d>
 8009526:	4602      	mov	r2, r0
 8009528:	460b      	mov	r3, r1
 800952a:	4650      	mov	r0, sl
 800952c:	4659      	mov	r1, fp
 800952e:	f7f6 fe8d 	bl	800024c <__adddf3>
 8009532:	2d0f      	cmp	r5, #15
 8009534:	4682      	mov	sl, r0
 8009536:	468b      	mov	fp, r1
 8009538:	ddd7      	ble.n	80094ea <_strtod_l+0x3aa>
 800953a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800953c:	1b2c      	subs	r4, r5, r4
 800953e:	441c      	add	r4, r3
 8009540:	2c00      	cmp	r4, #0
 8009542:	f340 8096 	ble.w	8009672 <_strtod_l+0x532>
 8009546:	f014 030f 	ands.w	r3, r4, #15
 800954a:	d00a      	beq.n	8009562 <_strtod_l+0x422>
 800954c:	495f      	ldr	r1, [pc, #380]	@ (80096cc <_strtod_l+0x58c>)
 800954e:	4652      	mov	r2, sl
 8009550:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009554:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009558:	465b      	mov	r3, fp
 800955a:	f7f7 f82d 	bl	80005b8 <__aeabi_dmul>
 800955e:	4682      	mov	sl, r0
 8009560:	468b      	mov	fp, r1
 8009562:	f034 040f 	bics.w	r4, r4, #15
 8009566:	d073      	beq.n	8009650 <_strtod_l+0x510>
 8009568:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800956c:	dd48      	ble.n	8009600 <_strtod_l+0x4c0>
 800956e:	2400      	movs	r4, #0
 8009570:	46a0      	mov	r8, r4
 8009572:	46a1      	mov	r9, r4
 8009574:	940a      	str	r4, [sp, #40]	@ 0x28
 8009576:	2322      	movs	r3, #34	@ 0x22
 8009578:	f04f 0a00 	mov.w	sl, #0
 800957c:	9a05      	ldr	r2, [sp, #20]
 800957e:	f8df b144 	ldr.w	fp, [pc, #324]	@ 80096c4 <_strtod_l+0x584>
 8009582:	6013      	str	r3, [r2, #0]
 8009584:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009586:	2b00      	cmp	r3, #0
 8009588:	f43f ae13 	beq.w	80091b2 <_strtod_l+0x72>
 800958c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800958e:	9805      	ldr	r0, [sp, #20]
 8009590:	f7ff f94c 	bl	800882c <_Bfree>
 8009594:	4649      	mov	r1, r9
 8009596:	9805      	ldr	r0, [sp, #20]
 8009598:	f7ff f948 	bl	800882c <_Bfree>
 800959c:	4641      	mov	r1, r8
 800959e:	9805      	ldr	r0, [sp, #20]
 80095a0:	f7ff f944 	bl	800882c <_Bfree>
 80095a4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80095a6:	9805      	ldr	r0, [sp, #20]
 80095a8:	f7ff f940 	bl	800882c <_Bfree>
 80095ac:	4621      	mov	r1, r4
 80095ae:	9805      	ldr	r0, [sp, #20]
 80095b0:	f7ff f93c 	bl	800882c <_Bfree>
 80095b4:	e5fd      	b.n	80091b2 <_strtod_l+0x72>
 80095b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095b8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80095bc:	4293      	cmp	r3, r2
 80095be:	dbbc      	blt.n	800953a <_strtod_l+0x3fa>
 80095c0:	4c42      	ldr	r4, [pc, #264]	@ (80096cc <_strtod_l+0x58c>)
 80095c2:	f1c5 050f 	rsb	r5, r5, #15
 80095c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80095ca:	4652      	mov	r2, sl
 80095cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80095d0:	465b      	mov	r3, fp
 80095d2:	f7f6 fff1 	bl	80005b8 <__aeabi_dmul>
 80095d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095d8:	1b5d      	subs	r5, r3, r5
 80095da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80095de:	e9d4 2300 	ldrd	r2, r3, [r4]
 80095e2:	e791      	b.n	8009508 <_strtod_l+0x3c8>
 80095e4:	3316      	adds	r3, #22
 80095e6:	dba8      	blt.n	800953a <_strtod_l+0x3fa>
 80095e8:	4b38      	ldr	r3, [pc, #224]	@ (80096cc <_strtod_l+0x58c>)
 80095ea:	eba9 0808 	sub.w	r8, r9, r8
 80095ee:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80095f2:	4650      	mov	r0, sl
 80095f4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80095f8:	4659      	mov	r1, fp
 80095fa:	f7f7 f907 	bl	800080c <__aeabi_ddiv>
 80095fe:	e760      	b.n	80094c2 <_strtod_l+0x382>
 8009600:	4b33      	ldr	r3, [pc, #204]	@ (80096d0 <_strtod_l+0x590>)
 8009602:	4650      	mov	r0, sl
 8009604:	9308      	str	r3, [sp, #32]
 8009606:	2300      	movs	r3, #0
 8009608:	4659      	mov	r1, fp
 800960a:	461e      	mov	r6, r3
 800960c:	1124      	asrs	r4, r4, #4
 800960e:	2c01      	cmp	r4, #1
 8009610:	dc21      	bgt.n	8009656 <_strtod_l+0x516>
 8009612:	b10b      	cbz	r3, 8009618 <_strtod_l+0x4d8>
 8009614:	4682      	mov	sl, r0
 8009616:	468b      	mov	fp, r1
 8009618:	492d      	ldr	r1, [pc, #180]	@ (80096d0 <_strtod_l+0x590>)
 800961a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800961e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009622:	4652      	mov	r2, sl
 8009624:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009628:	465b      	mov	r3, fp
 800962a:	f7f6 ffc5 	bl	80005b8 <__aeabi_dmul>
 800962e:	4b25      	ldr	r3, [pc, #148]	@ (80096c4 <_strtod_l+0x584>)
 8009630:	460a      	mov	r2, r1
 8009632:	400b      	ands	r3, r1
 8009634:	4927      	ldr	r1, [pc, #156]	@ (80096d4 <_strtod_l+0x594>)
 8009636:	4682      	mov	sl, r0
 8009638:	428b      	cmp	r3, r1
 800963a:	d898      	bhi.n	800956e <_strtod_l+0x42e>
 800963c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009640:	428b      	cmp	r3, r1
 8009642:	bf86      	itte	hi
 8009644:	f04f 3aff 	movhi.w	sl, #4294967295
 8009648:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80096d8 <_strtod_l+0x598>
 800964c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009650:	2300      	movs	r3, #0
 8009652:	9308      	str	r3, [sp, #32]
 8009654:	e07a      	b.n	800974c <_strtod_l+0x60c>
 8009656:	07e2      	lsls	r2, r4, #31
 8009658:	d505      	bpl.n	8009666 <_strtod_l+0x526>
 800965a:	9b08      	ldr	r3, [sp, #32]
 800965c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009660:	f7f6 ffaa 	bl	80005b8 <__aeabi_dmul>
 8009664:	2301      	movs	r3, #1
 8009666:	9a08      	ldr	r2, [sp, #32]
 8009668:	3601      	adds	r6, #1
 800966a:	3208      	adds	r2, #8
 800966c:	1064      	asrs	r4, r4, #1
 800966e:	9208      	str	r2, [sp, #32]
 8009670:	e7cd      	b.n	800960e <_strtod_l+0x4ce>
 8009672:	d0ed      	beq.n	8009650 <_strtod_l+0x510>
 8009674:	4264      	negs	r4, r4
 8009676:	f014 020f 	ands.w	r2, r4, #15
 800967a:	d00a      	beq.n	8009692 <_strtod_l+0x552>
 800967c:	4b13      	ldr	r3, [pc, #76]	@ (80096cc <_strtod_l+0x58c>)
 800967e:	4650      	mov	r0, sl
 8009680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009684:	4659      	mov	r1, fp
 8009686:	e9d3 2300 	ldrd	r2, r3, [r3]
 800968a:	f7f7 f8bf 	bl	800080c <__aeabi_ddiv>
 800968e:	4682      	mov	sl, r0
 8009690:	468b      	mov	fp, r1
 8009692:	1124      	asrs	r4, r4, #4
 8009694:	d0dc      	beq.n	8009650 <_strtod_l+0x510>
 8009696:	2c1f      	cmp	r4, #31
 8009698:	dd20      	ble.n	80096dc <_strtod_l+0x59c>
 800969a:	2400      	movs	r4, #0
 800969c:	46a0      	mov	r8, r4
 800969e:	46a1      	mov	r9, r4
 80096a0:	940a      	str	r4, [sp, #40]	@ 0x28
 80096a2:	2322      	movs	r3, #34	@ 0x22
 80096a4:	9a05      	ldr	r2, [sp, #20]
 80096a6:	f04f 0a00 	mov.w	sl, #0
 80096aa:	f04f 0b00 	mov.w	fp, #0
 80096ae:	6013      	str	r3, [r2, #0]
 80096b0:	e768      	b.n	8009584 <_strtod_l+0x444>
 80096b2:	bf00      	nop
 80096b4:	0800bb2f 	.word	0x0800bb2f
 80096b8:	0800bd44 	.word	0x0800bd44
 80096bc:	0800bb27 	.word	0x0800bb27
 80096c0:	0800bb5e 	.word	0x0800bb5e
 80096c4:	7ff00000 	.word	0x7ff00000
 80096c8:	0800beed 	.word	0x0800beed
 80096cc:	0800bc78 	.word	0x0800bc78
 80096d0:	0800bc50 	.word	0x0800bc50
 80096d4:	7ca00000 	.word	0x7ca00000
 80096d8:	7fefffff 	.word	0x7fefffff
 80096dc:	f014 0310 	ands.w	r3, r4, #16
 80096e0:	bf18      	it	ne
 80096e2:	236a      	movne	r3, #106	@ 0x6a
 80096e4:	4650      	mov	r0, sl
 80096e6:	9308      	str	r3, [sp, #32]
 80096e8:	4659      	mov	r1, fp
 80096ea:	2300      	movs	r3, #0
 80096ec:	4ea9      	ldr	r6, [pc, #676]	@ (8009994 <_strtod_l+0x854>)
 80096ee:	07e2      	lsls	r2, r4, #31
 80096f0:	d504      	bpl.n	80096fc <_strtod_l+0x5bc>
 80096f2:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096f6:	f7f6 ff5f 	bl	80005b8 <__aeabi_dmul>
 80096fa:	2301      	movs	r3, #1
 80096fc:	1064      	asrs	r4, r4, #1
 80096fe:	f106 0608 	add.w	r6, r6, #8
 8009702:	d1f4      	bne.n	80096ee <_strtod_l+0x5ae>
 8009704:	b10b      	cbz	r3, 800970a <_strtod_l+0x5ca>
 8009706:	4682      	mov	sl, r0
 8009708:	468b      	mov	fp, r1
 800970a:	9b08      	ldr	r3, [sp, #32]
 800970c:	b1b3      	cbz	r3, 800973c <_strtod_l+0x5fc>
 800970e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009712:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009716:	2b00      	cmp	r3, #0
 8009718:	4659      	mov	r1, fp
 800971a:	dd0f      	ble.n	800973c <_strtod_l+0x5fc>
 800971c:	2b1f      	cmp	r3, #31
 800971e:	dd57      	ble.n	80097d0 <_strtod_l+0x690>
 8009720:	2b34      	cmp	r3, #52	@ 0x34
 8009722:	bfd8      	it	le
 8009724:	f04f 33ff 	movle.w	r3, #4294967295
 8009728:	f04f 0a00 	mov.w	sl, #0
 800972c:	bfcf      	iteee	gt
 800972e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009732:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009736:	4093      	lslle	r3, r2
 8009738:	ea03 0b01 	andle.w	fp, r3, r1
 800973c:	2200      	movs	r2, #0
 800973e:	2300      	movs	r3, #0
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7f7 f9a0 	bl	8000a88 <__aeabi_dcmpeq>
 8009748:	2800      	cmp	r0, #0
 800974a:	d1a6      	bne.n	800969a <_strtod_l+0x55a>
 800974c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800974e:	463a      	mov	r2, r7
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8009754:	462b      	mov	r3, r5
 8009756:	9805      	ldr	r0, [sp, #20]
 8009758:	f7ff f8d0 	bl	80088fc <__s2b>
 800975c:	900a      	str	r0, [sp, #40]	@ 0x28
 800975e:	2800      	cmp	r0, #0
 8009760:	f43f af05 	beq.w	800956e <_strtod_l+0x42e>
 8009764:	2400      	movs	r4, #0
 8009766:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009768:	eba9 0308 	sub.w	r3, r9, r8
 800976c:	2a00      	cmp	r2, #0
 800976e:	bfa8      	it	ge
 8009770:	2300      	movge	r3, #0
 8009772:	46a0      	mov	r8, r4
 8009774:	9312      	str	r3, [sp, #72]	@ 0x48
 8009776:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800977a:	9316      	str	r3, [sp, #88]	@ 0x58
 800977c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800977e:	9805      	ldr	r0, [sp, #20]
 8009780:	6859      	ldr	r1, [r3, #4]
 8009782:	f7ff f813 	bl	80087ac <_Balloc>
 8009786:	4681      	mov	r9, r0
 8009788:	2800      	cmp	r0, #0
 800978a:	f43f aef4 	beq.w	8009576 <_strtod_l+0x436>
 800978e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009790:	300c      	adds	r0, #12
 8009792:	691a      	ldr	r2, [r3, #16]
 8009794:	f103 010c 	add.w	r1, r3, #12
 8009798:	3202      	adds	r2, #2
 800979a:	0092      	lsls	r2, r2, #2
 800979c:	f7fe f8a5 	bl	80078ea <memcpy>
 80097a0:	ab1c      	add	r3, sp, #112	@ 0x70
 80097a2:	9301      	str	r3, [sp, #4]
 80097a4:	ab1b      	add	r3, sp, #108	@ 0x6c
 80097a6:	9300      	str	r3, [sp, #0]
 80097a8:	4652      	mov	r2, sl
 80097aa:	465b      	mov	r3, fp
 80097ac:	9805      	ldr	r0, [sp, #20]
 80097ae:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80097b2:	f7ff fbd5 	bl	8008f60 <__d2b>
 80097b6:	901a      	str	r0, [sp, #104]	@ 0x68
 80097b8:	2800      	cmp	r0, #0
 80097ba:	f43f aedc 	beq.w	8009576 <_strtod_l+0x436>
 80097be:	2101      	movs	r1, #1
 80097c0:	9805      	ldr	r0, [sp, #20]
 80097c2:	f7ff f931 	bl	8008a28 <__i2b>
 80097c6:	4680      	mov	r8, r0
 80097c8:	b948      	cbnz	r0, 80097de <_strtod_l+0x69e>
 80097ca:	f04f 0800 	mov.w	r8, #0
 80097ce:	e6d2      	b.n	8009576 <_strtod_l+0x436>
 80097d0:	f04f 32ff 	mov.w	r2, #4294967295
 80097d4:	fa02 f303 	lsl.w	r3, r2, r3
 80097d8:	ea03 0a0a 	and.w	sl, r3, sl
 80097dc:	e7ae      	b.n	800973c <_strtod_l+0x5fc>
 80097de:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80097e0:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80097e2:	2d00      	cmp	r5, #0
 80097e4:	bfab      	itete	ge
 80097e6:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80097e8:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80097ea:	18ef      	addge	r7, r5, r3
 80097ec:	1b5e      	sublt	r6, r3, r5
 80097ee:	9b08      	ldr	r3, [sp, #32]
 80097f0:	bfa8      	it	ge
 80097f2:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80097f4:	eba5 0503 	sub.w	r5, r5, r3
 80097f8:	4415      	add	r5, r2
 80097fa:	4b67      	ldr	r3, [pc, #412]	@ (8009998 <_strtod_l+0x858>)
 80097fc:	f105 35ff 	add.w	r5, r5, #4294967295
 8009800:	bfb8      	it	lt
 8009802:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009804:	429d      	cmp	r5, r3
 8009806:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800980a:	da50      	bge.n	80098ae <_strtod_l+0x76e>
 800980c:	1b5b      	subs	r3, r3, r5
 800980e:	2b1f      	cmp	r3, #31
 8009810:	f04f 0101 	mov.w	r1, #1
 8009814:	eba2 0203 	sub.w	r2, r2, r3
 8009818:	dc3d      	bgt.n	8009896 <_strtod_l+0x756>
 800981a:	fa01 f303 	lsl.w	r3, r1, r3
 800981e:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009820:	2300      	movs	r3, #0
 8009822:	9310      	str	r3, [sp, #64]	@ 0x40
 8009824:	18bd      	adds	r5, r7, r2
 8009826:	9b08      	ldr	r3, [sp, #32]
 8009828:	42af      	cmp	r7, r5
 800982a:	4416      	add	r6, r2
 800982c:	441e      	add	r6, r3
 800982e:	463b      	mov	r3, r7
 8009830:	bfa8      	it	ge
 8009832:	462b      	movge	r3, r5
 8009834:	42b3      	cmp	r3, r6
 8009836:	bfa8      	it	ge
 8009838:	4633      	movge	r3, r6
 800983a:	2b00      	cmp	r3, #0
 800983c:	bfc2      	ittt	gt
 800983e:	1aed      	subgt	r5, r5, r3
 8009840:	1af6      	subgt	r6, r6, r3
 8009842:	1aff      	subgt	r7, r7, r3
 8009844:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009846:	2b00      	cmp	r3, #0
 8009848:	dd16      	ble.n	8009878 <_strtod_l+0x738>
 800984a:	4641      	mov	r1, r8
 800984c:	461a      	mov	r2, r3
 800984e:	9805      	ldr	r0, [sp, #20]
 8009850:	f7ff f9a8 	bl	8008ba4 <__pow5mult>
 8009854:	4680      	mov	r8, r0
 8009856:	2800      	cmp	r0, #0
 8009858:	d0b7      	beq.n	80097ca <_strtod_l+0x68a>
 800985a:	4601      	mov	r1, r0
 800985c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800985e:	9805      	ldr	r0, [sp, #20]
 8009860:	f7ff f8f8 	bl	8008a54 <__multiply>
 8009864:	900e      	str	r0, [sp, #56]	@ 0x38
 8009866:	2800      	cmp	r0, #0
 8009868:	f43f ae85 	beq.w	8009576 <_strtod_l+0x436>
 800986c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800986e:	9805      	ldr	r0, [sp, #20]
 8009870:	f7fe ffdc 	bl	800882c <_Bfree>
 8009874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009876:	931a      	str	r3, [sp, #104]	@ 0x68
 8009878:	2d00      	cmp	r5, #0
 800987a:	dc1d      	bgt.n	80098b8 <_strtod_l+0x778>
 800987c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800987e:	2b00      	cmp	r3, #0
 8009880:	dd23      	ble.n	80098ca <_strtod_l+0x78a>
 8009882:	4649      	mov	r1, r9
 8009884:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009886:	9805      	ldr	r0, [sp, #20]
 8009888:	f7ff f98c 	bl	8008ba4 <__pow5mult>
 800988c:	4681      	mov	r9, r0
 800988e:	b9e0      	cbnz	r0, 80098ca <_strtod_l+0x78a>
 8009890:	f04f 0900 	mov.w	r9, #0
 8009894:	e66f      	b.n	8009576 <_strtod_l+0x436>
 8009896:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800989a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800989e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80098a2:	35e2      	adds	r5, #226	@ 0xe2
 80098a4:	fa01 f305 	lsl.w	r3, r1, r5
 80098a8:	9310      	str	r3, [sp, #64]	@ 0x40
 80098aa:	9113      	str	r1, [sp, #76]	@ 0x4c
 80098ac:	e7ba      	b.n	8009824 <_strtod_l+0x6e4>
 80098ae:	2300      	movs	r3, #0
 80098b0:	9310      	str	r3, [sp, #64]	@ 0x40
 80098b2:	2301      	movs	r3, #1
 80098b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098b6:	e7b5      	b.n	8009824 <_strtod_l+0x6e4>
 80098b8:	462a      	mov	r2, r5
 80098ba:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098bc:	9805      	ldr	r0, [sp, #20]
 80098be:	f7ff f9cb 	bl	8008c58 <__lshift>
 80098c2:	901a      	str	r0, [sp, #104]	@ 0x68
 80098c4:	2800      	cmp	r0, #0
 80098c6:	d1d9      	bne.n	800987c <_strtod_l+0x73c>
 80098c8:	e655      	b.n	8009576 <_strtod_l+0x436>
 80098ca:	2e00      	cmp	r6, #0
 80098cc:	dd07      	ble.n	80098de <_strtod_l+0x79e>
 80098ce:	4649      	mov	r1, r9
 80098d0:	4632      	mov	r2, r6
 80098d2:	9805      	ldr	r0, [sp, #20]
 80098d4:	f7ff f9c0 	bl	8008c58 <__lshift>
 80098d8:	4681      	mov	r9, r0
 80098da:	2800      	cmp	r0, #0
 80098dc:	d0d8      	beq.n	8009890 <_strtod_l+0x750>
 80098de:	2f00      	cmp	r7, #0
 80098e0:	dd08      	ble.n	80098f4 <_strtod_l+0x7b4>
 80098e2:	4641      	mov	r1, r8
 80098e4:	463a      	mov	r2, r7
 80098e6:	9805      	ldr	r0, [sp, #20]
 80098e8:	f7ff f9b6 	bl	8008c58 <__lshift>
 80098ec:	4680      	mov	r8, r0
 80098ee:	2800      	cmp	r0, #0
 80098f0:	f43f ae41 	beq.w	8009576 <_strtod_l+0x436>
 80098f4:	464a      	mov	r2, r9
 80098f6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80098f8:	9805      	ldr	r0, [sp, #20]
 80098fa:	f7ff fa35 	bl	8008d68 <__mdiff>
 80098fe:	4604      	mov	r4, r0
 8009900:	2800      	cmp	r0, #0
 8009902:	f43f ae38 	beq.w	8009576 <_strtod_l+0x436>
 8009906:	68c3      	ldr	r3, [r0, #12]
 8009908:	4641      	mov	r1, r8
 800990a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800990c:	2300      	movs	r3, #0
 800990e:	60c3      	str	r3, [r0, #12]
 8009910:	f7ff fa0e 	bl	8008d30 <__mcmp>
 8009914:	2800      	cmp	r0, #0
 8009916:	da45      	bge.n	80099a4 <_strtod_l+0x864>
 8009918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800991a:	ea53 030a 	orrs.w	r3, r3, sl
 800991e:	d16b      	bne.n	80099f8 <_strtod_l+0x8b8>
 8009920:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009924:	2b00      	cmp	r3, #0
 8009926:	d167      	bne.n	80099f8 <_strtod_l+0x8b8>
 8009928:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800992c:	0d1b      	lsrs	r3, r3, #20
 800992e:	051b      	lsls	r3, r3, #20
 8009930:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009934:	d960      	bls.n	80099f8 <_strtod_l+0x8b8>
 8009936:	6963      	ldr	r3, [r4, #20]
 8009938:	b913      	cbnz	r3, 8009940 <_strtod_l+0x800>
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	2b01      	cmp	r3, #1
 800993e:	dd5b      	ble.n	80099f8 <_strtod_l+0x8b8>
 8009940:	4621      	mov	r1, r4
 8009942:	2201      	movs	r2, #1
 8009944:	9805      	ldr	r0, [sp, #20]
 8009946:	f7ff f987 	bl	8008c58 <__lshift>
 800994a:	4641      	mov	r1, r8
 800994c:	4604      	mov	r4, r0
 800994e:	f7ff f9ef 	bl	8008d30 <__mcmp>
 8009952:	2800      	cmp	r0, #0
 8009954:	dd50      	ble.n	80099f8 <_strtod_l+0x8b8>
 8009956:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800995a:	9a08      	ldr	r2, [sp, #32]
 800995c:	0d1b      	lsrs	r3, r3, #20
 800995e:	051b      	lsls	r3, r3, #20
 8009960:	2a00      	cmp	r2, #0
 8009962:	d06a      	beq.n	8009a3a <_strtod_l+0x8fa>
 8009964:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009968:	d867      	bhi.n	8009a3a <_strtod_l+0x8fa>
 800996a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800996e:	f67f ae98 	bls.w	80096a2 <_strtod_l+0x562>
 8009972:	4650      	mov	r0, sl
 8009974:	4659      	mov	r1, fp
 8009976:	4b09      	ldr	r3, [pc, #36]	@ (800999c <_strtod_l+0x85c>)
 8009978:	2200      	movs	r2, #0
 800997a:	f7f6 fe1d 	bl	80005b8 <__aeabi_dmul>
 800997e:	4b08      	ldr	r3, [pc, #32]	@ (80099a0 <_strtod_l+0x860>)
 8009980:	4682      	mov	sl, r0
 8009982:	400b      	ands	r3, r1
 8009984:	468b      	mov	fp, r1
 8009986:	2b00      	cmp	r3, #0
 8009988:	f47f ae00 	bne.w	800958c <_strtod_l+0x44c>
 800998c:	2322      	movs	r3, #34	@ 0x22
 800998e:	9a05      	ldr	r2, [sp, #20]
 8009990:	6013      	str	r3, [r2, #0]
 8009992:	e5fb      	b.n	800958c <_strtod_l+0x44c>
 8009994:	0800bd70 	.word	0x0800bd70
 8009998:	fffffc02 	.word	0xfffffc02
 800999c:	39500000 	.word	0x39500000
 80099a0:	7ff00000 	.word	0x7ff00000
 80099a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 80099a8:	d165      	bne.n	8009a76 <_strtod_l+0x936>
 80099aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80099ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80099b0:	b35a      	cbz	r2, 8009a0a <_strtod_l+0x8ca>
 80099b2:	4a99      	ldr	r2, [pc, #612]	@ (8009c18 <_strtod_l+0xad8>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d12b      	bne.n	8009a10 <_strtod_l+0x8d0>
 80099b8:	9b08      	ldr	r3, [sp, #32]
 80099ba:	4651      	mov	r1, sl
 80099bc:	b303      	cbz	r3, 8009a00 <_strtod_l+0x8c0>
 80099be:	465a      	mov	r2, fp
 80099c0:	4b96      	ldr	r3, [pc, #600]	@ (8009c1c <_strtod_l+0xadc>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80099c8:	f04f 32ff 	mov.w	r2, #4294967295
 80099cc:	d81b      	bhi.n	8009a06 <_strtod_l+0x8c6>
 80099ce:	0d1b      	lsrs	r3, r3, #20
 80099d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099d4:	fa02 f303 	lsl.w	r3, r2, r3
 80099d8:	4299      	cmp	r1, r3
 80099da:	d119      	bne.n	8009a10 <_strtod_l+0x8d0>
 80099dc:	4b90      	ldr	r3, [pc, #576]	@ (8009c20 <_strtod_l+0xae0>)
 80099de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099e0:	429a      	cmp	r2, r3
 80099e2:	d102      	bne.n	80099ea <_strtod_l+0x8aa>
 80099e4:	3101      	adds	r1, #1
 80099e6:	f43f adc6 	beq.w	8009576 <_strtod_l+0x436>
 80099ea:	f04f 0a00 	mov.w	sl, #0
 80099ee:	4b8b      	ldr	r3, [pc, #556]	@ (8009c1c <_strtod_l+0xadc>)
 80099f0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099f2:	401a      	ands	r2, r3
 80099f4:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80099f8:	9b08      	ldr	r3, [sp, #32]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d1b9      	bne.n	8009972 <_strtod_l+0x832>
 80099fe:	e5c5      	b.n	800958c <_strtod_l+0x44c>
 8009a00:	f04f 33ff 	mov.w	r3, #4294967295
 8009a04:	e7e8      	b.n	80099d8 <_strtod_l+0x898>
 8009a06:	4613      	mov	r3, r2
 8009a08:	e7e6      	b.n	80099d8 <_strtod_l+0x898>
 8009a0a:	ea53 030a 	orrs.w	r3, r3, sl
 8009a0e:	d0a2      	beq.n	8009956 <_strtod_l+0x816>
 8009a10:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009a12:	b1db      	cbz	r3, 8009a4c <_strtod_l+0x90c>
 8009a14:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a16:	4213      	tst	r3, r2
 8009a18:	d0ee      	beq.n	80099f8 <_strtod_l+0x8b8>
 8009a1a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a1c:	4650      	mov	r0, sl
 8009a1e:	4659      	mov	r1, fp
 8009a20:	9a08      	ldr	r2, [sp, #32]
 8009a22:	b1bb      	cbz	r3, 8009a54 <_strtod_l+0x914>
 8009a24:	f7ff fb68 	bl	80090f8 <sulp>
 8009a28:	4602      	mov	r2, r0
 8009a2a:	460b      	mov	r3, r1
 8009a2c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a30:	f7f6 fc0c 	bl	800024c <__adddf3>
 8009a34:	4682      	mov	sl, r0
 8009a36:	468b      	mov	fp, r1
 8009a38:	e7de      	b.n	80099f8 <_strtod_l+0x8b8>
 8009a3a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8009a3e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009a42:	f04f 3aff 	mov.w	sl, #4294967295
 8009a46:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009a4a:	e7d5      	b.n	80099f8 <_strtod_l+0x8b8>
 8009a4c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009a4e:	ea13 0f0a 	tst.w	r3, sl
 8009a52:	e7e1      	b.n	8009a18 <_strtod_l+0x8d8>
 8009a54:	f7ff fb50 	bl	80090f8 <sulp>
 8009a58:	4602      	mov	r2, r0
 8009a5a:	460b      	mov	r3, r1
 8009a5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a60:	f7f6 fbf2 	bl	8000248 <__aeabi_dsub>
 8009a64:	2200      	movs	r2, #0
 8009a66:	2300      	movs	r3, #0
 8009a68:	4682      	mov	sl, r0
 8009a6a:	468b      	mov	fp, r1
 8009a6c:	f7f7 f80c 	bl	8000a88 <__aeabi_dcmpeq>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	d0c1      	beq.n	80099f8 <_strtod_l+0x8b8>
 8009a74:	e615      	b.n	80096a2 <_strtod_l+0x562>
 8009a76:	4641      	mov	r1, r8
 8009a78:	4620      	mov	r0, r4
 8009a7a:	f7ff fac9 	bl	8009010 <__ratio>
 8009a7e:	2200      	movs	r2, #0
 8009a80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009a84:	4606      	mov	r6, r0
 8009a86:	460f      	mov	r7, r1
 8009a88:	f7f7 f812 	bl	8000ab0 <__aeabi_dcmple>
 8009a8c:	2800      	cmp	r0, #0
 8009a8e:	d06d      	beq.n	8009b6c <_strtod_l+0xa2c>
 8009a90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d178      	bne.n	8009b88 <_strtod_l+0xa48>
 8009a96:	f1ba 0f00 	cmp.w	sl, #0
 8009a9a:	d156      	bne.n	8009b4a <_strtod_l+0xa0a>
 8009a9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d158      	bne.n	8009b58 <_strtod_l+0xa18>
 8009aa6:	2200      	movs	r2, #0
 8009aa8:	4630      	mov	r0, r6
 8009aaa:	4639      	mov	r1, r7
 8009aac:	4b5d      	ldr	r3, [pc, #372]	@ (8009c24 <_strtod_l+0xae4>)
 8009aae:	f7f6 fff5 	bl	8000a9c <__aeabi_dcmplt>
 8009ab2:	2800      	cmp	r0, #0
 8009ab4:	d157      	bne.n	8009b66 <_strtod_l+0xa26>
 8009ab6:	4630      	mov	r0, r6
 8009ab8:	4639      	mov	r1, r7
 8009aba:	2200      	movs	r2, #0
 8009abc:	4b5a      	ldr	r3, [pc, #360]	@ (8009c28 <_strtod_l+0xae8>)
 8009abe:	f7f6 fd7b 	bl	80005b8 <__aeabi_dmul>
 8009ac2:	4606      	mov	r6, r0
 8009ac4:	460f      	mov	r7, r1
 8009ac6:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8009aca:	9606      	str	r6, [sp, #24]
 8009acc:	9307      	str	r3, [sp, #28]
 8009ace:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009ad2:	4d52      	ldr	r5, [pc, #328]	@ (8009c1c <_strtod_l+0xadc>)
 8009ad4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009ad8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ada:	401d      	ands	r5, r3
 8009adc:	4b53      	ldr	r3, [pc, #332]	@ (8009c2c <_strtod_l+0xaec>)
 8009ade:	429d      	cmp	r5, r3
 8009ae0:	f040 80aa 	bne.w	8009c38 <_strtod_l+0xaf8>
 8009ae4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ae6:	4650      	mov	r0, sl
 8009ae8:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8009aec:	4659      	mov	r1, fp
 8009aee:	f7ff f9cf 	bl	8008e90 <__ulp>
 8009af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009af6:	f7f6 fd5f 	bl	80005b8 <__aeabi_dmul>
 8009afa:	4652      	mov	r2, sl
 8009afc:	465b      	mov	r3, fp
 8009afe:	f7f6 fba5 	bl	800024c <__adddf3>
 8009b02:	460b      	mov	r3, r1
 8009b04:	4945      	ldr	r1, [pc, #276]	@ (8009c1c <_strtod_l+0xadc>)
 8009b06:	4a4a      	ldr	r2, [pc, #296]	@ (8009c30 <_strtod_l+0xaf0>)
 8009b08:	4019      	ands	r1, r3
 8009b0a:	4291      	cmp	r1, r2
 8009b0c:	4682      	mov	sl, r0
 8009b0e:	d942      	bls.n	8009b96 <_strtod_l+0xa56>
 8009b10:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b12:	4b43      	ldr	r3, [pc, #268]	@ (8009c20 <_strtod_l+0xae0>)
 8009b14:	429a      	cmp	r2, r3
 8009b16:	d103      	bne.n	8009b20 <_strtod_l+0x9e0>
 8009b18:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009b1a:	3301      	adds	r3, #1
 8009b1c:	f43f ad2b 	beq.w	8009576 <_strtod_l+0x436>
 8009b20:	f04f 3aff 	mov.w	sl, #4294967295
 8009b24:	f8df b0f8 	ldr.w	fp, [pc, #248]	@ 8009c20 <_strtod_l+0xae0>
 8009b28:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009b2a:	9805      	ldr	r0, [sp, #20]
 8009b2c:	f7fe fe7e 	bl	800882c <_Bfree>
 8009b30:	4649      	mov	r1, r9
 8009b32:	9805      	ldr	r0, [sp, #20]
 8009b34:	f7fe fe7a 	bl	800882c <_Bfree>
 8009b38:	4641      	mov	r1, r8
 8009b3a:	9805      	ldr	r0, [sp, #20]
 8009b3c:	f7fe fe76 	bl	800882c <_Bfree>
 8009b40:	4621      	mov	r1, r4
 8009b42:	9805      	ldr	r0, [sp, #20]
 8009b44:	f7fe fe72 	bl	800882c <_Bfree>
 8009b48:	e618      	b.n	800977c <_strtod_l+0x63c>
 8009b4a:	f1ba 0f01 	cmp.w	sl, #1
 8009b4e:	d103      	bne.n	8009b58 <_strtod_l+0xa18>
 8009b50:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f43f ada5 	beq.w	80096a2 <_strtod_l+0x562>
 8009b58:	2200      	movs	r2, #0
 8009b5a:	4b36      	ldr	r3, [pc, #216]	@ (8009c34 <_strtod_l+0xaf4>)
 8009b5c:	2600      	movs	r6, #0
 8009b5e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b62:	4f30      	ldr	r7, [pc, #192]	@ (8009c24 <_strtod_l+0xae4>)
 8009b64:	e7b3      	b.n	8009ace <_strtod_l+0x98e>
 8009b66:	2600      	movs	r6, #0
 8009b68:	4f2f      	ldr	r7, [pc, #188]	@ (8009c28 <_strtod_l+0xae8>)
 8009b6a:	e7ac      	b.n	8009ac6 <_strtod_l+0x986>
 8009b6c:	4630      	mov	r0, r6
 8009b6e:	4639      	mov	r1, r7
 8009b70:	4b2d      	ldr	r3, [pc, #180]	@ (8009c28 <_strtod_l+0xae8>)
 8009b72:	2200      	movs	r2, #0
 8009b74:	f7f6 fd20 	bl	80005b8 <__aeabi_dmul>
 8009b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7a:	4606      	mov	r6, r0
 8009b7c:	460f      	mov	r7, r1
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d0a1      	beq.n	8009ac6 <_strtod_l+0x986>
 8009b82:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009b86:	e7a2      	b.n	8009ace <_strtod_l+0x98e>
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4b26      	ldr	r3, [pc, #152]	@ (8009c24 <_strtod_l+0xae4>)
 8009b8c:	4616      	mov	r6, r2
 8009b8e:	461f      	mov	r7, r3
 8009b90:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b94:	e79b      	b.n	8009ace <_strtod_l+0x98e>
 8009b96:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009b9a:	9b08      	ldr	r3, [sp, #32]
 8009b9c:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	d1c1      	bne.n	8009b28 <_strtod_l+0x9e8>
 8009ba4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ba8:	0d1b      	lsrs	r3, r3, #20
 8009baa:	051b      	lsls	r3, r3, #20
 8009bac:	429d      	cmp	r5, r3
 8009bae:	d1bb      	bne.n	8009b28 <_strtod_l+0x9e8>
 8009bb0:	4630      	mov	r0, r6
 8009bb2:	4639      	mov	r1, r7
 8009bb4:	f7f7 f848 	bl	8000c48 <__aeabi_d2lz>
 8009bb8:	f7f6 fcd0 	bl	800055c <__aeabi_l2d>
 8009bbc:	4602      	mov	r2, r0
 8009bbe:	460b      	mov	r3, r1
 8009bc0:	4630      	mov	r0, r6
 8009bc2:	4639      	mov	r1, r7
 8009bc4:	f7f6 fb40 	bl	8000248 <__aeabi_dsub>
 8009bc8:	460b      	mov	r3, r1
 8009bca:	4602      	mov	r2, r0
 8009bcc:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009bd0:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009bd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009bd6:	ea46 060a 	orr.w	r6, r6, sl
 8009bda:	431e      	orrs	r6, r3
 8009bdc:	d069      	beq.n	8009cb2 <_strtod_l+0xb72>
 8009bde:	a30a      	add	r3, pc, #40	@ (adr r3, 8009c08 <_strtod_l+0xac8>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	f7f6 ff5a 	bl	8000a9c <__aeabi_dcmplt>
 8009be8:	2800      	cmp	r0, #0
 8009bea:	f47f accf 	bne.w	800958c <_strtod_l+0x44c>
 8009bee:	a308      	add	r3, pc, #32	@ (adr r3, 8009c10 <_strtod_l+0xad0>)
 8009bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bf4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009bf8:	f7f6 ff6e 	bl	8000ad8 <__aeabi_dcmpgt>
 8009bfc:	2800      	cmp	r0, #0
 8009bfe:	d093      	beq.n	8009b28 <_strtod_l+0x9e8>
 8009c00:	e4c4      	b.n	800958c <_strtod_l+0x44c>
 8009c02:	bf00      	nop
 8009c04:	f3af 8000 	nop.w
 8009c08:	94a03595 	.word	0x94a03595
 8009c0c:	3fdfffff 	.word	0x3fdfffff
 8009c10:	35afe535 	.word	0x35afe535
 8009c14:	3fe00000 	.word	0x3fe00000
 8009c18:	000fffff 	.word	0x000fffff
 8009c1c:	7ff00000 	.word	0x7ff00000
 8009c20:	7fefffff 	.word	0x7fefffff
 8009c24:	3ff00000 	.word	0x3ff00000
 8009c28:	3fe00000 	.word	0x3fe00000
 8009c2c:	7fe00000 	.word	0x7fe00000
 8009c30:	7c9fffff 	.word	0x7c9fffff
 8009c34:	bff00000 	.word	0xbff00000
 8009c38:	9b08      	ldr	r3, [sp, #32]
 8009c3a:	b323      	cbz	r3, 8009c86 <_strtod_l+0xb46>
 8009c3c:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009c40:	d821      	bhi.n	8009c86 <_strtod_l+0xb46>
 8009c42:	a327      	add	r3, pc, #156	@ (adr r3, 8009ce0 <_strtod_l+0xba0>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	4630      	mov	r0, r6
 8009c4a:	4639      	mov	r1, r7
 8009c4c:	f7f6 ff30 	bl	8000ab0 <__aeabi_dcmple>
 8009c50:	b1a0      	cbz	r0, 8009c7c <_strtod_l+0xb3c>
 8009c52:	4639      	mov	r1, r7
 8009c54:	4630      	mov	r0, r6
 8009c56:	f7f6 ff87 	bl	8000b68 <__aeabi_d2uiz>
 8009c5a:	2801      	cmp	r0, #1
 8009c5c:	bf38      	it	cc
 8009c5e:	2001      	movcc	r0, #1
 8009c60:	f7f6 fc30 	bl	80004c4 <__aeabi_ui2d>
 8009c64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009c66:	4606      	mov	r6, r0
 8009c68:	460f      	mov	r7, r1
 8009c6a:	b9fb      	cbnz	r3, 8009cac <_strtod_l+0xb6c>
 8009c6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009c70:	9014      	str	r0, [sp, #80]	@ 0x50
 8009c72:	9315      	str	r3, [sp, #84]	@ 0x54
 8009c74:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009c78:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009c7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009c7e:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009c82:	1b5b      	subs	r3, r3, r5
 8009c84:	9311      	str	r3, [sp, #68]	@ 0x44
 8009c86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009c8a:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009c8e:	f7ff f8ff 	bl	8008e90 <__ulp>
 8009c92:	4602      	mov	r2, r0
 8009c94:	460b      	mov	r3, r1
 8009c96:	4650      	mov	r0, sl
 8009c98:	4659      	mov	r1, fp
 8009c9a:	f7f6 fc8d 	bl	80005b8 <__aeabi_dmul>
 8009c9e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009ca2:	f7f6 fad3 	bl	800024c <__adddf3>
 8009ca6:	4682      	mov	sl, r0
 8009ca8:	468b      	mov	fp, r1
 8009caa:	e776      	b.n	8009b9a <_strtod_l+0xa5a>
 8009cac:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009cb0:	e7e0      	b.n	8009c74 <_strtod_l+0xb34>
 8009cb2:	a30d      	add	r3, pc, #52	@ (adr r3, 8009ce8 <_strtod_l+0xba8>)
 8009cb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb8:	f7f6 fef0 	bl	8000a9c <__aeabi_dcmplt>
 8009cbc:	e79e      	b.n	8009bfc <_strtod_l+0xabc>
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009cc2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009cc4:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	f7ff ba77 	b.w	80091ba <_strtod_l+0x7a>
 8009ccc:	2a65      	cmp	r2, #101	@ 0x65
 8009cce:	f43f ab6e 	beq.w	80093ae <_strtod_l+0x26e>
 8009cd2:	2a45      	cmp	r2, #69	@ 0x45
 8009cd4:	f43f ab6b 	beq.w	80093ae <_strtod_l+0x26e>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	f7ff bba6 	b.w	800942a <_strtod_l+0x2ea>
 8009cde:	bf00      	nop
 8009ce0:	ffc00000 	.word	0xffc00000
 8009ce4:	41dfffff 	.word	0x41dfffff
 8009ce8:	94a03595 	.word	0x94a03595
 8009cec:	3fcfffff 	.word	0x3fcfffff

08009cf0 <_strtod_r>:
 8009cf0:	4b01      	ldr	r3, [pc, #4]	@ (8009cf8 <_strtod_r+0x8>)
 8009cf2:	f7ff ba25 	b.w	8009140 <_strtod_l>
 8009cf6:	bf00      	nop
 8009cf8:	2000006c 	.word	0x2000006c

08009cfc <_strtol_l.constprop.0>:
 8009cfc:	2b24      	cmp	r3, #36	@ 0x24
 8009cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d02:	4686      	mov	lr, r0
 8009d04:	4690      	mov	r8, r2
 8009d06:	d801      	bhi.n	8009d0c <_strtol_l.constprop.0+0x10>
 8009d08:	2b01      	cmp	r3, #1
 8009d0a:	d106      	bne.n	8009d1a <_strtol_l.constprop.0+0x1e>
 8009d0c:	f7fd fdb2 	bl	8007874 <__errno>
 8009d10:	2316      	movs	r3, #22
 8009d12:	6003      	str	r3, [r0, #0]
 8009d14:	2000      	movs	r0, #0
 8009d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d1a:	460d      	mov	r5, r1
 8009d1c:	4833      	ldr	r0, [pc, #204]	@ (8009dec <_strtol_l.constprop.0+0xf0>)
 8009d1e:	462a      	mov	r2, r5
 8009d20:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d24:	5d06      	ldrb	r6, [r0, r4]
 8009d26:	f016 0608 	ands.w	r6, r6, #8
 8009d2a:	d1f8      	bne.n	8009d1e <_strtol_l.constprop.0+0x22>
 8009d2c:	2c2d      	cmp	r4, #45	@ 0x2d
 8009d2e:	d12d      	bne.n	8009d8c <_strtol_l.constprop.0+0x90>
 8009d30:	2601      	movs	r6, #1
 8009d32:	782c      	ldrb	r4, [r5, #0]
 8009d34:	1c95      	adds	r5, r2, #2
 8009d36:	f033 0210 	bics.w	r2, r3, #16
 8009d3a:	d109      	bne.n	8009d50 <_strtol_l.constprop.0+0x54>
 8009d3c:	2c30      	cmp	r4, #48	@ 0x30
 8009d3e:	d12a      	bne.n	8009d96 <_strtol_l.constprop.0+0x9a>
 8009d40:	782a      	ldrb	r2, [r5, #0]
 8009d42:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009d46:	2a58      	cmp	r2, #88	@ 0x58
 8009d48:	d125      	bne.n	8009d96 <_strtol_l.constprop.0+0x9a>
 8009d4a:	2310      	movs	r3, #16
 8009d4c:	786c      	ldrb	r4, [r5, #1]
 8009d4e:	3502      	adds	r5, #2
 8009d50:	2200      	movs	r2, #0
 8009d52:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009d56:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009d5a:	fbbc f9f3 	udiv	r9, ip, r3
 8009d5e:	4610      	mov	r0, r2
 8009d60:	fb03 ca19 	mls	sl, r3, r9, ip
 8009d64:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009d68:	2f09      	cmp	r7, #9
 8009d6a:	d81b      	bhi.n	8009da4 <_strtol_l.constprop.0+0xa8>
 8009d6c:	463c      	mov	r4, r7
 8009d6e:	42a3      	cmp	r3, r4
 8009d70:	dd27      	ble.n	8009dc2 <_strtol_l.constprop.0+0xc6>
 8009d72:	1c57      	adds	r7, r2, #1
 8009d74:	d007      	beq.n	8009d86 <_strtol_l.constprop.0+0x8a>
 8009d76:	4581      	cmp	r9, r0
 8009d78:	d320      	bcc.n	8009dbc <_strtol_l.constprop.0+0xc0>
 8009d7a:	d101      	bne.n	8009d80 <_strtol_l.constprop.0+0x84>
 8009d7c:	45a2      	cmp	sl, r4
 8009d7e:	db1d      	blt.n	8009dbc <_strtol_l.constprop.0+0xc0>
 8009d80:	2201      	movs	r2, #1
 8009d82:	fb00 4003 	mla	r0, r0, r3, r4
 8009d86:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009d8a:	e7eb      	b.n	8009d64 <_strtol_l.constprop.0+0x68>
 8009d8c:	2c2b      	cmp	r4, #43	@ 0x2b
 8009d8e:	bf04      	itt	eq
 8009d90:	782c      	ldrbeq	r4, [r5, #0]
 8009d92:	1c95      	addeq	r5, r2, #2
 8009d94:	e7cf      	b.n	8009d36 <_strtol_l.constprop.0+0x3a>
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1da      	bne.n	8009d50 <_strtol_l.constprop.0+0x54>
 8009d9a:	2c30      	cmp	r4, #48	@ 0x30
 8009d9c:	bf0c      	ite	eq
 8009d9e:	2308      	moveq	r3, #8
 8009da0:	230a      	movne	r3, #10
 8009da2:	e7d5      	b.n	8009d50 <_strtol_l.constprop.0+0x54>
 8009da4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009da8:	2f19      	cmp	r7, #25
 8009daa:	d801      	bhi.n	8009db0 <_strtol_l.constprop.0+0xb4>
 8009dac:	3c37      	subs	r4, #55	@ 0x37
 8009dae:	e7de      	b.n	8009d6e <_strtol_l.constprop.0+0x72>
 8009db0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009db4:	2f19      	cmp	r7, #25
 8009db6:	d804      	bhi.n	8009dc2 <_strtol_l.constprop.0+0xc6>
 8009db8:	3c57      	subs	r4, #87	@ 0x57
 8009dba:	e7d8      	b.n	8009d6e <_strtol_l.constprop.0+0x72>
 8009dbc:	f04f 32ff 	mov.w	r2, #4294967295
 8009dc0:	e7e1      	b.n	8009d86 <_strtol_l.constprop.0+0x8a>
 8009dc2:	1c53      	adds	r3, r2, #1
 8009dc4:	d108      	bne.n	8009dd8 <_strtol_l.constprop.0+0xdc>
 8009dc6:	2322      	movs	r3, #34	@ 0x22
 8009dc8:	4660      	mov	r0, ip
 8009dca:	f8ce 3000 	str.w	r3, [lr]
 8009dce:	f1b8 0f00 	cmp.w	r8, #0
 8009dd2:	d0a0      	beq.n	8009d16 <_strtol_l.constprop.0+0x1a>
 8009dd4:	1e69      	subs	r1, r5, #1
 8009dd6:	e006      	b.n	8009de6 <_strtol_l.constprop.0+0xea>
 8009dd8:	b106      	cbz	r6, 8009ddc <_strtol_l.constprop.0+0xe0>
 8009dda:	4240      	negs	r0, r0
 8009ddc:	f1b8 0f00 	cmp.w	r8, #0
 8009de0:	d099      	beq.n	8009d16 <_strtol_l.constprop.0+0x1a>
 8009de2:	2a00      	cmp	r2, #0
 8009de4:	d1f6      	bne.n	8009dd4 <_strtol_l.constprop.0+0xd8>
 8009de6:	f8c8 1000 	str.w	r1, [r8]
 8009dea:	e794      	b.n	8009d16 <_strtol_l.constprop.0+0x1a>
 8009dec:	0800bd99 	.word	0x0800bd99

08009df0 <_strtol_r>:
 8009df0:	f7ff bf84 	b.w	8009cfc <_strtol_l.constprop.0>

08009df4 <__ssputs_r>:
 8009df4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009df8:	461f      	mov	r7, r3
 8009dfa:	688e      	ldr	r6, [r1, #8]
 8009dfc:	4682      	mov	sl, r0
 8009dfe:	42be      	cmp	r6, r7
 8009e00:	460c      	mov	r4, r1
 8009e02:	4690      	mov	r8, r2
 8009e04:	680b      	ldr	r3, [r1, #0]
 8009e06:	d82d      	bhi.n	8009e64 <__ssputs_r+0x70>
 8009e08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009e0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009e10:	d026      	beq.n	8009e60 <__ssputs_r+0x6c>
 8009e12:	6965      	ldr	r5, [r4, #20]
 8009e14:	6909      	ldr	r1, [r1, #16]
 8009e16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009e1a:	eba3 0901 	sub.w	r9, r3, r1
 8009e1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009e22:	1c7b      	adds	r3, r7, #1
 8009e24:	444b      	add	r3, r9
 8009e26:	106d      	asrs	r5, r5, #1
 8009e28:	429d      	cmp	r5, r3
 8009e2a:	bf38      	it	cc
 8009e2c:	461d      	movcc	r5, r3
 8009e2e:	0553      	lsls	r3, r2, #21
 8009e30:	d527      	bpl.n	8009e82 <__ssputs_r+0x8e>
 8009e32:	4629      	mov	r1, r5
 8009e34:	f7fe fc2e 	bl	8008694 <_malloc_r>
 8009e38:	4606      	mov	r6, r0
 8009e3a:	b360      	cbz	r0, 8009e96 <__ssputs_r+0xa2>
 8009e3c:	464a      	mov	r2, r9
 8009e3e:	6921      	ldr	r1, [r4, #16]
 8009e40:	f7fd fd53 	bl	80078ea <memcpy>
 8009e44:	89a3      	ldrh	r3, [r4, #12]
 8009e46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009e4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009e4e:	81a3      	strh	r3, [r4, #12]
 8009e50:	6126      	str	r6, [r4, #16]
 8009e52:	444e      	add	r6, r9
 8009e54:	6026      	str	r6, [r4, #0]
 8009e56:	463e      	mov	r6, r7
 8009e58:	6165      	str	r5, [r4, #20]
 8009e5a:	eba5 0509 	sub.w	r5, r5, r9
 8009e5e:	60a5      	str	r5, [r4, #8]
 8009e60:	42be      	cmp	r6, r7
 8009e62:	d900      	bls.n	8009e66 <__ssputs_r+0x72>
 8009e64:	463e      	mov	r6, r7
 8009e66:	4632      	mov	r2, r6
 8009e68:	4641      	mov	r1, r8
 8009e6a:	6820      	ldr	r0, [r4, #0]
 8009e6c:	f000 f9c2 	bl	800a1f4 <memmove>
 8009e70:	2000      	movs	r0, #0
 8009e72:	68a3      	ldr	r3, [r4, #8]
 8009e74:	1b9b      	subs	r3, r3, r6
 8009e76:	60a3      	str	r3, [r4, #8]
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	4433      	add	r3, r6
 8009e7c:	6023      	str	r3, [r4, #0]
 8009e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e82:	462a      	mov	r2, r5
 8009e84:	f000 fd75 	bl	800a972 <_realloc_r>
 8009e88:	4606      	mov	r6, r0
 8009e8a:	2800      	cmp	r0, #0
 8009e8c:	d1e0      	bne.n	8009e50 <__ssputs_r+0x5c>
 8009e8e:	4650      	mov	r0, sl
 8009e90:	6921      	ldr	r1, [r4, #16]
 8009e92:	f7fe fb8d 	bl	80085b0 <_free_r>
 8009e96:	230c      	movs	r3, #12
 8009e98:	f8ca 3000 	str.w	r3, [sl]
 8009e9c:	89a3      	ldrh	r3, [r4, #12]
 8009e9e:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009ea6:	81a3      	strh	r3, [r4, #12]
 8009ea8:	e7e9      	b.n	8009e7e <__ssputs_r+0x8a>
	...

08009eac <_svfiprintf_r>:
 8009eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009eb0:	4698      	mov	r8, r3
 8009eb2:	898b      	ldrh	r3, [r1, #12]
 8009eb4:	4607      	mov	r7, r0
 8009eb6:	061b      	lsls	r3, r3, #24
 8009eb8:	460d      	mov	r5, r1
 8009eba:	4614      	mov	r4, r2
 8009ebc:	b09d      	sub	sp, #116	@ 0x74
 8009ebe:	d510      	bpl.n	8009ee2 <_svfiprintf_r+0x36>
 8009ec0:	690b      	ldr	r3, [r1, #16]
 8009ec2:	b973      	cbnz	r3, 8009ee2 <_svfiprintf_r+0x36>
 8009ec4:	2140      	movs	r1, #64	@ 0x40
 8009ec6:	f7fe fbe5 	bl	8008694 <_malloc_r>
 8009eca:	6028      	str	r0, [r5, #0]
 8009ecc:	6128      	str	r0, [r5, #16]
 8009ece:	b930      	cbnz	r0, 8009ede <_svfiprintf_r+0x32>
 8009ed0:	230c      	movs	r3, #12
 8009ed2:	603b      	str	r3, [r7, #0]
 8009ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed8:	b01d      	add	sp, #116	@ 0x74
 8009eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ede:	2340      	movs	r3, #64	@ 0x40
 8009ee0:	616b      	str	r3, [r5, #20]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ee6:	2320      	movs	r3, #32
 8009ee8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009eec:	2330      	movs	r3, #48	@ 0x30
 8009eee:	f04f 0901 	mov.w	r9, #1
 8009ef2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ef6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800a090 <_svfiprintf_r+0x1e4>
 8009efa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009efe:	4623      	mov	r3, r4
 8009f00:	469a      	mov	sl, r3
 8009f02:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f06:	b10a      	cbz	r2, 8009f0c <_svfiprintf_r+0x60>
 8009f08:	2a25      	cmp	r2, #37	@ 0x25
 8009f0a:	d1f9      	bne.n	8009f00 <_svfiprintf_r+0x54>
 8009f0c:	ebba 0b04 	subs.w	fp, sl, r4
 8009f10:	d00b      	beq.n	8009f2a <_svfiprintf_r+0x7e>
 8009f12:	465b      	mov	r3, fp
 8009f14:	4622      	mov	r2, r4
 8009f16:	4629      	mov	r1, r5
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f7ff ff6b 	bl	8009df4 <__ssputs_r>
 8009f1e:	3001      	adds	r0, #1
 8009f20:	f000 80a7 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f26:	445a      	add	r2, fp
 8009f28:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f2a:	f89a 3000 	ldrb.w	r3, [sl]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	f000 809f 	beq.w	800a072 <_svfiprintf_r+0x1c6>
 8009f34:	2300      	movs	r3, #0
 8009f36:	f04f 32ff 	mov.w	r2, #4294967295
 8009f3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f3e:	f10a 0a01 	add.w	sl, sl, #1
 8009f42:	9304      	str	r3, [sp, #16]
 8009f44:	9307      	str	r3, [sp, #28]
 8009f46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f4a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f4c:	4654      	mov	r4, sl
 8009f4e:	2205      	movs	r2, #5
 8009f50:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f54:	484e      	ldr	r0, [pc, #312]	@ (800a090 <_svfiprintf_r+0x1e4>)
 8009f56:	f7fd fcba 	bl	80078ce <memchr>
 8009f5a:	9a04      	ldr	r2, [sp, #16]
 8009f5c:	b9d8      	cbnz	r0, 8009f96 <_svfiprintf_r+0xea>
 8009f5e:	06d0      	lsls	r0, r2, #27
 8009f60:	bf44      	itt	mi
 8009f62:	2320      	movmi	r3, #32
 8009f64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f68:	0711      	lsls	r1, r2, #28
 8009f6a:	bf44      	itt	mi
 8009f6c:	232b      	movmi	r3, #43	@ 0x2b
 8009f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f72:	f89a 3000 	ldrb.w	r3, [sl]
 8009f76:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f78:	d015      	beq.n	8009fa6 <_svfiprintf_r+0xfa>
 8009f7a:	4654      	mov	r4, sl
 8009f7c:	2000      	movs	r0, #0
 8009f7e:	f04f 0c0a 	mov.w	ip, #10
 8009f82:	9a07      	ldr	r2, [sp, #28]
 8009f84:	4621      	mov	r1, r4
 8009f86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009f8a:	3b30      	subs	r3, #48	@ 0x30
 8009f8c:	2b09      	cmp	r3, #9
 8009f8e:	d94b      	bls.n	800a028 <_svfiprintf_r+0x17c>
 8009f90:	b1b0      	cbz	r0, 8009fc0 <_svfiprintf_r+0x114>
 8009f92:	9207      	str	r2, [sp, #28]
 8009f94:	e014      	b.n	8009fc0 <_svfiprintf_r+0x114>
 8009f96:	eba0 0308 	sub.w	r3, r0, r8
 8009f9a:	fa09 f303 	lsl.w	r3, r9, r3
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	46a2      	mov	sl, r4
 8009fa2:	9304      	str	r3, [sp, #16]
 8009fa4:	e7d2      	b.n	8009f4c <_svfiprintf_r+0xa0>
 8009fa6:	9b03      	ldr	r3, [sp, #12]
 8009fa8:	1d19      	adds	r1, r3, #4
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	9103      	str	r1, [sp, #12]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	bfbb      	ittet	lt
 8009fb2:	425b      	neglt	r3, r3
 8009fb4:	f042 0202 	orrlt.w	r2, r2, #2
 8009fb8:	9307      	strge	r3, [sp, #28]
 8009fba:	9307      	strlt	r3, [sp, #28]
 8009fbc:	bfb8      	it	lt
 8009fbe:	9204      	strlt	r2, [sp, #16]
 8009fc0:	7823      	ldrb	r3, [r4, #0]
 8009fc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fc4:	d10a      	bne.n	8009fdc <_svfiprintf_r+0x130>
 8009fc6:	7863      	ldrb	r3, [r4, #1]
 8009fc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fca:	d132      	bne.n	800a032 <_svfiprintf_r+0x186>
 8009fcc:	9b03      	ldr	r3, [sp, #12]
 8009fce:	3402      	adds	r4, #2
 8009fd0:	1d1a      	adds	r2, r3, #4
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	9203      	str	r2, [sp, #12]
 8009fd6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009fda:	9305      	str	r3, [sp, #20]
 8009fdc:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800a094 <_svfiprintf_r+0x1e8>
 8009fe0:	2203      	movs	r2, #3
 8009fe2:	4650      	mov	r0, sl
 8009fe4:	7821      	ldrb	r1, [r4, #0]
 8009fe6:	f7fd fc72 	bl	80078ce <memchr>
 8009fea:	b138      	cbz	r0, 8009ffc <_svfiprintf_r+0x150>
 8009fec:	2240      	movs	r2, #64	@ 0x40
 8009fee:	9b04      	ldr	r3, [sp, #16]
 8009ff0:	eba0 000a 	sub.w	r0, r0, sl
 8009ff4:	4082      	lsls	r2, r0
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	3401      	adds	r4, #1
 8009ffa:	9304      	str	r3, [sp, #16]
 8009ffc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a000:	2206      	movs	r2, #6
 800a002:	4825      	ldr	r0, [pc, #148]	@ (800a098 <_svfiprintf_r+0x1ec>)
 800a004:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a008:	f7fd fc61 	bl	80078ce <memchr>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	d036      	beq.n	800a07e <_svfiprintf_r+0x1d2>
 800a010:	4b22      	ldr	r3, [pc, #136]	@ (800a09c <_svfiprintf_r+0x1f0>)
 800a012:	bb1b      	cbnz	r3, 800a05c <_svfiprintf_r+0x1b0>
 800a014:	9b03      	ldr	r3, [sp, #12]
 800a016:	3307      	adds	r3, #7
 800a018:	f023 0307 	bic.w	r3, r3, #7
 800a01c:	3308      	adds	r3, #8
 800a01e:	9303      	str	r3, [sp, #12]
 800a020:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a022:	4433      	add	r3, r6
 800a024:	9309      	str	r3, [sp, #36]	@ 0x24
 800a026:	e76a      	b.n	8009efe <_svfiprintf_r+0x52>
 800a028:	460c      	mov	r4, r1
 800a02a:	2001      	movs	r0, #1
 800a02c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a030:	e7a8      	b.n	8009f84 <_svfiprintf_r+0xd8>
 800a032:	2300      	movs	r3, #0
 800a034:	f04f 0c0a 	mov.w	ip, #10
 800a038:	4619      	mov	r1, r3
 800a03a:	3401      	adds	r4, #1
 800a03c:	9305      	str	r3, [sp, #20]
 800a03e:	4620      	mov	r0, r4
 800a040:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a044:	3a30      	subs	r2, #48	@ 0x30
 800a046:	2a09      	cmp	r2, #9
 800a048:	d903      	bls.n	800a052 <_svfiprintf_r+0x1a6>
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d0c6      	beq.n	8009fdc <_svfiprintf_r+0x130>
 800a04e:	9105      	str	r1, [sp, #20]
 800a050:	e7c4      	b.n	8009fdc <_svfiprintf_r+0x130>
 800a052:	4604      	mov	r4, r0
 800a054:	2301      	movs	r3, #1
 800a056:	fb0c 2101 	mla	r1, ip, r1, r2
 800a05a:	e7f0      	b.n	800a03e <_svfiprintf_r+0x192>
 800a05c:	ab03      	add	r3, sp, #12
 800a05e:	9300      	str	r3, [sp, #0]
 800a060:	462a      	mov	r2, r5
 800a062:	4638      	mov	r0, r7
 800a064:	4b0e      	ldr	r3, [pc, #56]	@ (800a0a0 <_svfiprintf_r+0x1f4>)
 800a066:	a904      	add	r1, sp, #16
 800a068:	f7fc fcbe 	bl	80069e8 <_printf_float>
 800a06c:	1c42      	adds	r2, r0, #1
 800a06e:	4606      	mov	r6, r0
 800a070:	d1d6      	bne.n	800a020 <_svfiprintf_r+0x174>
 800a072:	89ab      	ldrh	r3, [r5, #12]
 800a074:	065b      	lsls	r3, r3, #25
 800a076:	f53f af2d 	bmi.w	8009ed4 <_svfiprintf_r+0x28>
 800a07a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a07c:	e72c      	b.n	8009ed8 <_svfiprintf_r+0x2c>
 800a07e:	ab03      	add	r3, sp, #12
 800a080:	9300      	str	r3, [sp, #0]
 800a082:	462a      	mov	r2, r5
 800a084:	4638      	mov	r0, r7
 800a086:	4b06      	ldr	r3, [pc, #24]	@ (800a0a0 <_svfiprintf_r+0x1f4>)
 800a088:	a904      	add	r1, sp, #16
 800a08a:	f7fc ff4b 	bl	8006f24 <_printf_i>
 800a08e:	e7ed      	b.n	800a06c <_svfiprintf_r+0x1c0>
 800a090:	0800be99 	.word	0x0800be99
 800a094:	0800be9f 	.word	0x0800be9f
 800a098:	0800bea3 	.word	0x0800bea3
 800a09c:	080069e9 	.word	0x080069e9
 800a0a0:	08009df5 	.word	0x08009df5

0800a0a4 <__sflush_r>:
 800a0a4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0aa:	0716      	lsls	r6, r2, #28
 800a0ac:	4605      	mov	r5, r0
 800a0ae:	460c      	mov	r4, r1
 800a0b0:	d454      	bmi.n	800a15c <__sflush_r+0xb8>
 800a0b2:	684b      	ldr	r3, [r1, #4]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	dc02      	bgt.n	800a0be <__sflush_r+0x1a>
 800a0b8:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	dd48      	ble.n	800a150 <__sflush_r+0xac>
 800a0be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0c0:	2e00      	cmp	r6, #0
 800a0c2:	d045      	beq.n	800a150 <__sflush_r+0xac>
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a0ca:	682f      	ldr	r7, [r5, #0]
 800a0cc:	6a21      	ldr	r1, [r4, #32]
 800a0ce:	602b      	str	r3, [r5, #0]
 800a0d0:	d030      	beq.n	800a134 <__sflush_r+0x90>
 800a0d2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a0d4:	89a3      	ldrh	r3, [r4, #12]
 800a0d6:	0759      	lsls	r1, r3, #29
 800a0d8:	d505      	bpl.n	800a0e6 <__sflush_r+0x42>
 800a0da:	6863      	ldr	r3, [r4, #4]
 800a0dc:	1ad2      	subs	r2, r2, r3
 800a0de:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a0e0:	b10b      	cbz	r3, 800a0e6 <__sflush_r+0x42>
 800a0e2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0e4:	1ad2      	subs	r2, r2, r3
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	4628      	mov	r0, r5
 800a0ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0ec:	6a21      	ldr	r1, [r4, #32]
 800a0ee:	47b0      	blx	r6
 800a0f0:	1c43      	adds	r3, r0, #1
 800a0f2:	89a3      	ldrh	r3, [r4, #12]
 800a0f4:	d106      	bne.n	800a104 <__sflush_r+0x60>
 800a0f6:	6829      	ldr	r1, [r5, #0]
 800a0f8:	291d      	cmp	r1, #29
 800a0fa:	d82b      	bhi.n	800a154 <__sflush_r+0xb0>
 800a0fc:	4a28      	ldr	r2, [pc, #160]	@ (800a1a0 <__sflush_r+0xfc>)
 800a0fe:	410a      	asrs	r2, r1
 800a100:	07d6      	lsls	r6, r2, #31
 800a102:	d427      	bmi.n	800a154 <__sflush_r+0xb0>
 800a104:	2200      	movs	r2, #0
 800a106:	6062      	str	r2, [r4, #4]
 800a108:	6922      	ldr	r2, [r4, #16]
 800a10a:	04d9      	lsls	r1, r3, #19
 800a10c:	6022      	str	r2, [r4, #0]
 800a10e:	d504      	bpl.n	800a11a <__sflush_r+0x76>
 800a110:	1c42      	adds	r2, r0, #1
 800a112:	d101      	bne.n	800a118 <__sflush_r+0x74>
 800a114:	682b      	ldr	r3, [r5, #0]
 800a116:	b903      	cbnz	r3, 800a11a <__sflush_r+0x76>
 800a118:	6560      	str	r0, [r4, #84]	@ 0x54
 800a11a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a11c:	602f      	str	r7, [r5, #0]
 800a11e:	b1b9      	cbz	r1, 800a150 <__sflush_r+0xac>
 800a120:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a124:	4299      	cmp	r1, r3
 800a126:	d002      	beq.n	800a12e <__sflush_r+0x8a>
 800a128:	4628      	mov	r0, r5
 800a12a:	f7fe fa41 	bl	80085b0 <_free_r>
 800a12e:	2300      	movs	r3, #0
 800a130:	6363      	str	r3, [r4, #52]	@ 0x34
 800a132:	e00d      	b.n	800a150 <__sflush_r+0xac>
 800a134:	2301      	movs	r3, #1
 800a136:	4628      	mov	r0, r5
 800a138:	47b0      	blx	r6
 800a13a:	4602      	mov	r2, r0
 800a13c:	1c50      	adds	r0, r2, #1
 800a13e:	d1c9      	bne.n	800a0d4 <__sflush_r+0x30>
 800a140:	682b      	ldr	r3, [r5, #0]
 800a142:	2b00      	cmp	r3, #0
 800a144:	d0c6      	beq.n	800a0d4 <__sflush_r+0x30>
 800a146:	2b1d      	cmp	r3, #29
 800a148:	d001      	beq.n	800a14e <__sflush_r+0xaa>
 800a14a:	2b16      	cmp	r3, #22
 800a14c:	d11d      	bne.n	800a18a <__sflush_r+0xe6>
 800a14e:	602f      	str	r7, [r5, #0]
 800a150:	2000      	movs	r0, #0
 800a152:	e021      	b.n	800a198 <__sflush_r+0xf4>
 800a154:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a158:	b21b      	sxth	r3, r3
 800a15a:	e01a      	b.n	800a192 <__sflush_r+0xee>
 800a15c:	690f      	ldr	r7, [r1, #16]
 800a15e:	2f00      	cmp	r7, #0
 800a160:	d0f6      	beq.n	800a150 <__sflush_r+0xac>
 800a162:	0793      	lsls	r3, r2, #30
 800a164:	bf18      	it	ne
 800a166:	2300      	movne	r3, #0
 800a168:	680e      	ldr	r6, [r1, #0]
 800a16a:	bf08      	it	eq
 800a16c:	694b      	ldreq	r3, [r1, #20]
 800a16e:	1bf6      	subs	r6, r6, r7
 800a170:	600f      	str	r7, [r1, #0]
 800a172:	608b      	str	r3, [r1, #8]
 800a174:	2e00      	cmp	r6, #0
 800a176:	ddeb      	ble.n	800a150 <__sflush_r+0xac>
 800a178:	4633      	mov	r3, r6
 800a17a:	463a      	mov	r2, r7
 800a17c:	4628      	mov	r0, r5
 800a17e:	6a21      	ldr	r1, [r4, #32]
 800a180:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a184:	47e0      	blx	ip
 800a186:	2800      	cmp	r0, #0
 800a188:	dc07      	bgt.n	800a19a <__sflush_r+0xf6>
 800a18a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a18e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a192:	f04f 30ff 	mov.w	r0, #4294967295
 800a196:	81a3      	strh	r3, [r4, #12]
 800a198:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a19a:	4407      	add	r7, r0
 800a19c:	1a36      	subs	r6, r6, r0
 800a19e:	e7e9      	b.n	800a174 <__sflush_r+0xd0>
 800a1a0:	dfbffffe 	.word	0xdfbffffe

0800a1a4 <_fflush_r>:
 800a1a4:	b538      	push	{r3, r4, r5, lr}
 800a1a6:	690b      	ldr	r3, [r1, #16]
 800a1a8:	4605      	mov	r5, r0
 800a1aa:	460c      	mov	r4, r1
 800a1ac:	b913      	cbnz	r3, 800a1b4 <_fflush_r+0x10>
 800a1ae:	2500      	movs	r5, #0
 800a1b0:	4628      	mov	r0, r5
 800a1b2:	bd38      	pop	{r3, r4, r5, pc}
 800a1b4:	b118      	cbz	r0, 800a1be <_fflush_r+0x1a>
 800a1b6:	6a03      	ldr	r3, [r0, #32]
 800a1b8:	b90b      	cbnz	r3, 800a1be <_fflush_r+0x1a>
 800a1ba:	f7fd fa6f 	bl	800769c <__sinit>
 800a1be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d0f3      	beq.n	800a1ae <_fflush_r+0xa>
 800a1c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a1c8:	07d0      	lsls	r0, r2, #31
 800a1ca:	d404      	bmi.n	800a1d6 <_fflush_r+0x32>
 800a1cc:	0599      	lsls	r1, r3, #22
 800a1ce:	d402      	bmi.n	800a1d6 <_fflush_r+0x32>
 800a1d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1d2:	f7fd fb7a 	bl	80078ca <__retarget_lock_acquire_recursive>
 800a1d6:	4628      	mov	r0, r5
 800a1d8:	4621      	mov	r1, r4
 800a1da:	f7ff ff63 	bl	800a0a4 <__sflush_r>
 800a1de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1e0:	4605      	mov	r5, r0
 800a1e2:	07da      	lsls	r2, r3, #31
 800a1e4:	d4e4      	bmi.n	800a1b0 <_fflush_r+0xc>
 800a1e6:	89a3      	ldrh	r3, [r4, #12]
 800a1e8:	059b      	lsls	r3, r3, #22
 800a1ea:	d4e1      	bmi.n	800a1b0 <_fflush_r+0xc>
 800a1ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1ee:	f7fd fb6d 	bl	80078cc <__retarget_lock_release_recursive>
 800a1f2:	e7dd      	b.n	800a1b0 <_fflush_r+0xc>

0800a1f4 <memmove>:
 800a1f4:	4288      	cmp	r0, r1
 800a1f6:	b510      	push	{r4, lr}
 800a1f8:	eb01 0402 	add.w	r4, r1, r2
 800a1fc:	d902      	bls.n	800a204 <memmove+0x10>
 800a1fe:	4284      	cmp	r4, r0
 800a200:	4623      	mov	r3, r4
 800a202:	d807      	bhi.n	800a214 <memmove+0x20>
 800a204:	1e43      	subs	r3, r0, #1
 800a206:	42a1      	cmp	r1, r4
 800a208:	d008      	beq.n	800a21c <memmove+0x28>
 800a20a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a20e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a212:	e7f8      	b.n	800a206 <memmove+0x12>
 800a214:	4601      	mov	r1, r0
 800a216:	4402      	add	r2, r0
 800a218:	428a      	cmp	r2, r1
 800a21a:	d100      	bne.n	800a21e <memmove+0x2a>
 800a21c:	bd10      	pop	{r4, pc}
 800a21e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a226:	e7f7      	b.n	800a218 <memmove+0x24>

0800a228 <strncmp>:
 800a228:	b510      	push	{r4, lr}
 800a22a:	b16a      	cbz	r2, 800a248 <strncmp+0x20>
 800a22c:	3901      	subs	r1, #1
 800a22e:	1884      	adds	r4, r0, r2
 800a230:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a234:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a238:	429a      	cmp	r2, r3
 800a23a:	d103      	bne.n	800a244 <strncmp+0x1c>
 800a23c:	42a0      	cmp	r0, r4
 800a23e:	d001      	beq.n	800a244 <strncmp+0x1c>
 800a240:	2a00      	cmp	r2, #0
 800a242:	d1f5      	bne.n	800a230 <strncmp+0x8>
 800a244:	1ad0      	subs	r0, r2, r3
 800a246:	bd10      	pop	{r4, pc}
 800a248:	4610      	mov	r0, r2
 800a24a:	e7fc      	b.n	800a246 <strncmp+0x1e>

0800a24c <_sbrk_r>:
 800a24c:	b538      	push	{r3, r4, r5, lr}
 800a24e:	2300      	movs	r3, #0
 800a250:	4d05      	ldr	r5, [pc, #20]	@ (800a268 <_sbrk_r+0x1c>)
 800a252:	4604      	mov	r4, r0
 800a254:	4608      	mov	r0, r1
 800a256:	602b      	str	r3, [r5, #0]
 800a258:	f7f7 fbae 	bl	80019b8 <_sbrk>
 800a25c:	1c43      	adds	r3, r0, #1
 800a25e:	d102      	bne.n	800a266 <_sbrk_r+0x1a>
 800a260:	682b      	ldr	r3, [r5, #0]
 800a262:	b103      	cbz	r3, 800a266 <_sbrk_r+0x1a>
 800a264:	6023      	str	r3, [r4, #0]
 800a266:	bd38      	pop	{r3, r4, r5, pc}
 800a268:	20002134 	.word	0x20002134

0800a26c <nan>:
 800a26c:	2000      	movs	r0, #0
 800a26e:	4901      	ldr	r1, [pc, #4]	@ (800a274 <nan+0x8>)
 800a270:	4770      	bx	lr
 800a272:	bf00      	nop
 800a274:	7ff80000 	.word	0x7ff80000

0800a278 <__assert_func>:
 800a278:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a27a:	4614      	mov	r4, r2
 800a27c:	461a      	mov	r2, r3
 800a27e:	4b09      	ldr	r3, [pc, #36]	@ (800a2a4 <__assert_func+0x2c>)
 800a280:	4605      	mov	r5, r0
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	68d8      	ldr	r0, [r3, #12]
 800a286:	b954      	cbnz	r4, 800a29e <__assert_func+0x26>
 800a288:	4b07      	ldr	r3, [pc, #28]	@ (800a2a8 <__assert_func+0x30>)
 800a28a:	461c      	mov	r4, r3
 800a28c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a290:	9100      	str	r1, [sp, #0]
 800a292:	462b      	mov	r3, r5
 800a294:	4905      	ldr	r1, [pc, #20]	@ (800a2ac <__assert_func+0x34>)
 800a296:	f000 fba7 	bl	800a9e8 <fiprintf>
 800a29a:	f000 fbb7 	bl	800aa0c <abort>
 800a29e:	4b04      	ldr	r3, [pc, #16]	@ (800a2b0 <__assert_func+0x38>)
 800a2a0:	e7f4      	b.n	800a28c <__assert_func+0x14>
 800a2a2:	bf00      	nop
 800a2a4:	2000001c 	.word	0x2000001c
 800a2a8:	0800beed 	.word	0x0800beed
 800a2ac:	0800bebf 	.word	0x0800bebf
 800a2b0:	0800beb2 	.word	0x0800beb2

0800a2b4 <_calloc_r>:
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	fba1 5402 	umull	r5, r4, r1, r2
 800a2ba:	b93c      	cbnz	r4, 800a2cc <_calloc_r+0x18>
 800a2bc:	4629      	mov	r1, r5
 800a2be:	f7fe f9e9 	bl	8008694 <_malloc_r>
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	b928      	cbnz	r0, 800a2d2 <_calloc_r+0x1e>
 800a2c6:	2600      	movs	r6, #0
 800a2c8:	4630      	mov	r0, r6
 800a2ca:	bd70      	pop	{r4, r5, r6, pc}
 800a2cc:	220c      	movs	r2, #12
 800a2ce:	6002      	str	r2, [r0, #0]
 800a2d0:	e7f9      	b.n	800a2c6 <_calloc_r+0x12>
 800a2d2:	462a      	mov	r2, r5
 800a2d4:	4621      	mov	r1, r4
 800a2d6:	f7fd fa7a 	bl	80077ce <memset>
 800a2da:	e7f5      	b.n	800a2c8 <_calloc_r+0x14>

0800a2dc <rshift>:
 800a2dc:	6903      	ldr	r3, [r0, #16]
 800a2de:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a2e6:	f100 0414 	add.w	r4, r0, #20
 800a2ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a2ee:	dd46      	ble.n	800a37e <rshift+0xa2>
 800a2f0:	f011 011f 	ands.w	r1, r1, #31
 800a2f4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a2f8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a2fc:	d10c      	bne.n	800a318 <rshift+0x3c>
 800a2fe:	4629      	mov	r1, r5
 800a300:	f100 0710 	add.w	r7, r0, #16
 800a304:	42b1      	cmp	r1, r6
 800a306:	d335      	bcc.n	800a374 <rshift+0x98>
 800a308:	1a9b      	subs	r3, r3, r2
 800a30a:	009b      	lsls	r3, r3, #2
 800a30c:	1eea      	subs	r2, r5, #3
 800a30e:	4296      	cmp	r6, r2
 800a310:	bf38      	it	cc
 800a312:	2300      	movcc	r3, #0
 800a314:	4423      	add	r3, r4
 800a316:	e015      	b.n	800a344 <rshift+0x68>
 800a318:	46a1      	mov	r9, r4
 800a31a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a31e:	f1c1 0820 	rsb	r8, r1, #32
 800a322:	40cf      	lsrs	r7, r1
 800a324:	f105 0e04 	add.w	lr, r5, #4
 800a328:	4576      	cmp	r6, lr
 800a32a:	46f4      	mov	ip, lr
 800a32c:	d816      	bhi.n	800a35c <rshift+0x80>
 800a32e:	1a9a      	subs	r2, r3, r2
 800a330:	0092      	lsls	r2, r2, #2
 800a332:	3a04      	subs	r2, #4
 800a334:	3501      	adds	r5, #1
 800a336:	42ae      	cmp	r6, r5
 800a338:	bf38      	it	cc
 800a33a:	2200      	movcc	r2, #0
 800a33c:	18a3      	adds	r3, r4, r2
 800a33e:	50a7      	str	r7, [r4, r2]
 800a340:	b107      	cbz	r7, 800a344 <rshift+0x68>
 800a342:	3304      	adds	r3, #4
 800a344:	42a3      	cmp	r3, r4
 800a346:	eba3 0204 	sub.w	r2, r3, r4
 800a34a:	bf08      	it	eq
 800a34c:	2300      	moveq	r3, #0
 800a34e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a352:	6102      	str	r2, [r0, #16]
 800a354:	bf08      	it	eq
 800a356:	6143      	streq	r3, [r0, #20]
 800a358:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a35c:	f8dc c000 	ldr.w	ip, [ip]
 800a360:	fa0c fc08 	lsl.w	ip, ip, r8
 800a364:	ea4c 0707 	orr.w	r7, ip, r7
 800a368:	f849 7b04 	str.w	r7, [r9], #4
 800a36c:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a370:	40cf      	lsrs	r7, r1
 800a372:	e7d9      	b.n	800a328 <rshift+0x4c>
 800a374:	f851 cb04 	ldr.w	ip, [r1], #4
 800a378:	f847 cf04 	str.w	ip, [r7, #4]!
 800a37c:	e7c2      	b.n	800a304 <rshift+0x28>
 800a37e:	4623      	mov	r3, r4
 800a380:	e7e0      	b.n	800a344 <rshift+0x68>

0800a382 <__hexdig_fun>:
 800a382:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a386:	2b09      	cmp	r3, #9
 800a388:	d802      	bhi.n	800a390 <__hexdig_fun+0xe>
 800a38a:	3820      	subs	r0, #32
 800a38c:	b2c0      	uxtb	r0, r0
 800a38e:	4770      	bx	lr
 800a390:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a394:	2b05      	cmp	r3, #5
 800a396:	d801      	bhi.n	800a39c <__hexdig_fun+0x1a>
 800a398:	3847      	subs	r0, #71	@ 0x47
 800a39a:	e7f7      	b.n	800a38c <__hexdig_fun+0xa>
 800a39c:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a3a0:	2b05      	cmp	r3, #5
 800a3a2:	d801      	bhi.n	800a3a8 <__hexdig_fun+0x26>
 800a3a4:	3827      	subs	r0, #39	@ 0x27
 800a3a6:	e7f1      	b.n	800a38c <__hexdig_fun+0xa>
 800a3a8:	2000      	movs	r0, #0
 800a3aa:	4770      	bx	lr

0800a3ac <__gethex>:
 800a3ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3b0:	468a      	mov	sl, r1
 800a3b2:	4690      	mov	r8, r2
 800a3b4:	b085      	sub	sp, #20
 800a3b6:	9302      	str	r3, [sp, #8]
 800a3b8:	680b      	ldr	r3, [r1, #0]
 800a3ba:	9001      	str	r0, [sp, #4]
 800a3bc:	1c9c      	adds	r4, r3, #2
 800a3be:	46a1      	mov	r9, r4
 800a3c0:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a3c4:	2830      	cmp	r0, #48	@ 0x30
 800a3c6:	d0fa      	beq.n	800a3be <__gethex+0x12>
 800a3c8:	eba9 0303 	sub.w	r3, r9, r3
 800a3cc:	f1a3 0b02 	sub.w	fp, r3, #2
 800a3d0:	f7ff ffd7 	bl	800a382 <__hexdig_fun>
 800a3d4:	4605      	mov	r5, r0
 800a3d6:	2800      	cmp	r0, #0
 800a3d8:	d168      	bne.n	800a4ac <__gethex+0x100>
 800a3da:	2201      	movs	r2, #1
 800a3dc:	4648      	mov	r0, r9
 800a3de:	499f      	ldr	r1, [pc, #636]	@ (800a65c <__gethex+0x2b0>)
 800a3e0:	f7ff ff22 	bl	800a228 <strncmp>
 800a3e4:	4607      	mov	r7, r0
 800a3e6:	2800      	cmp	r0, #0
 800a3e8:	d167      	bne.n	800a4ba <__gethex+0x10e>
 800a3ea:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a3ee:	4626      	mov	r6, r4
 800a3f0:	f7ff ffc7 	bl	800a382 <__hexdig_fun>
 800a3f4:	2800      	cmp	r0, #0
 800a3f6:	d062      	beq.n	800a4be <__gethex+0x112>
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	7818      	ldrb	r0, [r3, #0]
 800a3fc:	4699      	mov	r9, r3
 800a3fe:	2830      	cmp	r0, #48	@ 0x30
 800a400:	f103 0301 	add.w	r3, r3, #1
 800a404:	d0f9      	beq.n	800a3fa <__gethex+0x4e>
 800a406:	f7ff ffbc 	bl	800a382 <__hexdig_fun>
 800a40a:	fab0 f580 	clz	r5, r0
 800a40e:	f04f 0b01 	mov.w	fp, #1
 800a412:	096d      	lsrs	r5, r5, #5
 800a414:	464a      	mov	r2, r9
 800a416:	4616      	mov	r6, r2
 800a418:	7830      	ldrb	r0, [r6, #0]
 800a41a:	3201      	adds	r2, #1
 800a41c:	f7ff ffb1 	bl	800a382 <__hexdig_fun>
 800a420:	2800      	cmp	r0, #0
 800a422:	d1f8      	bne.n	800a416 <__gethex+0x6a>
 800a424:	2201      	movs	r2, #1
 800a426:	4630      	mov	r0, r6
 800a428:	498c      	ldr	r1, [pc, #560]	@ (800a65c <__gethex+0x2b0>)
 800a42a:	f7ff fefd 	bl	800a228 <strncmp>
 800a42e:	2800      	cmp	r0, #0
 800a430:	d13f      	bne.n	800a4b2 <__gethex+0x106>
 800a432:	b944      	cbnz	r4, 800a446 <__gethex+0x9a>
 800a434:	1c74      	adds	r4, r6, #1
 800a436:	4622      	mov	r2, r4
 800a438:	4616      	mov	r6, r2
 800a43a:	7830      	ldrb	r0, [r6, #0]
 800a43c:	3201      	adds	r2, #1
 800a43e:	f7ff ffa0 	bl	800a382 <__hexdig_fun>
 800a442:	2800      	cmp	r0, #0
 800a444:	d1f8      	bne.n	800a438 <__gethex+0x8c>
 800a446:	1ba4      	subs	r4, r4, r6
 800a448:	00a7      	lsls	r7, r4, #2
 800a44a:	7833      	ldrb	r3, [r6, #0]
 800a44c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a450:	2b50      	cmp	r3, #80	@ 0x50
 800a452:	d13e      	bne.n	800a4d2 <__gethex+0x126>
 800a454:	7873      	ldrb	r3, [r6, #1]
 800a456:	2b2b      	cmp	r3, #43	@ 0x2b
 800a458:	d033      	beq.n	800a4c2 <__gethex+0x116>
 800a45a:	2b2d      	cmp	r3, #45	@ 0x2d
 800a45c:	d034      	beq.n	800a4c8 <__gethex+0x11c>
 800a45e:	2400      	movs	r4, #0
 800a460:	1c71      	adds	r1, r6, #1
 800a462:	7808      	ldrb	r0, [r1, #0]
 800a464:	f7ff ff8d 	bl	800a382 <__hexdig_fun>
 800a468:	1e43      	subs	r3, r0, #1
 800a46a:	b2db      	uxtb	r3, r3
 800a46c:	2b18      	cmp	r3, #24
 800a46e:	d830      	bhi.n	800a4d2 <__gethex+0x126>
 800a470:	f1a0 0210 	sub.w	r2, r0, #16
 800a474:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a478:	f7ff ff83 	bl	800a382 <__hexdig_fun>
 800a47c:	f100 3cff 	add.w	ip, r0, #4294967295
 800a480:	fa5f fc8c 	uxtb.w	ip, ip
 800a484:	f1bc 0f18 	cmp.w	ip, #24
 800a488:	f04f 030a 	mov.w	r3, #10
 800a48c:	d91e      	bls.n	800a4cc <__gethex+0x120>
 800a48e:	b104      	cbz	r4, 800a492 <__gethex+0xe6>
 800a490:	4252      	negs	r2, r2
 800a492:	4417      	add	r7, r2
 800a494:	f8ca 1000 	str.w	r1, [sl]
 800a498:	b1ed      	cbz	r5, 800a4d6 <__gethex+0x12a>
 800a49a:	f1bb 0f00 	cmp.w	fp, #0
 800a49e:	bf0c      	ite	eq
 800a4a0:	2506      	moveq	r5, #6
 800a4a2:	2500      	movne	r5, #0
 800a4a4:	4628      	mov	r0, r5
 800a4a6:	b005      	add	sp, #20
 800a4a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ac:	2500      	movs	r5, #0
 800a4ae:	462c      	mov	r4, r5
 800a4b0:	e7b0      	b.n	800a414 <__gethex+0x68>
 800a4b2:	2c00      	cmp	r4, #0
 800a4b4:	d1c7      	bne.n	800a446 <__gethex+0x9a>
 800a4b6:	4627      	mov	r7, r4
 800a4b8:	e7c7      	b.n	800a44a <__gethex+0x9e>
 800a4ba:	464e      	mov	r6, r9
 800a4bc:	462f      	mov	r7, r5
 800a4be:	2501      	movs	r5, #1
 800a4c0:	e7c3      	b.n	800a44a <__gethex+0x9e>
 800a4c2:	2400      	movs	r4, #0
 800a4c4:	1cb1      	adds	r1, r6, #2
 800a4c6:	e7cc      	b.n	800a462 <__gethex+0xb6>
 800a4c8:	2401      	movs	r4, #1
 800a4ca:	e7fb      	b.n	800a4c4 <__gethex+0x118>
 800a4cc:	fb03 0002 	mla	r0, r3, r2, r0
 800a4d0:	e7ce      	b.n	800a470 <__gethex+0xc4>
 800a4d2:	4631      	mov	r1, r6
 800a4d4:	e7de      	b.n	800a494 <__gethex+0xe8>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	eba6 0309 	sub.w	r3, r6, r9
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	2b07      	cmp	r3, #7
 800a4e0:	dc0a      	bgt.n	800a4f8 <__gethex+0x14c>
 800a4e2:	9801      	ldr	r0, [sp, #4]
 800a4e4:	f7fe f962 	bl	80087ac <_Balloc>
 800a4e8:	4604      	mov	r4, r0
 800a4ea:	b940      	cbnz	r0, 800a4fe <__gethex+0x152>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	21e4      	movs	r1, #228	@ 0xe4
 800a4f0:	4b5b      	ldr	r3, [pc, #364]	@ (800a660 <__gethex+0x2b4>)
 800a4f2:	485c      	ldr	r0, [pc, #368]	@ (800a664 <__gethex+0x2b8>)
 800a4f4:	f7ff fec0 	bl	800a278 <__assert_func>
 800a4f8:	3101      	adds	r1, #1
 800a4fa:	105b      	asrs	r3, r3, #1
 800a4fc:	e7ef      	b.n	800a4de <__gethex+0x132>
 800a4fe:	2300      	movs	r3, #0
 800a500:	f100 0a14 	add.w	sl, r0, #20
 800a504:	4655      	mov	r5, sl
 800a506:	469b      	mov	fp, r3
 800a508:	45b1      	cmp	r9, r6
 800a50a:	d337      	bcc.n	800a57c <__gethex+0x1d0>
 800a50c:	f845 bb04 	str.w	fp, [r5], #4
 800a510:	eba5 050a 	sub.w	r5, r5, sl
 800a514:	10ad      	asrs	r5, r5, #2
 800a516:	6125      	str	r5, [r4, #16]
 800a518:	4658      	mov	r0, fp
 800a51a:	f7fe fa39 	bl	8008990 <__hi0bits>
 800a51e:	016d      	lsls	r5, r5, #5
 800a520:	f8d8 6000 	ldr.w	r6, [r8]
 800a524:	1a2d      	subs	r5, r5, r0
 800a526:	42b5      	cmp	r5, r6
 800a528:	dd54      	ble.n	800a5d4 <__gethex+0x228>
 800a52a:	1bad      	subs	r5, r5, r6
 800a52c:	4629      	mov	r1, r5
 800a52e:	4620      	mov	r0, r4
 800a530:	f7fe fdc1 	bl	80090b6 <__any_on>
 800a534:	4681      	mov	r9, r0
 800a536:	b178      	cbz	r0, 800a558 <__gethex+0x1ac>
 800a538:	f04f 0901 	mov.w	r9, #1
 800a53c:	1e6b      	subs	r3, r5, #1
 800a53e:	1159      	asrs	r1, r3, #5
 800a540:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a544:	f003 021f 	and.w	r2, r3, #31
 800a548:	fa09 f202 	lsl.w	r2, r9, r2
 800a54c:	420a      	tst	r2, r1
 800a54e:	d003      	beq.n	800a558 <__gethex+0x1ac>
 800a550:	454b      	cmp	r3, r9
 800a552:	dc36      	bgt.n	800a5c2 <__gethex+0x216>
 800a554:	f04f 0902 	mov.w	r9, #2
 800a558:	4629      	mov	r1, r5
 800a55a:	4620      	mov	r0, r4
 800a55c:	f7ff febe 	bl	800a2dc <rshift>
 800a560:	442f      	add	r7, r5
 800a562:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a566:	42bb      	cmp	r3, r7
 800a568:	da42      	bge.n	800a5f0 <__gethex+0x244>
 800a56a:	4621      	mov	r1, r4
 800a56c:	9801      	ldr	r0, [sp, #4]
 800a56e:	f7fe f95d 	bl	800882c <_Bfree>
 800a572:	2300      	movs	r3, #0
 800a574:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a576:	25a3      	movs	r5, #163	@ 0xa3
 800a578:	6013      	str	r3, [r2, #0]
 800a57a:	e793      	b.n	800a4a4 <__gethex+0xf8>
 800a57c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a580:	2a2e      	cmp	r2, #46	@ 0x2e
 800a582:	d012      	beq.n	800a5aa <__gethex+0x1fe>
 800a584:	2b20      	cmp	r3, #32
 800a586:	d104      	bne.n	800a592 <__gethex+0x1e6>
 800a588:	f845 bb04 	str.w	fp, [r5], #4
 800a58c:	f04f 0b00 	mov.w	fp, #0
 800a590:	465b      	mov	r3, fp
 800a592:	7830      	ldrb	r0, [r6, #0]
 800a594:	9303      	str	r3, [sp, #12]
 800a596:	f7ff fef4 	bl	800a382 <__hexdig_fun>
 800a59a:	9b03      	ldr	r3, [sp, #12]
 800a59c:	f000 000f 	and.w	r0, r0, #15
 800a5a0:	4098      	lsls	r0, r3
 800a5a2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a5a6:	3304      	adds	r3, #4
 800a5a8:	e7ae      	b.n	800a508 <__gethex+0x15c>
 800a5aa:	45b1      	cmp	r9, r6
 800a5ac:	d8ea      	bhi.n	800a584 <__gethex+0x1d8>
 800a5ae:	2201      	movs	r2, #1
 800a5b0:	4630      	mov	r0, r6
 800a5b2:	492a      	ldr	r1, [pc, #168]	@ (800a65c <__gethex+0x2b0>)
 800a5b4:	9303      	str	r3, [sp, #12]
 800a5b6:	f7ff fe37 	bl	800a228 <strncmp>
 800a5ba:	9b03      	ldr	r3, [sp, #12]
 800a5bc:	2800      	cmp	r0, #0
 800a5be:	d1e1      	bne.n	800a584 <__gethex+0x1d8>
 800a5c0:	e7a2      	b.n	800a508 <__gethex+0x15c>
 800a5c2:	4620      	mov	r0, r4
 800a5c4:	1ea9      	subs	r1, r5, #2
 800a5c6:	f7fe fd76 	bl	80090b6 <__any_on>
 800a5ca:	2800      	cmp	r0, #0
 800a5cc:	d0c2      	beq.n	800a554 <__gethex+0x1a8>
 800a5ce:	f04f 0903 	mov.w	r9, #3
 800a5d2:	e7c1      	b.n	800a558 <__gethex+0x1ac>
 800a5d4:	da09      	bge.n	800a5ea <__gethex+0x23e>
 800a5d6:	1b75      	subs	r5, r6, r5
 800a5d8:	4621      	mov	r1, r4
 800a5da:	462a      	mov	r2, r5
 800a5dc:	9801      	ldr	r0, [sp, #4]
 800a5de:	f7fe fb3b 	bl	8008c58 <__lshift>
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	1b7f      	subs	r7, r7, r5
 800a5e6:	f100 0a14 	add.w	sl, r0, #20
 800a5ea:	f04f 0900 	mov.w	r9, #0
 800a5ee:	e7b8      	b.n	800a562 <__gethex+0x1b6>
 800a5f0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a5f4:	42bd      	cmp	r5, r7
 800a5f6:	dd6f      	ble.n	800a6d8 <__gethex+0x32c>
 800a5f8:	1bed      	subs	r5, r5, r7
 800a5fa:	42ae      	cmp	r6, r5
 800a5fc:	dc34      	bgt.n	800a668 <__gethex+0x2bc>
 800a5fe:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a602:	2b02      	cmp	r3, #2
 800a604:	d022      	beq.n	800a64c <__gethex+0x2a0>
 800a606:	2b03      	cmp	r3, #3
 800a608:	d024      	beq.n	800a654 <__gethex+0x2a8>
 800a60a:	2b01      	cmp	r3, #1
 800a60c:	d115      	bne.n	800a63a <__gethex+0x28e>
 800a60e:	42ae      	cmp	r6, r5
 800a610:	d113      	bne.n	800a63a <__gethex+0x28e>
 800a612:	2e01      	cmp	r6, #1
 800a614:	d10b      	bne.n	800a62e <__gethex+0x282>
 800a616:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a61a:	9a02      	ldr	r2, [sp, #8]
 800a61c:	2562      	movs	r5, #98	@ 0x62
 800a61e:	6013      	str	r3, [r2, #0]
 800a620:	2301      	movs	r3, #1
 800a622:	6123      	str	r3, [r4, #16]
 800a624:	f8ca 3000 	str.w	r3, [sl]
 800a628:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a62a:	601c      	str	r4, [r3, #0]
 800a62c:	e73a      	b.n	800a4a4 <__gethex+0xf8>
 800a62e:	4620      	mov	r0, r4
 800a630:	1e71      	subs	r1, r6, #1
 800a632:	f7fe fd40 	bl	80090b6 <__any_on>
 800a636:	2800      	cmp	r0, #0
 800a638:	d1ed      	bne.n	800a616 <__gethex+0x26a>
 800a63a:	4621      	mov	r1, r4
 800a63c:	9801      	ldr	r0, [sp, #4]
 800a63e:	f7fe f8f5 	bl	800882c <_Bfree>
 800a642:	2300      	movs	r3, #0
 800a644:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a646:	2550      	movs	r5, #80	@ 0x50
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	e72b      	b.n	800a4a4 <__gethex+0xf8>
 800a64c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d1f3      	bne.n	800a63a <__gethex+0x28e>
 800a652:	e7e0      	b.n	800a616 <__gethex+0x26a>
 800a654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a656:	2b00      	cmp	r3, #0
 800a658:	d1dd      	bne.n	800a616 <__gethex+0x26a>
 800a65a:	e7ee      	b.n	800a63a <__gethex+0x28e>
 800a65c:	0800bd40 	.word	0x0800bd40
 800a660:	0800bbd7 	.word	0x0800bbd7
 800a664:	0800beee 	.word	0x0800beee
 800a668:	1e6f      	subs	r7, r5, #1
 800a66a:	f1b9 0f00 	cmp.w	r9, #0
 800a66e:	d130      	bne.n	800a6d2 <__gethex+0x326>
 800a670:	b127      	cbz	r7, 800a67c <__gethex+0x2d0>
 800a672:	4639      	mov	r1, r7
 800a674:	4620      	mov	r0, r4
 800a676:	f7fe fd1e 	bl	80090b6 <__any_on>
 800a67a:	4681      	mov	r9, r0
 800a67c:	2301      	movs	r3, #1
 800a67e:	4629      	mov	r1, r5
 800a680:	1b76      	subs	r6, r6, r5
 800a682:	2502      	movs	r5, #2
 800a684:	117a      	asrs	r2, r7, #5
 800a686:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a68a:	f007 071f 	and.w	r7, r7, #31
 800a68e:	40bb      	lsls	r3, r7
 800a690:	4213      	tst	r3, r2
 800a692:	4620      	mov	r0, r4
 800a694:	bf18      	it	ne
 800a696:	f049 0902 	orrne.w	r9, r9, #2
 800a69a:	f7ff fe1f 	bl	800a2dc <rshift>
 800a69e:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a6a2:	f1b9 0f00 	cmp.w	r9, #0
 800a6a6:	d047      	beq.n	800a738 <__gethex+0x38c>
 800a6a8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6ac:	2b02      	cmp	r3, #2
 800a6ae:	d015      	beq.n	800a6dc <__gethex+0x330>
 800a6b0:	2b03      	cmp	r3, #3
 800a6b2:	d017      	beq.n	800a6e4 <__gethex+0x338>
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d109      	bne.n	800a6cc <__gethex+0x320>
 800a6b8:	f019 0f02 	tst.w	r9, #2
 800a6bc:	d006      	beq.n	800a6cc <__gethex+0x320>
 800a6be:	f8da 3000 	ldr.w	r3, [sl]
 800a6c2:	ea49 0903 	orr.w	r9, r9, r3
 800a6c6:	f019 0f01 	tst.w	r9, #1
 800a6ca:	d10e      	bne.n	800a6ea <__gethex+0x33e>
 800a6cc:	f045 0510 	orr.w	r5, r5, #16
 800a6d0:	e032      	b.n	800a738 <__gethex+0x38c>
 800a6d2:	f04f 0901 	mov.w	r9, #1
 800a6d6:	e7d1      	b.n	800a67c <__gethex+0x2d0>
 800a6d8:	2501      	movs	r5, #1
 800a6da:	e7e2      	b.n	800a6a2 <__gethex+0x2f6>
 800a6dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6de:	f1c3 0301 	rsb	r3, r3, #1
 800a6e2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a6e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d0f0      	beq.n	800a6cc <__gethex+0x320>
 800a6ea:	f04f 0c00 	mov.w	ip, #0
 800a6ee:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6f2:	f104 0314 	add.w	r3, r4, #20
 800a6f6:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6fa:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6fe:	4618      	mov	r0, r3
 800a700:	f853 2b04 	ldr.w	r2, [r3], #4
 800a704:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a708:	d01b      	beq.n	800a742 <__gethex+0x396>
 800a70a:	3201      	adds	r2, #1
 800a70c:	6002      	str	r2, [r0, #0]
 800a70e:	2d02      	cmp	r5, #2
 800a710:	f104 0314 	add.w	r3, r4, #20
 800a714:	d13c      	bne.n	800a790 <__gethex+0x3e4>
 800a716:	f8d8 2000 	ldr.w	r2, [r8]
 800a71a:	3a01      	subs	r2, #1
 800a71c:	42b2      	cmp	r2, r6
 800a71e:	d109      	bne.n	800a734 <__gethex+0x388>
 800a720:	2201      	movs	r2, #1
 800a722:	1171      	asrs	r1, r6, #5
 800a724:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a728:	f006 061f 	and.w	r6, r6, #31
 800a72c:	fa02 f606 	lsl.w	r6, r2, r6
 800a730:	421e      	tst	r6, r3
 800a732:	d13a      	bne.n	800a7aa <__gethex+0x3fe>
 800a734:	f045 0520 	orr.w	r5, r5, #32
 800a738:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a73a:	601c      	str	r4, [r3, #0]
 800a73c:	9b02      	ldr	r3, [sp, #8]
 800a73e:	601f      	str	r7, [r3, #0]
 800a740:	e6b0      	b.n	800a4a4 <__gethex+0xf8>
 800a742:	4299      	cmp	r1, r3
 800a744:	f843 cc04 	str.w	ip, [r3, #-4]
 800a748:	d8d9      	bhi.n	800a6fe <__gethex+0x352>
 800a74a:	68a3      	ldr	r3, [r4, #8]
 800a74c:	459b      	cmp	fp, r3
 800a74e:	db17      	blt.n	800a780 <__gethex+0x3d4>
 800a750:	6861      	ldr	r1, [r4, #4]
 800a752:	9801      	ldr	r0, [sp, #4]
 800a754:	3101      	adds	r1, #1
 800a756:	f7fe f829 	bl	80087ac <_Balloc>
 800a75a:	4681      	mov	r9, r0
 800a75c:	b918      	cbnz	r0, 800a766 <__gethex+0x3ba>
 800a75e:	4602      	mov	r2, r0
 800a760:	2184      	movs	r1, #132	@ 0x84
 800a762:	4b19      	ldr	r3, [pc, #100]	@ (800a7c8 <__gethex+0x41c>)
 800a764:	e6c5      	b.n	800a4f2 <__gethex+0x146>
 800a766:	6922      	ldr	r2, [r4, #16]
 800a768:	f104 010c 	add.w	r1, r4, #12
 800a76c:	3202      	adds	r2, #2
 800a76e:	0092      	lsls	r2, r2, #2
 800a770:	300c      	adds	r0, #12
 800a772:	f7fd f8ba 	bl	80078ea <memcpy>
 800a776:	4621      	mov	r1, r4
 800a778:	9801      	ldr	r0, [sp, #4]
 800a77a:	f7fe f857 	bl	800882c <_Bfree>
 800a77e:	464c      	mov	r4, r9
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	6122      	str	r2, [r4, #16]
 800a786:	2201      	movs	r2, #1
 800a788:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a78c:	615a      	str	r2, [r3, #20]
 800a78e:	e7be      	b.n	800a70e <__gethex+0x362>
 800a790:	6922      	ldr	r2, [r4, #16]
 800a792:	455a      	cmp	r2, fp
 800a794:	dd0b      	ble.n	800a7ae <__gethex+0x402>
 800a796:	2101      	movs	r1, #1
 800a798:	4620      	mov	r0, r4
 800a79a:	f7ff fd9f 	bl	800a2dc <rshift>
 800a79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7a2:	3701      	adds	r7, #1
 800a7a4:	42bb      	cmp	r3, r7
 800a7a6:	f6ff aee0 	blt.w	800a56a <__gethex+0x1be>
 800a7aa:	2501      	movs	r5, #1
 800a7ac:	e7c2      	b.n	800a734 <__gethex+0x388>
 800a7ae:	f016 061f 	ands.w	r6, r6, #31
 800a7b2:	d0fa      	beq.n	800a7aa <__gethex+0x3fe>
 800a7b4:	4453      	add	r3, sl
 800a7b6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a7ba:	f7fe f8e9 	bl	8008990 <__hi0bits>
 800a7be:	f1c6 0620 	rsb	r6, r6, #32
 800a7c2:	42b0      	cmp	r0, r6
 800a7c4:	dbe7      	blt.n	800a796 <__gethex+0x3ea>
 800a7c6:	e7f0      	b.n	800a7aa <__gethex+0x3fe>
 800a7c8:	0800bbd7 	.word	0x0800bbd7

0800a7cc <L_shift>:
 800a7cc:	f1c2 0208 	rsb	r2, r2, #8
 800a7d0:	0092      	lsls	r2, r2, #2
 800a7d2:	b570      	push	{r4, r5, r6, lr}
 800a7d4:	f1c2 0620 	rsb	r6, r2, #32
 800a7d8:	6843      	ldr	r3, [r0, #4]
 800a7da:	6804      	ldr	r4, [r0, #0]
 800a7dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a7e0:	432c      	orrs	r4, r5
 800a7e2:	40d3      	lsrs	r3, r2
 800a7e4:	6004      	str	r4, [r0, #0]
 800a7e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7ea:	4288      	cmp	r0, r1
 800a7ec:	d3f4      	bcc.n	800a7d8 <L_shift+0xc>
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__match>:
 800a7f0:	b530      	push	{r4, r5, lr}
 800a7f2:	6803      	ldr	r3, [r0, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7fa:	b914      	cbnz	r4, 800a802 <__match+0x12>
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	2001      	movs	r0, #1
 800a800:	bd30      	pop	{r4, r5, pc}
 800a802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a806:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a80a:	2d19      	cmp	r5, #25
 800a80c:	bf98      	it	ls
 800a80e:	3220      	addls	r2, #32
 800a810:	42a2      	cmp	r2, r4
 800a812:	d0f0      	beq.n	800a7f6 <__match+0x6>
 800a814:	2000      	movs	r0, #0
 800a816:	e7f3      	b.n	800a800 <__match+0x10>

0800a818 <__hexnan>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	2500      	movs	r5, #0
 800a81e:	680b      	ldr	r3, [r1, #0]
 800a820:	4682      	mov	sl, r0
 800a822:	115e      	asrs	r6, r3, #5
 800a824:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a828:	f013 031f 	ands.w	r3, r3, #31
 800a82c:	bf18      	it	ne
 800a82e:	3604      	addne	r6, #4
 800a830:	1f37      	subs	r7, r6, #4
 800a832:	4690      	mov	r8, r2
 800a834:	46b9      	mov	r9, r7
 800a836:	463c      	mov	r4, r7
 800a838:	46ab      	mov	fp, r5
 800a83a:	b087      	sub	sp, #28
 800a83c:	6801      	ldr	r1, [r0, #0]
 800a83e:	9301      	str	r3, [sp, #4]
 800a840:	f846 5c04 	str.w	r5, [r6, #-4]
 800a844:	9502      	str	r5, [sp, #8]
 800a846:	784a      	ldrb	r2, [r1, #1]
 800a848:	1c4b      	adds	r3, r1, #1
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	b342      	cbz	r2, 800a8a0 <__hexnan+0x88>
 800a84e:	4610      	mov	r0, r2
 800a850:	9105      	str	r1, [sp, #20]
 800a852:	9204      	str	r2, [sp, #16]
 800a854:	f7ff fd95 	bl	800a382 <__hexdig_fun>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d151      	bne.n	800a900 <__hexnan+0xe8>
 800a85c:	9a04      	ldr	r2, [sp, #16]
 800a85e:	9905      	ldr	r1, [sp, #20]
 800a860:	2a20      	cmp	r2, #32
 800a862:	d818      	bhi.n	800a896 <__hexnan+0x7e>
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	459b      	cmp	fp, r3
 800a868:	dd13      	ble.n	800a892 <__hexnan+0x7a>
 800a86a:	454c      	cmp	r4, r9
 800a86c:	d206      	bcs.n	800a87c <__hexnan+0x64>
 800a86e:	2d07      	cmp	r5, #7
 800a870:	dc04      	bgt.n	800a87c <__hexnan+0x64>
 800a872:	462a      	mov	r2, r5
 800a874:	4649      	mov	r1, r9
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff ffa8 	bl	800a7cc <L_shift>
 800a87c:	4544      	cmp	r4, r8
 800a87e:	d952      	bls.n	800a926 <__hexnan+0x10e>
 800a880:	2300      	movs	r3, #0
 800a882:	f1a4 0904 	sub.w	r9, r4, #4
 800a886:	f844 3c04 	str.w	r3, [r4, #-4]
 800a88a:	461d      	mov	r5, r3
 800a88c:	464c      	mov	r4, r9
 800a88e:	f8cd b008 	str.w	fp, [sp, #8]
 800a892:	9903      	ldr	r1, [sp, #12]
 800a894:	e7d7      	b.n	800a846 <__hexnan+0x2e>
 800a896:	2a29      	cmp	r2, #41	@ 0x29
 800a898:	d157      	bne.n	800a94a <__hexnan+0x132>
 800a89a:	3102      	adds	r1, #2
 800a89c:	f8ca 1000 	str.w	r1, [sl]
 800a8a0:	f1bb 0f00 	cmp.w	fp, #0
 800a8a4:	d051      	beq.n	800a94a <__hexnan+0x132>
 800a8a6:	454c      	cmp	r4, r9
 800a8a8:	d206      	bcs.n	800a8b8 <__hexnan+0xa0>
 800a8aa:	2d07      	cmp	r5, #7
 800a8ac:	dc04      	bgt.n	800a8b8 <__hexnan+0xa0>
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff ff8a 	bl	800a7cc <L_shift>
 800a8b8:	4544      	cmp	r4, r8
 800a8ba:	d936      	bls.n	800a92a <__hexnan+0x112>
 800a8bc:	4623      	mov	r3, r4
 800a8be:	f1a8 0204 	sub.w	r2, r8, #4
 800a8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8c6:	429f      	cmp	r7, r3
 800a8c8:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8cc:	d2f9      	bcs.n	800a8c2 <__hexnan+0xaa>
 800a8ce:	1b3b      	subs	r3, r7, r4
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	3401      	adds	r4, #1
 800a8d8:	3e03      	subs	r6, #3
 800a8da:	42b4      	cmp	r4, r6
 800a8dc:	bf88      	it	hi
 800a8de:	2304      	movhi	r3, #4
 800a8e0:	2200      	movs	r2, #0
 800a8e2:	4443      	add	r3, r8
 800a8e4:	f843 2b04 	str.w	r2, [r3], #4
 800a8e8:	429f      	cmp	r7, r3
 800a8ea:	d2fb      	bcs.n	800a8e4 <__hexnan+0xcc>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b91b      	cbnz	r3, 800a8f8 <__hexnan+0xe0>
 800a8f0:	4547      	cmp	r7, r8
 800a8f2:	d128      	bne.n	800a946 <__hexnan+0x12e>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	2005      	movs	r0, #5
 800a8fa:	b007      	add	sp, #28
 800a8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a900:	3501      	adds	r5, #1
 800a902:	2d08      	cmp	r5, #8
 800a904:	f10b 0b01 	add.w	fp, fp, #1
 800a908:	dd06      	ble.n	800a918 <__hexnan+0x100>
 800a90a:	4544      	cmp	r4, r8
 800a90c:	d9c1      	bls.n	800a892 <__hexnan+0x7a>
 800a90e:	2300      	movs	r3, #0
 800a910:	2501      	movs	r5, #1
 800a912:	f844 3c04 	str.w	r3, [r4, #-4]
 800a916:	3c04      	subs	r4, #4
 800a918:	6822      	ldr	r2, [r4, #0]
 800a91a:	f000 000f 	and.w	r0, r0, #15
 800a91e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a922:	6020      	str	r0, [r4, #0]
 800a924:	e7b5      	b.n	800a892 <__hexnan+0x7a>
 800a926:	2508      	movs	r5, #8
 800a928:	e7b3      	b.n	800a892 <__hexnan+0x7a>
 800a92a:	9b01      	ldr	r3, [sp, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d0dd      	beq.n	800a8ec <__hexnan+0xd4>
 800a930:	f04f 32ff 	mov.w	r2, #4294967295
 800a934:	f1c3 0320 	rsb	r3, r3, #32
 800a938:	40da      	lsrs	r2, r3
 800a93a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a93e:	4013      	ands	r3, r2
 800a940:	f846 3c04 	str.w	r3, [r6, #-4]
 800a944:	e7d2      	b.n	800a8ec <__hexnan+0xd4>
 800a946:	3f04      	subs	r7, #4
 800a948:	e7d0      	b.n	800a8ec <__hexnan+0xd4>
 800a94a:	2004      	movs	r0, #4
 800a94c:	e7d5      	b.n	800a8fa <__hexnan+0xe2>

0800a94e <__ascii_mbtowc>:
 800a94e:	b082      	sub	sp, #8
 800a950:	b901      	cbnz	r1, 800a954 <__ascii_mbtowc+0x6>
 800a952:	a901      	add	r1, sp, #4
 800a954:	b142      	cbz	r2, 800a968 <__ascii_mbtowc+0x1a>
 800a956:	b14b      	cbz	r3, 800a96c <__ascii_mbtowc+0x1e>
 800a958:	7813      	ldrb	r3, [r2, #0]
 800a95a:	600b      	str	r3, [r1, #0]
 800a95c:	7812      	ldrb	r2, [r2, #0]
 800a95e:	1e10      	subs	r0, r2, #0
 800a960:	bf18      	it	ne
 800a962:	2001      	movne	r0, #1
 800a964:	b002      	add	sp, #8
 800a966:	4770      	bx	lr
 800a968:	4610      	mov	r0, r2
 800a96a:	e7fb      	b.n	800a964 <__ascii_mbtowc+0x16>
 800a96c:	f06f 0001 	mvn.w	r0, #1
 800a970:	e7f8      	b.n	800a964 <__ascii_mbtowc+0x16>

0800a972 <_realloc_r>:
 800a972:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a976:	4680      	mov	r8, r0
 800a978:	4615      	mov	r5, r2
 800a97a:	460c      	mov	r4, r1
 800a97c:	b921      	cbnz	r1, 800a988 <_realloc_r+0x16>
 800a97e:	4611      	mov	r1, r2
 800a980:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a984:	f7fd be86 	b.w	8008694 <_malloc_r>
 800a988:	b92a      	cbnz	r2, 800a996 <_realloc_r+0x24>
 800a98a:	f7fd fe11 	bl	80085b0 <_free_r>
 800a98e:	2400      	movs	r4, #0
 800a990:	4620      	mov	r0, r4
 800a992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a996:	f000 f840 	bl	800aa1a <_malloc_usable_size_r>
 800a99a:	4285      	cmp	r5, r0
 800a99c:	4606      	mov	r6, r0
 800a99e:	d802      	bhi.n	800a9a6 <_realloc_r+0x34>
 800a9a0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a9a4:	d8f4      	bhi.n	800a990 <_realloc_r+0x1e>
 800a9a6:	4629      	mov	r1, r5
 800a9a8:	4640      	mov	r0, r8
 800a9aa:	f7fd fe73 	bl	8008694 <_malloc_r>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	2800      	cmp	r0, #0
 800a9b2:	d0ec      	beq.n	800a98e <_realloc_r+0x1c>
 800a9b4:	42b5      	cmp	r5, r6
 800a9b6:	462a      	mov	r2, r5
 800a9b8:	4621      	mov	r1, r4
 800a9ba:	bf28      	it	cs
 800a9bc:	4632      	movcs	r2, r6
 800a9be:	f7fc ff94 	bl	80078ea <memcpy>
 800a9c2:	4621      	mov	r1, r4
 800a9c4:	4640      	mov	r0, r8
 800a9c6:	f7fd fdf3 	bl	80085b0 <_free_r>
 800a9ca:	463c      	mov	r4, r7
 800a9cc:	e7e0      	b.n	800a990 <_realloc_r+0x1e>

0800a9ce <__ascii_wctomb>:
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	4608      	mov	r0, r1
 800a9d2:	b141      	cbz	r1, 800a9e6 <__ascii_wctomb+0x18>
 800a9d4:	2aff      	cmp	r2, #255	@ 0xff
 800a9d6:	d904      	bls.n	800a9e2 <__ascii_wctomb+0x14>
 800a9d8:	228a      	movs	r2, #138	@ 0x8a
 800a9da:	f04f 30ff 	mov.w	r0, #4294967295
 800a9de:	601a      	str	r2, [r3, #0]
 800a9e0:	4770      	bx	lr
 800a9e2:	2001      	movs	r0, #1
 800a9e4:	700a      	strb	r2, [r1, #0]
 800a9e6:	4770      	bx	lr

0800a9e8 <fiprintf>:
 800a9e8:	b40e      	push	{r1, r2, r3}
 800a9ea:	b503      	push	{r0, r1, lr}
 800a9ec:	4601      	mov	r1, r0
 800a9ee:	ab03      	add	r3, sp, #12
 800a9f0:	4805      	ldr	r0, [pc, #20]	@ (800aa08 <fiprintf+0x20>)
 800a9f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a9f6:	6800      	ldr	r0, [r0, #0]
 800a9f8:	9301      	str	r3, [sp, #4]
 800a9fa:	f000 f83d 	bl	800aa78 <_vfiprintf_r>
 800a9fe:	b002      	add	sp, #8
 800aa00:	f85d eb04 	ldr.w	lr, [sp], #4
 800aa04:	b003      	add	sp, #12
 800aa06:	4770      	bx	lr
 800aa08:	2000001c 	.word	0x2000001c

0800aa0c <abort>:
 800aa0c:	2006      	movs	r0, #6
 800aa0e:	b508      	push	{r3, lr}
 800aa10:	f000 fa06 	bl	800ae20 <raise>
 800aa14:	2001      	movs	r0, #1
 800aa16:	f7f6 ff5a 	bl	80018ce <_exit>

0800aa1a <_malloc_usable_size_r>:
 800aa1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aa1e:	1f18      	subs	r0, r3, #4
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfbc      	itt	lt
 800aa24:	580b      	ldrlt	r3, [r1, r0]
 800aa26:	18c0      	addlt	r0, r0, r3
 800aa28:	4770      	bx	lr

0800aa2a <__sfputc_r>:
 800aa2a:	6893      	ldr	r3, [r2, #8]
 800aa2c:	b410      	push	{r4}
 800aa2e:	3b01      	subs	r3, #1
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	6093      	str	r3, [r2, #8]
 800aa34:	da07      	bge.n	800aa46 <__sfputc_r+0x1c>
 800aa36:	6994      	ldr	r4, [r2, #24]
 800aa38:	42a3      	cmp	r3, r4
 800aa3a:	db01      	blt.n	800aa40 <__sfputc_r+0x16>
 800aa3c:	290a      	cmp	r1, #10
 800aa3e:	d102      	bne.n	800aa46 <__sfputc_r+0x1c>
 800aa40:	bc10      	pop	{r4}
 800aa42:	f000 b931 	b.w	800aca8 <__swbuf_r>
 800aa46:	6813      	ldr	r3, [r2, #0]
 800aa48:	1c58      	adds	r0, r3, #1
 800aa4a:	6010      	str	r0, [r2, #0]
 800aa4c:	7019      	strb	r1, [r3, #0]
 800aa4e:	4608      	mov	r0, r1
 800aa50:	bc10      	pop	{r4}
 800aa52:	4770      	bx	lr

0800aa54 <__sfputs_r>:
 800aa54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa56:	4606      	mov	r6, r0
 800aa58:	460f      	mov	r7, r1
 800aa5a:	4614      	mov	r4, r2
 800aa5c:	18d5      	adds	r5, r2, r3
 800aa5e:	42ac      	cmp	r4, r5
 800aa60:	d101      	bne.n	800aa66 <__sfputs_r+0x12>
 800aa62:	2000      	movs	r0, #0
 800aa64:	e007      	b.n	800aa76 <__sfputs_r+0x22>
 800aa66:	463a      	mov	r2, r7
 800aa68:	4630      	mov	r0, r6
 800aa6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aa6e:	f7ff ffdc 	bl	800aa2a <__sfputc_r>
 800aa72:	1c43      	adds	r3, r0, #1
 800aa74:	d1f3      	bne.n	800aa5e <__sfputs_r+0xa>
 800aa76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800aa78 <_vfiprintf_r>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	460d      	mov	r5, r1
 800aa7e:	4614      	mov	r4, r2
 800aa80:	4698      	mov	r8, r3
 800aa82:	4606      	mov	r6, r0
 800aa84:	b09d      	sub	sp, #116	@ 0x74
 800aa86:	b118      	cbz	r0, 800aa90 <_vfiprintf_r+0x18>
 800aa88:	6a03      	ldr	r3, [r0, #32]
 800aa8a:	b90b      	cbnz	r3, 800aa90 <_vfiprintf_r+0x18>
 800aa8c:	f7fc fe06 	bl	800769c <__sinit>
 800aa90:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa92:	07d9      	lsls	r1, r3, #31
 800aa94:	d405      	bmi.n	800aaa2 <_vfiprintf_r+0x2a>
 800aa96:	89ab      	ldrh	r3, [r5, #12]
 800aa98:	059a      	lsls	r2, r3, #22
 800aa9a:	d402      	bmi.n	800aaa2 <_vfiprintf_r+0x2a>
 800aa9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa9e:	f7fc ff14 	bl	80078ca <__retarget_lock_acquire_recursive>
 800aaa2:	89ab      	ldrh	r3, [r5, #12]
 800aaa4:	071b      	lsls	r3, r3, #28
 800aaa6:	d501      	bpl.n	800aaac <_vfiprintf_r+0x34>
 800aaa8:	692b      	ldr	r3, [r5, #16]
 800aaaa:	b99b      	cbnz	r3, 800aad4 <_vfiprintf_r+0x5c>
 800aaac:	4629      	mov	r1, r5
 800aaae:	4630      	mov	r0, r6
 800aab0:	f000 f938 	bl	800ad24 <__swsetup_r>
 800aab4:	b170      	cbz	r0, 800aad4 <_vfiprintf_r+0x5c>
 800aab6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aab8:	07dc      	lsls	r4, r3, #31
 800aaba:	d504      	bpl.n	800aac6 <_vfiprintf_r+0x4e>
 800aabc:	f04f 30ff 	mov.w	r0, #4294967295
 800aac0:	b01d      	add	sp, #116	@ 0x74
 800aac2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aac6:	89ab      	ldrh	r3, [r5, #12]
 800aac8:	0598      	lsls	r0, r3, #22
 800aaca:	d4f7      	bmi.n	800aabc <_vfiprintf_r+0x44>
 800aacc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aace:	f7fc fefd 	bl	80078cc <__retarget_lock_release_recursive>
 800aad2:	e7f3      	b.n	800aabc <_vfiprintf_r+0x44>
 800aad4:	2300      	movs	r3, #0
 800aad6:	9309      	str	r3, [sp, #36]	@ 0x24
 800aad8:	2320      	movs	r3, #32
 800aada:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800aade:	2330      	movs	r3, #48	@ 0x30
 800aae0:	f04f 0901 	mov.w	r9, #1
 800aae4:	f8cd 800c 	str.w	r8, [sp, #12]
 800aae8:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800ac94 <_vfiprintf_r+0x21c>
 800aaec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800aaf0:	4623      	mov	r3, r4
 800aaf2:	469a      	mov	sl, r3
 800aaf4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aaf8:	b10a      	cbz	r2, 800aafe <_vfiprintf_r+0x86>
 800aafa:	2a25      	cmp	r2, #37	@ 0x25
 800aafc:	d1f9      	bne.n	800aaf2 <_vfiprintf_r+0x7a>
 800aafe:	ebba 0b04 	subs.w	fp, sl, r4
 800ab02:	d00b      	beq.n	800ab1c <_vfiprintf_r+0xa4>
 800ab04:	465b      	mov	r3, fp
 800ab06:	4622      	mov	r2, r4
 800ab08:	4629      	mov	r1, r5
 800ab0a:	4630      	mov	r0, r6
 800ab0c:	f7ff ffa2 	bl	800aa54 <__sfputs_r>
 800ab10:	3001      	adds	r0, #1
 800ab12:	f000 80a7 	beq.w	800ac64 <_vfiprintf_r+0x1ec>
 800ab16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ab18:	445a      	add	r2, fp
 800ab1a:	9209      	str	r2, [sp, #36]	@ 0x24
 800ab1c:	f89a 3000 	ldrb.w	r3, [sl]
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	f000 809f 	beq.w	800ac64 <_vfiprintf_r+0x1ec>
 800ab26:	2300      	movs	r3, #0
 800ab28:	f04f 32ff 	mov.w	r2, #4294967295
 800ab2c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab30:	f10a 0a01 	add.w	sl, sl, #1
 800ab34:	9304      	str	r3, [sp, #16]
 800ab36:	9307      	str	r3, [sp, #28]
 800ab38:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ab3c:	931a      	str	r3, [sp, #104]	@ 0x68
 800ab3e:	4654      	mov	r4, sl
 800ab40:	2205      	movs	r2, #5
 800ab42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab46:	4853      	ldr	r0, [pc, #332]	@ (800ac94 <_vfiprintf_r+0x21c>)
 800ab48:	f7fc fec1 	bl	80078ce <memchr>
 800ab4c:	9a04      	ldr	r2, [sp, #16]
 800ab4e:	b9d8      	cbnz	r0, 800ab88 <_vfiprintf_r+0x110>
 800ab50:	06d1      	lsls	r1, r2, #27
 800ab52:	bf44      	itt	mi
 800ab54:	2320      	movmi	r3, #32
 800ab56:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab5a:	0713      	lsls	r3, r2, #28
 800ab5c:	bf44      	itt	mi
 800ab5e:	232b      	movmi	r3, #43	@ 0x2b
 800ab60:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ab64:	f89a 3000 	ldrb.w	r3, [sl]
 800ab68:	2b2a      	cmp	r3, #42	@ 0x2a
 800ab6a:	d015      	beq.n	800ab98 <_vfiprintf_r+0x120>
 800ab6c:	4654      	mov	r4, sl
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f04f 0c0a 	mov.w	ip, #10
 800ab74:	9a07      	ldr	r2, [sp, #28]
 800ab76:	4621      	mov	r1, r4
 800ab78:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab7c:	3b30      	subs	r3, #48	@ 0x30
 800ab7e:	2b09      	cmp	r3, #9
 800ab80:	d94b      	bls.n	800ac1a <_vfiprintf_r+0x1a2>
 800ab82:	b1b0      	cbz	r0, 800abb2 <_vfiprintf_r+0x13a>
 800ab84:	9207      	str	r2, [sp, #28]
 800ab86:	e014      	b.n	800abb2 <_vfiprintf_r+0x13a>
 800ab88:	eba0 0308 	sub.w	r3, r0, r8
 800ab8c:	fa09 f303 	lsl.w	r3, r9, r3
 800ab90:	4313      	orrs	r3, r2
 800ab92:	46a2      	mov	sl, r4
 800ab94:	9304      	str	r3, [sp, #16]
 800ab96:	e7d2      	b.n	800ab3e <_vfiprintf_r+0xc6>
 800ab98:	9b03      	ldr	r3, [sp, #12]
 800ab9a:	1d19      	adds	r1, r3, #4
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	9103      	str	r1, [sp, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	bfbb      	ittet	lt
 800aba4:	425b      	neglt	r3, r3
 800aba6:	f042 0202 	orrlt.w	r2, r2, #2
 800abaa:	9307      	strge	r3, [sp, #28]
 800abac:	9307      	strlt	r3, [sp, #28]
 800abae:	bfb8      	it	lt
 800abb0:	9204      	strlt	r2, [sp, #16]
 800abb2:	7823      	ldrb	r3, [r4, #0]
 800abb4:	2b2e      	cmp	r3, #46	@ 0x2e
 800abb6:	d10a      	bne.n	800abce <_vfiprintf_r+0x156>
 800abb8:	7863      	ldrb	r3, [r4, #1]
 800abba:	2b2a      	cmp	r3, #42	@ 0x2a
 800abbc:	d132      	bne.n	800ac24 <_vfiprintf_r+0x1ac>
 800abbe:	9b03      	ldr	r3, [sp, #12]
 800abc0:	3402      	adds	r4, #2
 800abc2:	1d1a      	adds	r2, r3, #4
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	9203      	str	r2, [sp, #12]
 800abc8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800abcc:	9305      	str	r3, [sp, #20]
 800abce:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800ac98 <_vfiprintf_r+0x220>
 800abd2:	2203      	movs	r2, #3
 800abd4:	4650      	mov	r0, sl
 800abd6:	7821      	ldrb	r1, [r4, #0]
 800abd8:	f7fc fe79 	bl	80078ce <memchr>
 800abdc:	b138      	cbz	r0, 800abee <_vfiprintf_r+0x176>
 800abde:	2240      	movs	r2, #64	@ 0x40
 800abe0:	9b04      	ldr	r3, [sp, #16]
 800abe2:	eba0 000a 	sub.w	r0, r0, sl
 800abe6:	4082      	lsls	r2, r0
 800abe8:	4313      	orrs	r3, r2
 800abea:	3401      	adds	r4, #1
 800abec:	9304      	str	r3, [sp, #16]
 800abee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abf2:	2206      	movs	r2, #6
 800abf4:	4829      	ldr	r0, [pc, #164]	@ (800ac9c <_vfiprintf_r+0x224>)
 800abf6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800abfa:	f7fc fe68 	bl	80078ce <memchr>
 800abfe:	2800      	cmp	r0, #0
 800ac00:	d03f      	beq.n	800ac82 <_vfiprintf_r+0x20a>
 800ac02:	4b27      	ldr	r3, [pc, #156]	@ (800aca0 <_vfiprintf_r+0x228>)
 800ac04:	bb1b      	cbnz	r3, 800ac4e <_vfiprintf_r+0x1d6>
 800ac06:	9b03      	ldr	r3, [sp, #12]
 800ac08:	3307      	adds	r3, #7
 800ac0a:	f023 0307 	bic.w	r3, r3, #7
 800ac0e:	3308      	adds	r3, #8
 800ac10:	9303      	str	r3, [sp, #12]
 800ac12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ac14:	443b      	add	r3, r7
 800ac16:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac18:	e76a      	b.n	800aaf0 <_vfiprintf_r+0x78>
 800ac1a:	460c      	mov	r4, r1
 800ac1c:	2001      	movs	r0, #1
 800ac1e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac22:	e7a8      	b.n	800ab76 <_vfiprintf_r+0xfe>
 800ac24:	2300      	movs	r3, #0
 800ac26:	f04f 0c0a 	mov.w	ip, #10
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	3401      	adds	r4, #1
 800ac2e:	9305      	str	r3, [sp, #20]
 800ac30:	4620      	mov	r0, r4
 800ac32:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac36:	3a30      	subs	r2, #48	@ 0x30
 800ac38:	2a09      	cmp	r2, #9
 800ac3a:	d903      	bls.n	800ac44 <_vfiprintf_r+0x1cc>
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d0c6      	beq.n	800abce <_vfiprintf_r+0x156>
 800ac40:	9105      	str	r1, [sp, #20]
 800ac42:	e7c4      	b.n	800abce <_vfiprintf_r+0x156>
 800ac44:	4604      	mov	r4, r0
 800ac46:	2301      	movs	r3, #1
 800ac48:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac4c:	e7f0      	b.n	800ac30 <_vfiprintf_r+0x1b8>
 800ac4e:	ab03      	add	r3, sp, #12
 800ac50:	9300      	str	r3, [sp, #0]
 800ac52:	462a      	mov	r2, r5
 800ac54:	4630      	mov	r0, r6
 800ac56:	4b13      	ldr	r3, [pc, #76]	@ (800aca4 <_vfiprintf_r+0x22c>)
 800ac58:	a904      	add	r1, sp, #16
 800ac5a:	f7fb fec5 	bl	80069e8 <_printf_float>
 800ac5e:	4607      	mov	r7, r0
 800ac60:	1c78      	adds	r0, r7, #1
 800ac62:	d1d6      	bne.n	800ac12 <_vfiprintf_r+0x19a>
 800ac64:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac66:	07d9      	lsls	r1, r3, #31
 800ac68:	d405      	bmi.n	800ac76 <_vfiprintf_r+0x1fe>
 800ac6a:	89ab      	ldrh	r3, [r5, #12]
 800ac6c:	059a      	lsls	r2, r3, #22
 800ac6e:	d402      	bmi.n	800ac76 <_vfiprintf_r+0x1fe>
 800ac70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ac72:	f7fc fe2b 	bl	80078cc <__retarget_lock_release_recursive>
 800ac76:	89ab      	ldrh	r3, [r5, #12]
 800ac78:	065b      	lsls	r3, r3, #25
 800ac7a:	f53f af1f 	bmi.w	800aabc <_vfiprintf_r+0x44>
 800ac7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ac80:	e71e      	b.n	800aac0 <_vfiprintf_r+0x48>
 800ac82:	ab03      	add	r3, sp, #12
 800ac84:	9300      	str	r3, [sp, #0]
 800ac86:	462a      	mov	r2, r5
 800ac88:	4630      	mov	r0, r6
 800ac8a:	4b06      	ldr	r3, [pc, #24]	@ (800aca4 <_vfiprintf_r+0x22c>)
 800ac8c:	a904      	add	r1, sp, #16
 800ac8e:	f7fc f949 	bl	8006f24 <_printf_i>
 800ac92:	e7e4      	b.n	800ac5e <_vfiprintf_r+0x1e6>
 800ac94:	0800be99 	.word	0x0800be99
 800ac98:	0800be9f 	.word	0x0800be9f
 800ac9c:	0800bea3 	.word	0x0800bea3
 800aca0:	080069e9 	.word	0x080069e9
 800aca4:	0800aa55 	.word	0x0800aa55

0800aca8 <__swbuf_r>:
 800aca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800acaa:	460e      	mov	r6, r1
 800acac:	4614      	mov	r4, r2
 800acae:	4605      	mov	r5, r0
 800acb0:	b118      	cbz	r0, 800acba <__swbuf_r+0x12>
 800acb2:	6a03      	ldr	r3, [r0, #32]
 800acb4:	b90b      	cbnz	r3, 800acba <__swbuf_r+0x12>
 800acb6:	f7fc fcf1 	bl	800769c <__sinit>
 800acba:	69a3      	ldr	r3, [r4, #24]
 800acbc:	60a3      	str	r3, [r4, #8]
 800acbe:	89a3      	ldrh	r3, [r4, #12]
 800acc0:	071a      	lsls	r2, r3, #28
 800acc2:	d501      	bpl.n	800acc8 <__swbuf_r+0x20>
 800acc4:	6923      	ldr	r3, [r4, #16]
 800acc6:	b943      	cbnz	r3, 800acda <__swbuf_r+0x32>
 800acc8:	4621      	mov	r1, r4
 800acca:	4628      	mov	r0, r5
 800accc:	f000 f82a 	bl	800ad24 <__swsetup_r>
 800acd0:	b118      	cbz	r0, 800acda <__swbuf_r+0x32>
 800acd2:	f04f 37ff 	mov.w	r7, #4294967295
 800acd6:	4638      	mov	r0, r7
 800acd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800acda:	6823      	ldr	r3, [r4, #0]
 800acdc:	6922      	ldr	r2, [r4, #16]
 800acde:	b2f6      	uxtb	r6, r6
 800ace0:	1a98      	subs	r0, r3, r2
 800ace2:	6963      	ldr	r3, [r4, #20]
 800ace4:	4637      	mov	r7, r6
 800ace6:	4283      	cmp	r3, r0
 800ace8:	dc05      	bgt.n	800acf6 <__swbuf_r+0x4e>
 800acea:	4621      	mov	r1, r4
 800acec:	4628      	mov	r0, r5
 800acee:	f7ff fa59 	bl	800a1a4 <_fflush_r>
 800acf2:	2800      	cmp	r0, #0
 800acf4:	d1ed      	bne.n	800acd2 <__swbuf_r+0x2a>
 800acf6:	68a3      	ldr	r3, [r4, #8]
 800acf8:	3b01      	subs	r3, #1
 800acfa:	60a3      	str	r3, [r4, #8]
 800acfc:	6823      	ldr	r3, [r4, #0]
 800acfe:	1c5a      	adds	r2, r3, #1
 800ad00:	6022      	str	r2, [r4, #0]
 800ad02:	701e      	strb	r6, [r3, #0]
 800ad04:	6962      	ldr	r2, [r4, #20]
 800ad06:	1c43      	adds	r3, r0, #1
 800ad08:	429a      	cmp	r2, r3
 800ad0a:	d004      	beq.n	800ad16 <__swbuf_r+0x6e>
 800ad0c:	89a3      	ldrh	r3, [r4, #12]
 800ad0e:	07db      	lsls	r3, r3, #31
 800ad10:	d5e1      	bpl.n	800acd6 <__swbuf_r+0x2e>
 800ad12:	2e0a      	cmp	r6, #10
 800ad14:	d1df      	bne.n	800acd6 <__swbuf_r+0x2e>
 800ad16:	4621      	mov	r1, r4
 800ad18:	4628      	mov	r0, r5
 800ad1a:	f7ff fa43 	bl	800a1a4 <_fflush_r>
 800ad1e:	2800      	cmp	r0, #0
 800ad20:	d0d9      	beq.n	800acd6 <__swbuf_r+0x2e>
 800ad22:	e7d6      	b.n	800acd2 <__swbuf_r+0x2a>

0800ad24 <__swsetup_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	4b29      	ldr	r3, [pc, #164]	@ (800adcc <__swsetup_r+0xa8>)
 800ad28:	4605      	mov	r5, r0
 800ad2a:	6818      	ldr	r0, [r3, #0]
 800ad2c:	460c      	mov	r4, r1
 800ad2e:	b118      	cbz	r0, 800ad38 <__swsetup_r+0x14>
 800ad30:	6a03      	ldr	r3, [r0, #32]
 800ad32:	b90b      	cbnz	r3, 800ad38 <__swsetup_r+0x14>
 800ad34:	f7fc fcb2 	bl	800769c <__sinit>
 800ad38:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ad3c:	0719      	lsls	r1, r3, #28
 800ad3e:	d422      	bmi.n	800ad86 <__swsetup_r+0x62>
 800ad40:	06da      	lsls	r2, r3, #27
 800ad42:	d407      	bmi.n	800ad54 <__swsetup_r+0x30>
 800ad44:	2209      	movs	r2, #9
 800ad46:	602a      	str	r2, [r5, #0]
 800ad48:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ad4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad50:	81a3      	strh	r3, [r4, #12]
 800ad52:	e033      	b.n	800adbc <__swsetup_r+0x98>
 800ad54:	0758      	lsls	r0, r3, #29
 800ad56:	d512      	bpl.n	800ad7e <__swsetup_r+0x5a>
 800ad58:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ad5a:	b141      	cbz	r1, 800ad6e <__swsetup_r+0x4a>
 800ad5c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ad60:	4299      	cmp	r1, r3
 800ad62:	d002      	beq.n	800ad6a <__swsetup_r+0x46>
 800ad64:	4628      	mov	r0, r5
 800ad66:	f7fd fc23 	bl	80085b0 <_free_r>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	6363      	str	r3, [r4, #52]	@ 0x34
 800ad6e:	89a3      	ldrh	r3, [r4, #12]
 800ad70:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ad74:	81a3      	strh	r3, [r4, #12]
 800ad76:	2300      	movs	r3, #0
 800ad78:	6063      	str	r3, [r4, #4]
 800ad7a:	6923      	ldr	r3, [r4, #16]
 800ad7c:	6023      	str	r3, [r4, #0]
 800ad7e:	89a3      	ldrh	r3, [r4, #12]
 800ad80:	f043 0308 	orr.w	r3, r3, #8
 800ad84:	81a3      	strh	r3, [r4, #12]
 800ad86:	6923      	ldr	r3, [r4, #16]
 800ad88:	b94b      	cbnz	r3, 800ad9e <__swsetup_r+0x7a>
 800ad8a:	89a3      	ldrh	r3, [r4, #12]
 800ad8c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ad90:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ad94:	d003      	beq.n	800ad9e <__swsetup_r+0x7a>
 800ad96:	4621      	mov	r1, r4
 800ad98:	4628      	mov	r0, r5
 800ad9a:	f000 f882 	bl	800aea2 <__smakebuf_r>
 800ad9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ada2:	f013 0201 	ands.w	r2, r3, #1
 800ada6:	d00a      	beq.n	800adbe <__swsetup_r+0x9a>
 800ada8:	2200      	movs	r2, #0
 800adaa:	60a2      	str	r2, [r4, #8]
 800adac:	6962      	ldr	r2, [r4, #20]
 800adae:	4252      	negs	r2, r2
 800adb0:	61a2      	str	r2, [r4, #24]
 800adb2:	6922      	ldr	r2, [r4, #16]
 800adb4:	b942      	cbnz	r2, 800adc8 <__swsetup_r+0xa4>
 800adb6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800adba:	d1c5      	bne.n	800ad48 <__swsetup_r+0x24>
 800adbc:	bd38      	pop	{r3, r4, r5, pc}
 800adbe:	0799      	lsls	r1, r3, #30
 800adc0:	bf58      	it	pl
 800adc2:	6962      	ldrpl	r2, [r4, #20]
 800adc4:	60a2      	str	r2, [r4, #8]
 800adc6:	e7f4      	b.n	800adb2 <__swsetup_r+0x8e>
 800adc8:	2000      	movs	r0, #0
 800adca:	e7f7      	b.n	800adbc <__swsetup_r+0x98>
 800adcc:	2000001c 	.word	0x2000001c

0800add0 <_raise_r>:
 800add0:	291f      	cmp	r1, #31
 800add2:	b538      	push	{r3, r4, r5, lr}
 800add4:	4605      	mov	r5, r0
 800add6:	460c      	mov	r4, r1
 800add8:	d904      	bls.n	800ade4 <_raise_r+0x14>
 800adda:	2316      	movs	r3, #22
 800addc:	6003      	str	r3, [r0, #0]
 800adde:	f04f 30ff 	mov.w	r0, #4294967295
 800ade2:	bd38      	pop	{r3, r4, r5, pc}
 800ade4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ade6:	b112      	cbz	r2, 800adee <_raise_r+0x1e>
 800ade8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800adec:	b94b      	cbnz	r3, 800ae02 <_raise_r+0x32>
 800adee:	4628      	mov	r0, r5
 800adf0:	f000 f830 	bl	800ae54 <_getpid_r>
 800adf4:	4622      	mov	r2, r4
 800adf6:	4601      	mov	r1, r0
 800adf8:	4628      	mov	r0, r5
 800adfa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800adfe:	f000 b817 	b.w	800ae30 <_kill_r>
 800ae02:	2b01      	cmp	r3, #1
 800ae04:	d00a      	beq.n	800ae1c <_raise_r+0x4c>
 800ae06:	1c59      	adds	r1, r3, #1
 800ae08:	d103      	bne.n	800ae12 <_raise_r+0x42>
 800ae0a:	2316      	movs	r3, #22
 800ae0c:	6003      	str	r3, [r0, #0]
 800ae0e:	2001      	movs	r0, #1
 800ae10:	e7e7      	b.n	800ade2 <_raise_r+0x12>
 800ae12:	2100      	movs	r1, #0
 800ae14:	4620      	mov	r0, r4
 800ae16:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae1a:	4798      	blx	r3
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	e7e0      	b.n	800ade2 <_raise_r+0x12>

0800ae20 <raise>:
 800ae20:	4b02      	ldr	r3, [pc, #8]	@ (800ae2c <raise+0xc>)
 800ae22:	4601      	mov	r1, r0
 800ae24:	6818      	ldr	r0, [r3, #0]
 800ae26:	f7ff bfd3 	b.w	800add0 <_raise_r>
 800ae2a:	bf00      	nop
 800ae2c:	2000001c 	.word	0x2000001c

0800ae30 <_kill_r>:
 800ae30:	b538      	push	{r3, r4, r5, lr}
 800ae32:	2300      	movs	r3, #0
 800ae34:	4d06      	ldr	r5, [pc, #24]	@ (800ae50 <_kill_r+0x20>)
 800ae36:	4604      	mov	r4, r0
 800ae38:	4608      	mov	r0, r1
 800ae3a:	4611      	mov	r1, r2
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	f7f6 fd36 	bl	80018ae <_kill>
 800ae42:	1c43      	adds	r3, r0, #1
 800ae44:	d102      	bne.n	800ae4c <_kill_r+0x1c>
 800ae46:	682b      	ldr	r3, [r5, #0]
 800ae48:	b103      	cbz	r3, 800ae4c <_kill_r+0x1c>
 800ae4a:	6023      	str	r3, [r4, #0]
 800ae4c:	bd38      	pop	{r3, r4, r5, pc}
 800ae4e:	bf00      	nop
 800ae50:	20002134 	.word	0x20002134

0800ae54 <_getpid_r>:
 800ae54:	f7f6 bd24 	b.w	80018a0 <_getpid>

0800ae58 <__swhatbuf_r>:
 800ae58:	b570      	push	{r4, r5, r6, lr}
 800ae5a:	460c      	mov	r4, r1
 800ae5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ae60:	4615      	mov	r5, r2
 800ae62:	2900      	cmp	r1, #0
 800ae64:	461e      	mov	r6, r3
 800ae66:	b096      	sub	sp, #88	@ 0x58
 800ae68:	da0c      	bge.n	800ae84 <__swhatbuf_r+0x2c>
 800ae6a:	89a3      	ldrh	r3, [r4, #12]
 800ae6c:	2100      	movs	r1, #0
 800ae6e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ae72:	bf14      	ite	ne
 800ae74:	2340      	movne	r3, #64	@ 0x40
 800ae76:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ae7a:	2000      	movs	r0, #0
 800ae7c:	6031      	str	r1, [r6, #0]
 800ae7e:	602b      	str	r3, [r5, #0]
 800ae80:	b016      	add	sp, #88	@ 0x58
 800ae82:	bd70      	pop	{r4, r5, r6, pc}
 800ae84:	466a      	mov	r2, sp
 800ae86:	f000 f849 	bl	800af1c <_fstat_r>
 800ae8a:	2800      	cmp	r0, #0
 800ae8c:	dbed      	blt.n	800ae6a <__swhatbuf_r+0x12>
 800ae8e:	9901      	ldr	r1, [sp, #4]
 800ae90:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ae94:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ae98:	4259      	negs	r1, r3
 800ae9a:	4159      	adcs	r1, r3
 800ae9c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800aea0:	e7eb      	b.n	800ae7a <__swhatbuf_r+0x22>

0800aea2 <__smakebuf_r>:
 800aea2:	898b      	ldrh	r3, [r1, #12]
 800aea4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aea6:	079d      	lsls	r5, r3, #30
 800aea8:	4606      	mov	r6, r0
 800aeaa:	460c      	mov	r4, r1
 800aeac:	d507      	bpl.n	800aebe <__smakebuf_r+0x1c>
 800aeae:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800aeb2:	6023      	str	r3, [r4, #0]
 800aeb4:	6123      	str	r3, [r4, #16]
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	6163      	str	r3, [r4, #20]
 800aeba:	b003      	add	sp, #12
 800aebc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aebe:	466a      	mov	r2, sp
 800aec0:	ab01      	add	r3, sp, #4
 800aec2:	f7ff ffc9 	bl	800ae58 <__swhatbuf_r>
 800aec6:	9f00      	ldr	r7, [sp, #0]
 800aec8:	4605      	mov	r5, r0
 800aeca:	4639      	mov	r1, r7
 800aecc:	4630      	mov	r0, r6
 800aece:	f7fd fbe1 	bl	8008694 <_malloc_r>
 800aed2:	b948      	cbnz	r0, 800aee8 <__smakebuf_r+0x46>
 800aed4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aed8:	059a      	lsls	r2, r3, #22
 800aeda:	d4ee      	bmi.n	800aeba <__smakebuf_r+0x18>
 800aedc:	f023 0303 	bic.w	r3, r3, #3
 800aee0:	f043 0302 	orr.w	r3, r3, #2
 800aee4:	81a3      	strh	r3, [r4, #12]
 800aee6:	e7e2      	b.n	800aeae <__smakebuf_r+0xc>
 800aee8:	89a3      	ldrh	r3, [r4, #12]
 800aeea:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aeee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aef2:	81a3      	strh	r3, [r4, #12]
 800aef4:	9b01      	ldr	r3, [sp, #4]
 800aef6:	6020      	str	r0, [r4, #0]
 800aef8:	b15b      	cbz	r3, 800af12 <__smakebuf_r+0x70>
 800aefa:	4630      	mov	r0, r6
 800aefc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800af00:	f000 f81e 	bl	800af40 <_isatty_r>
 800af04:	b128      	cbz	r0, 800af12 <__smakebuf_r+0x70>
 800af06:	89a3      	ldrh	r3, [r4, #12]
 800af08:	f023 0303 	bic.w	r3, r3, #3
 800af0c:	f043 0301 	orr.w	r3, r3, #1
 800af10:	81a3      	strh	r3, [r4, #12]
 800af12:	89a3      	ldrh	r3, [r4, #12]
 800af14:	431d      	orrs	r5, r3
 800af16:	81a5      	strh	r5, [r4, #12]
 800af18:	e7cf      	b.n	800aeba <__smakebuf_r+0x18>
	...

0800af1c <_fstat_r>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	2300      	movs	r3, #0
 800af20:	4d06      	ldr	r5, [pc, #24]	@ (800af3c <_fstat_r+0x20>)
 800af22:	4604      	mov	r4, r0
 800af24:	4608      	mov	r0, r1
 800af26:	4611      	mov	r1, r2
 800af28:	602b      	str	r3, [r5, #0]
 800af2a:	f7f6 fd1f 	bl	800196c <_fstat>
 800af2e:	1c43      	adds	r3, r0, #1
 800af30:	d102      	bne.n	800af38 <_fstat_r+0x1c>
 800af32:	682b      	ldr	r3, [r5, #0]
 800af34:	b103      	cbz	r3, 800af38 <_fstat_r+0x1c>
 800af36:	6023      	str	r3, [r4, #0]
 800af38:	bd38      	pop	{r3, r4, r5, pc}
 800af3a:	bf00      	nop
 800af3c:	20002134 	.word	0x20002134

0800af40 <_isatty_r>:
 800af40:	b538      	push	{r3, r4, r5, lr}
 800af42:	2300      	movs	r3, #0
 800af44:	4d05      	ldr	r5, [pc, #20]	@ (800af5c <_isatty_r+0x1c>)
 800af46:	4604      	mov	r4, r0
 800af48:	4608      	mov	r0, r1
 800af4a:	602b      	str	r3, [r5, #0]
 800af4c:	f7f6 fd1d 	bl	800198a <_isatty>
 800af50:	1c43      	adds	r3, r0, #1
 800af52:	d102      	bne.n	800af5a <_isatty_r+0x1a>
 800af54:	682b      	ldr	r3, [r5, #0]
 800af56:	b103      	cbz	r3, 800af5a <_isatty_r+0x1a>
 800af58:	6023      	str	r3, [r4, #0]
 800af5a:	bd38      	pop	{r3, r4, r5, pc}
 800af5c:	20002134 	.word	0x20002134

0800af60 <_init>:
 800af60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af62:	bf00      	nop
 800af64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af66:	bc08      	pop	{r3}
 800af68:	469e      	mov	lr, r3
 800af6a:	4770      	bx	lr

0800af6c <_fini>:
 800af6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af6e:	bf00      	nop
 800af70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800af72:	bc08      	pop	{r3}
 800af74:	469e      	mov	lr, r3
 800af76:	4770      	bx	lr
